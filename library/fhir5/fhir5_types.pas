unit fhir5_types;

{$I fhir5.inc}

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

{$I fhir.inc}

interface

// Generated on Fri, Aug 21, 2020 11:27+1000 for FHIR v4.5.0

uses
  Classes, SysUtils,
  fsl_base, fsl_utilities, fsl_crypto, fsl_stream,
  fhir_objects, fhir_xhtml,  
  fhir5_base, fhir5_enums;

type
  TFhirElement = class;
  TFhirBackboneElement = class;
  TFhirDataType = class;
  TFhirBackboneType = class;
  TFhirPrimitiveType = class;

  TFhirEnum = class;
  TFhirEnumList = class;
  TFhirDate = class;
  TFhirDateList = class;
  TFhirDateTime = class;
  TFhirDateTimeList = class;
  TFhirString = class;
  TFhirStringList = class;
  TFhirInteger = class;
  TFhirIntegerList = class;
  TFhirUri = class;
  TFhirUriList = class;
  TFhirInstant = class;
  TFhirInstantList = class;
  TFhirXhtml = class;
  TFhirXhtmlList = class;
  TFhirBoolean = class;
  TFhirBooleanList = class;
  TFhirBase64Binary = class;
  TFhirBase64BinaryList = class;
  TFhirTime = class;
  TFhirTimeList = class;
  TFhirDecimal = class;
  TFhirDecimalList = class;
  TFhirCode = class;
  TFhirCodeList = class;
  TFhirCanonical = class;
  TFhirCanonicalList = class;
  TFhirOid = class;
  TFhirOidList = class;
  TFhirUuid = class;
  TFhirUuidList = class;
  TFhirUrl = class;
  TFhirUrlList = class;
  TFhirMarkdown = class;
  TFhirMarkdownList = class;
  TFhirUnsignedInt = class;
  TFhirUnsignedIntList = class;
  TFhirId = class;
  TFhirIdList = class;
  TFhirPositiveInt = class;
  TFhirPositiveIntList = class;
  TFhirInteger64 = class;
  TFhirInteger64List = class;

  TFhirAddress = class;
  TFhirAddressList = class;
  TFhirAnnotation = class;
  TFhirAnnotationList = class;
  TFhirAttachment = class;
  TFhirAttachmentList = class;
  TFhirCodeableConcept = class;
  TFhirCodeableConceptList = class;
  TFhirCodeableReference = class;
  TFhirCodeableReferenceList = class;
  TFhirCoding = class;
  TFhirCodingList = class;
  TFhirContactDetail = class;
  TFhirContactDetailList = class;
  TFhirContactPoint = class;
  TFhirContactPointList = class;
  TFhirContributor = class;
  TFhirContributorList = class;
  TFhirDataRequirementCodeFilter = class;
  TFhirDataRequirementCodeFilterList = class;
  TFhirDataRequirementDateFilter = class;
  TFhirDataRequirementDateFilterList = class;
  TFhirDataRequirementSort = class;
  TFhirDataRequirementSortList = class;
  TFhirDataRequirement = class;
  TFhirDataRequirementList = class;
  TFhirExpression = class;
  TFhirExpressionList = class;
  TFhirExtension = class;
  TFhirExtensionList = class;
  TFhirHumanName = class;
  TFhirHumanNameList = class;
  TFhirIdentifier = class;
  TFhirIdentifierList = class;
  TFhirMeta = class;
  TFhirMetaList = class;
  TFhirMoney = class;
  TFhirMoneyList = class;
  TFhirNarrative = class;
  TFhirNarrativeList = class;
  TFhirParameterDefinition = class;
  TFhirParameterDefinitionList = class;
  TFhirPeriod = class;
  TFhirPeriodList = class;
  TFhirQuantity = class;
  TFhirQuantityList = class;
  TFhirRange = class;
  TFhirRangeList = class;
  TFhirRatio = class;
  TFhirRatioList = class;
  TFhirReference = class;
  TFhirReferenceList = class;
  TFhirRelatedArtifact = class;
  TFhirRelatedArtifactList = class;
  TFhirSampledData = class;
  TFhirSampledDataList = class;
  TFhirSignature = class;
  TFhirSignatureList = class;
  TFhirTriggerDefinition = class;
  TFhirTriggerDefinitionList = class;
  TFhirUsageContext = class;
  TFhirUsageContextList = class;
  TFhirAge = class;
  TFhirAgeList = class;
  TFhirCount = class;
  TFhirCountList = class;
  TFhirDistance = class;
  TFhirDistanceList = class;
  TFhirDosageDoseAndRate = class;
  TFhirDosageDoseAndRateList = class;
  TFhirDosage = class;
  TFhirDosageList = class;
  TFhirDuration = class;
  TFhirDurationList = class;
  TFhirElementDefinitionSlicing = class;
  TFhirElementDefinitionSlicingList = class;
  TFhirElementDefinitionSlicingDiscriminator = class;
  TFhirElementDefinitionSlicingDiscriminatorList = class;
  TFhirElementDefinitionBase = class;
  TFhirElementDefinitionBaseList = class;
  TFhirElementDefinitionType = class;
  TFhirElementDefinitionTypeList = class;
  TFhirElementDefinitionExample = class;
  TFhirElementDefinitionExampleList = class;
  TFhirElementDefinitionConstraint = class;
  TFhirElementDefinitionConstraintList = class;
  TFhirElementDefinitionBinding = class;
  TFhirElementDefinitionBindingList = class;
  TFhirElementDefinitionMapping = class;
  TFhirElementDefinitionMappingList = class;
  TFhirElementDefinition = class;
  TFhirElementDefinitionList = class;
  TFhirMarketingStatus = class;
  TFhirMarketingStatusList = class;
  TFhirOrderedDistributionInterval = class;
  TFhirOrderedDistributionIntervalList = class;
  TFhirOrderedDistribution = class;
  TFhirOrderedDistributionList = class;
  TFhirPopulation = class;
  TFhirPopulationList = class;
  TFhirProdCharacteristic = class;
  TFhirProdCharacteristicList = class;
  TFhirProductShelfLife = class;
  TFhirProductShelfLifeList = class;
  TFhirStatisticSampleSize = class;
  TFhirStatisticSampleSizeList = class;
  TFhirStatisticAttributeEstimate = class;
  TFhirStatisticAttributeEstimateList = class;
  TFhirStatisticAttributeEstimateAttributeEstimate = class;
  TFhirStatisticAttributeEstimateAttributeEstimateList = class;
  TFhirStatisticModelCharacteristic = class;
  TFhirStatisticModelCharacteristicList = class;
  TFhirStatisticModelCharacteristicVariable = class;
  TFhirStatisticModelCharacteristicVariableList = class;
  TFhirStatistic = class;
  TFhirStatisticList = class;
  TFhirTimingRepeat = class;
  TFhirTimingRepeatList = class;
  TFhirTiming = class;
  TFhirTimingList = class;

  // Base StructureDefinition for Element Type: Base definition for all elements in a resource.
  TFhirElement = class abstract (TFhirBase)
  private
    FDisallowExtensions: boolean;
  protected
    FId : TFhirString;
    FextensionList : TFhirExtensionList;
    procedure SetId(value : TFhirString);
    function GetIdST : String;
    procedure SetIdST(value : String);
    function GetExtensionList : TFhirExtensionList;
    function GetHasExtensionList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    Procedure listElementFieldsInOrder(fields : TStringList);
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElement; overload;
    function Clone : TFhirElement; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function getId : string; override;
    procedure setIdValue(id : String); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function noExtensions : TFhirElement;
    property DisallowExtensions : boolean read FDisallowExtensions write FDisallowExtensions;
    function hasExtensions : boolean; override;
    function hasExtension(url : string) : boolean; override;
    function getExtensionString(url : String) : String; override;
    function extensionCount(url : String) : integer; override;
    function extensions(url : String) : TFslList<TFHIRObject>; override;
    procedure addExtension(url : String; value : TFHIRObject); override;
  published
    // Typed access to Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    property id : String read GetIdST write SetIdST;
    // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
    property idElement : TFhirString read FId write SetId;

    // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
    property extensionList : TFhirExtensionList read GetExtensionList;
    property hasExtensionList : boolean read GetHasExtensionList;

  end;

  // Base StructureDefinition for BackboneElement Type: Base definition for all elements that are defined inside a resource - but not those in a data type.
  TFhirBackboneElement = class abstract (TFhirElement)
  protected
    FmodifierExtensionList : TFhirExtensionList;
    function GetModifierExtensionList : TFhirExtensionList;
    function GetHasModifierExtensionList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    Procedure listBackboneElementFieldsInOrder(fields: TStringList);
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirBackboneElement; overload;
    function Clone : TFhirBackboneElement; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  published
    // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
    property modifierExtensionList : TFhirExtensionList read GetModifierExtensionList;
    property hasModifierExtensionList : boolean read GetHasModifierExtensionList;

  end;

  // Base StructureDefinition for DataType Type: The base class for all re-useable types defined as part of the FHIR Specification.
  TFhirDataType = class abstract (TFhirElement)
  
  public
    function Link : TFhirDataType; overload;
    function Clone : TFhirDataType; overload;
    function isType : boolean; override;
    function ToString : String; override;
  end;

  TFHIRDataTypeClass = class of TFhirDataType;

  // Base StructureDefinition for BackboneType Type: Base definition for the few data types that are allowed to carry modifier extensions.
  TFhirBackboneType = class abstract (TFhirDataType)
  protected
    FmodifierExtensionList : TFhirExtensionList;
    function GetModifierExtensionList : TFhirExtensionList;
    function GetHasModifierExtensionList : Boolean;

    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    Procedure listBackboneTypeFieldsInOrder(fields: TStringList);
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirBackboneType; overload;
    function Clone : TFhirBackboneType; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  published
    // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.  Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
    property modifierExtensionList : TFhirExtensionList read GetModifierExtensionList;
    property hasModifierExtensionList : boolean read GetHasModifierExtensionList;

  end;

  // Base StructureDefinition for PrimitiveType Type: The base type for all re-useable types defined that have a simple property.
  TFhirPrimitiveType = class abstract (TFhirDataType)
  private
    function GetStringValue : String;
    procedure SetStringValue(value : String); virtual; abstract;
    function AsStringValue : String; Virtual; abstract;
  
  public
    function Link : TFhirPrimitiveType; overload;
    function Clone : TFhirPrimitiveType; overload;
    property StringValue : String read GetStringValue write SetStringValue;
    function isPrimitive : boolean; override;
    function hasPrimitiveValue : boolean; override;
    function primitiveValue : string; override;
    function setProperty(propName: string; propValue: TFHIRObject) : TFHIRObject; override;
    function ToString : String; override;
  end;

  TFHIRPrimitiveTypeClass = class of TFHIRPrimitiveType;

  // a complex Enum - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Enum, and extensions
  TFhirEnum = class (TFhirPrimitiveType)
  private
    FValue: String;
    FSystem: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(system : String; value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirEnum; overload;
    function Clone : TFhirEnum; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function isEnum : boolean; override;
    function fhirType : string; override;
  published
    // The actual value of the enum
    property value : String read FValue write SetValue;
    property system : String read FSystem write FSystem;
  End;    

  TFhirEnumListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirEnumList;
    function GetCurrent : TFhirEnum;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirEnumList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirEnum read GetCurrent;
  end;

  TFhirEnumList = class (TFHIRObjectList)
  private

    FSystems : Array Of String;

    FCodes : Array Of String;

    function GetItemN(index : Integer) : TFhirEnum;
    procedure SetItemN(index : Integer; value : TFhirEnum);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    constructor Create(Systems, Codes : Array Of String);

    function Link : TFhirEnumList; overload;
    function Clone : TFhirEnumList; overload;
    function GetEnumerator : TFhirEnumListEnumerator;
    

    //  Add a FhirEnum to the end of the list.
    function Append : TFhirEnum;

    
    // Add an already existing FhirEnum to the end of the list.
    procedure AddItem(value : TFhirEnum); overload;

    
    // Add an already existing FhirEnum to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirEnum) : Integer;
    

    // Insert FhirEnum before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirEnum;
    

    // Insert an existing FhirEnum before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirEnum);
    
    // Get the iIndexth FhirEnum. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirEnum);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirEnum;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirEnums[index : Integer] : TFhirEnum read GetItemN write SetItemN; default;
  End;

  // a complex Date - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Date, and extensions
  TFhirDate = class (TFhirPrimitiveType)
  private
    FValue: TFslDateTime;
    procedure setValue(value: TFslDateTime);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : TFslDateTime); overload;
    destructor Destroy; override;
    
    function Link : TFhirDate; overload;
    function Clone : TFhirDate; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
    function isDateTime : boolean; override;
    function GetDateValue : TFslDateTime; override;
    procedure SetDateValue(value : TFslDateTime); override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the date
    property value : TFslDateTime read FValue write SetValue;
  End;    

  TFhirDateListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDateList;
    function GetCurrent : TFhirDate;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDateList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDate read GetCurrent;
  end;

  TFhirDateList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirDate;
    procedure SetItemN(index : Integer; value : TFhirDate);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirDateList; overload;
    function Clone : TFhirDateList; overload;
    function GetEnumerator : TFhirDateListEnumerator;
    

    //  Add a FhirDate to the end of the list.
    function Append : TFhirDate;

    
    // Add an already existing FhirDate to the end of the list.
    procedure AddItem(value : TFhirDate); overload;

    
    // Add an already existing FhirDate to the end of the list.
    procedure AddItem(value : TFslDateTime); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDate) : Integer;
    

    // Insert FhirDate before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDate;
    

    // Insert an existing FhirDate before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDate);
    
    // Get the iIndexth FhirDate. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDate);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDate;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDates[index : Integer] : TFhirDate read GetItemN write SetItemN; default;
  End;

  // a complex DateTime - has an Id attribute, and extensions.
  //  Used where a FHIR element is a DateTime, and extensions
  TFhirDateTime = class (TFhirPrimitiveType)
  private
    FValue: TFslDateTime;
    procedure setValue(value: TFslDateTime);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : TFslDateTime); overload;
    destructor Destroy; override;
    
    function Link : TFhirDateTime; overload;
    function Clone : TFhirDateTime; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
    function isDateTime : boolean; override;
    function GetDateValue : TFslDateTime; override;
    procedure SetDateValue(value : TFslDateTime); override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the dateTime
    property value : TFslDateTime read FValue write SetValue;
  End;    

  TFhirDateTimeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDateTimeList;
    function GetCurrent : TFhirDateTime;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDateTimeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDateTime read GetCurrent;
  end;

  TFhirDateTimeList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirDateTime;
    procedure SetItemN(index : Integer; value : TFhirDateTime);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirDateTimeList; overload;
    function Clone : TFhirDateTimeList; overload;
    function GetEnumerator : TFhirDateTimeListEnumerator;
    

    //  Add a FhirDateTime to the end of the list.
    function Append : TFhirDateTime;

    
    // Add an already existing FhirDateTime to the end of the list.
    procedure AddItem(value : TFhirDateTime); overload;

    
    // Add an already existing FhirDateTime to the end of the list.
    procedure AddItem(value : TFslDateTime); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDateTime) : Integer;
    

    // Insert FhirDateTime before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDateTime;
    

    // Insert an existing FhirDateTime before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDateTime);
    
    // Get the iIndexth FhirDateTime. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDateTime);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDateTime;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDateTimes[index : Integer] : TFhirDateTime read GetItemN write SetItemN; default;
  End;

  // a complex String - has an Id attribute, and extensions.
  //  Used where a FHIR element is a String, and extensions
  TFhirString = class (TFhirPrimitiveType)
  private
    FValue: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirString; overload;
    function Clone : TFhirString; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the string
    property value : String read FValue write SetValue;
  End;    

  TFhirStringListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStringList;
    function GetCurrent : TFhirString;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStringList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirString read GetCurrent;
  end;

  TFhirStringList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirString;
    procedure SetItemN(index : Integer; value : TFhirString);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirStringList; overload;
    function Clone : TFhirStringList; overload;
    function GetEnumerator : TFhirStringListEnumerator;
    

    //  Add a FhirString to the end of the list.
    function Append : TFhirString;

    
    // Add an already existing FhirString to the end of the list.
    procedure AddItem(value : TFhirString); overload;

    
    // Add an already existing FhirString to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirString) : Integer;
    

    // Insert FhirString before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirString;
    

    // Insert an existing FhirString before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirString);
    
    // Get the iIndexth FhirString. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirString);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirString;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStrings[index : Integer] : TFhirString read GetItemN write SetItemN; default;
  End;

  // a complex Integer - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Integer, and extensions
  TFhirInteger = class (TFhirPrimitiveType)
  private
    FValue: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirInteger; overload;
    function Clone : TFhirInteger; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the integer
    property value : String read FValue write SetValue;
  End;    

  TFhirIntegerListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirIntegerList;
    function GetCurrent : TFhirInteger;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirIntegerList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirInteger read GetCurrent;
  end;

  TFhirIntegerList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirInteger;
    procedure SetItemN(index : Integer; value : TFhirInteger);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirIntegerList; overload;
    function Clone : TFhirIntegerList; overload;
    function GetEnumerator : TFhirIntegerListEnumerator;
    

    //  Add a FhirInteger to the end of the list.
    function Append : TFhirInteger;

    
    // Add an already existing FhirInteger to the end of the list.
    procedure AddItem(value : TFhirInteger); overload;

    
    // Add an already existing FhirInteger to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirInteger) : Integer;
    

    // Insert FhirInteger before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirInteger;
    

    // Insert an existing FhirInteger before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirInteger);
    
    // Get the iIndexth FhirInteger. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirInteger);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirInteger;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirIntegers[index : Integer] : TFhirInteger read GetItemN write SetItemN; default;
  End;

  // a complex Uri - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Uri, and extensions
  TFhirUri = class (TFhirPrimitiveType)
  private
    FValue: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirUri; overload;
    function Clone : TFhirUri; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the uri
    property value : String read FValue write SetValue;
  End;    

  TFhirUriListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirUriList;
    function GetCurrent : TFhirUri;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirUriList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirUri read GetCurrent;
  end;

  TFhirUriList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirUri;
    procedure SetItemN(index : Integer; value : TFhirUri);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirUriList; overload;
    function Clone : TFhirUriList; overload;
    function GetEnumerator : TFhirUriListEnumerator;
    

    //  Add a FhirUri to the end of the list.
    function Append : TFhirUri;

    
    // Add an already existing FhirUri to the end of the list.
    procedure AddItem(value : TFhirUri); overload;

    
    // Add an already existing FhirUri to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirUri) : Integer;
    

    // Insert FhirUri before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirUri;
    

    // Insert an existing FhirUri before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirUri);
    
    // Get the iIndexth FhirUri. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirUri);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirUri;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirUris[index : Integer] : TFhirUri read GetItemN write SetItemN; default;
  End;

  // a complex Instant - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Instant, and extensions
  TFhirInstant = class (TFhirPrimitiveType)
  private
    FValue: TFslDateTime;
    procedure setValue(value: TFslDateTime);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : TFslDateTime); overload;
    destructor Destroy; override;
    
    function Link : TFhirInstant; overload;
    function Clone : TFhirInstant; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
    function isDateTime : boolean; override;
    function GetDateValue : TFslDateTime; override;
    procedure SetDateValue(value : TFslDateTime); override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the instant
    property value : TFslDateTime read FValue write SetValue;
  End;    

  TFhirInstantListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirInstantList;
    function GetCurrent : TFhirInstant;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirInstantList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirInstant read GetCurrent;
  end;

  TFhirInstantList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirInstant;
    procedure SetItemN(index : Integer; value : TFhirInstant);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirInstantList; overload;
    function Clone : TFhirInstantList; overload;
    function GetEnumerator : TFhirInstantListEnumerator;
    

    //  Add a FhirInstant to the end of the list.
    function Append : TFhirInstant;

    
    // Add an already existing FhirInstant to the end of the list.
    procedure AddItem(value : TFhirInstant); overload;

    
    // Add an already existing FhirInstant to the end of the list.
    procedure AddItem(value : TFslDateTime); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirInstant) : Integer;
    

    // Insert FhirInstant before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirInstant;
    

    // Insert an existing FhirInstant before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirInstant);
    
    // Get the iIndexth FhirInstant. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirInstant);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirInstant;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirInstants[index : Integer] : TFhirInstant read GetItemN write SetItemN; default;
  End;

  // a complex Xhtml - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Xhtml, and extensions
  TFhirXhtml = class (TFhirPrimitiveType)
  private
    FValue: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirXhtml; overload;
    function Clone : TFhirXhtml; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the xhtml
    property value : String read FValue write SetValue;
  End;    

  TFhirXhtmlListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirXhtmlList;
    function GetCurrent : TFhirXhtml;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirXhtmlList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirXhtml read GetCurrent;
  end;

  TFhirXhtmlList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirXhtml;
    procedure SetItemN(index : Integer; value : TFhirXhtml);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirXhtmlList; overload;
    function Clone : TFhirXhtmlList; overload;
    function GetEnumerator : TFhirXhtmlListEnumerator;
    

    //  Add a FhirXhtml to the end of the list.
    function Append : TFhirXhtml;

    
    // Add an already existing FhirXhtml to the end of the list.
    procedure AddItem(value : TFhirXhtml); overload;

    
    // Add an already existing FhirXhtml to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirXhtml) : Integer;
    

    // Insert FhirXhtml before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirXhtml;
    

    // Insert an existing FhirXhtml before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirXhtml);
    
    // Get the iIndexth FhirXhtml. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirXhtml);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirXhtml;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirXhtmls[index : Integer] : TFhirXhtml read GetItemN write SetItemN; default;
  End;

  // a complex Boolean - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Boolean, and extensions
  TFhirBoolean = class (TFhirPrimitiveType)
  private
    FValue: Boolean;
    procedure setValue(value: Boolean);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : Boolean); overload;
    destructor Destroy; override;
    
    function Link : TFhirBoolean; overload;
    function Clone : TFhirBoolean; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
    function isBooleanPrimitive : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the boolean
    property value : Boolean read FValue write SetValue;
  End;    

  TFhirBooleanListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirBooleanList;
    function GetCurrent : TFhirBoolean;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirBooleanList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirBoolean read GetCurrent;
  end;

  TFhirBooleanList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirBoolean;
    procedure SetItemN(index : Integer; value : TFhirBoolean);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirBooleanList; overload;
    function Clone : TFhirBooleanList; overload;
    function GetEnumerator : TFhirBooleanListEnumerator;
    

    //  Add a FhirBoolean to the end of the list.
    function Append : TFhirBoolean;

    
    // Add an already existing FhirBoolean to the end of the list.
    procedure AddItem(value : TFhirBoolean); overload;

    
    // Add an already existing FhirBoolean to the end of the list.
    procedure AddItem(value : Boolean); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirBoolean) : Integer;
    

    // Insert FhirBoolean before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirBoolean;
    

    // Insert an existing FhirBoolean before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirBoolean);
    
    // Get the iIndexth FhirBoolean. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirBoolean);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirBoolean;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirBooleans[index : Integer] : TFhirBoolean read GetItemN write SetItemN; default;
  End;

  // a complex Base64Binary - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Base64Binary, and extensions
  TFhirBase64Binary = class (TFhirPrimitiveType)
  private
    FValue: TBytes;
    procedure setValue(value: TBytes);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : TBytes); overload;
    destructor Destroy; override;
    
    function Link : TFhirBase64Binary; overload;
    function Clone : TFhirBase64Binary; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the base64Binary
    property value : TBytes read FValue write SetValue;
  End;    

  TFhirBase64BinaryListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirBase64BinaryList;
    function GetCurrent : TFhirBase64Binary;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirBase64BinaryList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirBase64Binary read GetCurrent;
  end;

  TFhirBase64BinaryList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirBase64Binary;
    procedure SetItemN(index : Integer; value : TFhirBase64Binary);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirBase64BinaryList; overload;
    function Clone : TFhirBase64BinaryList; overload;
    function GetEnumerator : TFhirBase64BinaryListEnumerator;
    

    //  Add a FhirBase64Binary to the end of the list.
    function Append : TFhirBase64Binary;

    
    // Add an already existing FhirBase64Binary to the end of the list.
    procedure AddItem(value : TFhirBase64Binary); overload;

    
    // Add an already existing FhirBase64Binary to the end of the list.
    procedure AddItem(value : TBytes); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirBase64Binary) : Integer;
    

    // Insert FhirBase64Binary before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirBase64Binary;
    

    // Insert an existing FhirBase64Binary before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirBase64Binary);
    
    // Get the iIndexth FhirBase64Binary. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirBase64Binary);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirBase64Binary;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirBase64Binaries[index : Integer] : TFhirBase64Binary read GetItemN write SetItemN; default;
  End;

  // a complex Time - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Time, and extensions
  TFhirTime = class (TFhirPrimitiveType)
  private
    FValue: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirTime; overload;
    function Clone : TFhirTime; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the time
    property value : String read FValue write SetValue;
  End;    

  TFhirTimeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirTimeList;
    function GetCurrent : TFhirTime;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirTimeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirTime read GetCurrent;
  end;

  TFhirTimeList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirTime;
    procedure SetItemN(index : Integer; value : TFhirTime);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirTimeList; overload;
    function Clone : TFhirTimeList; overload;
    function GetEnumerator : TFhirTimeListEnumerator;
    

    //  Add a FhirTime to the end of the list.
    function Append : TFhirTime;

    
    // Add an already existing FhirTime to the end of the list.
    procedure AddItem(value : TFhirTime); overload;

    
    // Add an already existing FhirTime to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirTime) : Integer;
    

    // Insert FhirTime before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirTime;
    

    // Insert an existing FhirTime before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirTime);
    
    // Get the iIndexth FhirTime. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirTime);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirTime;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirTimes[index : Integer] : TFhirTime read GetItemN write SetItemN; default;
  End;

  // a complex Decimal - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Decimal, and extensions
  TFhirDecimal = class (TFhirPrimitiveType)
  private
    FValue: String;
    procedure setValue(value: String);
  protected
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    function AsStringValue : String; override;
    procedure SetStringValue(value : String); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirDecimal; overload;
    function Clone : TFhirDecimal; overload;
    procedure Assign(oSource : TFslObject); override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The actual value of the decimal
    property value : String read FValue write SetValue;
  End;    

  TFhirDecimalListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDecimalList;
    function GetCurrent : TFhirDecimal;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDecimalList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDecimal read GetCurrent;
  end;

  TFhirDecimalList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirDecimal;
    procedure SetItemN(index : Integer; value : TFhirDecimal);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirDecimalList; overload;
    function Clone : TFhirDecimalList; overload;
    function GetEnumerator : TFhirDecimalListEnumerator;
    

    //  Add a FhirDecimal to the end of the list.
    function Append : TFhirDecimal;

    
    // Add an already existing FhirDecimal to the end of the list.
    procedure AddItem(value : TFhirDecimal); overload;

    
    // Add an already existing FhirDecimal to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDecimal) : Integer;
    

    // Insert FhirDecimal before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDecimal;
    

    // Insert an existing FhirDecimal before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDecimal);
    
    // Get the iIndexth FhirDecimal. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDecimal);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDecimal;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDecimals[index : Integer] : TFhirDecimal read GetItemN write SetItemN; default;
  End;

  // a complex Code - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Code, and extensions
  TFhirCode = class (TFhirString)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirCode; overload;
    function Clone : TFhirCode; overload;
    function fhirType : string; override;
  End;    

  TFhirCodeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirCodeList;
    function GetCurrent : TFhirCode;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirCodeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirCode read GetCurrent;
  end;

  TFhirCodeList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirCode;
    procedure SetItemN(index : Integer; value : TFhirCode);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirCodeList; overload;
    function Clone : TFhirCodeList; overload;
    function GetEnumerator : TFhirCodeListEnumerator;
    

    //  Add a FhirCode to the end of the list.
    function Append : TFhirCode;

    
    // Add an already existing FhirCode to the end of the list.
    procedure AddItem(value : TFhirCode); overload;

    
    // Add an already existing FhirCode to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirCode) : Integer;
    

    // Insert FhirCode before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirCode;
    

    // Insert an existing FhirCode before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirCode);
    
    // Get the iIndexth FhirCode. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirCode);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirCode;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirCodes[index : Integer] : TFhirCode read GetItemN write SetItemN; default;
  End;

  // a complex Canonical - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Canonical, and extensions
  TFhirCanonical = class (TFhirUri)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirCanonical; overload;
    function Clone : TFhirCanonical; overload;
    function fhirType : string; override;
  End;    

  TFhirCanonicalListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirCanonicalList;
    function GetCurrent : TFhirCanonical;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirCanonicalList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirCanonical read GetCurrent;
  end;

  TFhirCanonicalList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirCanonical;
    procedure SetItemN(index : Integer; value : TFhirCanonical);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirCanonicalList; overload;
    function Clone : TFhirCanonicalList; overload;
    function GetEnumerator : TFhirCanonicalListEnumerator;
    

    //  Add a FhirCanonical to the end of the list.
    function Append : TFhirCanonical;

    
    // Add an already existing FhirCanonical to the end of the list.
    procedure AddItem(value : TFhirCanonical); overload;

    
    // Add an already existing FhirCanonical to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirCanonical) : Integer;
    

    // Insert FhirCanonical before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirCanonical;
    

    // Insert an existing FhirCanonical before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirCanonical);
    
    // Get the iIndexth FhirCanonical. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirCanonical);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirCanonical;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirCanonicals[index : Integer] : TFhirCanonical read GetItemN write SetItemN; default;
  End;

  // a complex Oid - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Oid, and extensions
  TFhirOid = class (TFhirUri)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirOid; overload;
    function Clone : TFhirOid; overload;
    function fhirType : string; override;
  End;    

  TFhirOidListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirOidList;
    function GetCurrent : TFhirOid;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirOidList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirOid read GetCurrent;
  end;

  TFhirOidList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirOid;
    procedure SetItemN(index : Integer; value : TFhirOid);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirOidList; overload;
    function Clone : TFhirOidList; overload;
    function GetEnumerator : TFhirOidListEnumerator;
    

    //  Add a FhirOid to the end of the list.
    function Append : TFhirOid;

    
    // Add an already existing FhirOid to the end of the list.
    procedure AddItem(value : TFhirOid); overload;

    
    // Add an already existing FhirOid to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirOid) : Integer;
    

    // Insert FhirOid before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirOid;
    

    // Insert an existing FhirOid before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirOid);
    
    // Get the iIndexth FhirOid. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirOid);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirOid;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirOids[index : Integer] : TFhirOid read GetItemN write SetItemN; default;
  End;

  // a complex Uuid - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Uuid, and extensions
  TFhirUuid = class (TFhirUri)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirUuid; overload;
    function Clone : TFhirUuid; overload;
    function fhirType : string; override;
  End;    

  TFhirUuidListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirUuidList;
    function GetCurrent : TFhirUuid;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirUuidList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirUuid read GetCurrent;
  end;

  TFhirUuidList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirUuid;
    procedure SetItemN(index : Integer; value : TFhirUuid);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirUuidList; overload;
    function Clone : TFhirUuidList; overload;
    function GetEnumerator : TFhirUuidListEnumerator;
    

    //  Add a FhirUuid to the end of the list.
    function Append : TFhirUuid;

    
    // Add an already existing FhirUuid to the end of the list.
    procedure AddItem(value : TFhirUuid); overload;

    
    // Add an already existing FhirUuid to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirUuid) : Integer;
    

    // Insert FhirUuid before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirUuid;
    

    // Insert an existing FhirUuid before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirUuid);
    
    // Get the iIndexth FhirUuid. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirUuid);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirUuid;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirUuids[index : Integer] : TFhirUuid read GetItemN write SetItemN; default;
  End;

  // a complex Url - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Url, and extensions
  TFhirUrl = class (TFhirUri)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirUrl; overload;
    function Clone : TFhirUrl; overload;
    function fhirType : string; override;
  End;    

  TFhirUrlListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirUrlList;
    function GetCurrent : TFhirUrl;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirUrlList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirUrl read GetCurrent;
  end;

  TFhirUrlList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirUrl;
    procedure SetItemN(index : Integer; value : TFhirUrl);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirUrlList; overload;
    function Clone : TFhirUrlList; overload;
    function GetEnumerator : TFhirUrlListEnumerator;
    

    //  Add a FhirUrl to the end of the list.
    function Append : TFhirUrl;

    
    // Add an already existing FhirUrl to the end of the list.
    procedure AddItem(value : TFhirUrl); overload;

    
    // Add an already existing FhirUrl to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirUrl) : Integer;
    

    // Insert FhirUrl before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirUrl;
    

    // Insert an existing FhirUrl before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirUrl);
    
    // Get the iIndexth FhirUrl. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirUrl);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirUrl;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirUrls[index : Integer] : TFhirUrl read GetItemN write SetItemN; default;
  End;

  // a complex Markdown - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Markdown, and extensions
  TFhirMarkdown = class (TFhirString)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirMarkdown; overload;
    function Clone : TFhirMarkdown; overload;
    function fhirType : string; override;
  End;    

  TFhirMarkdownListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirMarkdownList;
    function GetCurrent : TFhirMarkdown;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirMarkdownList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirMarkdown read GetCurrent;
  end;

  TFhirMarkdownList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirMarkdown;
    procedure SetItemN(index : Integer; value : TFhirMarkdown);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirMarkdownList; overload;
    function Clone : TFhirMarkdownList; overload;
    function GetEnumerator : TFhirMarkdownListEnumerator;
    

    //  Add a FhirMarkdown to the end of the list.
    function Append : TFhirMarkdown;

    
    // Add an already existing FhirMarkdown to the end of the list.
    procedure AddItem(value : TFhirMarkdown); overload;

    
    // Add an already existing FhirMarkdown to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirMarkdown) : Integer;
    

    // Insert FhirMarkdown before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirMarkdown;
    

    // Insert an existing FhirMarkdown before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirMarkdown);
    
    // Get the iIndexth FhirMarkdown. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirMarkdown);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirMarkdown;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirMarkdowns[index : Integer] : TFhirMarkdown read GetItemN write SetItemN; default;
  End;

  // a complex UnsignedInt - has an Id attribute, and extensions.
  //  Used where a FHIR element is a UnsignedInt, and extensions
  TFhirUnsignedInt = class (TFhirInteger)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirUnsignedInt; overload;
    function Clone : TFhirUnsignedInt; overload;
    function fhirType : string; override;
  End;    

  TFhirUnsignedIntListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirUnsignedIntList;
    function GetCurrent : TFhirUnsignedInt;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirUnsignedIntList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirUnsignedInt read GetCurrent;
  end;

  TFhirUnsignedIntList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirUnsignedInt;
    procedure SetItemN(index : Integer; value : TFhirUnsignedInt);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirUnsignedIntList; overload;
    function Clone : TFhirUnsignedIntList; overload;
    function GetEnumerator : TFhirUnsignedIntListEnumerator;
    

    //  Add a FhirUnsignedInt to the end of the list.
    function Append : TFhirUnsignedInt;

    
    // Add an already existing FhirUnsignedInt to the end of the list.
    procedure AddItem(value : TFhirUnsignedInt); overload;

    
    // Add an already existing FhirUnsignedInt to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirUnsignedInt) : Integer;
    

    // Insert FhirUnsignedInt before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirUnsignedInt;
    

    // Insert an existing FhirUnsignedInt before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirUnsignedInt);
    
    // Get the iIndexth FhirUnsignedInt. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirUnsignedInt);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirUnsignedInt;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirUnsignedInts[index : Integer] : TFhirUnsignedInt read GetItemN write SetItemN; default;
  End;

  // a complex Id - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Id, and extensions
  TFhirId = class (TFhirString)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirId; overload;
    function Clone : TFhirId; overload;
    function fhirType : string; override;
  End;    

  TFhirIdListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirIdList;
    function GetCurrent : TFhirId;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirIdList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirId read GetCurrent;
  end;

  TFhirIdList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirId;
    procedure SetItemN(index : Integer; value : TFhirId);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirIdList; overload;
    function Clone : TFhirIdList; overload;
    function GetEnumerator : TFhirIdListEnumerator;
    

    //  Add a FhirId to the end of the list.
    function Append : TFhirId;

    
    // Add an already existing FhirId to the end of the list.
    procedure AddItem(value : TFhirId); overload;

    
    // Add an already existing FhirId to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirId) : Integer;
    

    // Insert FhirId before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirId;
    

    // Insert an existing FhirId before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirId);
    
    // Get the iIndexth FhirId. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirId);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirId;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirIds[index : Integer] : TFhirId read GetItemN write SetItemN; default;
  End;

  // a complex PositiveInt - has an Id attribute, and extensions.
  //  Used where a FHIR element is a PositiveInt, and extensions
  TFhirPositiveInt = class (TFhirInteger)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirPositiveInt; overload;
    function Clone : TFhirPositiveInt; overload;
    function fhirType : string; override;
  End;    

  TFhirPositiveIntListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirPositiveIntList;
    function GetCurrent : TFhirPositiveInt;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirPositiveIntList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirPositiveInt read GetCurrent;
  end;

  TFhirPositiveIntList = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirPositiveInt;
    procedure SetItemN(index : Integer; value : TFhirPositiveInt);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirPositiveIntList; overload;
    function Clone : TFhirPositiveIntList; overload;
    function GetEnumerator : TFhirPositiveIntListEnumerator;
    

    //  Add a FhirPositiveInt to the end of the list.
    function Append : TFhirPositiveInt;

    
    // Add an already existing FhirPositiveInt to the end of the list.
    procedure AddItem(value : TFhirPositiveInt); overload;

    
    // Add an already existing FhirPositiveInt to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirPositiveInt) : Integer;
    

    // Insert FhirPositiveInt before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirPositiveInt;
    

    // Insert an existing FhirPositiveInt before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirPositiveInt);
    
    // Get the iIndexth FhirPositiveInt. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirPositiveInt);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirPositiveInt;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirPositiveInts[index : Integer] : TFhirPositiveInt read GetItemN write SetItemN; default;
  End;

  // a complex Integer64 - has an Id attribute, and extensions.
  //  Used where a FHIR element is a Integer64, and extensions
  TFhirInteger64 = class (TFhirInteger)
  private
  protected
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    constructor Create(value : String); overload;
    destructor Destroy; override;
    
    function Link : TFhirInteger64; overload;
    function Clone : TFhirInteger64; overload;
    function fhirType : string; override;
  End;    

  TFhirInteger64ListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirInteger64List;
    function GetCurrent : TFhirInteger64;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirInteger64List);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirInteger64 read GetCurrent;
  end;

  TFhirInteger64List = class (TFHIRObjectList)
  private

    function GetItemN(index : Integer) : TFhirInteger64;
    procedure SetItemN(index : Integer; value : TFhirInteger64);
  protected
    function ItemClass : TFslObjectClass; override;
  public

    function Link : TFhirInteger64List; overload;
    function Clone : TFhirInteger64List; overload;
    function GetEnumerator : TFhirInteger64ListEnumerator;
    

    //  Add a FhirInteger64 to the end of the list.
    function Append : TFhirInteger64;

    
    // Add an already existing FhirInteger64 to the end of the list.
    procedure AddItem(value : TFhirInteger64); overload;

    
    // Add an already existing FhirInteger64 to the end of the list.
    procedure AddItem(value : String); overload;

    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirInteger64) : Integer;
    

    // Insert FhirInteger64 before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirInteger64;
    

    // Insert an existing FhirInteger64 before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirInteger64);
    
    // Get the iIndexth FhirInteger64. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirInteger64);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirInteger64;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirInteger64s[index : Integer] : TFhirInteger64 read GetItemN write SetItemN; default;
  End;

  // An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
  TFhirAddress = class (TFhirDataType)
  protected
    FUse : TFhirEnum;
    FType_ : TFhirEnum;
    FText : TFhirString;
    FlineList : TFhirStringList;
    FCity : TFhirString;
    FDistrict : TFhirString;
    FState : TFhirString;
    FPostalCode : TFhirString;
    FCountry : TFhirString;
    FPeriod : TFhirPeriod;
    procedure SetUse(value : TFhirEnum);
    function GetUseST : TFhirAddressUseEnum;
    procedure SetUseST(value : TFhirAddressUseEnum);
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirAddressTypeEnum;
    procedure SetType_ST(value : TFhirAddressTypeEnum);
    procedure SetText(value : TFhirString);
    function GetTextST : String;
    procedure SetTextST(value : String);
    function GetLineList : TFhirStringList;
    function GetHasLineList : Boolean;
    procedure SetCity(value : TFhirString);
    function GetCityST : String;
    procedure SetCityST(value : String);
    procedure SetDistrict(value : TFhirString);
    function GetDistrictST : String;
    procedure SetDistrictST(value : String);
    procedure SetState(value : TFhirString);
    function GetStateST : String;
    procedure SetStateST(value : String);
    procedure SetPostalCode(value : TFhirString);
    function GetPostalCodeST : String;
    procedure SetPostalCodeST(value : String);
    procedure SetCountry(value : TFhirString);
    function GetCountryST : String;
    procedure SetCountryST(value : String);
    procedure SetPeriod(value : TFhirPeriod);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirAddress; overload;
    function Clone : TFhirAddress; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The purpose of this address.
    property use : TFhirAddressUseEnum read GetUseST write SetUseST;
    property useElement : TFhirEnum read FUse write SetUse;

    // Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.
    property type_ : TFhirAddressTypeEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // Typed access to Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
    property text : String read GetTextST write SetTextST;
    // Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.
    property textElement : TFhirString read FText write SetText;

    // This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.
    property lineList : TFhirStringList read GetLineList;
    property hasLineList : boolean read GetHasLineList;

    // Typed access to The name of the city, town, suburb, village or other community or delivery center.
    property city : String read GetCityST write SetCityST;
    // The name of the city, town, suburb, village or other community or delivery center.
    property cityElement : TFhirString read FCity write SetCity;

    // Typed access to The name of the administrative area (county).
    property district : String read GetDistrictST write SetDistrictST;
    // The name of the administrative area (county).
    property districtElement : TFhirString read FDistrict write SetDistrict;

    // Typed access to Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
    property state : String read GetStateST write SetStateST;
    // Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).
    property stateElement : TFhirString read FState write SetState;

    // Typed access to A postal code designating a region defined by the postal service.
    property postalCode : String read GetPostalCodeST write SetPostalCodeST;
    // A postal code designating a region defined by the postal service.
    property postalCodeElement : TFhirString read FPostalCode write SetPostalCode;

    // Typed access to Country - a nation as commonly understood or generally accepted.
    property country : String read GetCountryST write SetCountryST;
    // Country - a nation as commonly understood or generally accepted.
    property countryElement : TFhirString read FCountry write SetCountry;

    // Typed access to Time period when address was/is in use. (defined for API consistency)
    property period : TFhirPeriod read FPeriod write SetPeriod;
    // Time period when address was/is in use.
    property periodElement : TFhirPeriod read FPeriod write SetPeriod;

  end;

  TFhirAddressListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirAddressList;
    function GetCurrent : TFhirAddress;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirAddressList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirAddress read GetCurrent;
  end;

  TFhirAddressList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirAddress;
    procedure SetItemN(index : Integer; value : TFhirAddress);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirAddressList; overload;
    function Clone : TFhirAddressList; overload;
    function GetEnumerator : TFhirAddressListEnumerator;
    
    //  Add a FhirAddress to the end of the list.
    function Append : TFhirAddress;
    
    // Add an already existing FhirAddress to the end of the list.
    procedure AddItem(value : TFhirAddress); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirAddress) : Integer;
    
    // Insert FhirAddress before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirAddress;
    
    // Insert an existing FhirAddress before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirAddress);
    
    // Get the iIndexth FhirAddress. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirAddress);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirAddress;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirAddresses[index : Integer] : TFhirAddress read GetItemN write SetItemN; default;
  End;

  // A  text note which also  contains information about who made the statement and when.
  TFhirAnnotation = class (TFhirDataType)
  protected
    FAuthor : TFhirDataType;
    FTime : TFhirDateTime;
    FText : TFhirMarkdown;
    procedure SetAuthor(value : TFhirDataType);
    procedure SetTime(value : TFhirDateTime);
    function GetTimeST : TFslDateTime;
    procedure SetTimeST(value : TFslDateTime);
    procedure SetText(value : TFhirMarkdown);
    function GetTextST : String;
    procedure SetTextST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirAnnotation; overload;
    function Clone : TFhirAnnotation; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The individual responsible for making the annotation. (defined for API consistency)
    property author : TFhirDataType read FAuthor write SetAuthor;
    // The individual responsible for making the annotation.
    property authorElement : TFhirDataType read FAuthor write SetAuthor;

    // Typed access to Indicates when this particular annotation was made.
    property time : TFslDateTime read GetTimeST write SetTimeST;
    // Indicates when this particular annotation was made.
    property timeElement : TFhirDateTime read FTime write SetTime;

    // Typed access to The text of the annotation in markdown format.
    property text : String read GetTextST write SetTextST;
    // The text of the annotation in markdown format.
    property textElement : TFhirMarkdown read FText write SetText;

  end;

  TFhirAnnotationListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirAnnotationList;
    function GetCurrent : TFhirAnnotation;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirAnnotationList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirAnnotation read GetCurrent;
  end;

  TFhirAnnotationList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirAnnotation;
    procedure SetItemN(index : Integer; value : TFhirAnnotation);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirAnnotationList; overload;
    function Clone : TFhirAnnotationList; overload;
    function GetEnumerator : TFhirAnnotationListEnumerator;
    
    //  Add a FhirAnnotation to the end of the list.
    function Append : TFhirAnnotation;
    
    // Add an already existing FhirAnnotation to the end of the list.
    procedure AddItem(value : TFhirAnnotation); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirAnnotation) : Integer;
    
    // Insert FhirAnnotation before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirAnnotation;
    
    // Insert an existing FhirAnnotation before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirAnnotation);
    
    // Get the iIndexth FhirAnnotation. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirAnnotation);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirAnnotation;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirAnnotations[index : Integer] : TFhirAnnotation read GetItemN write SetItemN; default;
  End;

  // For referring to data content defined in other formats.
  TFhirAttachment = class (TFhirDataType)
  protected
    FContentType : TFhirCode;
    FLanguage : TFhirCode;
    FData : TFhirBase64Binary;
    FUrl : TFhirUrl;
    FSize : TFhirInteger64;
    FHash : TFhirBase64Binary;
    FTitle : TFhirString;
    FCreation : TFhirDateTime;
    FHeight : TFhirPositiveInt;
    FWidth : TFhirPositiveInt;
    FFrames : TFhirPositiveInt;
    FDuration : TFhirDecimal;
    FPages : TFhirPositiveInt;
    procedure SetContentType(value : TFhirCode);
    function GetContentTypeST : String;
    procedure SetContentTypeST(value : String);
    procedure SetLanguage(value : TFhirCode);
    function GetLanguageST : String;
    procedure SetLanguageST(value : String);
    procedure SetData(value : TFhirBase64Binary);
    function GetDataST : TBytes;
    procedure SetDataST(value : TBytes);
    procedure SetUrl(value : TFhirUrl);
    function GetUrlST : String;
    procedure SetUrlST(value : String);
    procedure SetSize(value : TFhirInteger64);
    function GetSizeST : String;
    procedure SetSizeST(value : String);
    procedure SetHash(value : TFhirBase64Binary);
    function GetHashST : TBytes;
    procedure SetHashST(value : TBytes);
    procedure SetTitle(value : TFhirString);
    function GetTitleST : String;
    procedure SetTitleST(value : String);
    procedure SetCreation(value : TFhirDateTime);
    function GetCreationST : TFslDateTime;
    procedure SetCreationST(value : TFslDateTime);
    procedure SetHeight(value : TFhirPositiveInt);
    function GetHeightST : String;
    procedure SetHeightST(value : String);
    procedure SetWidth(value : TFhirPositiveInt);
    function GetWidthST : String;
    procedure SetWidthST(value : String);
    procedure SetFrames(value : TFhirPositiveInt);
    function GetFramesST : String;
    procedure SetFramesST(value : String);
    procedure SetDuration(value : TFhirDecimal);
    function GetDurationST : String;
    procedure SetDurationST(value : String);
    procedure SetPages(value : TFhirPositiveInt);
    function GetPagesST : String;
    procedure SetPagesST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirAttachment; overload;
    function Clone : TFhirAttachment; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
    property contentType : String read GetContentTypeST write SetContentTypeST;
    // Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.
    property contentTypeElement : TFhirCode read FContentType write SetContentType;

    // Typed access to The human language of the content. The value can be any valid value according to BCP 47.
    property language : String read GetLanguageST write SetLanguageST;
    // The human language of the content. The value can be any valid value according to BCP 47.
    property languageElement : TFhirCode read FLanguage write SetLanguage;

    // Typed access to The actual data of the attachment - a sequence of bytes, base64 encoded.
    property data : TBytes read GetDataST write SetDataST;
    // The actual data of the attachment - a sequence of bytes, base64 encoded.
    property dataElement : TFhirBase64Binary read FData write SetData;

    // Typed access to A location where the data can be accessed.
    property url : String read GetUrlST write SetUrlST;
    // A location where the data can be accessed.
    property urlElement : TFhirUrl read FUrl write SetUrl;

    // Typed access to The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
    property size : String read GetSizeST write SetSizeST;
    // The number of bytes of data that make up this attachment (before base64 encoding, if that is done).
    property sizeElement : TFhirInteger64 read FSize write SetSize;

    // Typed access to The calculated hash of the data using SHA-1. Represented using base64.
    property hash : TBytes read GetHashST write SetHashST;
    // The calculated hash of the data using SHA-1. Represented using base64.
    property hashElement : TFhirBase64Binary read FHash write SetHash;

    // Typed access to A label or set of text to display in place of the data.
    property title : String read GetTitleST write SetTitleST;
    // A label or set of text to display in place of the data.
    property titleElement : TFhirString read FTitle write SetTitle;

    // Typed access to The date that the attachment was first created.
    property creation : TFslDateTime read GetCreationST write SetCreationST;
    // The date that the attachment was first created.
    property creationElement : TFhirDateTime read FCreation write SetCreation;

    // Typed access to Height of the image in pixels (photo/video).
    property height : String read GetHeightST write SetHeightST;
    // Height of the image in pixels (photo/video).
    property heightElement : TFhirPositiveInt read FHeight write SetHeight;

    // Typed access to Width of the image in pixels (photo/video).
    property width : String read GetWidthST write SetWidthST;
    // Width of the image in pixels (photo/video).
    property widthElement : TFhirPositiveInt read FWidth write SetWidth;

    // Typed access to The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
    property frames : String read GetFramesST write SetFramesST;
    // The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
    property framesElement : TFhirPositiveInt read FFrames write SetFrames;

    // Typed access to The duration of the recording in seconds - for audio and video.
    property duration : String read GetDurationST write SetDurationST;
    // The duration of the recording in seconds - for audio and video.
    property durationElement : TFhirDecimal read FDuration write SetDuration;

    // Typed access to The number of pages when printed.
    property pages : String read GetPagesST write SetPagesST;
    // The number of pages when printed.
    property pagesElement : TFhirPositiveInt read FPages write SetPages;

  end;

  TFhirAttachmentListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirAttachmentList;
    function GetCurrent : TFhirAttachment;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirAttachmentList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirAttachment read GetCurrent;
  end;

  TFhirAttachmentList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirAttachment;
    procedure SetItemN(index : Integer; value : TFhirAttachment);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirAttachmentList; overload;
    function Clone : TFhirAttachmentList; overload;
    function GetEnumerator : TFhirAttachmentListEnumerator;
    
    //  Add a FhirAttachment to the end of the list.
    function Append : TFhirAttachment;
    
    // Add an already existing FhirAttachment to the end of the list.
    procedure AddItem(value : TFhirAttachment); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirAttachment) : Integer;
    
    // Insert FhirAttachment before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirAttachment;
    
    // Insert an existing FhirAttachment before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirAttachment);
    
    // Get the iIndexth FhirAttachment. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirAttachment);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirAttachment;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirAttachments[index : Integer] : TFhirAttachment read GetItemN write SetItemN; default;
  End;

  // A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
  TFhirCodeableConcept = class (TFhirDataType)
  protected
    FcodingList : TFhirCodingList;
    FText : TFhirString;
    function GetCodingList : TFhirCodingList;
    function GetHasCodingList : Boolean;
    procedure SetText(value : TFhirString);
    function GetTextST : String;
    procedure SetTextST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirCodeableConcept; overload;
    function Clone : TFhirCodeableConcept; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // A reference to a code defined by a terminology system.
    property codingList : TFhirCodingList read GetCodingList;
    property hasCodingList : boolean read GetHasCodingList;

    // Typed access to A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
    property text : String read GetTextST write SetTextST;
    // A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
    property textElement : TFhirString read FText write SetText;

  end;

  TFhirCodeableConceptListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirCodeableConceptList;
    function GetCurrent : TFhirCodeableConcept;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirCodeableConceptList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirCodeableConcept read GetCurrent;
  end;

  TFhirCodeableConceptList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirCodeableConcept;
    procedure SetItemN(index : Integer; value : TFhirCodeableConcept);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirCodeableConceptList; overload;
    function Clone : TFhirCodeableConceptList; overload;
    function GetEnumerator : TFhirCodeableConceptListEnumerator;
    
    //  Add a FhirCodeableConcept to the end of the list.
    function Append : TFhirCodeableConcept;
    
    // Add an already existing FhirCodeableConcept to the end of the list.
    procedure AddItem(value : TFhirCodeableConcept); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirCodeableConcept) : Integer;
    
    // Insert FhirCodeableConcept before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirCodeableConcept;
    
    // Insert an existing FhirCodeableConcept before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirCodeableConcept);
    
    // Get the iIndexth FhirCodeableConcept. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirCodeableConcept);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirCodeableConcept;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirCodeableConcepts[index : Integer] : TFhirCodeableConcept read GetItemN write SetItemN; default;
  End;

  // A reference to a resource (by instance), or instead, a reference to a cencept defined in a terminology or ontology (by class).
  TFhirCodeableReference = class (TFhirDataType)
  protected
    FConcept : TFhirCodeableConcept;
    FReference : TFhirReference;
    procedure SetConcept(value : TFhirCodeableConcept);
    procedure SetReference(value : TFhirReference);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirCodeableReference; overload;
    function Clone : TFhirCodeableReference; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to A reference to a concept - e.g. the information is identified by it's general classto the degree of precision found in the terminology. (defined for API consistency)
    property concept : TFhirCodeableConcept read FConcept write SetConcept;
    // A reference to a concept - e.g. the information is identified by it's general classto the degree of precision found in the terminology.
    property conceptElement : TFhirCodeableConcept read FConcept write SetConcept;

    // Typed access to A reference to a resource the provides exact details about the information being referenced. (defined for API consistency)
    property reference : TFhirReference read FReference write SetReference;
    // A reference to a resource the provides exact details about the information being referenced.
    property referenceElement : TFhirReference read FReference write SetReference;

  end;

  TFhirCodeableReferenceListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirCodeableReferenceList;
    function GetCurrent : TFhirCodeableReference;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirCodeableReferenceList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirCodeableReference read GetCurrent;
  end;

  TFhirCodeableReferenceList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirCodeableReference;
    procedure SetItemN(index : Integer; value : TFhirCodeableReference);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirCodeableReferenceList; overload;
    function Clone : TFhirCodeableReferenceList; overload;
    function GetEnumerator : TFhirCodeableReferenceListEnumerator;
    
    //  Add a FhirCodeableReference to the end of the list.
    function Append : TFhirCodeableReference;
    
    // Add an already existing FhirCodeableReference to the end of the list.
    procedure AddItem(value : TFhirCodeableReference); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirCodeableReference) : Integer;
    
    // Insert FhirCodeableReference before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirCodeableReference;
    
    // Insert an existing FhirCodeableReference before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirCodeableReference);
    
    // Get the iIndexth FhirCodeableReference. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirCodeableReference);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirCodeableReference;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirCodeableReferences[index : Integer] : TFhirCodeableReference read GetItemN write SetItemN; default;
  End;

  // A reference to a code defined by a terminology system.
  TFhirCoding = class (TFhirDataType)
  protected
    FSystem : TFhirUri;
    FVersion : TFhirString;
    FCode : TFhirCode;
    FDisplay : TFhirString;
    FUserSelected : TFhirBoolean;
    procedure SetSystem(value : TFhirUri);
    function GetSystemST : String;
    procedure SetSystemST(value : String);
    procedure SetVersion(value : TFhirString);
    function GetVersionST : String;
    procedure SetVersionST(value : String);
    procedure SetCode(value : TFhirCode);
    function GetCodeST : String;
    procedure SetCodeST(value : String);
    procedure SetDisplay(value : TFhirString);
    function GetDisplayST : String;
    procedure SetDisplayST(value : String);
    procedure SetUserSelected(value : TFhirBoolean);
    function GetUserSelectedST : Boolean;
    procedure SetUserSelectedST(value : Boolean);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirCoding; overload;
    function Clone : TFhirCoding; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The identification of the code system that defines the meaning of the symbol in the code.
    property system : String read GetSystemST write SetSystemST;
    // The identification of the code system that defines the meaning of the symbol in the code.
    property systemElement : TFhirUri read FSystem write SetSystem;

    // Typed access to The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
    property version : String read GetVersionST write SetVersionST;
    // The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
    property versionElement : TFhirString read FVersion write SetVersion;

    // Typed access to A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
    property code : String read GetCodeST write SetCodeST;
    // A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).
    property codeElement : TFhirCode read FCode write SetCode;

    // Typed access to A representation of the meaning of the code in the system, following the rules of the system.
    property display : String read GetDisplayST write SetDisplayST;
    // A representation of the meaning of the code in the system, following the rules of the system.
    property displayElement : TFhirString read FDisplay write SetDisplay;

    // Typed access to Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
    property userSelected : Boolean read GetUserSelectedST write SetUserSelectedST;
    // Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).
    property userSelectedElement : TFhirBoolean read FUserSelected write SetUserSelected;

  end;

  TFhirCodingListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirCodingList;
    function GetCurrent : TFhirCoding;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirCodingList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirCoding read GetCurrent;
  end;

  TFhirCodingList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirCoding;
    procedure SetItemN(index : Integer; value : TFhirCoding);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirCodingList; overload;
    function Clone : TFhirCodingList; overload;
    function GetEnumerator : TFhirCodingListEnumerator;
    
    //  Add a FhirCoding to the end of the list.
    function Append : TFhirCoding;
    
    // Add an already existing FhirCoding to the end of the list.
    procedure AddItem(value : TFhirCoding); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirCoding) : Integer;
    
    // Insert FhirCoding before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirCoding;
    
    // Insert an existing FhirCoding before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirCoding);
    
    // Get the iIndexth FhirCoding. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirCoding);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirCoding;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirCodings[index : Integer] : TFhirCoding read GetItemN write SetItemN; default;
  End;

  // Specifies contact information for a person or organization.
  TFhirContactDetail = class (TFhirDataType)
  protected
    FName : TFhirString;
    FtelecomList : TFhirContactPointList;
    procedure SetName(value : TFhirString);
    function GetNameST : String;
    procedure SetNameST(value : String);
    function GetTelecomList : TFhirContactPointList;
    function GetHasTelecomList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirContactDetail; overload;
    function Clone : TFhirContactDetail; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The name of an individual to contact.
    property name : String read GetNameST write SetNameST;
    // The name of an individual to contact.
    property nameElement : TFhirString read FName write SetName;

    // The contact details for the individual (if a name was provided) or the organization.
    property telecomList : TFhirContactPointList read GetTelecomList;
    property hasTelecomList : boolean read GetHasTelecomList;

  end;

  TFhirContactDetailListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirContactDetailList;
    function GetCurrent : TFhirContactDetail;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirContactDetailList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirContactDetail read GetCurrent;
  end;

  TFhirContactDetailList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirContactDetail;
    procedure SetItemN(index : Integer; value : TFhirContactDetail);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirContactDetailList; overload;
    function Clone : TFhirContactDetailList; overload;
    function GetEnumerator : TFhirContactDetailListEnumerator;
    
    //  Add a FhirContactDetail to the end of the list.
    function Append : TFhirContactDetail;
    
    // Add an already existing FhirContactDetail to the end of the list.
    procedure AddItem(value : TFhirContactDetail); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirContactDetail) : Integer;
    
    // Insert FhirContactDetail before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirContactDetail;
    
    // Insert an existing FhirContactDetail before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirContactDetail);
    
    // Get the iIndexth FhirContactDetail. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirContactDetail);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirContactDetail;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirContactDetails[index : Integer] : TFhirContactDetail read GetItemN write SetItemN; default;
  End;

  // Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
  TFhirContactPoint = class (TFhirDataType)
  protected
    FSystem : TFhirEnum;
    FValue : TFhirString;
    FUse : TFhirEnum;
    FRank : TFhirPositiveInt;
    FPeriod : TFhirPeriod;
    procedure SetSystem(value : TFhirEnum);
    function GetSystemST : TFhirContactPointSystemEnum;
    procedure SetSystemST(value : TFhirContactPointSystemEnum);
    procedure SetValue(value : TFhirString);
    function GetValueST : String;
    procedure SetValueST(value : String);
    procedure SetUse(value : TFhirEnum);
    function GetUseST : TFhirContactPointUseEnum;
    procedure SetUseST(value : TFhirContactPointUseEnum);
    procedure SetRank(value : TFhirPositiveInt);
    function GetRankST : String;
    procedure SetRankST(value : String);
    procedure SetPeriod(value : TFhirPeriod);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirContactPoint; overload;
    function Clone : TFhirContactPoint; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Telecommunications form for contact point - what communications system is required to make use of the contact.
    property system : TFhirContactPointSystemEnum read GetSystemST write SetSystemST;
    property systemElement : TFhirEnum read FSystem write SetSystem;

    // Typed access to The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
    property value : String read GetValueST write SetValueST;
    // The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
    property valueElement : TFhirString read FValue write SetValue;

    // Identifies the purpose for the contact point.
    property use : TFhirContactPointUseEnum read GetUseST write SetUseST;
    property useElement : TFhirEnum read FUse write SetUse;

    // Typed access to Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
    property rank : String read GetRankST write SetRankST;
    // Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
    property rankElement : TFhirPositiveInt read FRank write SetRank;

    // Typed access to Time period when the contact point was/is in use. (defined for API consistency)
    property period : TFhirPeriod read FPeriod write SetPeriod;
    // Time period when the contact point was/is in use.
    property periodElement : TFhirPeriod read FPeriod write SetPeriod;

  end;

  TFhirContactPointListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirContactPointList;
    function GetCurrent : TFhirContactPoint;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirContactPointList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirContactPoint read GetCurrent;
  end;

  TFhirContactPointList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirContactPoint;
    procedure SetItemN(index : Integer; value : TFhirContactPoint);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirContactPointList; overload;
    function Clone : TFhirContactPointList; overload;
    function GetEnumerator : TFhirContactPointListEnumerator;
    
    //  Add a FhirContactPoint to the end of the list.
    function Append : TFhirContactPoint;
    
    // Add an already existing FhirContactPoint to the end of the list.
    procedure AddItem(value : TFhirContactPoint); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirContactPoint) : Integer;
    
    // Insert FhirContactPoint before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirContactPoint;
    
    // Insert an existing FhirContactPoint before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirContactPoint);
    
    // Get the iIndexth FhirContactPoint. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirContactPoint);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirContactPoint;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirContactPoints[index : Integer] : TFhirContactPoint read GetItemN write SetItemN; default;
  End;

  // A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
  TFhirContributor = class (TFhirDataType)
  protected
    FType_ : TFhirEnum;
    FName : TFhirString;
    FcontactList : TFhirContactDetailList;
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirContributorTypeEnum;
    procedure SetType_ST(value : TFhirContributorTypeEnum);
    procedure SetName(value : TFhirString);
    function GetNameST : String;
    procedure SetNameST(value : String);
    function GetContactList : TFhirContactDetailList;
    function GetHasContactList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirContributor; overload;
    function Clone : TFhirContributor; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The type of contributor.
    property type_ : TFhirContributorTypeEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // Typed access to The name of the individual or organization responsible for the contribution.
    property name : String read GetNameST write SetNameST;
    // The name of the individual or organization responsible for the contribution.
    property nameElement : TFhirString read FName write SetName;

    // Contact details to assist a user in finding and communicating with the contributor.
    property contactList : TFhirContactDetailList read GetContactList;
    property hasContactList : boolean read GetHasContactList;

  end;

  TFhirContributorListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirContributorList;
    function GetCurrent : TFhirContributor;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirContributorList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirContributor read GetCurrent;
  end;

  TFhirContributorList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirContributor;
    procedure SetItemN(index : Integer; value : TFhirContributor);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirContributorList; overload;
    function Clone : TFhirContributorList; overload;
    function GetEnumerator : TFhirContributorListEnumerator;
    
    //  Add a FhirContributor to the end of the list.
    function Append : TFhirContributor;
    
    // Add an already existing FhirContributor to the end of the list.
    procedure AddItem(value : TFhirContributor); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirContributor) : Integer;
    
    // Insert FhirContributor before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirContributor;
    
    // Insert an existing FhirContributor before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirContributor);
    
    // Get the iIndexth FhirContributor. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirContributor);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirContributor;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirContributors[index : Integer] : TFhirContributor read GetItemN write SetItemN; default;
  End;

  // Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
  TFhirDataRequirementCodeFilter = class (TFhirElement)
  protected
    FPath : TFhirString;
    FSearchParam : TFhirString;
    FValueSet : TFhirCanonical;
    FcodeList : TFhirCodingList;
    procedure SetPath(value : TFhirString);
    function GetPathST : String;
    procedure SetPathST(value : String);
    procedure SetSearchParam(value : TFhirString);
    function GetSearchParamST : String;
    procedure SetSearchParamST(value : String);
    procedure SetValueSet(value : TFhirCanonical);
    function GetValueSetST : String;
    procedure SetValueSetST(value : String);
    function GetCodeList : TFhirCodingList;
    function GetHasCodeList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirDataRequirementCodeFilter; overload;
    function Clone : TFhirDataRequirementCodeFilter; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
    property path : String read GetPathST write SetPathST;
    // The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.
    property pathElement : TFhirString read FPath write SetPath;

    // Typed access to A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
    property searchParam : String read GetSearchParamST write SetSearchParamST;
    // A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.
    property searchParamElement : TFhirString read FSearchParam write SetSearchParam;

    // Typed access to The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
    property valueSet : String read GetValueSetST write SetValueSetST;
    // The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.
    property valueSetElement : TFhirCanonical read FValueSet write SetValueSet;

    // The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.
    property codeList : TFhirCodingList read GetCodeList;
    property hasCodeList : boolean read GetHasCodeList;

  end;

  TFhirDataRequirementCodeFilterListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDataRequirementCodeFilterList;
    function GetCurrent : TFhirDataRequirementCodeFilter;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDataRequirementCodeFilterList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDataRequirementCodeFilter read GetCurrent;
  end;

  TFhirDataRequirementCodeFilterList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDataRequirementCodeFilter;
    procedure SetItemN(index : Integer; value : TFhirDataRequirementCodeFilter);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDataRequirementCodeFilterList; overload;
    function Clone : TFhirDataRequirementCodeFilterList; overload;
    function GetEnumerator : TFhirDataRequirementCodeFilterListEnumerator;
    
    //  Add a FhirDataRequirementCodeFilter to the end of the list.
    function Append : TFhirDataRequirementCodeFilter;
    
    // Add an already existing FhirDataRequirementCodeFilter to the end of the list.
    procedure AddItem(value : TFhirDataRequirementCodeFilter); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDataRequirementCodeFilter) : Integer;
    
    // Insert FhirDataRequirementCodeFilter before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDataRequirementCodeFilter;
    
    // Insert an existing FhirDataRequirementCodeFilter before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDataRequirementCodeFilter);
    
    // Get the iIndexth FhirDataRequirementCodeFilter. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDataRequirementCodeFilter);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDataRequirementCodeFilter;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDataRequirementCodeFilters[index : Integer] : TFhirDataRequirementCodeFilter read GetItemN write SetItemN; default;
  End;

  // Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
  TFhirDataRequirementDateFilter = class (TFhirElement)
  protected
    FPath : TFhirString;
    FSearchParam : TFhirString;
    FValue : TFhirDataType;
    procedure SetPath(value : TFhirString);
    function GetPathST : String;
    procedure SetPathST(value : String);
    procedure SetSearchParam(value : TFhirString);
    function GetSearchParamST : String;
    procedure SetSearchParamST(value : String);
    procedure SetValue(value : TFhirDataType);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirDataRequirementDateFilter; overload;
    function Clone : TFhirDataRequirementDateFilter; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
    property path : String read GetPathST write SetPathST;
    // The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.
    property pathElement : TFhirString read FPath write SetPath;

    // Typed access to A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
    property searchParam : String read GetSearchParamST write SetSearchParamST;
    // A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.
    property searchParamElement : TFhirString read FSearchParam write SetSearchParam;

    // Typed access to The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now. (defined for API consistency)
    property value : TFhirDataType read FValue write SetValue;
    // The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.
    property valueElement : TFhirDataType read FValue write SetValue;

  end;

  TFhirDataRequirementDateFilterListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDataRequirementDateFilterList;
    function GetCurrent : TFhirDataRequirementDateFilter;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDataRequirementDateFilterList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDataRequirementDateFilter read GetCurrent;
  end;

  TFhirDataRequirementDateFilterList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDataRequirementDateFilter;
    procedure SetItemN(index : Integer; value : TFhirDataRequirementDateFilter);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDataRequirementDateFilterList; overload;
    function Clone : TFhirDataRequirementDateFilterList; overload;
    function GetEnumerator : TFhirDataRequirementDateFilterListEnumerator;
    
    //  Add a FhirDataRequirementDateFilter to the end of the list.
    function Append : TFhirDataRequirementDateFilter;
    
    // Add an already existing FhirDataRequirementDateFilter to the end of the list.
    procedure AddItem(value : TFhirDataRequirementDateFilter); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDataRequirementDateFilter) : Integer;
    
    // Insert FhirDataRequirementDateFilter before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDataRequirementDateFilter;
    
    // Insert an existing FhirDataRequirementDateFilter before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDataRequirementDateFilter);
    
    // Get the iIndexth FhirDataRequirementDateFilter. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDataRequirementDateFilter);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDataRequirementDateFilter;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDataRequirementDateFilters[index : Integer] : TFhirDataRequirementDateFilter read GetItemN write SetItemN; default;
  End;

  // Specifies the order of the results to be returned.
  TFhirDataRequirementSort = class (TFhirElement)
  protected
    FPath : TFhirString;
    FDirection : TFhirEnum;
    procedure SetPath(value : TFhirString);
    function GetPathST : String;
    procedure SetPathST(value : String);
    procedure SetDirection(value : TFhirEnum);
    function GetDirectionST : TFhirSortDirectionEnum;
    procedure SetDirectionST(value : TFhirSortDirectionEnum);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirDataRequirementSort; overload;
    function Clone : TFhirDataRequirementSort; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.
    property path : String read GetPathST write SetPathST;
    // The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.
    property pathElement : TFhirString read FPath write SetPath;

    // The direction of the sort, ascending or descending.
    property direction : TFhirSortDirectionEnum read GetDirectionST write SetDirectionST;
    property directionElement : TFhirEnum read FDirection write SetDirection;

  end;

  TFhirDataRequirementSortListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDataRequirementSortList;
    function GetCurrent : TFhirDataRequirementSort;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDataRequirementSortList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDataRequirementSort read GetCurrent;
  end;

  TFhirDataRequirementSortList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDataRequirementSort;
    procedure SetItemN(index : Integer; value : TFhirDataRequirementSort);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDataRequirementSortList; overload;
    function Clone : TFhirDataRequirementSortList; overload;
    function GetEnumerator : TFhirDataRequirementSortListEnumerator;
    
    //  Add a FhirDataRequirementSort to the end of the list.
    function Append : TFhirDataRequirementSort;
    
    // Add an already existing FhirDataRequirementSort to the end of the list.
    procedure AddItem(value : TFhirDataRequirementSort); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDataRequirementSort) : Integer;
    
    // Insert FhirDataRequirementSort before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDataRequirementSort;
    
    // Insert an existing FhirDataRequirementSort before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDataRequirementSort);
    
    // Get the iIndexth FhirDataRequirementSort. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDataRequirementSort);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDataRequirementSort;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDataRequirementSorts[index : Integer] : TFhirDataRequirementSort read GetItemN write SetItemN; default;
  End;

  // Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
  TFhirDataRequirement = class (TFhirDataType)
  protected
    FType_ : TFhirEnum;
    FprofileList : TFhirCanonicalList;
    FSubject : TFhirDataType;
    FmustSupportList : TFhirStringList;
    FcodeFilterList : TFhirDataRequirementCodeFilterList;
    FdateFilterList : TFhirDataRequirementDateFilterList;
    FLimit : TFhirPositiveInt;
    FsortList : TFhirDataRequirementSortList;
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirAllTypesEnum;
    procedure SetType_ST(value : TFhirAllTypesEnum);
    function GetProfileList : TFhirCanonicalList;
    function GetHasProfileList : Boolean;
    procedure SetSubject(value : TFhirDataType);
    function GetMustSupportList : TFhirStringList;
    function GetHasMustSupportList : Boolean;
    function GetCodeFilterList : TFhirDataRequirementCodeFilterList;
    function GetHasCodeFilterList : Boolean;
    function GetDateFilterList : TFhirDataRequirementDateFilterList;
    function GetHasDateFilterList : Boolean;
    procedure SetLimit(value : TFhirPositiveInt);
    function GetLimitST : String;
    procedure SetLimitST(value : String);
    function GetSortList : TFhirDataRequirementSortList;
    function GetHasSortList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirDataRequirement; overload;
    function Clone : TFhirDataRequirement; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.
    property type_ : TFhirAllTypesEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // The profile of the required data, specified as the uri of the profile definition.
    property profileList : TFhirCanonicalList read GetProfileList;
    property hasProfileList : boolean read GetHasProfileList;

    // Typed access to The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed. (defined for API consistency)
    property subject : TFhirDataType read FSubject write SetSubject;
    // The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.
    property subjectElement : TFhirDataType read FSubject write SetSubject;

    // Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.   The value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
    property mustSupportList : TFhirStringList read GetMustSupportList;
    property hasMustSupportList : boolean read GetHasMustSupportList;

    // Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.
    property codeFilterList : TFhirDataRequirementCodeFilterList read GetCodeFilterList;
    property hasCodeFilterList : boolean read GetHasCodeFilterList;

    // Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.
    property dateFilterList : TFhirDataRequirementDateFilterList read GetDateFilterList;
    property hasDateFilterList : boolean read GetHasDateFilterList;

    // Typed access to Specifies a maximum number of results that are required (uses the _count search parameter).
    property limit : String read GetLimitST write SetLimitST;
    // Specifies a maximum number of results that are required (uses the _count search parameter).
    property limitElement : TFhirPositiveInt read FLimit write SetLimit;

    // Specifies the order of the results to be returned.
    property sortList : TFhirDataRequirementSortList read GetSortList;
    property hasSortList : boolean read GetHasSortList;

  end;

  TFhirDataRequirementListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDataRequirementList;
    function GetCurrent : TFhirDataRequirement;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDataRequirementList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDataRequirement read GetCurrent;
  end;

  TFhirDataRequirementList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDataRequirement;
    procedure SetItemN(index : Integer; value : TFhirDataRequirement);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDataRequirementList; overload;
    function Clone : TFhirDataRequirementList; overload;
    function GetEnumerator : TFhirDataRequirementListEnumerator;
    
    //  Add a FhirDataRequirement to the end of the list.
    function Append : TFhirDataRequirement;
    
    // Add an already existing FhirDataRequirement to the end of the list.
    procedure AddItem(value : TFhirDataRequirement); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDataRequirement) : Integer;
    
    // Insert FhirDataRequirement before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDataRequirement;
    
    // Insert an existing FhirDataRequirement before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDataRequirement);
    
    // Get the iIndexth FhirDataRequirement. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDataRequirement);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDataRequirement;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDataRequirements[index : Integer] : TFhirDataRequirement read GetItemN write SetItemN; default;
  End;

  // A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
  TFhirExpression = class (TFhirDataType)
  protected
    FDescription : TFhirString;
    FName : TFhirId;
    FLanguage : TFhirCode;
    FExpression : TFhirString;
    FReference : TFhirUri;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    procedure SetName(value : TFhirId);
    function GetNameST : String;
    procedure SetNameST(value : String);
    procedure SetLanguage(value : TFhirCode);
    function GetLanguageST : String;
    procedure SetLanguageST(value : String);
    procedure SetExpression(value : TFhirString);
    function GetExpressionST : String;
    procedure SetExpressionST(value : String);
    procedure SetReference(value : TFhirUri);
    function GetReferenceST : String;
    procedure SetReferenceST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirExpression; overload;
    function Clone : TFhirExpression; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to A brief, natural language description of the condition that effectively communicates the intended semantics.
    property description : String read GetDescriptionST write SetDescriptionST;
    // A brief, natural language description of the condition that effectively communicates the intended semantics.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Typed access to A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
    property name : String read GetNameST write SetNameST;
    // A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.
    property nameElement : TFhirId read FName write SetName;

    // Typed access to The media type of the language for the expression.
    property language : String read GetLanguageST write SetLanguageST;
    // The media type of the language for the expression.
    property languageElement : TFhirCode read FLanguage write SetLanguage;

    // Typed access to An expression in the specified language that returns a value.
    property expression : String read GetExpressionST write SetExpressionST;
    // An expression in the specified language that returns a value.
    property expressionElement : TFhirString read FExpression write SetExpression;

    // Typed access to A URI that defines where the expression is found.
    property reference : String read GetReferenceST write SetReferenceST;
    // A URI that defines where the expression is found.
    property referenceElement : TFhirUri read FReference write SetReference;

  end;

  TFhirExpressionListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirExpressionList;
    function GetCurrent : TFhirExpression;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirExpressionList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirExpression read GetCurrent;
  end;

  TFhirExpressionList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirExpression;
    procedure SetItemN(index : Integer; value : TFhirExpression);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirExpressionList; overload;
    function Clone : TFhirExpressionList; overload;
    function GetEnumerator : TFhirExpressionListEnumerator;
    
    //  Add a FhirExpression to the end of the list.
    function Append : TFhirExpression;
    
    // Add an already existing FhirExpression to the end of the list.
    procedure AddItem(value : TFhirExpression); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirExpression) : Integer;
    
    // Insert FhirExpression before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirExpression;
    
    // Insert an existing FhirExpression before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirExpression);
    
    // Get the iIndexth FhirExpression. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirExpression);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirExpression;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirExpressions[index : Integer] : TFhirExpression read GetItemN write SetItemN; default;
  End;

  // Optional Extension Element - found in all resources.
  TFhirExtension = class (TFhirDataType)
  protected
    FUrl : TFhirUri;
    FValue : TFhirDataType;
    procedure SetUrl(value : TFhirUri);
    function GetUrlST : String;
    procedure SetUrlST(value : String);
    procedure SetValue(value : TFhirDataType);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirExtension; overload;
    function Clone : TFhirExtension; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Source of the definition for the extension code - a logical name or a URL.
    property url : String read GetUrlST write SetUrlST;
    // Source of the definition for the extension code - a logical name or a URL.
    property urlElement : TFhirUri read FUrl write SetUrl;

    // Typed access to Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list). (defined for API consistency)
    property value : TFhirDataType read FValue write SetValue;
    // Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
    property valueElement : TFhirDataType read FValue write SetValue;

  end;

  TFhirExtensionListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirExtensionList;
    function GetCurrent : TFhirExtension;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirExtensionList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirExtension read GetCurrent;
  end;

  TFhirExtensionList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirExtension;
    procedure SetItemN(index : Integer; value : TFhirExtension);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirExtensionList; overload;
    function Clone : TFhirExtensionList; overload;
    function GetEnumerator : TFhirExtensionListEnumerator;
    
    //  Add a FhirExtension to the end of the list.
    function Append : TFhirExtension;
    
    // Add an already existing FhirExtension to the end of the list.
    procedure AddItem(value : TFhirExtension); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirExtension) : Integer;
    
    // Insert FhirExtension before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirExtension;
    
    // Insert an existing FhirExtension before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirExtension);
    
    // Get the iIndexth FhirExtension. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirExtension);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirExtension;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirExtensions[index : Integer] : TFhirExtension read GetItemN write SetItemN; default;
  End;

  // A human's name with the ability to identify parts and usage.
  TFhirHumanName = class (TFhirDataType)
  protected
    FUse : TFhirEnum;
    FText : TFhirString;
    FFamily : TFhirString;
    FgivenList : TFhirStringList;
    FprefixList : TFhirStringList;
    FsuffixList : TFhirStringList;
    FPeriod : TFhirPeriod;
    procedure SetUse(value : TFhirEnum);
    function GetUseST : TFhirNameUseEnum;
    procedure SetUseST(value : TFhirNameUseEnum);
    procedure SetText(value : TFhirString);
    function GetTextST : String;
    procedure SetTextST(value : String);
    procedure SetFamily(value : TFhirString);
    function GetFamilyST : String;
    procedure SetFamilyST(value : String);
    function GetGivenList : TFhirStringList;
    function GetHasGivenList : Boolean;
    function GetPrefixList : TFhirStringList;
    function GetHasPrefixList : Boolean;
    function GetSuffixList : TFhirStringList;
    function GetHasSuffixList : Boolean;
    procedure SetPeriod(value : TFhirPeriod);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirHumanName; overload;
    function Clone : TFhirHumanName; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Identifies the purpose for this name.
    property use : TFhirNameUseEnum read GetUseST write SetUseST;
    property useElement : TFhirEnum read FUse write SetUse;

    // Typed access to Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
    property text : String read GetTextST write SetTextST;
    // Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.
    property textElement : TFhirString read FText write SetText;

    // Typed access to The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
    property family : String read GetFamilyST write SetFamilyST;
    // The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.
    property familyElement : TFhirString read FFamily write SetFamily;

    // Given name.
    property givenList : TFhirStringList read GetGivenList;
    property hasGivenList : boolean read GetHasGivenList;

    // Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.
    property prefixList : TFhirStringList read GetPrefixList;
    property hasPrefixList : boolean read GetHasPrefixList;

    // Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.
    property suffixList : TFhirStringList read GetSuffixList;
    property hasSuffixList : boolean read GetHasSuffixList;

    // Typed access to Indicates the period of time when this name was valid for the named person. (defined for API consistency)
    property period : TFhirPeriod read FPeriod write SetPeriod;
    // Indicates the period of time when this name was valid for the named person.
    property periodElement : TFhirPeriod read FPeriod write SetPeriod;

  end;

  TFhirHumanNameListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirHumanNameList;
    function GetCurrent : TFhirHumanName;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirHumanNameList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirHumanName read GetCurrent;
  end;

  TFhirHumanNameList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirHumanName;
    procedure SetItemN(index : Integer; value : TFhirHumanName);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirHumanNameList; overload;
    function Clone : TFhirHumanNameList; overload;
    function GetEnumerator : TFhirHumanNameListEnumerator;
    
    //  Add a FhirHumanName to the end of the list.
    function Append : TFhirHumanName;
    
    // Add an already existing FhirHumanName to the end of the list.
    procedure AddItem(value : TFhirHumanName); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirHumanName) : Integer;
    
    // Insert FhirHumanName before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirHumanName;
    
    // Insert an existing FhirHumanName before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirHumanName);
    
    // Get the iIndexth FhirHumanName. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirHumanName);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirHumanName;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirHumanNames[index : Integer] : TFhirHumanName read GetItemN write SetItemN; default;
  End;

  // An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
  TFhirIdentifier = class (TFhirDataType)
  protected
    FUse : TFhirEnum;
    FType_ : TFhirCodeableConcept;
    FSystem : TFhirUri;
    FValue : TFhirString;
    FPeriod : TFhirPeriod;
    FAssigner : TFhirReference;
    procedure SetUse(value : TFhirEnum);
    function GetUseST : TFhirIdentifierUseEnum;
    procedure SetUseST(value : TFhirIdentifierUseEnum);
    procedure SetType_(value : TFhirCodeableConcept);
    procedure SetSystem(value : TFhirUri);
    function GetSystemST : String;
    procedure SetSystemST(value : String);
    procedure SetValue(value : TFhirString);
    function GetValueST : String;
    procedure SetValueST(value : String);
    procedure SetPeriod(value : TFhirPeriod);
    procedure SetAssigner(value : TFhirReference);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirIdentifier; overload;
    function Clone : TFhirIdentifier; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The purpose of this identifier.
    property use : TFhirIdentifierUseEnum read GetUseST write SetUseST;
    property useElement : TFhirEnum read FUse write SetUse;

    // Typed access to A coded type for the identifier that can be used to determine which identifier to use for a specific purpose. (defined for API consistency)
    property type_ : TFhirCodeableConcept read FType_ write SetType_;
    // A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
    property type_Element : TFhirCodeableConcept read FType_ write SetType_;

    // Typed access to Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
    property system : String read GetSystemST write SetSystemST;
    // Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
    property systemElement : TFhirUri read FSystem write SetSystem;

    // Typed access to The portion of the identifier typically relevant to the user and which is unique within the context of the system.
    property value : String read GetValueST write SetValueST;
    // The portion of the identifier typically relevant to the user and which is unique within the context of the system.
    property valueElement : TFhirString read FValue write SetValue;

    // Typed access to Time period during which identifier is/was valid for use. (defined for API consistency)
    property period : TFhirPeriod read FPeriod write SetPeriod;
    // Time period during which identifier is/was valid for use.
    property periodElement : TFhirPeriod read FPeriod write SetPeriod;

    // Typed access to Organization that issued/manages the identifier. (defined for API consistency)
    property assigner : TFhirReference read FAssigner write SetAssigner;
    // Organization that issued/manages the identifier.
    property assignerElement : TFhirReference read FAssigner write SetAssigner;

  end;

  TFhirIdentifierListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirIdentifierList;
    function GetCurrent : TFhirIdentifier;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirIdentifierList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirIdentifier read GetCurrent;
  end;

  TFhirIdentifierList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirIdentifier;
    procedure SetItemN(index : Integer; value : TFhirIdentifier);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirIdentifierList; overload;
    function Clone : TFhirIdentifierList; overload;
    function GetEnumerator : TFhirIdentifierListEnumerator;
    
    //  Add a FhirIdentifier to the end of the list.
    function Append : TFhirIdentifier;
    
    // Add an already existing FhirIdentifier to the end of the list.
    procedure AddItem(value : TFhirIdentifier); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirIdentifier) : Integer;
    
    // Insert FhirIdentifier before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirIdentifier;
    
    // Insert an existing FhirIdentifier before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirIdentifier);
    
    // Get the iIndexth FhirIdentifier. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirIdentifier);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirIdentifier;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirIdentifiers[index : Integer] : TFhirIdentifier read GetItemN write SetItemN; default;
  End;

  // The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  TFhirMeta = class (TFhirDataType)
  protected
    FVersionId : TFhirId;
    FLastUpdated : TFhirInstant;
    FSource : TFhirUri;
    FprofileList : TFhirCanonicalList;
    FsecurityList : TFhirCodingList;
    FtagList : TFhirCodingList;
    procedure SetVersionId(value : TFhirId);
    function GetVersionIdST : String;
    procedure SetVersionIdST(value : String);
    procedure SetLastUpdated(value : TFhirInstant);
    function GetLastUpdatedST : TFslDateTime;
    procedure SetLastUpdatedST(value : TFslDateTime);
    procedure SetSource(value : TFhirUri);
    function GetSourceST : String;
    procedure SetSourceST(value : String);
    function GetProfileList : TFhirCanonicalList;
    function GetHasProfileList : Boolean;
    function GetSecurityList : TFhirCodingList;
    function GetHasSecurityList : Boolean;
    function GetTagList : TFhirCodingList;
    function GetHasTagList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirMeta; overload;
    function Clone : TFhirMeta; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
    property versionId : String read GetVersionIdST write SetVersionIdST;
    // The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.
    property versionIdElement : TFhirId read FVersionId write SetVersionId;

    // Typed access to When the resource last changed - e.g. when the version changed.
    property lastUpdated : TFslDateTime read GetLastUpdatedST write SetLastUpdatedST;
    // When the resource last changed - e.g. when the version changed.
    property lastUpdatedElement : TFhirInstant read FLastUpdated write SetLastUpdated;

    // Typed access to A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
    property source : String read GetSourceST write SetSourceST;
    // A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.
    property sourceElement : TFhirUri read FSource write SetSource;

    // A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition-definitions.html#StructureDefinition.url).
    property profileList : TFhirCanonicalList read GetProfileList;
    property hasProfileList : boolean read GetHasProfileList;

    // Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.
    property securityList : TFhirCodingList read GetSecurityList;
    property hasSecurityList : boolean read GetHasSecurityList;

    // Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.
    property tagList : TFhirCodingList read GetTagList;
    property hasTagList : boolean read GetHasTagList;

  end;

  TFhirMetaListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirMetaList;
    function GetCurrent : TFhirMeta;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirMetaList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirMeta read GetCurrent;
  end;

  TFhirMetaList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirMeta;
    procedure SetItemN(index : Integer; value : TFhirMeta);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirMetaList; overload;
    function Clone : TFhirMetaList; overload;
    function GetEnumerator : TFhirMetaListEnumerator;
    
    //  Add a FhirMeta to the end of the list.
    function Append : TFhirMeta;
    
    // Add an already existing FhirMeta to the end of the list.
    procedure AddItem(value : TFhirMeta); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirMeta) : Integer;
    
    // Insert FhirMeta before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirMeta;
    
    // Insert an existing FhirMeta before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirMeta);
    
    // Get the iIndexth FhirMeta. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirMeta);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirMeta;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirMeta[index : Integer] : TFhirMeta read GetItemN write SetItemN; default;
  End;

  // An amount of economic utility in some recognized currency.
  TFhirMoney = class (TFhirDataType)
  protected
    FValue : TFhirDecimal;
    FCurrency : TFhirCode;
    procedure SetValue(value : TFhirDecimal);
    function GetValueST : String;
    procedure SetValueST(value : String);
    procedure SetCurrency(value : TFhirCode);
    function GetCurrencyST : String;
    procedure SetCurrencyST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirMoney; overload;
    function Clone : TFhirMoney; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Numerical value (with implicit precision).
    property value : String read GetValueST write SetValueST;
    // Numerical value (with implicit precision).
    property valueElement : TFhirDecimal read FValue write SetValue;

    // Typed access to ISO 4217 Currency Code.
    property currency : String read GetCurrencyST write SetCurrencyST;
    // ISO 4217 Currency Code.
    property currencyElement : TFhirCode read FCurrency write SetCurrency;

  end;

  TFhirMoneyListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirMoneyList;
    function GetCurrent : TFhirMoney;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirMoneyList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirMoney read GetCurrent;
  end;

  TFhirMoneyList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirMoney;
    procedure SetItemN(index : Integer; value : TFhirMoney);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirMoneyList; overload;
    function Clone : TFhirMoneyList; overload;
    function GetEnumerator : TFhirMoneyListEnumerator;
    
    //  Add a FhirMoney to the end of the list.
    function Append : TFhirMoney;
    
    // Add an already existing FhirMoney to the end of the list.
    procedure AddItem(value : TFhirMoney); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirMoney) : Integer;
    
    // Insert FhirMoney before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirMoney;
    
    // Insert an existing FhirMoney before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirMoney);
    
    // Get the iIndexth FhirMoney. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirMoney);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirMoney;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirMoneys[index : Integer] : TFhirMoney read GetItemN write SetItemN; default;
  End;

  // A human-readable summary of the resource conveying the essential clinical and business information for the resource.
  TFhirNarrative = class (TFhirDataType)
  protected
    FStatus : TFhirEnum;
    FDiv_ : TFhirXHtmlNode;
    procedure SetStatus(value : TFhirEnum);
    function GetStatusST : TFhirNarrativeStatusEnum;
    procedure SetStatusST(value : TFhirNarrativeStatusEnum);
    procedure SetDiv_(value : TFhirXHtmlNode);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirNarrative; overload;
    function Clone : TFhirNarrative; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
    property status : TFhirNarrativeStatusEnum read GetStatusST write SetStatusST;
    property statusElement : TFhirEnum read FStatus write SetStatus;

    // Typed access to The actual narrative content, a stripped down version of XHTML. (defined for API consistency)
    property div_ : TFhirXHtmlNode read FDiv_ write SetDiv_;
    // The actual narrative content, a stripped down version of XHTML.
    property div_Element : TFhirXHtmlNode read FDiv_ write SetDiv_;

  end;

  TFhirNarrativeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirNarrativeList;
    function GetCurrent : TFhirNarrative;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirNarrativeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirNarrative read GetCurrent;
  end;

  TFhirNarrativeList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirNarrative;
    procedure SetItemN(index : Integer; value : TFhirNarrative);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirNarrativeList; overload;
    function Clone : TFhirNarrativeList; overload;
    function GetEnumerator : TFhirNarrativeListEnumerator;
    
    //  Add a FhirNarrative to the end of the list.
    function Append : TFhirNarrative;
    
    // Add an already existing FhirNarrative to the end of the list.
    procedure AddItem(value : TFhirNarrative); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirNarrative) : Integer;
    
    // Insert FhirNarrative before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirNarrative;
    
    // Insert an existing FhirNarrative before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirNarrative);
    
    // Get the iIndexth FhirNarrative. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirNarrative);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirNarrative;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirNarratives[index : Integer] : TFhirNarrative read GetItemN write SetItemN; default;
  End;

  // The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
  TFhirParameterDefinition = class (TFhirDataType)
  protected
    FName : TFhirCode;
    FUse : TFhirEnum;
    FMin : TFhirInteger;
    FMax : TFhirString;
    FDocumentation : TFhirString;
    FType_ : TFhirEnum;
    FProfile : TFhirCanonical;
    procedure SetName(value : TFhirCode);
    function GetNameST : String;
    procedure SetNameST(value : String);
    procedure SetUse(value : TFhirEnum);
    function GetUseST : TFhirOperationParameterUseEnum;
    procedure SetUseST(value : TFhirOperationParameterUseEnum);
    procedure SetMin(value : TFhirInteger);
    function GetMinST : String;
    procedure SetMinST(value : String);
    procedure SetMax(value : TFhirString);
    function GetMaxST : String;
    procedure SetMaxST(value : String);
    procedure SetDocumentation(value : TFhirString);
    function GetDocumentationST : String;
    procedure SetDocumentationST(value : String);
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirAllTypesEnum;
    procedure SetType_ST(value : TFhirAllTypesEnum);
    procedure SetProfile(value : TFhirCanonical);
    function GetProfileST : String;
    procedure SetProfileST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirParameterDefinition; overload;
    function Clone : TFhirParameterDefinition; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
    property name : String read GetNameST write SetNameST;
    // The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
    property nameElement : TFhirCode read FName write SetName;

    // Whether the parameter is input or output for the module.
    property use : TFhirOperationParameterUseEnum read GetUseST write SetUseST;
    property useElement : TFhirEnum read FUse write SetUse;

    // Typed access to The minimum number of times this parameter SHALL appear in the request or response.
    property min : String read GetMinST write SetMinST;
    // The minimum number of times this parameter SHALL appear in the request or response.
    property minElement : TFhirInteger read FMin write SetMin;

    // Typed access to The maximum number of times this element is permitted to appear in the request or response.
    property max : String read GetMaxST write SetMaxST;
    // The maximum number of times this element is permitted to appear in the request or response.
    property maxElement : TFhirString read FMax write SetMax;

    // Typed access to A brief discussion of what the parameter is for and how it is used by the module.
    property documentation : String read GetDocumentationST write SetDocumentationST;
    // A brief discussion of what the parameter is for and how it is used by the module.
    property documentationElement : TFhirString read FDocumentation write SetDocumentation;

    // The type of the parameter.
    property type_ : TFhirAllTypesEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // Typed access to If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
    property profile : String read GetProfileST write SetProfileST;
    // If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
    property profileElement : TFhirCanonical read FProfile write SetProfile;

  end;

  TFhirParameterDefinitionListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirParameterDefinitionList;
    function GetCurrent : TFhirParameterDefinition;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirParameterDefinitionList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirParameterDefinition read GetCurrent;
  end;

  TFhirParameterDefinitionList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirParameterDefinition;
    procedure SetItemN(index : Integer; value : TFhirParameterDefinition);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirParameterDefinitionList; overload;
    function Clone : TFhirParameterDefinitionList; overload;
    function GetEnumerator : TFhirParameterDefinitionListEnumerator;
    
    //  Add a FhirParameterDefinition to the end of the list.
    function Append : TFhirParameterDefinition;
    
    // Add an already existing FhirParameterDefinition to the end of the list.
    procedure AddItem(value : TFhirParameterDefinition); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirParameterDefinition) : Integer;
    
    // Insert FhirParameterDefinition before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirParameterDefinition;
    
    // Insert an existing FhirParameterDefinition before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirParameterDefinition);
    
    // Get the iIndexth FhirParameterDefinition. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirParameterDefinition);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirParameterDefinition;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirParameterDefinitions[index : Integer] : TFhirParameterDefinition read GetItemN write SetItemN; default;
  End;

  // A time period defined by a start and end date and optionally time.
  TFhirPeriod = class (TFhirDataType)
  protected
    FStart : TFhirDateTime;
    FEnd_ : TFhirDateTime;
    procedure SetStart(value : TFhirDateTime);
    function GetStartST : TFslDateTime;
    procedure SetStartST(value : TFslDateTime);
    procedure SetEnd_(value : TFhirDateTime);
    function GetEnd_ST : TFslDateTime;
    procedure SetEnd_ST(value : TFslDateTime);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirPeriod; overload;
    function Clone : TFhirPeriod; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The start of the period. The boundary is inclusive.
    property start : TFslDateTime read GetStartST write SetStartST;
    // The start of the period. The boundary is inclusive.
    property startElement : TFhirDateTime read FStart write SetStart;

    // Typed access to The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
    property end_ : TFslDateTime read GetEnd_ST write SetEnd_ST;
    // The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.
    property end_Element : TFhirDateTime read FEnd_ write SetEnd_;

  end;

  TFhirPeriodListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirPeriodList;
    function GetCurrent : TFhirPeriod;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirPeriodList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirPeriod read GetCurrent;
  end;

  TFhirPeriodList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirPeriod;
    procedure SetItemN(index : Integer; value : TFhirPeriod);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirPeriodList; overload;
    function Clone : TFhirPeriodList; overload;
    function GetEnumerator : TFhirPeriodListEnumerator;
    
    //  Add a FhirPeriod to the end of the list.
    function Append : TFhirPeriod;
    
    // Add an already existing FhirPeriod to the end of the list.
    procedure AddItem(value : TFhirPeriod); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirPeriod) : Integer;
    
    // Insert FhirPeriod before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirPeriod;
    
    // Insert an existing FhirPeriod before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirPeriod);
    
    // Get the iIndexth FhirPeriod. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirPeriod);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirPeriod;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirPeriods[index : Integer] : TFhirPeriod read GetItemN write SetItemN; default;
  End;

  // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  TFhirQuantity = class (TFhirDataType)
  protected
    FValue : TFhirDecimal;
    FComparator : TFhirEnum;
    FUnit_ : TFhirString;
    FSystem : TFhirUri;
    FCode : TFhirCode;
    procedure SetValue(value : TFhirDecimal);
    function GetValueST : String;
    procedure SetValueST(value : String);
    procedure SetComparator(value : TFhirEnum);
    function GetComparatorST : TFhirQuantityComparatorEnum;
    procedure SetComparatorST(value : TFhirQuantityComparatorEnum);
    procedure SetUnit_(value : TFhirString);
    function GetUnit_ST : String;
    procedure SetUnit_ST(value : String);
    procedure SetSystem(value : TFhirUri);
    function GetSystemST : String;
    procedure SetSystemST(value : String);
    procedure SetCode(value : TFhirCode);
    function GetCodeST : String;
    procedure SetCodeST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listQuantityFieldsInOrder(fields : TStringList);
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirQuantity; overload;
    function Clone : TFhirQuantity; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The value of the measured amount. The value includes an implicit precision in the presentation of the value.
    property value : String read GetValueST write SetValueST;
    // The value of the measured amount. The value includes an implicit precision in the presentation of the value.
    property valueElement : TFhirDecimal read FValue write SetValue;

    // How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
    property comparator : TFhirQuantityComparatorEnum read GetComparatorST write SetComparatorST;
    property comparatorElement : TFhirEnum read FComparator write SetComparator;

    // Typed access to A human-readable form of the unit.
    property unit_ : String read GetUnit_ST write SetUnit_ST;
    // A human-readable form of the unit.
    property unit_Element : TFhirString read FUnit_ write SetUnit_;

    // Typed access to The identification of the system that provides the coded form of the unit.
    property system : String read GetSystemST write SetSystemST;
    // The identification of the system that provides the coded form of the unit.
    property systemElement : TFhirUri read FSystem write SetSystem;

    // Typed access to A computer processable form of the unit in some unit representation system.
    property code : String read GetCodeST write SetCodeST;
    // A computer processable form of the unit in some unit representation system.
    property codeElement : TFhirCode read FCode write SetCode;

  end;

  TFhirQuantityListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirQuantityList;
    function GetCurrent : TFhirQuantity;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirQuantityList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirQuantity read GetCurrent;
  end;

  TFhirQuantityList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirQuantity;
    procedure SetItemN(index : Integer; value : TFhirQuantity);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirQuantityList; overload;
    function Clone : TFhirQuantityList; overload;
    function GetEnumerator : TFhirQuantityListEnumerator;
    
    //  Add a FhirQuantity to the end of the list.
    function Append : TFhirQuantity;
    
    // Add an already existing FhirQuantity to the end of the list.
    procedure AddItem(value : TFhirQuantity); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirQuantity) : Integer;
    
    // Insert FhirQuantity before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirQuantity;
    
    // Insert an existing FhirQuantity before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirQuantity);
    
    // Get the iIndexth FhirQuantity. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirQuantity);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirQuantity;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirQuantities[index : Integer] : TFhirQuantity read GetItemN write SetItemN; default;
  End;

  // A set of ordered Quantities defined by a low and high limit.
  TFhirRange = class (TFhirDataType)
  protected
    FLow : TFhirQuantity;
    FHigh : TFhirQuantity;
    procedure SetLow(value : TFhirQuantity);
    procedure SetHigh(value : TFhirQuantity);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirRange; overload;
    function Clone : TFhirRange; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The low limit. The boundary is inclusive. (defined for API consistency)
    property low : TFhirQuantity read FLow write SetLow;
    // The low limit. The boundary is inclusive.
    property lowElement : TFhirQuantity read FLow write SetLow;

    // Typed access to The high limit. The boundary is inclusive. (defined for API consistency)
    property high : TFhirQuantity read FHigh write SetHigh;
    // The high limit. The boundary is inclusive.
    property highElement : TFhirQuantity read FHigh write SetHigh;

  end;

  TFhirRangeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirRangeList;
    function GetCurrent : TFhirRange;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirRangeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirRange read GetCurrent;
  end;

  TFhirRangeList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirRange;
    procedure SetItemN(index : Integer; value : TFhirRange);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirRangeList; overload;
    function Clone : TFhirRangeList; overload;
    function GetEnumerator : TFhirRangeListEnumerator;
    
    //  Add a FhirRange to the end of the list.
    function Append : TFhirRange;
    
    // Add an already existing FhirRange to the end of the list.
    procedure AddItem(value : TFhirRange); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirRange) : Integer;
    
    // Insert FhirRange before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirRange;
    
    // Insert an existing FhirRange before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirRange);
    
    // Get the iIndexth FhirRange. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirRange);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirRange;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirRanges[index : Integer] : TFhirRange read GetItemN write SetItemN; default;
  End;

  // A relationship of two Quantity values - expressed as a numerator and a denominator.
  TFhirRatio = class (TFhirDataType)
  protected
    FNumerator : TFhirQuantity;
    FDenominator : TFhirQuantity;
    procedure SetNumerator(value : TFhirQuantity);
    procedure SetDenominator(value : TFhirQuantity);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirRatio; overload;
    function Clone : TFhirRatio; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The value of the numerator. (defined for API consistency)
    property numerator : TFhirQuantity read FNumerator write SetNumerator;
    // The value of the numerator.
    property numeratorElement : TFhirQuantity read FNumerator write SetNumerator;

    // Typed access to The value of the denominator. (defined for API consistency)
    property denominator : TFhirQuantity read FDenominator write SetDenominator;
    // The value of the denominator.
    property denominatorElement : TFhirQuantity read FDenominator write SetDenominator;

  end;

  TFhirRatioListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirRatioList;
    function GetCurrent : TFhirRatio;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirRatioList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirRatio read GetCurrent;
  end;

  TFhirRatioList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirRatio;
    procedure SetItemN(index : Integer; value : TFhirRatio);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirRatioList; overload;
    function Clone : TFhirRatioList; overload;
    function GetEnumerator : TFhirRatioListEnumerator;
    
    //  Add a FhirRatio to the end of the list.
    function Append : TFhirRatio;
    
    // Add an already existing FhirRatio to the end of the list.
    procedure AddItem(value : TFhirRatio); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirRatio) : Integer;
    
    // Insert FhirRatio before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirRatio;
    
    // Insert an existing FhirRatio before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirRatio);
    
    // Get the iIndexth FhirRatio. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirRatio);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirRatio;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirRatios[index : Integer] : TFhirRatio read GetItemN write SetItemN; default;
  End;

  // A reference from one resource to another.
  TFhirReference = class (TFhirDataType)
  protected
    FReference : TFhirString;
    FType_ : TFhirUri;
    FIdentifier : TFhirIdentifier;
    FDisplay : TFhirString;
    procedure SetReference(value : TFhirString);
    function GetReferenceST : String;
    procedure SetReferenceST(value : String);
    procedure SetType_(value : TFhirUri);
    function GetType_ST : String;
    procedure SetType_ST(value : String);
    procedure SetIdentifier(value : TFhirIdentifier);
    procedure SetDisplay(value : TFhirString);
    function GetDisplayST : String;
    procedure SetDisplayST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirReference; overload;
    function Clone : TFhirReference; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
    property reference : String read GetReferenceST write SetReferenceST;
    // A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.
    property referenceElement : TFhirString read FReference write SetReference;

    // Typed access to The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
    property type_ : String read GetType_ST write SetType_ST;
    // The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.  The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. "Patient" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).
    property type_Element : TFhirUri read FType_ write SetType_;

    // Typed access to An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference. (defined for API consistency)
    property identifier : TFhirIdentifier read FIdentifier write SetIdentifier;
    // An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.
    property identifierElement : TFhirIdentifier read FIdentifier write SetIdentifier;

    // Typed access to Plain text narrative that identifies the resource in addition to the resource reference.
    property display : String read GetDisplayST write SetDisplayST;
    // Plain text narrative that identifies the resource in addition to the resource reference.
    property displayElement : TFhirString read FDisplay write SetDisplay;

  end;

  TFhirReferenceListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirReferenceList;
    function GetCurrent : TFhirReference;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirReferenceList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirReference read GetCurrent;
  end;

  TFhirReferenceList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirReference;
    procedure SetItemN(index : Integer; value : TFhirReference);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirReferenceList; overload;
    function Clone : TFhirReferenceList; overload;
    function GetEnumerator : TFhirReferenceListEnumerator;
    
    //  Add a FhirReference to the end of the list.
    function Append : TFhirReference;
    
    // Add an already existing FhirReference to the end of the list.
    procedure AddItem(value : TFhirReference); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirReference) : Integer;
    
    // Insert FhirReference before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirReference;
    
    // Insert an existing FhirReference before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirReference);
    
    // Get the iIndexth FhirReference. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirReference);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirReference;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirReferences[index : Integer] : TFhirReference read GetItemN write SetItemN; default;
  End;

  // Related artifacts such as additional documentation, justification, or bibliographic references.
  TFhirRelatedArtifact = class (TFhirDataType)
  protected
    FType_ : TFhirEnum;
    FLabel_ : TFhirString;
    FDisplay : TFhirString;
    FCitation : TFhirMarkdown;
    FUrl : TFhirUrl;
    FDocument : TFhirAttachment;
    FResource : TFhirCanonical;
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirRelatedArtifactTypeEnum;
    procedure SetType_ST(value : TFhirRelatedArtifactTypeEnum);
    procedure SetLabel_(value : TFhirString);
    function GetLabel_ST : String;
    procedure SetLabel_ST(value : String);
    procedure SetDisplay(value : TFhirString);
    function GetDisplayST : String;
    procedure SetDisplayST(value : String);
    procedure SetCitation(value : TFhirMarkdown);
    function GetCitationST : String;
    procedure SetCitationST(value : String);
    procedure SetUrl(value : TFhirUrl);
    function GetUrlST : String;
    procedure SetUrlST(value : String);
    procedure SetDocument(value : TFhirAttachment);
    procedure SetResource(value : TFhirCanonical);
    function GetResourceST : String;
    procedure SetResourceST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirRelatedArtifact; overload;
    function Clone : TFhirRelatedArtifact; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The type of relationship to the related artifact.
    property type_ : TFhirRelatedArtifactTypeEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // Typed access to A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
    property label_ : String read GetLabel_ST write SetLabel_ST;
    // A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.
    property label_Element : TFhirString read FLabel_ write SetLabel_;

    // Typed access to A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
    property display : String read GetDisplayST write SetDisplayST;
    // A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.
    property displayElement : TFhirString read FDisplay write SetDisplay;

    // Typed access to A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
    property citation : String read GetCitationST write SetCitationST;
    // A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.
    property citationElement : TFhirMarkdown read FCitation write SetCitation;

    // Typed access to A url for the artifact that can be followed to access the actual content.
    property url : String read GetUrlST write SetUrlST;
    // A url for the artifact that can be followed to access the actual content.
    property urlElement : TFhirUrl read FUrl write SetUrl;

    // Typed access to The document being referenced, represented as an attachment. This is exclusive with the resource element. (defined for API consistency)
    property document : TFhirAttachment read FDocument write SetDocument;
    // The document being referenced, represented as an attachment. This is exclusive with the resource element.
    property documentElement : TFhirAttachment read FDocument write SetDocument;

    // Typed access to The related resource, such as a library, value set, profile, or other knowledge resource.
    property resource : String read GetResourceST write SetResourceST;
    // The related resource, such as a library, value set, profile, or other knowledge resource.
    property resourceElement : TFhirCanonical read FResource write SetResource;

  end;

  TFhirRelatedArtifactListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirRelatedArtifactList;
    function GetCurrent : TFhirRelatedArtifact;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirRelatedArtifactList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirRelatedArtifact read GetCurrent;
  end;

  TFhirRelatedArtifactList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirRelatedArtifact;
    procedure SetItemN(index : Integer; value : TFhirRelatedArtifact);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirRelatedArtifactList; overload;
    function Clone : TFhirRelatedArtifactList; overload;
    function GetEnumerator : TFhirRelatedArtifactListEnumerator;
    
    //  Add a FhirRelatedArtifact to the end of the list.
    function Append : TFhirRelatedArtifact;
    
    // Add an already existing FhirRelatedArtifact to the end of the list.
    procedure AddItem(value : TFhirRelatedArtifact); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirRelatedArtifact) : Integer;
    
    // Insert FhirRelatedArtifact before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirRelatedArtifact;
    
    // Insert an existing FhirRelatedArtifact before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirRelatedArtifact);
    
    // Get the iIndexth FhirRelatedArtifact. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirRelatedArtifact);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirRelatedArtifact;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirRelatedArtifacts[index : Integer] : TFhirRelatedArtifact read GetItemN write SetItemN; default;
  End;

  // A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
  TFhirSampledData = class (TFhirDataType)
  protected
    FOrigin : TFhirQuantity;
    FPeriod : TFhirDecimal;
    FFactor : TFhirDecimal;
    FLowerLimit : TFhirDecimal;
    FUpperLimit : TFhirDecimal;
    FDimensions : TFhirPositiveInt;
    FData : TFhirString;
    procedure SetOrigin(value : TFhirQuantity);
    procedure SetPeriod(value : TFhirDecimal);
    function GetPeriodST : String;
    procedure SetPeriodST(value : String);
    procedure SetFactor(value : TFhirDecimal);
    function GetFactorST : String;
    procedure SetFactorST(value : String);
    procedure SetLowerLimit(value : TFhirDecimal);
    function GetLowerLimitST : String;
    procedure SetLowerLimitST(value : String);
    Procedure SetUpperLimit(value : TFhirDecimal);
    function GetUpperLimitST : String;
    Procedure SetUpperLimitST(value : String);
    procedure SetDimensions(value : TFhirPositiveInt);
    function GetDimensionsST : String;
    procedure SetDimensionsST(value : String);
    procedure SetData(value : TFhirString);
    function GetDataST : String;
    procedure SetDataST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirSampledData; overload;
    function Clone : TFhirSampledData; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series. (defined for API consistency)
    property origin : TFhirQuantity read FOrigin write SetOrigin;
    // The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
    property originElement : TFhirQuantity read FOrigin write SetOrigin;

    // Typed access to The length of time between sampling times, measured in milliseconds.
    property period : String read GetPeriodST write SetPeriodST;
    // The length of time between sampling times, measured in milliseconds.
    property periodElement : TFhirDecimal read FPeriod write SetPeriod;

    // Typed access to A correction factor that is applied to the sampled data points before they are added to the origin.
    property factor : String read GetFactorST write SetFactorST;
    // A correction factor that is applied to the sampled data points before they are added to the origin.
    property factorElement : TFhirDecimal read FFactor write SetFactor;

    // Typed access to The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
    property lowerLimit : String read GetLowerLimitST write SetLowerLimitST;
    // The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
    property lowerLimitElement : TFhirDecimal read FLowerLimit write SetLowerLimit;

    // Typed access to The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
    property upperLimit : String read GetUpperLimitST write SetUpperLimitST;
    // The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
    property upperLimitElement : TFhirDecimal read FUpperLimit write SetUpperLimit;

    // Typed access to The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
    property dimensions : String read GetDimensionsST write SetDimensionsST;
    // The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
    property dimensionsElement : TFhirPositiveInt read FDimensions write SetDimensions;

    // Typed access to A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
    property data : String read GetDataST write SetDataST;
    // A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
    property dataElement : TFhirString read FData write SetData;

  end;

  TFhirSampledDataListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirSampledDataList;
    function GetCurrent : TFhirSampledData;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirSampledDataList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirSampledData read GetCurrent;
  end;

  TFhirSampledDataList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirSampledData;
    procedure SetItemN(index : Integer; value : TFhirSampledData);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirSampledDataList; overload;
    function Clone : TFhirSampledDataList; overload;
    function GetEnumerator : TFhirSampledDataListEnumerator;
    
    //  Add a FhirSampledData to the end of the list.
    function Append : TFhirSampledData;
    
    // Add an already existing FhirSampledData to the end of the list.
    procedure AddItem(value : TFhirSampledData); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirSampledData) : Integer;
    
    // Insert FhirSampledData before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirSampledData;
    
    // Insert an existing FhirSampledData before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirSampledData);
    
    // Get the iIndexth FhirSampledData. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirSampledData);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirSampledData;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirSampledData[index : Integer] : TFhirSampledData read GetItemN write SetItemN; default;
  End;

  // A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
  TFhirSignature = class (TFhirDataType)
  protected
    Ftype_List : TFhirCodingList;
    FWhen : TFhirInstant;
    FWho : TFhirReference;
    FOnBehalfOf : TFhirReference;
    FTargetFormat : TFhirCode;
    FSigFormat : TFhirCode;
    FData : TFhirBase64Binary;
    function GetType_List : TFhirCodingList;
    function GetHasType_List : Boolean;
    procedure SetWhen(value : TFhirInstant);
    function GetWhenST : TFslDateTime;
    procedure SetWhenST(value : TFslDateTime);
    procedure SetWho(value : TFhirReference);
    procedure SetOnBehalfOf(value : TFhirReference);
    procedure SetTargetFormat(value : TFhirCode);
    function GetTargetFormatST : String;
    procedure SetTargetFormatST(value : String);
    procedure SetSigFormat(value : TFhirCode);
    function GetSigFormatST : String;
    procedure SetSigFormatST(value : String);
    procedure SetData(value : TFhirBase64Binary);
    function GetDataST : TBytes;
    procedure SetDataST(value : TBytes);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirSignature; overload;
    function Clone : TFhirSignature; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
    property type_List : TFhirCodingList read GetType_List;
    property hasType_List : boolean read GetHasType_List;

    // Typed access to When the digital signature was signed.
    property when : TFslDateTime read GetWhenST write SetWhenST;
    // When the digital signature was signed.
    property whenElement : TFhirInstant read FWhen write SetWhen;

    // Typed access to A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key). (defined for API consistency)
    property who : TFhirReference read FWho write SetWho;
    // A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
    property whoElement : TFhirReference read FWho write SetWho;

    // Typed access to A reference to an application-usable description of the identity that is represented by the signature. (defined for API consistency)
    property onBehalfOf : TFhirReference read FOnBehalfOf write SetOnBehalfOf;
    // A reference to an application-usable description of the identity that is represented by the signature.
    property onBehalfOfElement : TFhirReference read FOnBehalfOf write SetOnBehalfOf;

    // Typed access to A mime type that indicates the technical format of the target resources signed by the signature.
    property targetFormat : String read GetTargetFormatST write SetTargetFormatST;
    // A mime type that indicates the technical format of the target resources signed by the signature.
    property targetFormatElement : TFhirCode read FTargetFormat write SetTargetFormat;

    // Typed access to A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
    property sigFormat : String read GetSigFormatST write SetSigFormatST;
    // A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
    property sigFormatElement : TFhirCode read FSigFormat write SetSigFormat;

    // Typed access to The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
    property data : TBytes read GetDataST write SetDataST;
    // The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
    property dataElement : TFhirBase64Binary read FData write SetData;

  end;

  TFhirSignatureListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirSignatureList;
    function GetCurrent : TFhirSignature;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirSignatureList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirSignature read GetCurrent;
  end;

  TFhirSignatureList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirSignature;
    procedure SetItemN(index : Integer; value : TFhirSignature);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirSignatureList; overload;
    function Clone : TFhirSignatureList; overload;
    function GetEnumerator : TFhirSignatureListEnumerator;
    
    //  Add a FhirSignature to the end of the list.
    function Append : TFhirSignature;
    
    // Add an already existing FhirSignature to the end of the list.
    procedure AddItem(value : TFhirSignature); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirSignature) : Integer;
    
    // Insert FhirSignature before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirSignature;
    
    // Insert an existing FhirSignature before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirSignature);
    
    // Get the iIndexth FhirSignature. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirSignature);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirSignature;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirSignatures[index : Integer] : TFhirSignature read GetItemN write SetItemN; default;
  End;

  // A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
  TFhirTriggerDefinition = class (TFhirDataType)
  protected
    FType_ : TFhirEnum;
    FName : TFhirString;
    FTiming : TFhirDataType;
    FdataList : TFhirDataRequirementList;
    FCondition : TFhirExpression;
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirTriggerTypeEnum;
    procedure SetType_ST(value : TFhirTriggerTypeEnum);
    procedure SetName(value : TFhirString);
    function GetNameST : String;
    procedure SetNameST(value : String);
    procedure SetTiming(value : TFhirDataType);
    function GetDataList : TFhirDataRequirementList;
    function GetHasDataList : Boolean;
    procedure SetCondition(value : TFhirExpression);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirTriggerDefinition; overload;
    function Clone : TFhirTriggerDefinition; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // The type of triggering event.
    property type_ : TFhirTriggerTypeEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // Typed access to A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
    property name : String read GetNameST write SetNameST;
    // A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
    property nameElement : TFhirString read FName write SetName;

    // Typed access to The timing of the event (if this is a periodic trigger). (defined for API consistency)
    property timing : TFhirDataType read FTiming write SetTiming;
    // The timing of the event (if this is a periodic trigger).
    property timingElement : TFhirDataType read FTiming write SetTiming;

    // The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
    property dataList : TFhirDataRequirementList read GetDataList;
    property hasDataList : boolean read GetHasDataList;

    // Typed access to A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires. (defined for API consistency)
    property condition : TFhirExpression read FCondition write SetCondition;
    // A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
    property conditionElement : TFhirExpression read FCondition write SetCondition;

  end;

  TFhirTriggerDefinitionListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirTriggerDefinitionList;
    function GetCurrent : TFhirTriggerDefinition;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirTriggerDefinitionList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirTriggerDefinition read GetCurrent;
  end;

  TFhirTriggerDefinitionList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirTriggerDefinition;
    procedure SetItemN(index : Integer; value : TFhirTriggerDefinition);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirTriggerDefinitionList; overload;
    function Clone : TFhirTriggerDefinitionList; overload;
    function GetEnumerator : TFhirTriggerDefinitionListEnumerator;
    
    //  Add a FhirTriggerDefinition to the end of the list.
    function Append : TFhirTriggerDefinition;
    
    // Add an already existing FhirTriggerDefinition to the end of the list.
    procedure AddItem(value : TFhirTriggerDefinition); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirTriggerDefinition) : Integer;
    
    // Insert FhirTriggerDefinition before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirTriggerDefinition;
    
    // Insert an existing FhirTriggerDefinition before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirTriggerDefinition);
    
    // Get the iIndexth FhirTriggerDefinition. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirTriggerDefinition);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirTriggerDefinition;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirTriggerDefinitions[index : Integer] : TFhirTriggerDefinition read GetItemN write SetItemN; default;
  End;

  // Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
  TFhirUsageContext = class (TFhirDataType)
  protected
    FCode : TFhirCoding;
    FValue : TFhirDataType;
    procedure SetCode(value : TFhirCoding);
    procedure SetValue(value : TFhirDataType);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirUsageContext; overload;
    function Clone : TFhirUsageContext; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to A code that identifies the type of context being specified by this usage context. (defined for API consistency)
    property code : TFhirCoding read FCode write SetCode;
    // A code that identifies the type of context being specified by this usage context.
    property codeElement : TFhirCoding read FCode write SetCode;

    // Typed access to A value that defines the context specified in this context of use. The interpretation of the value is defined by the code. (defined for API consistency)
    property value : TFhirDataType read FValue write SetValue;
    // A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.
    property valueElement : TFhirDataType read FValue write SetValue;

  end;

  TFhirUsageContextListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirUsageContextList;
    function GetCurrent : TFhirUsageContext;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirUsageContextList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirUsageContext read GetCurrent;
  end;

  TFhirUsageContextList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirUsageContext;
    procedure SetItemN(index : Integer; value : TFhirUsageContext);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirUsageContextList; overload;
    function Clone : TFhirUsageContextList; overload;
    function GetEnumerator : TFhirUsageContextListEnumerator;
    
    //  Add a FhirUsageContext to the end of the list.
    function Append : TFhirUsageContext;
    
    // Add an already existing FhirUsageContext to the end of the list.
    procedure AddItem(value : TFhirUsageContext); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirUsageContext) : Integer;
    
    // Insert FhirUsageContext before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirUsageContext;
    
    // Insert an existing FhirUsageContext before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirUsageContext);
    
    // Get the iIndexth FhirUsageContext. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirUsageContext);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirUsageContext;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirUsageContexts[index : Integer] : TFhirUsageContext read GetItemN write SetItemN; default;
  End;

  // A duration of time during which an organism (or a process) has existed.
  TFhirAge = class (TFhirQuantity)
  protected
  
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    function Link : TFhirAge; overload;
    function Clone : TFhirAge; overload;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
  end;

  TFhirAgeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirAgeList;
    function GetCurrent : TFhirAge;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirAgeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirAge read GetCurrent;
  end;

  TFhirAgeList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirAge;
    procedure SetItemN(index : Integer; value : TFhirAge);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirAgeList; overload;
    function Clone : TFhirAgeList; overload;
    function GetEnumerator : TFhirAgeListEnumerator;
    
    //  Add a FhirAge to the end of the list.
    function Append : TFhirAge;
    
    // Add an already existing FhirAge to the end of the list.
    procedure AddItem(value : TFhirAge); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirAge) : Integer;
    
    // Insert FhirAge before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirAge;
    
    // Insert an existing FhirAge before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirAge);
    
    // Get the iIndexth FhirAge. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirAge);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirAge;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirAges[index : Integer] : TFhirAge read GetItemN write SetItemN; default;
  End;

  // A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
  TFhirCount = class (TFhirQuantity)
  protected
  
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    function Link : TFhirCount; overload;
    function Clone : TFhirCount; overload;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
  end;

  TFhirCountListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirCountList;
    function GetCurrent : TFhirCount;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirCountList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirCount read GetCurrent;
  end;

  TFhirCountList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirCount;
    procedure SetItemN(index : Integer; value : TFhirCount);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirCountList; overload;
    function Clone : TFhirCountList; overload;
    function GetEnumerator : TFhirCountListEnumerator;
    
    //  Add a FhirCount to the end of the list.
    function Append : TFhirCount;
    
    // Add an already existing FhirCount to the end of the list.
    procedure AddItem(value : TFhirCount); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirCount) : Integer;
    
    // Insert FhirCount before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirCount;
    
    // Insert an existing FhirCount before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirCount);
    
    // Get the iIndexth FhirCount. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirCount);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirCount;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirCounts[index : Integer] : TFhirCount read GetItemN write SetItemN; default;
  End;

  // A length - a value with a unit that is a physical distance.
  TFhirDistance = class (TFhirQuantity)
  protected
  
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    function Link : TFhirDistance; overload;
    function Clone : TFhirDistance; overload;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
  end;

  TFhirDistanceListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDistanceList;
    function GetCurrent : TFhirDistance;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDistanceList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDistance read GetCurrent;
  end;

  TFhirDistanceList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDistance;
    procedure SetItemN(index : Integer; value : TFhirDistance);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDistanceList; overload;
    function Clone : TFhirDistanceList; overload;
    function GetEnumerator : TFhirDistanceListEnumerator;
    
    //  Add a FhirDistance to the end of the list.
    function Append : TFhirDistance;
    
    // Add an already existing FhirDistance to the end of the list.
    procedure AddItem(value : TFhirDistance); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDistance) : Integer;
    
    // Insert FhirDistance before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDistance;
    
    // Insert an existing FhirDistance before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDistance);
    
    // Get the iIndexth FhirDistance. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDistance);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDistance;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDistances[index : Integer] : TFhirDistance read GetItemN write SetItemN; default;
  End;

  // The amount of medication administered.
  TFhirDosageDoseAndRate = class (TFhirElement)
  protected
    FType_ : TFhirCodeableConcept;
    FDose : TFhirDataType;
    FRate : TFhirDataType;
    procedure SetType_(value : TFhirCodeableConcept);
    procedure SetDose(value : TFhirDataType);
    procedure SetRate(value : TFhirDataType);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirDosageDoseAndRate; overload;
    function Clone : TFhirDosageDoseAndRate; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The kind of dose or rate specified, for example, ordered or calculated. (defined for API consistency)
    property type_ : TFhirCodeableConcept read FType_ write SetType_;
    // The kind of dose or rate specified, for example, ordered or calculated.
    property type_Element : TFhirCodeableConcept read FType_ write SetType_;

    // Typed access to Amount of medication per dose. (defined for API consistency)
    property dose : TFhirDataType read FDose write SetDose;
    // Amount of medication per dose.
    property doseElement : TFhirDataType read FDose write SetDose;

    // Typed access to Amount of medication per unit of time. (defined for API consistency)
    property rate : TFhirDataType read FRate write SetRate;
    // Amount of medication per unit of time.
    property rateElement : TFhirDataType read FRate write SetRate;

  end;

  TFhirDosageDoseAndRateListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDosageDoseAndRateList;
    function GetCurrent : TFhirDosageDoseAndRate;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDosageDoseAndRateList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDosageDoseAndRate read GetCurrent;
  end;

  TFhirDosageDoseAndRateList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDosageDoseAndRate;
    procedure SetItemN(index : Integer; value : TFhirDosageDoseAndRate);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDosageDoseAndRateList; overload;
    function Clone : TFhirDosageDoseAndRateList; overload;
    function GetEnumerator : TFhirDosageDoseAndRateListEnumerator;
    
    //  Add a FhirDosageDoseAndRate to the end of the list.
    function Append : TFhirDosageDoseAndRate;
    
    // Add an already existing FhirDosageDoseAndRate to the end of the list.
    procedure AddItem(value : TFhirDosageDoseAndRate); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDosageDoseAndRate) : Integer;
    
    // Insert FhirDosageDoseAndRate before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDosageDoseAndRate;
    
    // Insert an existing FhirDosageDoseAndRate before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDosageDoseAndRate);
    
    // Get the iIndexth FhirDosageDoseAndRate. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDosageDoseAndRate);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDosageDoseAndRate;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDosageDoseAndRates[index : Integer] : TFhirDosageDoseAndRate read GetItemN write SetItemN; default;
  End;

  // Indicates how the medication is/was taken or should be taken by the patient.
  TFhirDosage = class (TFhirBackboneType)
  protected
    FSequence : TFhirInteger;
    FText : TFhirString;
    FadditionalInstructionList : TFhirCodeableConceptList;
    FPatientInstruction : TFhirString;
    FTiming : TFhirTiming;
    FAsNeeded : TFhirDataType;
    FSite : TFhirCodeableConcept;
    FRoute : TFhirCodeableConcept;
    FMethod : TFhirCodeableConcept;
    FdoseAndRateList : TFhirDosageDoseAndRateList;
    FMaxDosePerPeriod : TFhirRatio;
    FMaxDosePerAdministration : TFhirQuantity;
    FMaxDosePerLifetime : TFhirQuantity;
    procedure SetSequence(value : TFhirInteger);
    function GetSequenceST : String;
    procedure SetSequenceST(value : String);
    procedure SetText(value : TFhirString);
    function GetTextST : String;
    procedure SetTextST(value : String);
    function GetAdditionalInstructionList : TFhirCodeableConceptList;
    function GetHasAdditionalInstructionList : Boolean;
    procedure SetPatientInstruction(value : TFhirString);
    function GetPatientInstructionST : String;
    procedure SetPatientInstructionST(value : String);
    procedure SetTiming(value : TFhirTiming);
    procedure SetAsNeeded(value : TFhirDataType);
    procedure SetSite(value : TFhirCodeableConcept);
    procedure SetRoute(value : TFhirCodeableConcept);
    procedure SetMethod(value : TFhirCodeableConcept);
    function GetDoseAndRateList : TFhirDosageDoseAndRateList;
    function GetHasDoseAndRateList : Boolean;
    procedure SetMaxDosePerPeriod(value : TFhirRatio);
    procedure SetMaxDosePerAdministration(value : TFhirQuantity);
    procedure SetMaxDosePerLifetime(value : TFhirQuantity);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirDosage; overload;
    function Clone : TFhirDosage; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Indicates the order in which the dosage instructions should be applied or interpreted.
    property sequence : String read GetSequenceST write SetSequenceST;
    // Indicates the order in which the dosage instructions should be applied or interpreted.
    property sequenceElement : TFhirInteger read FSequence write SetSequence;

    // Typed access to Free text dosage instructions e.g. SIG.
    property text : String read GetTextST write SetTextST;
    // Free text dosage instructions e.g. SIG.
    property textElement : TFhirString read FText write SetText;

    // Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
    property additionalInstructionList : TFhirCodeableConceptList read GetAdditionalInstructionList;
    property hasAdditionalInstructionList : boolean read GetHasAdditionalInstructionList;

    // Typed access to Instructions in terms that are understood by the patient or consumer.
    property patientInstruction : String read GetPatientInstructionST write SetPatientInstructionST;
    // Instructions in terms that are understood by the patient or consumer.
    property patientInstructionElement : TFhirString read FPatientInstruction write SetPatientInstruction;

    // Typed access to When medication should be administered. (defined for API consistency)
    property timing : TFhirTiming read FTiming write SetTiming;
    // When medication should be administered.
    property timingElement : TFhirTiming read FTiming write SetTiming;

    // Typed access to Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept). (defined for API consistency)
    property asNeeded : TFhirDataType read FAsNeeded write SetAsNeeded;
    // Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
    property asNeededElement : TFhirDataType read FAsNeeded write SetAsNeeded;

    // Typed access to Body site to administer to. (defined for API consistency)
    property site : TFhirCodeableConcept read FSite write SetSite;
    // Body site to administer to.
    property siteElement : TFhirCodeableConcept read FSite write SetSite;

    // Typed access to How drug should enter body. (defined for API consistency)
    property route : TFhirCodeableConcept read FRoute write SetRoute;
    // How drug should enter body.
    property routeElement : TFhirCodeableConcept read FRoute write SetRoute;

    // Typed access to Technique for administering medication. (defined for API consistency)
    property method : TFhirCodeableConcept read FMethod write SetMethod;
    // Technique for administering medication.
    property methodElement : TFhirCodeableConcept read FMethod write SetMethod;

    // The amount of medication administered.
    property doseAndRateList : TFhirDosageDoseAndRateList read GetDoseAndRateList;
    property hasDoseAndRateList : boolean read GetHasDoseAndRateList;

    // Typed access to Upper limit on medication per unit of time. (defined for API consistency)
    property maxDosePerPeriod : TFhirRatio read FMaxDosePerPeriod write SetMaxDosePerPeriod;
    // Upper limit on medication per unit of time.
    property maxDosePerPeriodElement : TFhirRatio read FMaxDosePerPeriod write SetMaxDosePerPeriod;

    // Typed access to Upper limit on medication per administration. (defined for API consistency)
    property maxDosePerAdministration : TFhirQuantity read FMaxDosePerAdministration write SetMaxDosePerAdministration;
    // Upper limit on medication per administration.
    property maxDosePerAdministrationElement : TFhirQuantity read FMaxDosePerAdministration write SetMaxDosePerAdministration;

    // Typed access to Upper limit on medication per lifetime of the patient. (defined for API consistency)
    property maxDosePerLifetime : TFhirQuantity read FMaxDosePerLifetime write SetMaxDosePerLifetime;
    // Upper limit on medication per lifetime of the patient.
    property maxDosePerLifetimeElement : TFhirQuantity read FMaxDosePerLifetime write SetMaxDosePerLifetime;

  end;

  TFhirDosageListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDosageList;
    function GetCurrent : TFhirDosage;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDosageList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDosage read GetCurrent;
  end;

  TFhirDosageList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDosage;
    procedure SetItemN(index : Integer; value : TFhirDosage);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDosageList; overload;
    function Clone : TFhirDosageList; overload;
    function GetEnumerator : TFhirDosageListEnumerator;
    
    //  Add a FhirDosage to the end of the list.
    function Append : TFhirDosage;
    
    // Add an already existing FhirDosage to the end of the list.
    procedure AddItem(value : TFhirDosage); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDosage) : Integer;
    
    // Insert FhirDosage before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDosage;
    
    // Insert an existing FhirDosage before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDosage);
    
    // Get the iIndexth FhirDosage. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDosage);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDosage;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDosages[index : Integer] : TFhirDosage read GetItemN write SetItemN; default;
  End;

  // A length of time.
  TFhirDuration = class (TFhirQuantity)
  protected
  
    procedure listFieldsInOrder(fields : TStringList); override;
  public
    function Link : TFhirDuration; overload;
    function Clone : TFhirDuration; overload;
    function fhirType : string; override;
  {$IFNDEF FPC}published{$ENDIF}
  end;

  TFhirDurationListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirDurationList;
    function GetCurrent : TFhirDuration;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirDurationList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirDuration read GetCurrent;
  end;

  TFhirDurationList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirDuration;
    procedure SetItemN(index : Integer; value : TFhirDuration);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirDurationList; overload;
    function Clone : TFhirDurationList; overload;
    function GetEnumerator : TFhirDurationListEnumerator;
    
    //  Add a FhirDuration to the end of the list.
    function Append : TFhirDuration;
    
    // Add an already existing FhirDuration to the end of the list.
    procedure AddItem(value : TFhirDuration); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirDuration) : Integer;
    
    // Insert FhirDuration before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirDuration;
    
    // Insert an existing FhirDuration before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirDuration);
    
    // Get the iIndexth FhirDuration. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirDuration);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirDuration;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirDurations[index : Integer] : TFhirDuration read GetItemN write SetItemN; default;
  End;

  // Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
  TFhirElementDefinitionSlicing = class (TFhirElement)
  protected
    FdiscriminatorList : TFhirElementDefinitionSlicingDiscriminatorList;
    FDescription : TFhirString;
    FOrdered : TFhirBoolean;
    FRules : TFhirEnum;
    function GetDiscriminatorList : TFhirElementDefinitionSlicingDiscriminatorList;
    function GetHasDiscriminatorList : Boolean;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    procedure SetOrdered(value : TFhirBoolean);
    function GetOrderedST : Boolean;
    procedure SetOrderedST(value : Boolean);
    procedure SetRules(value : TFhirEnum);
    function GetRulesST : TFhirSlicingRulesEnum;
    procedure SetRulesST(value : TFhirSlicingRulesEnum);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionSlicing; overload;
    function Clone : TFhirElementDefinitionSlicing; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
    property discriminatorList : TFhirElementDefinitionSlicingDiscriminatorList read GetDiscriminatorList;
    property hasDiscriminatorList : boolean read GetHasDiscriminatorList;

    // Typed access to A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
    property description : String read GetDescriptionST write SetDescriptionST;
    // A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Typed access to If the matching elements have to occur in the same order as defined in the profile.
    property ordered : Boolean read GetOrderedST write SetOrderedST;
    // If the matching elements have to occur in the same order as defined in the profile.
    property orderedElement : TFhirBoolean read FOrdered write SetOrdered;

    // Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
    property rules : TFhirSlicingRulesEnum read GetRulesST write SetRulesST;
    property rulesElement : TFhirEnum read FRules write SetRules;

  end;

  TFhirElementDefinitionSlicingListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionSlicingList;
    function GetCurrent : TFhirElementDefinitionSlicing;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionSlicingList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionSlicing read GetCurrent;
  end;

  TFhirElementDefinitionSlicingList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionSlicing;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionSlicing);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionSlicingList; overload;
    function Clone : TFhirElementDefinitionSlicingList; overload;
    function GetEnumerator : TFhirElementDefinitionSlicingListEnumerator;
    
    //  Add a FhirElementDefinitionSlicing to the end of the list.
    function Append : TFhirElementDefinitionSlicing;
    
    // Add an already existing FhirElementDefinitionSlicing to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionSlicing); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionSlicing) : Integer;
    
    // Insert FhirElementDefinitionSlicing before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionSlicing;
    
    // Insert an existing FhirElementDefinitionSlicing before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionSlicing);
    
    // Get the iIndexth FhirElementDefinitionSlicing. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionSlicing);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionSlicing;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionSlicings[index : Integer] : TFhirElementDefinitionSlicing read GetItemN write SetItemN; default;
  End;

  // Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
  TFhirElementDefinitionSlicingDiscriminator = class (TFhirElement)
  protected
    FType_ : TFhirEnum;
    FPath : TFhirString;
    procedure SetType_(value : TFhirEnum);
    function GetType_ST : TFhirDiscriminatorTypeEnum;
    procedure SetType_ST(value : TFhirDiscriminatorTypeEnum);
    procedure SetPath(value : TFhirString);
    function GetPathST : String;
    procedure SetPathST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionSlicingDiscriminator; overload;
    function Clone : TFhirElementDefinitionSlicingDiscriminator; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // How the element value is interpreted when discrimination is evaluated.
    property type_ : TFhirDiscriminatorTypeEnum read GetType_ST write SetType_ST;
    property type_Element : TFhirEnum read FType_ write SetType_;

    // Typed access to A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
    property path : String read GetPathST write SetPathST;
    // A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
    property pathElement : TFhirString read FPath write SetPath;

  end;

  TFhirElementDefinitionSlicingDiscriminatorListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionSlicingDiscriminatorList;
    function GetCurrent : TFhirElementDefinitionSlicingDiscriminator;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionSlicingDiscriminatorList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionSlicingDiscriminator read GetCurrent;
  end;

  TFhirElementDefinitionSlicingDiscriminatorList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionSlicingDiscriminator;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionSlicingDiscriminator);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionSlicingDiscriminatorList; overload;
    function Clone : TFhirElementDefinitionSlicingDiscriminatorList; overload;
    function GetEnumerator : TFhirElementDefinitionSlicingDiscriminatorListEnumerator;
    
    //  Add a FhirElementDefinitionSlicingDiscriminator to the end of the list.
    function Append : TFhirElementDefinitionSlicingDiscriminator;
    
    // Add an already existing FhirElementDefinitionSlicingDiscriminator to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionSlicingDiscriminator); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionSlicingDiscriminator) : Integer;
    
    // Insert FhirElementDefinitionSlicingDiscriminator before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionSlicingDiscriminator;
    
    // Insert an existing FhirElementDefinitionSlicingDiscriminator before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionSlicingDiscriminator);
    
    // Get the iIndexth FhirElementDefinitionSlicingDiscriminator. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionSlicingDiscriminator);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionSlicingDiscriminator;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionSlicingDiscriminators[index : Integer] : TFhirElementDefinitionSlicingDiscriminator read GetItemN write SetItemN; default;
  End;

  // Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
  TFhirElementDefinitionBase = class (TFhirElement)
  protected
    FPath : TFhirString;
    FMin : TFhirUnsignedInt;
    FMax : TFhirString;
    procedure SetPath(value : TFhirString);
    function GetPathST : String;
    procedure SetPathST(value : String);
    procedure SetMin(value : TFhirUnsignedInt);
    function GetMinST : String;
    procedure SetMinST(value : String);
    procedure SetMax(value : TFhirString);
    function GetMaxST : String;
    procedure SetMaxST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionBase; overload;
    function Clone : TFhirElementDefinitionBase; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
    property path : String read GetPathST write SetPathST;
    // The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
    property pathElement : TFhirString read FPath write SetPath;

    // Typed access to Minimum cardinality of the base element identified by the path.
    property min : String read GetMinST write SetMinST;
    // Minimum cardinality of the base element identified by the path.
    property minElement : TFhirUnsignedInt read FMin write SetMin;

    // Typed access to Maximum cardinality of the base element identified by the path.
    property max : String read GetMaxST write SetMaxST;
    // Maximum cardinality of the base element identified by the path.
    property maxElement : TFhirString read FMax write SetMax;

  end;

  TFhirElementDefinitionBaseListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionBaseList;
    function GetCurrent : TFhirElementDefinitionBase;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionBaseList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionBase read GetCurrent;
  end;

  TFhirElementDefinitionBaseList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionBase;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionBase);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionBaseList; overload;
    function Clone : TFhirElementDefinitionBaseList; overload;
    function GetEnumerator : TFhirElementDefinitionBaseListEnumerator;
    
    //  Add a FhirElementDefinitionBase to the end of the list.
    function Append : TFhirElementDefinitionBase;
    
    // Add an already existing FhirElementDefinitionBase to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionBase); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionBase) : Integer;
    
    // Insert FhirElementDefinitionBase before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionBase;
    
    // Insert an existing FhirElementDefinitionBase before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionBase);
    
    // Get the iIndexth FhirElementDefinitionBase. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionBase);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionBase;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionBases[index : Integer] : TFhirElementDefinitionBase read GetItemN write SetItemN; default;
  End;

  // The data type or resource that the value of this element is permitted to be.
  TFhirElementDefinitionType = class (TFhirElement)
  protected
    FCode : TFhirUri;
    FprofileList : TFhirCanonicalList;
    FtargetProfileList : TFhirCanonicalList;
    FAggregation : TFhirEnumList;
    FVersioning : TFhirEnum;
    procedure SetCode(value : TFhirUri);
    function GetCodeST : String;
    procedure SetCodeST(value : String);
    function GetProfileList : TFhirCanonicalList;
    function GetHasProfileList : Boolean;
    function GetTargetProfileList : TFhirCanonicalList;
    function GetHasTargetProfileList : Boolean;
    function GetAggregation : TFhirEnumList;
    function GetHasAggregation : Boolean;
    function GetAggregationST : TFhirAggregationModeEnumList;
    procedure SetAggregationST(value : TFhirAggregationModeEnumList);
    procedure SetVersioning(value : TFhirEnum);
    function GetVersioningST : TFhirReferenceVersionRulesEnum;
    procedure SetVersioningST(value : TFhirReferenceVersionRulesEnum);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionType; overload;
    function Clone : TFhirElementDefinitionType; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
    property code : String read GetCodeST write SetCodeST;
    // URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
    property codeElement : TFhirUri read FCode write SetCode;

    // Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
    property profileList : TFhirCanonicalList read GetProfileList;
    property hasProfileList : boolean read GetHasProfileList;

    // Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
    property targetProfileList : TFhirCanonicalList read GetTargetProfileList;
    property hasTargetProfileList : boolean read GetHasTargetProfileList;

    // If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
    property aggregation : TFhirAggregationModeEnumList read GetAggregationST write SetAggregationST;
    property aggregationList : TFhirEnumList read GetAggregation;
    property hasAggregation : boolean read GetHasAggregation;
    // Whether this reference needs to be version specific or version independent, or whether either can be used.
    property versioning : TFhirReferenceVersionRulesEnum read GetVersioningST write SetVersioningST;
    property versioningElement : TFhirEnum read FVersioning write SetVersioning;

  end;

  TFhirElementDefinitionTypeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionTypeList;
    function GetCurrent : TFhirElementDefinitionType;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionTypeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionType read GetCurrent;
  end;

  TFhirElementDefinitionTypeList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionType;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionType);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionTypeList; overload;
    function Clone : TFhirElementDefinitionTypeList; overload;
    function GetEnumerator : TFhirElementDefinitionTypeListEnumerator;
    
    //  Add a FhirElementDefinitionType to the end of the list.
    function Append : TFhirElementDefinitionType;
    
    // Add an already existing FhirElementDefinitionType to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionType); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionType) : Integer;
    
    // Insert FhirElementDefinitionType before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionType;
    
    // Insert an existing FhirElementDefinitionType before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionType);
    
    // Get the iIndexth FhirElementDefinitionType. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionType);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionType;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionTypes[index : Integer] : TFhirElementDefinitionType read GetItemN write SetItemN; default;
  End;

  // A sample value for this element demonstrating the type of information that would typically be found in the element.
  TFhirElementDefinitionExample = class (TFhirElement)
  protected
    FLabel_ : TFhirString;
    FValue : TFhirDataType;
    procedure SetLabel_(value : TFhirString);
    function GetLabel_ST : String;
    procedure SetLabel_ST(value : String);
    procedure SetValue(value : TFhirDataType);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionExample; overload;
    function Clone : TFhirElementDefinitionExample; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Describes the purpose of this example amoung the set of examples.
    property label_ : String read GetLabel_ST write SetLabel_ST;
    // Describes the purpose of this example amoung the set of examples.
    property label_Element : TFhirString read FLabel_ write SetLabel_;

    // Typed access to The actual value for the element, which must be one of the types allowed for this element. (defined for API consistency)
    property value : TFhirDataType read FValue write SetValue;
    // The actual value for the element, which must be one of the types allowed for this element.
    property valueElement : TFhirDataType read FValue write SetValue;

  end;

  TFhirElementDefinitionExampleListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionExampleList;
    function GetCurrent : TFhirElementDefinitionExample;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionExampleList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionExample read GetCurrent;
  end;

  TFhirElementDefinitionExampleList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionExample;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionExample);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionExampleList; overload;
    function Clone : TFhirElementDefinitionExampleList; overload;
    function GetEnumerator : TFhirElementDefinitionExampleListEnumerator;
    
    //  Add a FhirElementDefinitionExample to the end of the list.
    function Append : TFhirElementDefinitionExample;
    
    // Add an already existing FhirElementDefinitionExample to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionExample); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionExample) : Integer;
    
    // Insert FhirElementDefinitionExample before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionExample;
    
    // Insert an existing FhirElementDefinitionExample before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionExample);
    
    // Get the iIndexth FhirElementDefinitionExample. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionExample);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionExample;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionExamples[index : Integer] : TFhirElementDefinitionExample read GetItemN write SetItemN; default;
  End;

  // Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
  TFhirElementDefinitionConstraint = class (TFhirElement)
  protected
    FKey : TFhirId;
    FRequirements : TFhirString;
    FSeverity : TFhirEnum;
    FHuman : TFhirString;
    FExpression : TFhirString;
    FXpath : TFhirString;
    FSource : TFhirCanonical;
    procedure SetKey(value : TFhirId);
    function GetKeyST : String;
    procedure SetKeyST(value : String);
    procedure SetRequirements(value : TFhirString);
    function GetRequirementsST : String;
    procedure SetRequirementsST(value : String);
    procedure SetSeverity(value : TFhirEnum);
    function GetSeverityST : TFhirConstraintSeverityEnum;
    procedure SetSeverityST(value : TFhirConstraintSeverityEnum);
    procedure SetHuman(value : TFhirString);
    function GetHumanST : String;
    procedure SetHumanST(value : String);
    procedure SetExpression(value : TFhirString);
    function GetExpressionST : String;
    procedure SetExpressionST(value : String);
    procedure SetXpath(value : TFhirString);
    function GetXpathST : String;
    procedure SetXpathST(value : String);
    procedure SetSource(value : TFhirCanonical);
    function GetSourceST : String;
    procedure SetSourceST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionConstraint; overload;
    function Clone : TFhirElementDefinitionConstraint; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
    property key : String read GetKeyST write SetKeyST;
    // Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
    property keyElement : TFhirId read FKey write SetKey;

    // Typed access to Description of why this constraint is necessary or appropriate.
    property requirements : String read GetRequirementsST write SetRequirementsST;
    // Description of why this constraint is necessary or appropriate.
    property requirementsElement : TFhirString read FRequirements write SetRequirements;

    // Identifies the impact constraint violation has on the conformance of the instance.
    property severity : TFhirConstraintSeverityEnum read GetSeverityST write SetSeverityST;
    property severityElement : TFhirEnum read FSeverity write SetSeverity;

    // Typed access to Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
    property human : String read GetHumanST write SetHumanST;
    // Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
    property humanElement : TFhirString read FHuman write SetHuman;

    // Typed access to A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
    property expression : String read GetExpressionST write SetExpressionST;
    // A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
    property expressionElement : TFhirString read FExpression write SetExpression;

    // Typed access to An XPath expression of constraint that can be executed to see if this constraint is met.
    property xpath : String read GetXpathST write SetXpathST;
    // An XPath expression of constraint that can be executed to see if this constraint is met.
    property xpathElement : TFhirString read FXpath write SetXpath;

    // Typed access to A reference to the original source of the constraint, for traceability purposes.
    property source : String read GetSourceST write SetSourceST;
    // A reference to the original source of the constraint, for traceability purposes.
    property sourceElement : TFhirCanonical read FSource write SetSource;

  end;

  TFhirElementDefinitionConstraintListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionConstraintList;
    function GetCurrent : TFhirElementDefinitionConstraint;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionConstraintList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionConstraint read GetCurrent;
  end;

  TFhirElementDefinitionConstraintList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionConstraint;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionConstraint);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionConstraintList; overload;
    function Clone : TFhirElementDefinitionConstraintList; overload;
    function GetEnumerator : TFhirElementDefinitionConstraintListEnumerator;
    
    //  Add a FhirElementDefinitionConstraint to the end of the list.
    function Append : TFhirElementDefinitionConstraint;
    
    // Add an already existing FhirElementDefinitionConstraint to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionConstraint); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionConstraint) : Integer;
    
    // Insert FhirElementDefinitionConstraint before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionConstraint;
    
    // Insert an existing FhirElementDefinitionConstraint before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionConstraint);
    
    // Get the iIndexth FhirElementDefinitionConstraint. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionConstraint);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionConstraint;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionConstraints[index : Integer] : TFhirElementDefinitionConstraint read GetItemN write SetItemN; default;
  End;

  // Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
  TFhirElementDefinitionBinding = class (TFhirElement)
  protected
    FStrength : TFhirEnum;
    FDescription : TFhirString;
    FValueSet : TFhirCanonical;
    procedure SetStrength(value : TFhirEnum);
    function GetStrengthST : TFhirBindingStrengthEnum;
    procedure SetStrengthST(value : TFhirBindingStrengthEnum);
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    procedure SetValueSet(value : TFhirCanonical);
    function GetValueSetST : String;
    procedure SetValueSetST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionBinding; overload;
    function Clone : TFhirElementDefinitionBinding; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
    property strength : TFhirBindingStrengthEnum read GetStrengthST write SetStrengthST;
    property strengthElement : TFhirEnum read FStrength write SetStrength;

    // Typed access to Describes the intended use of this particular set of codes.
    property description : String read GetDescriptionST write SetDescriptionST;
    // Describes the intended use of this particular set of codes.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Typed access to Refers to the value set that identifies the set of codes the binding refers to.
    property valueSet : String read GetValueSetST write SetValueSetST;
    // Refers to the value set that identifies the set of codes the binding refers to.
    property valueSetElement : TFhirCanonical read FValueSet write SetValueSet;

  end;

  TFhirElementDefinitionBindingListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionBindingList;
    function GetCurrent : TFhirElementDefinitionBinding;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionBindingList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionBinding read GetCurrent;
  end;

  TFhirElementDefinitionBindingList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionBinding;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionBinding);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionBindingList; overload;
    function Clone : TFhirElementDefinitionBindingList; overload;
    function GetEnumerator : TFhirElementDefinitionBindingListEnumerator;
    
    //  Add a FhirElementDefinitionBinding to the end of the list.
    function Append : TFhirElementDefinitionBinding;
    
    // Add an already existing FhirElementDefinitionBinding to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionBinding); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionBinding) : Integer;
    
    // Insert FhirElementDefinitionBinding before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionBinding;
    
    // Insert an existing FhirElementDefinitionBinding before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionBinding);
    
    // Get the iIndexth FhirElementDefinitionBinding. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionBinding);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionBinding;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionBindings[index : Integer] : TFhirElementDefinitionBinding read GetItemN write SetItemN; default;
  End;

  // Identifies a concept from an external specification that roughly corresponds to this element.
  TFhirElementDefinitionMapping = class (TFhirElement)
  protected
    FIdentity : TFhirId;
    FLanguage : TFhirCode;
    FMap : TFhirString;
    FComment : TFhirString;
    procedure SetIdentity(value : TFhirId);
    function GetIdentityST : String;
    procedure SetIdentityST(value : String);
    procedure SetLanguage(value : TFhirCode);
    function GetLanguageST : String;
    procedure SetLanguageST(value : String);
    procedure SetMap(value : TFhirString);
    function GetMapST : String;
    procedure SetMapST(value : String);
    procedure SetComment(value : TFhirString);
    function GetCommentST : String;
    procedure SetCommentST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinitionMapping; overload;
    function Clone : TFhirElementDefinitionMapping; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to An internal reference to the definition of a mapping.
    property identity : String read GetIdentityST write SetIdentityST;
    // An internal reference to the definition of a mapping.
    property identityElement : TFhirId read FIdentity write SetIdentity;

    // Typed access to Identifies the computable language in which mapping.map is expressed.
    property language : String read GetLanguageST write SetLanguageST;
    // Identifies the computable language in which mapping.map is expressed.
    property languageElement : TFhirCode read FLanguage write SetLanguage;

    // Typed access to Expresses what part of the target specification corresponds to this element.
    property map : String read GetMapST write SetMapST;
    // Expresses what part of the target specification corresponds to this element.
    property mapElement : TFhirString read FMap write SetMap;

    // Typed access to Comments that provide information about the mapping or its use.
    property comment : String read GetCommentST write SetCommentST;
    // Comments that provide information about the mapping or its use.
    property commentElement : TFhirString read FComment write SetComment;

  end;

  TFhirElementDefinitionMappingListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionMappingList;
    function GetCurrent : TFhirElementDefinitionMapping;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionMappingList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinitionMapping read GetCurrent;
  end;

  TFhirElementDefinitionMappingList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinitionMapping;
    procedure SetItemN(index : Integer; value : TFhirElementDefinitionMapping);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionMappingList; overload;
    function Clone : TFhirElementDefinitionMappingList; overload;
    function GetEnumerator : TFhirElementDefinitionMappingListEnumerator;
    
    //  Add a FhirElementDefinitionMapping to the end of the list.
    function Append : TFhirElementDefinitionMapping;
    
    // Add an already existing FhirElementDefinitionMapping to the end of the list.
    procedure AddItem(value : TFhirElementDefinitionMapping); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinitionMapping) : Integer;
    
    // Insert FhirElementDefinitionMapping before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinitionMapping;
    
    // Insert an existing FhirElementDefinitionMapping before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinitionMapping);
    
    // Get the iIndexth FhirElementDefinitionMapping. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinitionMapping);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinitionMapping;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitionMappings[index : Integer] : TFhirElementDefinitionMapping read GetItemN write SetItemN; default;
  End;

  // Captures constraints on each element within the resource, profile, or extension.
  TFhirElementDefinition = class (TFhirBackboneType)
  protected
    FPath : TFhirString;
    FRepresentation : TFhirEnumList;
    FSliceName : TFhirString;
    FSliceIsConstraining : TFhirBoolean;
    FLabel_ : TFhirString;
    FcodeList : TFhirCodingList;
    FSlicing : TFhirElementDefinitionSlicing;
    FShort : TFhirString;
    FDefinition : TFhirMarkdown;
    FComment : TFhirMarkdown;
    FRequirements : TFhirMarkdown;
    FaliasList : TFhirStringList;
    FMin : TFhirUnsignedInt;
    FMax : TFhirString;
    FBase : TFhirElementDefinitionBase;
    FContentReference : TFhirUri;
    Ftype_List : TFhirElementDefinitionTypeList;
    FDefaultValue : TFhirDataType;
    FMeaningWhenMissing : TFhirMarkdown;
    FOrderMeaning : TFhirString;
    FFixed : TFhirDataType;
    FPattern : TFhirDataType;
    FexampleList : TFhirElementDefinitionExampleList;
    FMinValue : TFhirDataType;
    FMaxValue : TFhirDataType;
    FMaxLength : TFhirInteger;
    FconditionList : TFhirIdList;
    FconstraintList : TFhirElementDefinitionConstraintList;
    FMustSupport : TFhirBoolean;
    FIsModifier : TFhirBoolean;
    FIsModifierReason : TFhirString;
    FIsSummary : TFhirBoolean;
    FBinding : TFhirElementDefinitionBinding;
    FmappingList : TFhirElementDefinitionMappingList;
    procedure SetPath(value : TFhirString);
    function GetPathST : String;
    procedure SetPathST(value : String);
    function GetRepresentation : TFhirEnumList;
    function GetHasRepresentation : Boolean;
    function GetRepresentationST : TFhirPropertyRepresentationEnumList;
    procedure SetRepresentationST(value : TFhirPropertyRepresentationEnumList);
    procedure SetSliceName(value : TFhirString);
    function GetSliceNameST : String;
    procedure SetSliceNameST(value : String);
    procedure SetSliceIsConstraining(value : TFhirBoolean);
    function GetSliceIsConstrainingST : Boolean;
    procedure SetSliceIsConstrainingST(value : Boolean);
    procedure SetLabel_(value : TFhirString);
    function GetLabel_ST : String;
    procedure SetLabel_ST(value : String);
    function GetCodeList : TFhirCodingList;
    function GetHasCodeList : Boolean;
    procedure SetSlicing(value : TFhirElementDefinitionSlicing);
    procedure SetShort(value : TFhirString);
    function GetShortST : String;
    procedure SetShortST(value : String);
    procedure SetDefinition(value : TFhirMarkdown);
    function GetDefinitionST : String;
    procedure SetDefinitionST(value : String);
    procedure SetComment(value : TFhirMarkdown);
    function GetCommentST : String;
    procedure SetCommentST(value : String);
    procedure SetRequirements(value : TFhirMarkdown);
    function GetRequirementsST : String;
    procedure SetRequirementsST(value : String);
    function GetAliasList : TFhirStringList;
    function GetHasAliasList : Boolean;
    procedure SetMin(value : TFhirUnsignedInt);
    function GetMinST : String;
    procedure SetMinST(value : String);
    procedure SetMax(value : TFhirString);
    function GetMaxST : String;
    procedure SetMaxST(value : String);
    procedure SetBase(value : TFhirElementDefinitionBase);
    procedure SetContentReference(value : TFhirUri);
    function GetContentReferenceST : String;
    procedure SetContentReferenceST(value : String);
    function GetType_List : TFhirElementDefinitionTypeList;
    function GetHasType_List : Boolean;
    procedure SetDefaultValue(value : TFhirDataType);
    procedure SetMeaningWhenMissing(value : TFhirMarkdown);
    function GetMeaningWhenMissingST : String;
    procedure SetMeaningWhenMissingST(value : String);
    procedure SetOrderMeaning(value : TFhirString);
    function GetOrderMeaningST : String;
    procedure SetOrderMeaningST(value : String);
    procedure SetFixed(value : TFhirDataType);
    procedure SetPattern(value : TFhirDataType);
    function GetExampleList : TFhirElementDefinitionExampleList;
    function GetHasExampleList : Boolean;
    procedure SetMinValue(value : TFhirDataType);
    procedure SetMaxValue(value : TFhirDataType);
    procedure SetMaxLength(value : TFhirInteger);
    function GetMaxLengthST : String;
    procedure SetMaxLengthST(value : String);
    function GetConditionList : TFhirIdList;
    function GetHasConditionList : Boolean;
    function GetConstraintList : TFhirElementDefinitionConstraintList;
    function GetHasConstraintList : Boolean;
    procedure SetMustSupport(value : TFhirBoolean);
    function GetMustSupportST : Boolean;
    procedure SetMustSupportST(value : Boolean);
    procedure SetIsModifier(value : TFhirBoolean);
    function GetIsModifierST : Boolean;
    procedure SetIsModifierST(value : Boolean);
    procedure SetIsModifierReason(value : TFhirString);
    function GetIsModifierReasonST : String;
    procedure SetIsModifierReasonST(value : String);
    procedure SetIsSummary(value : TFhirBoolean);
    function GetIsSummaryST : Boolean;
    procedure SetIsSummaryST(value : Boolean);
    procedure SetBinding(value : TFhirElementDefinitionBinding);
    function GetMappingList : TFhirElementDefinitionMappingList;
    function GetHasMappingList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirElementDefinition; overload;
    function Clone : TFhirElementDefinition; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
    property path : String read GetPathST write SetPathST;
    // The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
    property pathElement : TFhirString read FPath write SetPath;

    // Codes that define how this element is represented in instances, when the deviation varies from the normal case.
    property representation : TFhirPropertyRepresentationEnumList read GetRepresentationST write SetRepresentationST;
    property representationList : TFhirEnumList read GetRepresentation;
    property hasRepresentation : boolean read GetHasRepresentation;
    // Typed access to The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
    property sliceName : String read GetSliceNameST write SetSliceNameST;
    // The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
    property sliceNameElement : TFhirString read FSliceName write SetSliceName;

    // Typed access to If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
    property sliceIsConstraining : Boolean read GetSliceIsConstrainingST write SetSliceIsConstrainingST;
    // If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
    property sliceIsConstrainingElement : TFhirBoolean read FSliceIsConstraining write SetSliceIsConstraining;

    // Typed access to A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
    property label_ : String read GetLabel_ST write SetLabel_ST;
    // A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
    property label_Element : TFhirString read FLabel_ write SetLabel_;

    // A code that has the same meaning as the element in a particular terminology.
    property codeList : TFhirCodingList read GetCodeList;
    property hasCodeList : boolean read GetHasCodeList;

    // Typed access to Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set). (defined for API consistency)
    property slicing : TFhirElementDefinitionSlicing read FSlicing write SetSlicing;
    // Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
    property slicingElement : TFhirElementDefinitionSlicing read FSlicing write SetSlicing;

    // Typed access to A concise description of what this element means (e.g. for use in autogenerated summaries).
    property short : String read GetShortST write SetShortST;
    // A concise description of what this element means (e.g. for use in autogenerated summaries).
    property shortElement : TFhirString read FShort write SetShort;

    // Typed access to Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
    property definition : String read GetDefinitionST write SetDefinitionST;
    // Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
    property definitionElement : TFhirMarkdown read FDefinition write SetDefinition;

    // Typed access to Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
    property comment : String read GetCommentST write SetCommentST;
    // Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
    property commentElement : TFhirMarkdown read FComment write SetComment;

    // Typed access to This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
    property requirements : String read GetRequirementsST write SetRequirementsST;
    // This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
    property requirementsElement : TFhirMarkdown read FRequirements write SetRequirements;

    // Identifies additional names by which this element might also be known.
    property aliasList : TFhirStringList read GetAliasList;
    property hasAliasList : boolean read GetHasAliasList;

    // Typed access to The minimum number of times this element SHALL appear in the instance.
    property min : String read GetMinST write SetMinST;
    // The minimum number of times this element SHALL appear in the instance.
    property minElement : TFhirUnsignedInt read FMin write SetMin;

    // Typed access to The maximum number of times this element is permitted to appear in the instance.
    property max : String read GetMaxST write SetMaxST;
    // The maximum number of times this element is permitted to appear in the instance.
    property maxElement : TFhirString read FMax write SetMax;

    // Typed access to Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same. (defined for API consistency)
    property base : TFhirElementDefinitionBase read FBase write SetBase;
    // Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
    property baseElement : TFhirElementDefinitionBase read FBase write SetBase;

    // Typed access to Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
    property contentReference : String read GetContentReferenceST write SetContentReferenceST;
    // Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
    property contentReferenceElement : TFhirUri read FContentReference write SetContentReference;

    // The data type or resource that the value of this element is permitted to be.
    property type_List : TFhirElementDefinitionTypeList read GetType_List;
    property hasType_List : boolean read GetHasType_List;

    // Typed access to The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false'). (defined for API consistency)
    property defaultValue : TFhirDataType read FDefaultValue write SetDefaultValue;
    // The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
    property defaultValueElement : TFhirDataType read FDefaultValue write SetDefaultValue;

    // Typed access to The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
    property meaningWhenMissing : String read GetMeaningWhenMissingST write SetMeaningWhenMissingST;
    // The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
    property meaningWhenMissingElement : TFhirMarkdown read FMeaningWhenMissing write SetMeaningWhenMissing;

    // Typed access to If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
    property orderMeaning : String read GetOrderMeaningST write SetOrderMeaningST;
    // If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
    property orderMeaningElement : TFhirString read FOrderMeaning write SetOrderMeaning;

    // Typed access to Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing. (defined for API consistency)
    property fixed : TFhirDataType read FFixed write SetFixed;
    // Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
    property fixedElement : TFhirDataType read FFixed write SetFixed;

    // Typed access to Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value. (defined for API consistency)
    property pattern : TFhirDataType read FPattern write SetPattern;
    // Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.    When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.  When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.  When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,  1. If primitive: it must match exactly the pattern value 2. If a complex object: it must match (recursively) the pattern value 3. If an array: it must match (recursively) the pattern value.
    property patternElement : TFhirDataType read FPattern write SetPattern;

    // A sample value for this element demonstrating the type of information that would typically be found in the element.
    property exampleList : TFhirElementDefinitionExampleList read GetExampleList;
    property hasExampleList : boolean read GetHasExampleList;

    // Typed access to The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (defined for API consistency)
    property minValue : TFhirDataType read FMinValue write SetMinValue;
    // The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    property minValueElement : TFhirDataType read FMinValue write SetMinValue;

    // Typed access to The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity. (defined for API consistency)
    property maxValue : TFhirDataType read FMaxValue write SetMaxValue;
    // The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
    property maxValueElement : TFhirDataType read FMaxValue write SetMaxValue;

    // Typed access to Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
    property maxLength : String read GetMaxLengthST write SetMaxLengthST;
    // Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
    property maxLengthElement : TFhirInteger read FMaxLength write SetMaxLength;

    // A reference to an invariant that may make additional statements about the cardinality or value in the instance.
    property conditionList : TFhirIdList read GetConditionList;
    property hasConditionList : boolean read GetHasConditionList;

    // Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
    property constraintList : TFhirElementDefinitionConstraintList read GetConstraintList;
    property hasConstraintList : boolean read GetHasConstraintList;

    // Typed access to If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
    property mustSupport : Boolean read GetMustSupportST write SetMustSupportST;
    // If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
    property mustSupportElement : TFhirBoolean read FMustSupport write SetMustSupport;

    // Typed access to If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
    property isModifier : Boolean read GetIsModifierST write SetIsModifierST;
    // If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
    property isModifierElement : TFhirBoolean read FIsModifier write SetIsModifier;

    // Typed access to Explains how that element affects the interpretation of the resource or element that contains it.
    property isModifierReason : String read GetIsModifierReasonST write SetIsModifierReasonST;
    // Explains how that element affects the interpretation of the resource or element that contains it.
    property isModifierReasonElement : TFhirString read FIsModifierReason write SetIsModifierReason;

    // Typed access to Whether the element should be included if a client requests a search with the parameter _summary=true.
    property isSummary : Boolean read GetIsSummaryST write SetIsSummaryST;
    // Whether the element should be included if a client requests a search with the parameter _summary=true.
    property isSummaryElement : TFhirBoolean read FIsSummary write SetIsSummary;

    // Typed access to Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri). (defined for API consistency)
    property binding : TFhirElementDefinitionBinding read FBinding write SetBinding;
    // Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
    property bindingElement : TFhirElementDefinitionBinding read FBinding write SetBinding;

    // Identifies a concept from an external specification that roughly corresponds to this element.
    property mappingList : TFhirElementDefinitionMappingList read GetMappingList;
    property hasMappingList : boolean read GetHasMappingList;

  end;

  TFhirElementDefinitionListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirElementDefinitionList;
    function GetCurrent : TFhirElementDefinition;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirElementDefinitionList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirElementDefinition read GetCurrent;
  end;

  TFhirElementDefinitionList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirElementDefinition;
    procedure SetItemN(index : Integer; value : TFhirElementDefinition);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirElementDefinitionList; overload;
    function Clone : TFhirElementDefinitionList; overload;
    function GetEnumerator : TFhirElementDefinitionListEnumerator;
    
    //  Add a FhirElementDefinition to the end of the list.
    function Append : TFhirElementDefinition;
    
    // Add an already existing FhirElementDefinition to the end of the list.
    procedure AddItem(value : TFhirElementDefinition); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirElementDefinition) : Integer;
    
    // Insert FhirElementDefinition before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirElementDefinition;
    
    // Insert an existing FhirElementDefinition before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirElementDefinition);
    
    // Get the iIndexth FhirElementDefinition. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirElementDefinition);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirElementDefinition;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirElementDefinitions[index : Integer] : TFhirElementDefinition read GetItemN write SetItemN; default;
  End;

  // The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
  TFhirMarketingStatus = class (TFhirBackboneType)
  protected
    FCountry : TFhirCodeableConcept;
    FJurisdiction : TFhirCodeableConcept;
    FStatus : TFhirCodeableConcept;
    FDateRange : TFhirPeriod;
    FRestoreDate : TFhirDateTime;
    procedure SetCountry(value : TFhirCodeableConcept);
    procedure SetJurisdiction(value : TFhirCodeableConcept);
    procedure SetStatus(value : TFhirCodeableConcept);
    procedure SetDateRange(value : TFhirPeriod);
    procedure SetRestoreDate(value : TFhirDateTime);
    function GetRestoreDateST : TFslDateTime;
    procedure SetRestoreDateST(value : TFslDateTime);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirMarketingStatus; overload;
    function Clone : TFhirMarketingStatus; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements. (defined for API consistency)
    property country : TFhirCodeableConcept read FCountry write SetCountry;
    // The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code elements.
    property countryElement : TFhirCodeableConcept read FCountry write SetCountry;

    // Typed access to Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified. (defined for API consistency)
    property jurisdiction : TFhirCodeableConcept read FJurisdiction write SetJurisdiction;
    // Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.
    property jurisdictionElement : TFhirCodeableConcept read FJurisdiction write SetJurisdiction;

    // Typed access to This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples. (defined for API consistency)
    property status : TFhirCodeableConcept read FStatus write SetStatus;
    // This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.
    property statusElement : TFhirCodeableConcept read FStatus write SetStatus;

    // Typed access to The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain. (defined for API consistency)
    property dateRange : TFhirPeriod read FDateRange write SetDateRange;
    // The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
    property dateRangeElement : TFhirPeriod read FDateRange write SetDateRange;

    // Typed access to The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
    property restoreDate : TFslDateTime read GetRestoreDateST write SetRestoreDateST;
    // The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.
    property restoreDateElement : TFhirDateTime read FRestoreDate write SetRestoreDate;

  end;

  TFhirMarketingStatusListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirMarketingStatusList;
    function GetCurrent : TFhirMarketingStatus;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirMarketingStatusList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirMarketingStatus read GetCurrent;
  end;

  TFhirMarketingStatusList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirMarketingStatus;
    procedure SetItemN(index : Integer; value : TFhirMarketingStatus);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirMarketingStatusList; overload;
    function Clone : TFhirMarketingStatusList; overload;
    function GetEnumerator : TFhirMarketingStatusListEnumerator;
    
    //  Add a FhirMarketingStatus to the end of the list.
    function Append : TFhirMarketingStatus;
    
    // Add an already existing FhirMarketingStatus to the end of the list.
    procedure AddItem(value : TFhirMarketingStatus); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirMarketingStatus) : Integer;
    
    // Insert FhirMarketingStatus before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirMarketingStatus;
    
    // Insert an existing FhirMarketingStatus before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirMarketingStatus);
    
    // Get the iIndexth FhirMarketingStatus. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirMarketingStatus);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirMarketingStatus;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirMarketingStatuses[index : Integer] : TFhirMarketingStatus read GetItemN write SetItemN; default;
  End;

  // Interval.
  TFhirOrderedDistributionInterval = class (TFhirElement)
  protected
    FRankOrder : TFhirInteger;
    FintervalStatisticList : TFhirStatisticList;
    procedure SetRankOrder(value : TFhirInteger);
    function GetRankOrderST : String;
    procedure SetRankOrderST(value : String);
    function GetIntervalStatisticList : TFhirStatisticList;
    function GetHasIntervalStatisticList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirOrderedDistributionInterval; overload;
    function Clone : TFhirOrderedDistributionInterval; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Relative order of interval.
    property rankOrder : String read GetRankOrderST write SetRankOrderST;
    // Relative order of interval.
    property rankOrderElement : TFhirInteger read FRankOrder write SetRankOrder;

    // Values and parameters for a single statistic related to the interval.
    property intervalStatisticList : TFhirStatisticList read GetIntervalStatisticList;
    property hasIntervalStatisticList : boolean read GetHasIntervalStatisticList;

  end;

  TFhirOrderedDistributionIntervalListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirOrderedDistributionIntervalList;
    function GetCurrent : TFhirOrderedDistributionInterval;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirOrderedDistributionIntervalList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirOrderedDistributionInterval read GetCurrent;
  end;

  TFhirOrderedDistributionIntervalList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirOrderedDistributionInterval;
    procedure SetItemN(index : Integer; value : TFhirOrderedDistributionInterval);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirOrderedDistributionIntervalList; overload;
    function Clone : TFhirOrderedDistributionIntervalList; overload;
    function GetEnumerator : TFhirOrderedDistributionIntervalListEnumerator;
    
    //  Add a FhirOrderedDistributionInterval to the end of the list.
    function Append : TFhirOrderedDistributionInterval;
    
    // Add an already existing FhirOrderedDistributionInterval to the end of the list.
    procedure AddItem(value : TFhirOrderedDistributionInterval); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirOrderedDistributionInterval) : Integer;
    
    // Insert FhirOrderedDistributionInterval before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirOrderedDistributionInterval;
    
    // Insert an existing FhirOrderedDistributionInterval before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirOrderedDistributionInterval);
    
    // Get the iIndexth FhirOrderedDistributionInterval. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirOrderedDistributionInterval);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirOrderedDistributionInterval;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirOrderedDistributionIntervals[index : Integer] : TFhirOrderedDistributionInterval read GetItemN write SetItemN; default;
  End;

  // An ordered list (distribution) of statistics.
  TFhirOrderedDistribution = class (TFhirBackboneType)
  protected
    FDescription : TFhirString;
    FnoteList : TFhirAnnotationList;
    FNumberOfIntervals : TFhirInteger;
    FBottomOfFirstInterval : TFhirQuantity;
    FintervalList : TFhirOrderedDistributionIntervalList;
    FTopOfInterval : TFhirQuantity;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    function GetNoteList : TFhirAnnotationList;
    function GetHasNoteList : Boolean;
    procedure SetNumberOfIntervals(value : TFhirInteger);
    function GetNumberOfIntervalsST : String;
    procedure SetNumberOfIntervalsST(value : String);
    procedure SetBottomOfFirstInterval(value : TFhirQuantity);
    function GetIntervalList : TFhirOrderedDistributionIntervalList;
    function GetHasIntervalList : Boolean;
    procedure SetTopOfInterval(value : TFhirQuantity);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirOrderedDistribution; overload;
    function Clone : TFhirOrderedDistribution; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to A description of the content and value of the statistic.
    property description : String read GetDescriptionST write SetDescriptionST;
    // A description of the content and value of the statistic.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Footnotes and/or explanatory notes.
    property noteList : TFhirAnnotationList read GetNoteList;
    property hasNoteList : boolean read GetHasNoteList;

    // Typed access to Number of intervals in an array, eg 4 for quartiles.
    property numberOfIntervals : String read GetNumberOfIntervalsST write SetNumberOfIntervalsST;
    // Number of intervals in an array, eg 4 for quartiles.
    property numberOfIntervalsElement : TFhirInteger read FNumberOfIntervals write SetNumberOfIntervals;

    // Typed access to Bottom of first interval. (defined for API consistency)
    property bottomOfFirstInterval : TFhirQuantity read FBottomOfFirstInterval write SetBottomOfFirstInterval;
    // Bottom of first interval.
    property bottomOfFirstIntervalElement : TFhirQuantity read FBottomOfFirstInterval write SetBottomOfFirstInterval;

    // Interval.
    property intervalList : TFhirOrderedDistributionIntervalList read GetIntervalList;
    property hasIntervalList : boolean read GetHasIntervalList;

    // Typed access to Singular value of the statistic at the upper bound of the interval. (defined for API consistency)
    property topOfInterval : TFhirQuantity read FTopOfInterval write SetTopOfInterval;
    // Singular value of the statistic at the upper bound of the interval.
    property topOfIntervalElement : TFhirQuantity read FTopOfInterval write SetTopOfInterval;

  end;

  TFhirOrderedDistributionListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirOrderedDistributionList;
    function GetCurrent : TFhirOrderedDistribution;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirOrderedDistributionList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirOrderedDistribution read GetCurrent;
  end;

  TFhirOrderedDistributionList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirOrderedDistribution;
    procedure SetItemN(index : Integer; value : TFhirOrderedDistribution);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirOrderedDistributionList; overload;
    function Clone : TFhirOrderedDistributionList; overload;
    function GetEnumerator : TFhirOrderedDistributionListEnumerator;
    
    //  Add a FhirOrderedDistribution to the end of the list.
    function Append : TFhirOrderedDistribution;
    
    // Add an already existing FhirOrderedDistribution to the end of the list.
    procedure AddItem(value : TFhirOrderedDistribution); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirOrderedDistribution) : Integer;
    
    // Insert FhirOrderedDistribution before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirOrderedDistribution;
    
    // Insert an existing FhirOrderedDistribution before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirOrderedDistribution);
    
    // Get the iIndexth FhirOrderedDistribution. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirOrderedDistribution);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirOrderedDistribution;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirOrderedDistributions[index : Integer] : TFhirOrderedDistribution read GetItemN write SetItemN; default;
  End;

  // A populatioof people with some set of grouping criteria.
  TFhirPopulation = class (TFhirBackboneType)
  protected
    FAge : TFhirDataType;
    FGender : TFhirCodeableConcept;
    FRace : TFhirCodeableConcept;
    FPhysiologicalCondition : TFhirCodeableConcept;
    procedure SetAge(value : TFhirDataType);
    procedure SetGender(value : TFhirCodeableConcept);
    procedure SetRace(value : TFhirCodeableConcept);
    procedure SetPhysiologicalCondition(value : TFhirCodeableConcept);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirPopulation; overload;
    function Clone : TFhirPopulation; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to The age of the specific population. (defined for API consistency)
    property age : TFhirDataType read FAge write SetAge;
    // The age of the specific population.
    property ageElement : TFhirDataType read FAge write SetAge;

    // Typed access to The gender of the specific population. (defined for API consistency)
    property gender : TFhirCodeableConcept read FGender write SetGender;
    // The gender of the specific population.
    property genderElement : TFhirCodeableConcept read FGender write SetGender;

    // Typed access to Race of the specific population. (defined for API consistency)
    property race : TFhirCodeableConcept read FRace write SetRace;
    // Race of the specific population.
    property raceElement : TFhirCodeableConcept read FRace write SetRace;

    // Typed access to The existing physiological conditions of the specific population to which this applies. (defined for API consistency)
    property physiologicalCondition : TFhirCodeableConcept read FPhysiologicalCondition write SetPhysiologicalCondition;
    // The existing physiological conditions of the specific population to which this applies.
    property physiologicalConditionElement : TFhirCodeableConcept read FPhysiologicalCondition write SetPhysiologicalCondition;

  end;

  TFhirPopulationListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirPopulationList;
    function GetCurrent : TFhirPopulation;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirPopulationList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirPopulation read GetCurrent;
  end;

  TFhirPopulationList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirPopulation;
    procedure SetItemN(index : Integer; value : TFhirPopulation);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirPopulationList; overload;
    function Clone : TFhirPopulationList; overload;
    function GetEnumerator : TFhirPopulationListEnumerator;
    
    //  Add a FhirPopulation to the end of the list.
    function Append : TFhirPopulation;
    
    // Add an already existing FhirPopulation to the end of the list.
    procedure AddItem(value : TFhirPopulation); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirPopulation) : Integer;
    
    // Insert FhirPopulation before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirPopulation;
    
    // Insert an existing FhirPopulation before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirPopulation);
    
    // Get the iIndexth FhirPopulation. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirPopulation);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirPopulation;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirPopulations[index : Integer] : TFhirPopulation read GetItemN write SetItemN; default;
  End;

  // The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
  TFhirProdCharacteristic = class (TFhirBackboneType)
  protected
    FHeight : TFhirQuantity;
    FWidth : TFhirQuantity;
    FDepth : TFhirQuantity;
    FWeight : TFhirQuantity;
    FNominalVolume : TFhirQuantity;
    FExternalDiameter : TFhirQuantity;
    FShape : TFhirString;
    FcolorList : TFhirStringList;
    FimprintList : TFhirStringList;
    FimageList : TFhirAttachmentList;
    FScoring : TFhirCodeableConcept;
    procedure SetHeight(value : TFhirQuantity);
    procedure SetWidth(value : TFhirQuantity);
    procedure SetDepth(value : TFhirQuantity);
    procedure SetWeight(value : TFhirQuantity);
    procedure SetNominalVolume(value : TFhirQuantity);
    procedure SetExternalDiameter(value : TFhirQuantity);
    procedure SetShape(value : TFhirString);
    function GetShapeST : String;
    procedure SetShapeST(value : String);
    function GetColorList : TFhirStringList;
    function GetHasColorList : Boolean;
    function GetImprintList : TFhirStringList;
    function GetHasImprintList : Boolean;
    function GetImageList : TFhirAttachmentList;
    function GetHasImageList : Boolean;
    procedure SetScoring(value : TFhirCodeableConcept);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirProdCharacteristic; overload;
    function Clone : TFhirProdCharacteristic; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property height : TFhirQuantity read FHeight write SetHeight;
    // Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property heightElement : TFhirQuantity read FHeight write SetHeight;

    // Typed access to Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property width : TFhirQuantity read FWidth write SetWidth;
    // Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property widthElement : TFhirQuantity read FWidth write SetWidth;

    // Typed access to Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property depth : TFhirQuantity read FDepth write SetDepth;
    // Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property depthElement : TFhirQuantity read FDepth write SetDepth;

    // Typed access to Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property weight : TFhirQuantity read FWeight write SetWeight;
    // Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property weightElement : TFhirQuantity read FWeight write SetWeight;

    // Typed access to Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property nominalVolume : TFhirQuantity read FNominalVolume write SetNominalVolume;
    // Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property nominalVolumeElement : TFhirQuantity read FNominalVolume write SetNominalVolume;

    // Typed access to Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property externalDiameter : TFhirQuantity read FExternalDiameter write SetExternalDiameter;
    // Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property externalDiameterElement : TFhirQuantity read FExternalDiameter write SetExternalDiameter;

    // Typed access to Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
    property shape : String read GetShapeST write SetShapeST;
    // Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
    property shapeElement : TFhirString read FShape write SetShape;

    // Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
    property colorList : TFhirStringList read GetColorList;
    property hasColorList : boolean read GetHasColorList;

    // Where applicable, the imprint can be specified as text.
    property imprintList : TFhirStringList read GetImprintList;
    property hasImprintList : boolean read GetHasImprintList;

    // Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations.
    property imageList : TFhirAttachmentList read GetImageList;
    property hasImageList : boolean read GetHasImageList;

    // Typed access to Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used. (defined for API consistency)
    property scoring : TFhirCodeableConcept read FScoring write SetScoring;
    // Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used.
    property scoringElement : TFhirCodeableConcept read FScoring write SetScoring;

  end;

  TFhirProdCharacteristicListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirProdCharacteristicList;
    function GetCurrent : TFhirProdCharacteristic;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirProdCharacteristicList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirProdCharacteristic read GetCurrent;
  end;

  TFhirProdCharacteristicList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirProdCharacteristic;
    procedure SetItemN(index : Integer; value : TFhirProdCharacteristic);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirProdCharacteristicList; overload;
    function Clone : TFhirProdCharacteristicList; overload;
    function GetEnumerator : TFhirProdCharacteristicListEnumerator;
    
    //  Add a FhirProdCharacteristic to the end of the list.
    function Append : TFhirProdCharacteristic;
    
    // Add an already existing FhirProdCharacteristic to the end of the list.
    procedure AddItem(value : TFhirProdCharacteristic); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirProdCharacteristic) : Integer;
    
    // Insert FhirProdCharacteristic before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirProdCharacteristic;
    
    // Insert an existing FhirProdCharacteristic before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirProdCharacteristic);
    
    // Get the iIndexth FhirProdCharacteristic. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirProdCharacteristic);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirProdCharacteristic;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirProdCharacteristics[index : Integer] : TFhirProdCharacteristic read GetItemN write SetItemN; default;
  End;

  // The shelf-life and storage information for a medicinal product item or container can be described using this class.
  TFhirProductShelfLife = class (TFhirBackboneType)
  protected
    FType_ : TFhirCodeableConcept;
    FPeriod : TFhirDataType;
    FspecialPrecautionsForStorageList : TFhirCodeableConceptList;
    procedure SetType_(value : TFhirCodeableConcept);
    procedure SetPeriod(value : TFhirDataType);
    function GetSpecialPrecautionsForStorageList : TFhirCodeableConceptList;
    function GetHasSpecialPrecautionsForStorageList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirProductShelfLife; overload;
    function Clone : TFhirProductShelfLife; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified. (defined for API consistency)
    property type_ : TFhirCodeableConcept read FType_ write SetType_;
    // This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
    property type_Element : TFhirCodeableConcept read FType_ write SetType_;

    // Typed access to The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used. (defined for API consistency)
    property period : TFhirDataType read FPeriod write SetPeriod;
    // The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used.
    property periodElement : TFhirDataType read FPeriod write SetPeriod;

    // Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.
    property specialPrecautionsForStorageList : TFhirCodeableConceptList read GetSpecialPrecautionsForStorageList;
    property hasSpecialPrecautionsForStorageList : boolean read GetHasSpecialPrecautionsForStorageList;

  end;

  TFhirProductShelfLifeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirProductShelfLifeList;
    function GetCurrent : TFhirProductShelfLife;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirProductShelfLifeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirProductShelfLife read GetCurrent;
  end;

  TFhirProductShelfLifeList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirProductShelfLife;
    procedure SetItemN(index : Integer; value : TFhirProductShelfLife);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirProductShelfLifeList; overload;
    function Clone : TFhirProductShelfLifeList; overload;
    function GetEnumerator : TFhirProductShelfLifeListEnumerator;
    
    //  Add a FhirProductShelfLife to the end of the list.
    function Append : TFhirProductShelfLife;
    
    // Add an already existing FhirProductShelfLife to the end of the list.
    procedure AddItem(value : TFhirProductShelfLife); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirProductShelfLife) : Integer;
    
    // Insert FhirProductShelfLife before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirProductShelfLife;
    
    // Insert an existing FhirProductShelfLife before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirProductShelfLife);
    
    // Get the iIndexth FhirProductShelfLife. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirProductShelfLife);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirProductShelfLife;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirProductShelfLives[index : Integer] : TFhirProductShelfLife read GetItemN write SetItemN; default;
  End;

  // Number of samples in the statistic.
  TFhirStatisticSampleSize = class (TFhirElement)
  protected
    FDescription : TFhirString;
    FnoteList : TFhirAnnotationList;
    FNumberOfStudies : TFhirInteger;
    FNumberOfParticipants : TFhirInteger;
    FKnownDataCount : TFhirInteger;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    function GetNoteList : TFhirAnnotationList;
    function GetHasNoteList : Boolean;
    procedure SetNumberOfStudies(value : TFhirInteger);
    function GetNumberOfStudiesST : String;
    procedure SetNumberOfStudiesST(value : String);
    procedure SetNumberOfParticipants(value : TFhirInteger);
    function GetNumberOfParticipantsST : String;
    procedure SetNumberOfParticipantsST(value : String);
    procedure SetKnownDataCount(value : TFhirInteger);
    function GetKnownDataCountST : String;
    procedure SetKnownDataCountST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirStatisticSampleSize; overload;
    function Clone : TFhirStatisticSampleSize; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Human-readable summary of population sample size.
    property description : String read GetDescriptionST write SetDescriptionST;
    // Human-readable summary of population sample size.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Footnote or explanatory note about the sample size.
    property noteList : TFhirAnnotationList read GetNoteList;
    property hasNoteList : boolean read GetHasNoteList;

    // Typed access to Number of participants in the population.
    property numberOfStudies : String read GetNumberOfStudiesST write SetNumberOfStudiesST;
    // Number of participants in the population.
    property numberOfStudiesElement : TFhirInteger read FNumberOfStudies write SetNumberOfStudies;

    // Typed access to A human-readable string to clarify or explain concepts about the sample size.
    property numberOfParticipants : String read GetNumberOfParticipantsST write SetNumberOfParticipantsST;
    // A human-readable string to clarify or explain concepts about the sample size.
    property numberOfParticipantsElement : TFhirInteger read FNumberOfParticipants write SetNumberOfParticipants;

    // Typed access to Number of participants with known results for measured variables.
    property knownDataCount : String read GetKnownDataCountST write SetKnownDataCountST;
    // Number of participants with known results for measured variables.
    property knownDataCountElement : TFhirInteger read FKnownDataCount write SetKnownDataCount;

  end;

  TFhirStatisticSampleSizeListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStatisticSampleSizeList;
    function GetCurrent : TFhirStatisticSampleSize;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStatisticSampleSizeList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirStatisticSampleSize read GetCurrent;
  end;

  TFhirStatisticSampleSizeList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirStatisticSampleSize;
    procedure SetItemN(index : Integer; value : TFhirStatisticSampleSize);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirStatisticSampleSizeList; overload;
    function Clone : TFhirStatisticSampleSizeList; overload;
    function GetEnumerator : TFhirStatisticSampleSizeListEnumerator;
    
    //  Add a FhirStatisticSampleSize to the end of the list.
    function Append : TFhirStatisticSampleSize;
    
    // Add an already existing FhirStatisticSampleSize to the end of the list.
    procedure AddItem(value : TFhirStatisticSampleSize); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirStatisticSampleSize) : Integer;
    
    // Insert FhirStatisticSampleSize before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirStatisticSampleSize;
    
    // Insert an existing FhirStatisticSampleSize before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirStatisticSampleSize);
    
    // Get the iIndexth FhirStatisticSampleSize. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirStatisticSampleSize);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirStatisticSampleSize;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStatisticSampleSizes[index : Integer] : TFhirStatisticSampleSize read GetItemN write SetItemN; default;
  End;

  // A statistical attribute of the statistic such as a measure of heterogeneity.
  TFhirStatisticAttributeEstimate = class (TFhirElement)
  protected
    FDescription : TFhirString;
    FnoteList : TFhirAnnotationList;
    FType_ : TFhirCodeableConcept;
    FQuantity : TFhirQuantity;
    FLevel : TFhirDecimal;
    FRange : TFhirRange;
    FattributeEstimateList : TFhirStatisticAttributeEstimateAttributeEstimateList;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    function GetNoteList : TFhirAnnotationList;
    function GetHasNoteList : Boolean;
    procedure SetType_(value : TFhirCodeableConcept);
    procedure SetQuantity(value : TFhirQuantity);
    procedure SetLevel(value : TFhirDecimal);
    function GetLevelST : String;
    procedure SetLevelST(value : String);
    procedure SetRange(value : TFhirRange);
    function GetAttributeEstimateList : TFhirStatisticAttributeEstimateAttributeEstimateList;
    function GetHasAttributeEstimateList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirStatisticAttributeEstimate; overload;
    function Clone : TFhirStatisticAttributeEstimate; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Human-readable summary of the estimate.
    property description : String read GetDescriptionST write SetDescriptionST;
    // Human-readable summary of the estimate.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Footnote or explanatory note about the estimate.
    property noteList : TFhirAnnotationList read GetNoteList;
    property hasNoteList : boolean read GetHasNoteList;

    // Typed access to The type of attribute estimate, eg confidence interval or p value. (defined for API consistency)
    property type_ : TFhirCodeableConcept read FType_ write SetType_;
    // The type of attribute estimate, eg confidence interval or p value.
    property type_Element : TFhirCodeableConcept read FType_ write SetType_;

    // Typed access to The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure. (defined for API consistency)
    property quantity : TFhirQuantity read FQuantity write SetQuantity;
    // The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.
    property quantityElement : TFhirQuantity read FQuantity write SetQuantity;

    // Typed access to Use 95 for a 95% confidence interval.
    property level : String read GetLevelST write SetLevelST;
    // Use 95 for a 95% confidence interval.
    property levelElement : TFhirDecimal read FLevel write SetLevel;

    // Typed access to Lower bound of confidence interval. (defined for API consistency)
    property range : TFhirRange read FRange write SetRange;
    // Lower bound of confidence interval.
    property rangeElement : TFhirRange read FRange write SetRange;

    // A nested attribute estimate; which is the attribute estimate of an attribute estimate.
    property attributeEstimateList : TFhirStatisticAttributeEstimateAttributeEstimateList read GetAttributeEstimateList;
    property hasAttributeEstimateList : boolean read GetHasAttributeEstimateList;

  end;

  TFhirStatisticAttributeEstimateListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStatisticAttributeEstimateList;
    function GetCurrent : TFhirStatisticAttributeEstimate;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStatisticAttributeEstimateList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirStatisticAttributeEstimate read GetCurrent;
  end;

  TFhirStatisticAttributeEstimateList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirStatisticAttributeEstimate;
    procedure SetItemN(index : Integer; value : TFhirStatisticAttributeEstimate);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirStatisticAttributeEstimateList; overload;
    function Clone : TFhirStatisticAttributeEstimateList; overload;
    function GetEnumerator : TFhirStatisticAttributeEstimateListEnumerator;
    
    //  Add a FhirStatisticAttributeEstimate to the end of the list.
    function Append : TFhirStatisticAttributeEstimate;
    
    // Add an already existing FhirStatisticAttributeEstimate to the end of the list.
    procedure AddItem(value : TFhirStatisticAttributeEstimate); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirStatisticAttributeEstimate) : Integer;
    
    // Insert FhirStatisticAttributeEstimate before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirStatisticAttributeEstimate;
    
    // Insert an existing FhirStatisticAttributeEstimate before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirStatisticAttributeEstimate);
    
    // Get the iIndexth FhirStatisticAttributeEstimate. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirStatisticAttributeEstimate);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirStatisticAttributeEstimate;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStatisticAttributeEstimates[index : Integer] : TFhirStatisticAttributeEstimate read GetItemN write SetItemN; default;
  End;

  // A nested attribute estimate; which is the attribute estimate of an attribute estimate.
  TFhirStatisticAttributeEstimateAttributeEstimate = class (TFhirElement)
  protected
    FDescription : TFhirString;
    FnoteList : TFhirAnnotationList;
    FType_ : TFhirCodeableConcept;
    FQuantity : TFhirQuantity;
    FLevel : TFhirDecimal;
    FRange : TFhirRange;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    function GetNoteList : TFhirAnnotationList;
    function GetHasNoteList : Boolean;
    procedure SetType_(value : TFhirCodeableConcept);
    procedure SetQuantity(value : TFhirQuantity);
    procedure SetLevel(value : TFhirDecimal);
    function GetLevelST : String;
    procedure SetLevelST(value : String);
    procedure SetRange(value : TFhirRange);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirStatisticAttributeEstimateAttributeEstimate; overload;
    function Clone : TFhirStatisticAttributeEstimateAttributeEstimate; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Human-readable summary of the estimate.
    property description : String read GetDescriptionST write SetDescriptionST;
    // Human-readable summary of the estimate.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Footnote or explanatory note about the estimate.
    property noteList : TFhirAnnotationList read GetNoteList;
    property hasNoteList : boolean read GetHasNoteList;

    // Typed access to The type of attribute estimate, eg confidence interval or p value. (defined for API consistency)
    property type_ : TFhirCodeableConcept read FType_ write SetType_;
    // The type of attribute estimate, eg confidence interval or p value.
    property type_Element : TFhirCodeableConcept read FType_ write SetType_;

    // Typed access to The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure. (defined for API consistency)
    property quantity : TFhirQuantity read FQuantity write SetQuantity;
    // The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.
    property quantityElement : TFhirQuantity read FQuantity write SetQuantity;

    // Typed access to Use 95 for a 95% confidence interval.
    property level : String read GetLevelST write SetLevelST;
    // Use 95 for a 95% confidence interval.
    property levelElement : TFhirDecimal read FLevel write SetLevel;

    // Typed access to Lower bound of confidence interval. (defined for API consistency)
    property range : TFhirRange read FRange write SetRange;
    // Lower bound of confidence interval.
    property rangeElement : TFhirRange read FRange write SetRange;

  end;

  TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStatisticAttributeEstimateAttributeEstimateList;
    function GetCurrent : TFhirStatisticAttributeEstimateAttributeEstimate;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStatisticAttributeEstimateAttributeEstimateList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirStatisticAttributeEstimateAttributeEstimate read GetCurrent;
  end;

  TFhirStatisticAttributeEstimateAttributeEstimateList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirStatisticAttributeEstimateAttributeEstimate;
    procedure SetItemN(index : Integer; value : TFhirStatisticAttributeEstimateAttributeEstimate);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirStatisticAttributeEstimateAttributeEstimateList; overload;
    function Clone : TFhirStatisticAttributeEstimateAttributeEstimateList; overload;
    function GetEnumerator : TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator;
    
    //  Add a FhirStatisticAttributeEstimateAttributeEstimate to the end of the list.
    function Append : TFhirStatisticAttributeEstimateAttributeEstimate;
    
    // Add an already existing FhirStatisticAttributeEstimateAttributeEstimate to the end of the list.
    procedure AddItem(value : TFhirStatisticAttributeEstimateAttributeEstimate); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirStatisticAttributeEstimateAttributeEstimate) : Integer;
    
    // Insert FhirStatisticAttributeEstimateAttributeEstimate before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirStatisticAttributeEstimateAttributeEstimate;
    
    // Insert an existing FhirStatisticAttributeEstimateAttributeEstimate before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirStatisticAttributeEstimateAttributeEstimate);
    
    // Get the iIndexth FhirStatisticAttributeEstimateAttributeEstimate. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirStatisticAttributeEstimateAttributeEstimate);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirStatisticAttributeEstimateAttributeEstimate;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStatisticAttributeEstimateAttributeEstimates[index : Integer] : TFhirStatisticAttributeEstimateAttributeEstimate read GetItemN write SetItemN; default;
  End;

  // A component of the method to generate the statistic.
  TFhirStatisticModelCharacteristic = class (TFhirElement)
  protected
    FCode : TFhirCodeableConcept;
    FValue : TFhirDataType;
    FvariableList : TFhirStatisticModelCharacteristicVariableList;
    procedure SetCode(value : TFhirCodeableConcept);
    procedure SetValue(value : TFhirDataType);
    function GetVariableList : TFhirStatisticModelCharacteristicVariableList;
    function GetHasVariableList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirStatisticModelCharacteristic; overload;
    function Clone : TFhirStatisticModelCharacteristic; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Description of a component of the method to generate the statistic. (defined for API consistency)
    property code : TFhirCodeableConcept read FCode write SetCode;
    // Description of a component of the method to generate the statistic.
    property codeElement : TFhirCodeableConcept read FCode write SetCode;

    // Typed access to Further specification of a component of the method to generate the statistic. (defined for API consistency)
    property value : TFhirDataType read FValue write SetValue;
    // Further specification of a component of the method to generate the statistic.
    property valueElement : TFhirDataType read FValue write SetValue;

    // A variable adjusted for in the adjusted analysis.
    property variableList : TFhirStatisticModelCharacteristicVariableList read GetVariableList;
    property hasVariableList : boolean read GetHasVariableList;

  end;

  TFhirStatisticModelCharacteristicListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStatisticModelCharacteristicList;
    function GetCurrent : TFhirStatisticModelCharacteristic;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStatisticModelCharacteristicList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirStatisticModelCharacteristic read GetCurrent;
  end;

  TFhirStatisticModelCharacteristicList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirStatisticModelCharacteristic;
    procedure SetItemN(index : Integer; value : TFhirStatisticModelCharacteristic);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirStatisticModelCharacteristicList; overload;
    function Clone : TFhirStatisticModelCharacteristicList; overload;
    function GetEnumerator : TFhirStatisticModelCharacteristicListEnumerator;
    
    //  Add a FhirStatisticModelCharacteristic to the end of the list.
    function Append : TFhirStatisticModelCharacteristic;
    
    // Add an already existing FhirStatisticModelCharacteristic to the end of the list.
    procedure AddItem(value : TFhirStatisticModelCharacteristic); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirStatisticModelCharacteristic) : Integer;
    
    // Insert FhirStatisticModelCharacteristic before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirStatisticModelCharacteristic;
    
    // Insert an existing FhirStatisticModelCharacteristic before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirStatisticModelCharacteristic);
    
    // Get the iIndexth FhirStatisticModelCharacteristic. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirStatisticModelCharacteristic);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirStatisticModelCharacteristic;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStatisticModelCharacteristics[index : Integer] : TFhirStatisticModelCharacteristic read GetItemN write SetItemN; default;
  End;

  // A variable adjusted for in the adjusted analysis.
  TFhirStatisticModelCharacteristicVariable = class (TFhirElement)
  protected
    FVariableDefinition : TFhirReference;
    FHandling : TFhirEnum;
    FvalueCategoryList : TFhirCodeableConceptList;
    FvalueQuantityList : TFhirQuantityList;
    FvalueRangeList : TFhirRangeList;
    procedure SetVariableDefinition(value : TFhirReference);
    procedure SetHandling(value : TFhirEnum);
    function GetHandlingST : TFhirEvidenceVariableHandlingEnum;
    procedure SetHandlingST(value : TFhirEvidenceVariableHandlingEnum);
    function GetValueCategoryList : TFhirCodeableConceptList;
    function GetHasValueCategoryList : Boolean;
    function GetValueQuantityList : TFhirQuantityList;
    function GetHasValueQuantityList : Boolean;
    function GetValueRangeList : TFhirRangeList;
    function GetHasValueRangeList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirStatisticModelCharacteristicVariable; overload;
    function Clone : TFhirStatisticModelCharacteristicVariable; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Description of the variable. (defined for API consistency)
    property variableDefinition : TFhirReference read FVariableDefinition write SetVariableDefinition;
    // Description of the variable.
    property variableDefinitionElement : TFhirReference read FVariableDefinition write SetVariableDefinition;

    // How the variable is classified for use in adjusted analysis.
    property handling : TFhirEvidenceVariableHandlingEnum read GetHandlingST write SetHandlingST;
    property handlingElement : TFhirEnum read FHandling write SetHandling;

    // Description for grouping of ordinal or polychotomous variables.
    property valueCategoryList : TFhirCodeableConceptList read GetValueCategoryList;
    property hasValueCategoryList : boolean read GetHasValueCategoryList;

    // Discrete value for grouping of ordinal or polychotomous variables.
    property valueQuantityList : TFhirQuantityList read GetValueQuantityList;
    property hasValueQuantityList : boolean read GetHasValueQuantityList;

    // Range of values for grouping of ordinal or polychotomous variables.
    property valueRangeList : TFhirRangeList read GetValueRangeList;
    property hasValueRangeList : boolean read GetHasValueRangeList;

  end;

  TFhirStatisticModelCharacteristicVariableListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStatisticModelCharacteristicVariableList;
    function GetCurrent : TFhirStatisticModelCharacteristicVariable;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStatisticModelCharacteristicVariableList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirStatisticModelCharacteristicVariable read GetCurrent;
  end;

  TFhirStatisticModelCharacteristicVariableList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirStatisticModelCharacteristicVariable;
    procedure SetItemN(index : Integer; value : TFhirStatisticModelCharacteristicVariable);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirStatisticModelCharacteristicVariableList; overload;
    function Clone : TFhirStatisticModelCharacteristicVariableList; overload;
    function GetEnumerator : TFhirStatisticModelCharacteristicVariableListEnumerator;
    
    //  Add a FhirStatisticModelCharacteristicVariable to the end of the list.
    function Append : TFhirStatisticModelCharacteristicVariable;
    
    // Add an already existing FhirStatisticModelCharacteristicVariable to the end of the list.
    procedure AddItem(value : TFhirStatisticModelCharacteristicVariable); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirStatisticModelCharacteristicVariable) : Integer;
    
    // Insert FhirStatisticModelCharacteristicVariable before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirStatisticModelCharacteristicVariable;
    
    // Insert an existing FhirStatisticModelCharacteristicVariable before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirStatisticModelCharacteristicVariable);
    
    // Get the iIndexth FhirStatisticModelCharacteristicVariable. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirStatisticModelCharacteristicVariable);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirStatisticModelCharacteristicVariable;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStatisticModelCharacteristicVariables[index : Integer] : TFhirStatisticModelCharacteristicVariable read GetItemN write SetItemN; default;
  End;

  // A fact or piece of data from a  study of a large quantity of numerical data.  A mathematical or quantified characteristic of a group of observations.
  TFhirStatistic = class (TFhirBackboneType)
  protected
    FDescription : TFhirString;
    FnoteList : TFhirAnnotationList;
    FStatisticType : TFhirCodeableConcept;
    FQuantity : TFhirQuantity;
    FNumberOfEvents : TFhirInteger;
    FSampleSize : TFhirStatisticSampleSize;
    FattributeEstimateList : TFhirStatisticAttributeEstimateList;
    FmodelCharacteristicList : TFhirStatisticModelCharacteristicList;
    procedure SetDescription(value : TFhirString);
    function GetDescriptionST : String;
    procedure SetDescriptionST(value : String);
    function GetNoteList : TFhirAnnotationList;
    function GetHasNoteList : Boolean;
    procedure SetStatisticType(value : TFhirCodeableConcept);
    procedure SetQuantity(value : TFhirQuantity);
    procedure SetNumberOfEvents(value : TFhirInteger);
    function GetNumberOfEventsST : String;
    procedure SetNumberOfEventsST(value : String);
    procedure SetSampleSize(value : TFhirStatisticSampleSize);
    function GetAttributeEstimateList : TFhirStatisticAttributeEstimateList;
    function GetHasAttributeEstimateList : Boolean;
    function GetModelCharacteristicList : TFhirStatisticModelCharacteristicList;
    function GetHasModelCharacteristicList : Boolean;
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirStatistic; overload;
    function Clone : TFhirStatistic; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to A description of the content value of the statistic.
    property description : String read GetDescriptionST write SetDescriptionST;
    // A description of the content value of the statistic.
    property descriptionElement : TFhirString read FDescription write SetDescription;

    // Footnotes and/or explanatory notes.
    property noteList : TFhirAnnotationList read GetNoteList;
    property hasNoteList : boolean read GetHasNoteList;

    // Typed access to Type of statistic, eg relative risk. (defined for API consistency)
    property statisticType : TFhirCodeableConcept read FStatisticType write SetStatisticType;
    // Type of statistic, eg relative risk.
    property statisticTypeElement : TFhirCodeableConcept read FStatisticType write SetStatisticType;

    // Typed access to Statistic value. (defined for API consistency)
    property quantity : TFhirQuantity read FQuantity write SetQuantity;
    // Statistic value.
    property quantityElement : TFhirQuantity read FQuantity write SetQuantity;

    // Typed access to The number of events associated with the statistic.
    property numberOfEvents : String read GetNumberOfEventsST write SetNumberOfEventsST;
    // The number of events associated with the statistic.
    property numberOfEventsElement : TFhirInteger read FNumberOfEvents write SetNumberOfEvents;

    // Typed access to Number of samples in the statistic. (defined for API consistency)
    property sampleSize : TFhirStatisticSampleSize read FSampleSize write SetSampleSize;
    // Number of samples in the statistic.
    property sampleSizeElement : TFhirStatisticSampleSize read FSampleSize write SetSampleSize;

    // A statistical attribute of the statistic such as a measure of heterogeneity.
    property attributeEstimateList : TFhirStatisticAttributeEstimateList read GetAttributeEstimateList;
    property hasAttributeEstimateList : boolean read GetHasAttributeEstimateList;

    // A component of the method to generate the statistic.
    property modelCharacteristicList : TFhirStatisticModelCharacteristicList read GetModelCharacteristicList;
    property hasModelCharacteristicList : boolean read GetHasModelCharacteristicList;

  end;

  TFhirStatisticListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirStatisticList;
    function GetCurrent : TFhirStatistic;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirStatisticList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirStatistic read GetCurrent;
  end;

  TFhirStatisticList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirStatistic;
    procedure SetItemN(index : Integer; value : TFhirStatistic);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirStatisticList; overload;
    function Clone : TFhirStatisticList; overload;
    function GetEnumerator : TFhirStatisticListEnumerator;
    
    //  Add a FhirStatistic to the end of the list.
    function Append : TFhirStatistic;
    
    // Add an already existing FhirStatistic to the end of the list.
    procedure AddItem(value : TFhirStatistic); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirStatistic) : Integer;
    
    // Insert FhirStatistic before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirStatistic;
    
    // Insert an existing FhirStatistic before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirStatistic);
    
    // Get the iIndexth FhirStatistic. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirStatistic);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirStatistic;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirStatistics[index : Integer] : TFhirStatistic read GetItemN write SetItemN; default;
  End;

  // A set of rules that describe when the event is scheduled.
  TFhirTimingRepeat = class (TFhirElement)
  protected
    FBounds : TFhirDataType;
    FCount : TFhirPositiveInt;
    FCountMax : TFhirPositiveInt;
    FDuration : TFhirDecimal;
    FDurationMax : TFhirDecimal;
    FDurationUnit : TFhirEnum;
    FFrequency : TFhirPositiveInt;
    FFrequencyMax : TFhirPositiveInt;
    FPeriod : TFhirDecimal;
    FPeriodMax : TFhirDecimal;
    FPeriodUnit : TFhirEnum;
    FDayOfWeek : TFhirEnumList;
    FtimeOfDayList : TFhirTimeList;
    FWhen : TFhirEnumList;
    FOffset : TFhirUnsignedInt;
    procedure SetBounds(value : TFhirDataType);
    procedure SetCount(value : TFhirPositiveInt);
    function GetCountST : String;
    procedure SetCountST(value : String);
    procedure SetCountMax(value : TFhirPositiveInt);
    function GetCountMaxST : String;
    procedure SetCountMaxST(value : String);
    procedure SetDuration(value : TFhirDecimal);
    function GetDurationST : String;
    procedure SetDurationST(value : String);
    procedure SetDurationMax(value : TFhirDecimal);
    function GetDurationMaxST : String;
    procedure SetDurationMaxST(value : String);
    procedure SetDurationUnit(value : TFhirEnum);
    function GetDurationUnitST : TFhirUnitsOfTimeEnum;
    procedure SetDurationUnitST(value : TFhirUnitsOfTimeEnum);
    procedure SetFrequency(value : TFhirPositiveInt);
    function GetFrequencyST : String;
    procedure SetFrequencyST(value : String);
    procedure SetFrequencyMax(value : TFhirPositiveInt);
    function GetFrequencyMaxST : String;
    procedure SetFrequencyMaxST(value : String);
    procedure SetPeriod(value : TFhirDecimal);
    function GetPeriodST : String;
    procedure SetPeriodST(value : String);
    procedure SetPeriodMax(value : TFhirDecimal);
    function GetPeriodMaxST : String;
    procedure SetPeriodMaxST(value : String);
    procedure SetPeriodUnit(value : TFhirEnum);
    function GetPeriodUnitST : TFhirUnitsOfTimeEnum;
    procedure SetPeriodUnitST(value : TFhirUnitsOfTimeEnum);
    function GetDayOfWeek : TFhirEnumList;
    function GetHasDayOfWeek : Boolean;
    function GetDayOfWeekST : TFhirDaysOfWeekEnumList;
    procedure SetDayOfWeekST(value : TFhirDaysOfWeekEnumList);
    function GetTimeOfDayList : TFhirTimeList;
    function GetHasTimeOfDayList : Boolean;
    function GetWhen : TFhirEnumList;
    function GetHasWhen : Boolean;
    function GetWhenST : TFhirEventTimingEnumList;
    procedure SetWhenST(value : TFhirEventTimingEnumList);
    procedure SetOffset(value : TFhirUnsignedInt);
    function GetOffsetST : String;
    procedure SetOffsetST(value : String);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirTimingRepeat; overload;
    function Clone : TFhirTimingRepeat; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Typed access to Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule. (defined for API consistency)
    property bounds : TFhirDataType read FBounds write SetBounds;
    // Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.
    property boundsElement : TFhirDataType read FBounds write SetBounds;

    // Typed access to A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
    property count : String read GetCountST write SetCountST;
    // A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.
    property countElement : TFhirPositiveInt read FCount write SetCount;

    // Typed access to If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
    property countMax : String read GetCountMaxST write SetCountMaxST;
    // If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.
    property countMaxElement : TFhirPositiveInt read FCountMax write SetCountMax;

    // Typed access to How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
    property duration : String read GetDurationST write SetDurationST;
    // How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.
    property durationElement : TFhirDecimal read FDuration write SetDuration;

    // Typed access to If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
    property durationMax : String read GetDurationMaxST write SetDurationMaxST;
    // If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.
    property durationMaxElement : TFhirDecimal read FDurationMax write SetDurationMax;

    // The units of time for the duration, in UCUM units.
    property durationUnit : TFhirUnitsOfTimeEnum read GetDurationUnitST write SetDurationUnitST;
    property durationUnitElement : TFhirEnum read FDurationUnit write SetDurationUnit;

    // Typed access to The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
    property frequency : String read GetFrequencyST write SetFrequencyST;
    // The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.
    property frequencyElement : TFhirPositiveInt read FFrequency write SetFrequency;

    // Typed access to If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
    property frequencyMax : String read GetFrequencyMaxST write SetFrequencyMaxST;
    // If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.
    property frequencyMaxElement : TFhirPositiveInt read FFrequencyMax write SetFrequencyMax;

    // Typed access to Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
    property period : String read GetPeriodST write SetPeriodST;
    // Indicates the duration of time over which repetitions are to occur; e.g. to express "3 times per day", 3 would be the frequency and "1 day" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.
    property periodElement : TFhirDecimal read FPeriod write SetPeriod;

    // Typed access to If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
    property periodMax : String read GetPeriodMaxST write SetPeriodMaxST;
    // If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as "do this once every 3-5 days.
    property periodMaxElement : TFhirDecimal read FPeriodMax write SetPeriodMax;

    // The units of time for the period in UCUM units.
    property periodUnit : TFhirUnitsOfTimeEnum read GetPeriodUnitST write SetPeriodUnitST;
    property periodUnitElement : TFhirEnum read FPeriodUnit write SetPeriodUnit;

    // If one or more days of week is provided, then the action happens only on the specified day(s).
    property dayOfWeek : TFhirDaysOfWeekEnumList read GetDayOfWeekST write SetDayOfWeekST;
    property dayOfWeekList : TFhirEnumList read GetDayOfWeek;
    property hasDayOfWeek : boolean read GetHasDayOfWeek;
    // Specified time of day for action to take place.
    property timeOfDayList : TFhirTimeList read GetTimeOfDayList;
    property hasTimeOfDayList : boolean read GetHasTimeOfDayList;

    // An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.
    property when : TFhirEventTimingEnumList read GetWhenST write SetWhenST;
    property whenList : TFhirEnumList read GetWhen;
    property hasWhen : boolean read GetHasWhen;
    // Typed access to The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
    property offset : String read GetOffsetST write SetOffsetST;
    // The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.
    property offsetElement : TFhirUnsignedInt read FOffset write SetOffset;

  end;

  TFhirTimingRepeatListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirTimingRepeatList;
    function GetCurrent : TFhirTimingRepeat;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirTimingRepeatList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirTimingRepeat read GetCurrent;
  end;

  TFhirTimingRepeatList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirTimingRepeat;
    procedure SetItemN(index : Integer; value : TFhirTimingRepeat);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirTimingRepeatList; overload;
    function Clone : TFhirTimingRepeatList; overload;
    function GetEnumerator : TFhirTimingRepeatListEnumerator;
    
    //  Add a FhirTimingRepeat to the end of the list.
    function Append : TFhirTimingRepeat;
    
    // Add an already existing FhirTimingRepeat to the end of the list.
    procedure AddItem(value : TFhirTimingRepeat); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirTimingRepeat) : Integer;
    
    // Insert FhirTimingRepeat before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirTimingRepeat;
    
    // Insert an existing FhirTimingRepeat before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirTimingRepeat);
    
    // Get the iIndexth FhirTimingRepeat. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirTimingRepeat);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirTimingRepeat;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirTimingRepeats[index : Integer] : TFhirTimingRepeat read GetItemN write SetItemN; default;
  End;

  // Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
  TFhirTiming = class (TFhirBackboneType)
  protected
    FeventList : TFhirDateTimeList;
    FRepeat_ : TFhirTimingRepeat;
    FCode : TFhirCodeableConcept;
    function GetEventList : TFhirDateTimeList;
    function GetHasEventList : Boolean;
    procedure SetRepeat_(value : TFhirTimingRepeat);
    procedure SetCode(value : TFhirCodeableConcept);
  
    procedure GetChildrenByName(child_name : string; list : TFHIRSelectionList); override;
    procedure ListProperties(oList : TFHIRPropertyList; bInheritedProperties, bPrimitiveValues : Boolean); override;
    procedure listFieldsInOrder(fields : TStringList); override;
    function sizeInBytesV : cardinal; override;
  public
    constructor Create; override;
    destructor Destroy; override;
    procedure Assign(oSource : TFslObject); override;
    function Link : TFhirTiming; overload;
    function Clone : TFhirTiming; overload;
    function setProperty(propName : string; propValue : TFHIRObject) : TFHIRObject; override;
    procedure insertProperty(propName : string; propValue : TFHIRObject; index : integer); override;
    function createPropertyValue(propName : string) : TFHIRObject; override;
    function getTypesForProperty(propName : string): String; override;
    procedure deleteProperty(propName : string; value : TFHIRObject); override;
    procedure replaceProperty(propName : string; existing, new : TFHIRObject); override;
    procedure reorderProperty(propName : string; source, destination : integer); override;
    function fhirType : string; override;
    function Equals(other : TObject) : boolean; override;
    function isEmpty : boolean; override;
  {$IFNDEF FPC}published{$ENDIF}
    // Identifies specific times when the event occurs.
    property eventList : TFhirDateTimeList read GetEventList;
    property hasEventList : boolean read GetHasEventList;

    // Typed access to A set of rules that describe when the event is scheduled. (defined for API consistency)
    property repeat_ : TFhirTimingRepeat read FRepeat_ write SetRepeat_;
    // A set of rules that describe when the event is scheduled.
    property repeat_Element : TFhirTimingRepeat read FRepeat_ write SetRepeat_;

    // Typed access to A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code). (defined for API consistency)
    property code : TFhirCodeableConcept read FCode write SetCode;
    // A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).
    property codeElement : TFhirCodeableConcept read FCode write SetCode;

  end;

  TFhirTimingListEnumerator = class (TFslObject)
  private
    FIndex : integer;
    FList : TFhirTimingList;
    function GetCurrent : TFhirTiming;
  protected
    function sizeInBytesV : cardinal; override;
  public
    constructor Create(list : TFhirTimingList);
    destructor Destroy; override;
    function MoveNext : boolean;
    property Current : TFhirTiming read GetCurrent;
  end;

  TFhirTimingList = class (TFHIRObjectList)
  private
    function GetItemN(index : Integer) : TFhirTiming;
    procedure SetItemN(index : Integer; value : TFhirTiming);
  protected
    function ItemClass : TFslObjectClass; override;
  public
    function Link : TFhirTimingList; overload;
    function Clone : TFhirTimingList; overload;
    function GetEnumerator : TFhirTimingListEnumerator;
    
    //  Add a FhirTiming to the end of the list.
    function Append : TFhirTiming;
    
    // Add an already existing FhirTiming to the end of the list.
    procedure AddItem(value : TFhirTiming); overload;
    
    // See if an item is already in the list. returns -1 if not in the list
    function IndexOf(value : TFhirTiming) : Integer;
    
    // Insert FhirTiming before the designated index (0 = first item)
    function Insert(index : Integer) : TFhirTiming;
    
    // Insert an existing FhirTiming before the designated index (0 = first item)
    procedure InsertItem(index : Integer; value : TFhirTiming);
    
    // Get the iIndexth FhirTiming. (0 = first item)
    procedure SetItemByIndex(index : Integer; value : TFhirTiming);
    
    // The number of items in the collection
    function Item(index : Integer) : TFhirTiming;
    
    // The number of items in the collection
    function Count : Integer; overload;
    
    // Remove the indexth item. The first item is index 0.
    procedure Remove(index : Integer);
    
    // Remove All Items from the list
    procedure ClearItems;
    
    property FhirTimings[index : Integer] : TFhirTiming read GetItemN write SetItemN; default;
  End;

function asEnum(systems, values: array of String; obj : TFHIRObject) : TFhirEnum;
function asDate(obj : TFHIRObject) : TFhirDate;
function asDateTime(obj : TFHIRObject) : TFhirDateTime;
function asString(obj : TFHIRObject) : TFhirString;
function asInteger(obj : TFHIRObject) : TFhirInteger;
function asUri(obj : TFHIRObject) : TFhirUri;
function asInstant(obj : TFHIRObject) : TFhirInstant;
function asXhtml(obj : TFHIRObject) : TFhirXhtml;
function asBoolean(obj : TFHIRObject) : TFhirBoolean;
function asBase64Binary(obj : TFHIRObject) : TFhirBase64Binary;
function asTime(obj : TFHIRObject) : TFhirTime;
function asDecimal(obj : TFHIRObject) : TFhirDecimal;
function asCode(obj : TFHIRObject) : TFhirCode;
function asCanonical(obj : TFHIRObject) : TFhirCanonical;
function asOid(obj : TFHIRObject) : TFhirOid;
function asUuid(obj : TFHIRObject) : TFhirUuid;
function asUrl(obj : TFHIRObject) : TFhirUrl;
function asMarkdown(obj : TFHIRObject) : TFhirMarkdown;
function asUnsignedInt(obj : TFHIRObject) : TFhirUnsignedInt;
function asId(obj : TFHIRObject) : TFhirId;
function asPositiveInt(obj : TFHIRObject) : TFhirPositiveInt;
function asInteger64(obj : TFHIRObject) : TFhirInteger64;

implementation

uses
  fhir5_elementmodel, fhir5_utilities;

{ TFhirElement }

constructor TFhirElement.Create;
begin
  inherited;
end;

destructor TFhirElement.Destroy;
begin
  FId.free;
  FExtensionList.Free;
  inherited;
end;

procedure TFhirElement.Assign(oSource : TFslObject);
begin
  inherited;
  idElement := TFhirElement(oSource).idElement.Clone;
  if (TFhirElement(oSource).FExtensionList = nil) then
  begin
    FExtensionList.free;
    FExtensionList := nil;
  end
  else
  begin
    if FExtensionList = nil then
      FExtensionList := TFhirExtensionList.Create;
    FExtensionList.Assign(TFhirElement(oSource).FExtensionList);
  end;
end;

procedure TFhirElement.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'id') Then
     list.add(self.link, 'id', FId.Link);
  if (child_name = 'extension') Then
    list.addAll(self, 'extension', FExtensionList);
end;

function TFhirElement.getId: string;
begin
  result := GetIdST;
end;

procedure TFhirElement.setIdValue(id: String);
begin
  SetIdSt(id);
end;

procedure TFhirElement.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'id', 'string', false, TFhirString, FId.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'extension', 'Extension', true, TFhirExtension, FExtensionList.Link)) {L1039};
end;

function TFhirElement.setProperty(propName: string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'id') then
  begin
    IdElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'extension') then
  begin
    ExtensionList.add(propValue as TFhirExtension) {L1048};
    result := propValue;
  end
  else
    result := inherited setProperty(propName, propValue);
end;

procedure TFhirElement.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'extension') then ExtensionList.insertItem(index, propValue as TFhirExtension) {L1049}
  else inherited;
end;

function TFhirElement.createPropertyValue(propName: string) : TFHIRObject;
begin
  if (propName = 'id') then result := TFhirString.create() {L1223}
  else if (propName = 'extension') then result := ExtensionList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElement.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'id') then result := 'string'
  else if (propName = 'extension') then result := 'Extension'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElement.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'id') then IdElement := nil
  else if (propName = 'extension') then deletePropertyValue('extension', ExtensionList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElement.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'id') then IdElement := asString(new) {L1222}
  else if (propName = 'extension') then replacePropertyValue('extension', ExtensionList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElement.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'extension') then ExtensionList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirElement.equals(other : TObject) : boolean; 
var
  o : TFhirElement;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElement)) then
    result := false
  else
  begin
    o := TFhirElement(other);
    result := compareDeep(idElement, o.idElement, true) and compareDeep(extensionList, o.extensionList, true);
  end;
end;

function TFhirElement.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FId) and isEmptyProp(FextensionList);
end;

function TFhirElement.Link : TFhirElement;
begin
  result := TFhirElement(inherited Link);
end;

function TFhirElement.Clone : TFhirElement;
begin
  result := TFhirElement(inherited Clone);
end;

procedure TFhirElement.SetId(value : TFhirString);
begin
  FId.free;
  FId := value; {L1134}
end;

function TFhirElement.GetIdST : String;
begin
  if FId = nil then
    result := ''
  else
    result := FId.value;
end;

procedure TFhirElement.SetIdST(value : String);
begin
  if value <> '' then
  begin
    if FId = nil then
      FId := TFhirString.create;
    FId.value := value
  end
  else if FId <> nil then
    FId.value := '';
end;

function TFhirElement.GetExtensionList : TFhirExtensionList;
begin
  if FExtensionList = nil then
    FExtensionList := TFhirExtensionList.Create;
  result := FExtensionList;
end;

function TFhirElement.GetHasExtensionList : boolean;
begin
  result := (FExtensionList <> nil) and (FExtensionList.count > 0);
end;

function TFhirElement.noExtensions: TFhirElement;
begin
  DisallowExtensions := true;
  result := self;
end;

procedure TFhirElement.addExtension(url: String; value: TFHIRObject);
var
  ex : TFhirExtension;
begin
  ex := extensionList.Append;
  ex.url := url;
  ex.value := value as TFhirDataType;
end;

function TFhirElement.extensionCount(url: String): integer;
var
  ex : TFhirExtension;
begin
  result := 0;
  for ex in ExtensionList do
    if (ex.url = url) or (url = '') then
      inc(result);
end;
      
function TFhirElement.extensions(url: String): TFslList<TFHIRObject>;
var
  ex : TFhirExtension;
begin
  result := TFslList<TFHIRObject>.create;
  try
    for ex in ExtensionList do
      if ex.url = url then
        result.Add(ex.Link);
    result.link;
  finally
    result.Free;
  end;
end;

function TFhirElement.hasExtension(url: string): boolean;
var
  ex : TFhirExtension;
begin
  result := false;
  for ex in ExtensionList do
    if ex.url = url then
      exit(true);
end;
      
function TFhirElement.hasExtensions: boolean;
begin
  result := FextensionList.Count > 0;
end;

function TFhirElement.getExtensionString(url: String): String;
var
  ex : TFhirExtension;
begin
  result := '';
  for ex in ExtensionList do
  begin
    if ex.url = url then
    begin
      if not ex.value.isPrimitive then
        raise EFHIRException.create('Complex extension '+url)
      else if result <> '' then
        raise EFHIRException.create('Duplicate extension '+url)
      else
        result := ex.value.primitiveValue;
    end;
  end;
end;
procedure TFhirElement.listElementFieldsInOrder(fields: TStringList);
begin
  fields.add('@id');
  fields.add('extension');
end;

procedure TFhirElement.listFieldsInOrder(fields : TStringList);
begin
  fields.add('@id');
  fields.add('extension');
end;

{ TFhirBackboneElement }

constructor TFhirBackboneElement.Create;
begin
  inherited;
end;

destructor TFhirBackboneElement.Destroy;
begin
  FModifierExtensionList.Free;
  inherited;
end;

procedure TFhirBackboneElement.Assign(oSource : TFslObject);
begin
  inherited;
  if (TFhirBackboneElement(oSource).FModifierExtensionList = nil) then
  begin
    FModifierExtensionList.free;
    FModifierExtensionList := nil;
  end
  else
  begin
    if FModifierExtensionList = nil then
      FModifierExtensionList := TFhirExtensionList.Create;
    FModifierExtensionList.Assign(TFhirBackboneElement(oSource).FModifierExtensionList);
  end;
end;

procedure TFhirBackboneElement.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'modifierExtension') Then
    list.addAll(self, 'modifierExtension', FModifierExtensionList);
end;

procedure TFhirBackboneElement.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'modifierExtension', 'Extension', true, TFhirExtension, FModifierExtensionList.Link)) {L1039};
end;

function TFhirBackboneElement.setProperty(propName: string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'modifierExtension') then
  begin
    ModifierExtensionList.add(propValue as TFhirExtension) {L1048};
    result := propValue;
  end
  else
    result := inherited setProperty(propName, propValue);
end;

procedure TFhirBackboneElement.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'modifierExtension') then ModifierExtensionList.insertItem(index, propValue as TFhirExtension) {L1049}
  else inherited;
end;

function TFhirBackboneElement.createPropertyValue(propName: string) : TFHIRObject;
begin
  if (propName = 'modifierExtension') then result := ModifierExtensionList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirBackboneElement.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'modifierExtension') then result := 'Extension'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirBackboneElement.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'modifierExtension') then deletePropertyValue('modifierExtension', ModifierExtensionList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirBackboneElement.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'modifierExtension') then replacePropertyValue('modifierExtension', ModifierExtensionList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirBackboneElement.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'modifierExtension') then ModifierExtensionList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirBackboneElement.equals(other : TObject) : boolean; 
var
  o : TFhirBackboneElement;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirBackboneElement)) then
    result := false
  else
  begin
    o := TFhirBackboneElement(other);
    result := compareDeep(modifierExtensionList, o.modifierExtensionList, true);
  end;
end;

function TFhirBackboneElement.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FmodifierExtensionList);
end;

function TFhirBackboneElement.Link : TFhirBackboneElement;
begin
  result := TFhirBackboneElement(inherited Link);
end;

function TFhirBackboneElement.Clone : TFhirBackboneElement;
begin
  result := TFhirBackboneElement(inherited Clone);
end;

function TFhirBackboneElement.GetModifierExtensionList : TFhirExtensionList;
begin
  if FModifierExtensionList = nil then
    FModifierExtensionList := TFhirExtensionList.Create;
  result := FModifierExtensionList;
end;

function TFhirBackboneElement.GetHasModifierExtensionList : boolean;
begin
  result := (FModifierExtensionList <> nil) and (FModifierExtensionList.count > 0);
end;

procedure TFhirBackboneElement.listBackboneElementFieldsInOrder(fields: TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('modifierExtension');
end;

procedure TFhirBackboneElement.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('modifierExtension');
end;

{ TFhirDataType }

function TFhirDataType.Link : TFhirDataType;
begin
  result := TFhirDataType(inherited Link);
end;

function TFhirDataType.Clone : TFhirDataType;
begin
  result := TFhirDataType(inherited Clone);
end;

function TFhirDataType.ToString : String;
begin
  result := gen(self);
end;

function TFhirDataType.isType : boolean;
begin
  result := true;
end;

{ TFhirBackboneType }

constructor TFhirBackboneType.Create;
begin
  inherited;
end;

destructor TFhirBackboneType.Destroy;
begin
  FModifierExtensionList.Free;
  inherited;
end;

procedure TFhirBackboneType.Assign(oSource : TFslObject);
begin
  inherited;
  if (TFhirBackboneType(oSource).FModifierExtensionList = nil) then
  begin
    FModifierExtensionList.free;
    FModifierExtensionList := nil;
  end
  else
  begin
    if FModifierExtensionList = nil then
      FModifierExtensionList := TFhirExtensionList.Create;
    FModifierExtensionList.Assign(TFhirBackboneType(oSource).FModifierExtensionList);
  end;
end;

procedure TFhirBackboneType.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'modifierExtension') Then
    list.addAll(self, 'modifierExtension', FModifierExtensionList);
end;

procedure TFhirBackboneType.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'modifierExtension', 'Extension', true, TFhirExtension, FModifierExtensionList.Link)) {L1039};
end;

function TFhirBackboneType.setProperty(propName: string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'modifierExtension') then
  begin
    ModifierExtensionList.add(propValue as TFhirExtension) {L1048};
    result := propValue;
  end
  else
    result := inherited setProperty(propName, propValue);
end;

procedure TFhirBackboneType.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'modifierExtension') then ModifierExtensionList.insertItem(index, propValue as TFhirExtension) {L1049}
  else inherited;
end;

function TFhirBackboneType.createPropertyValue(propName: string) : TFHIRObject;
begin
  if (propName = 'modifierExtension') then result := ModifierExtensionList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirBackboneType.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'modifierExtension') then result := 'Extension'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirBackboneType.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'modifierExtension') then deletePropertyValue('modifierExtension', ModifierExtensionList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirBackboneType.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'modifierExtension') then replacePropertyValue('modifierExtension', ModifierExtensionList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirBackboneType.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'modifierExtension') then ModifierExtensionList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirBackboneType.equals(other : TObject) : boolean; 
var
  o : TFhirBackboneType;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirBackboneType)) then
    result := false
  else
  begin
    o := TFhirBackboneType(other);
    result := compareDeep(modifierExtensionList, o.modifierExtensionList, true);
  end;
end;

function TFhirBackboneType.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FmodifierExtensionList);
end;

function TFhirBackboneType.Link : TFhirBackboneType;
begin
  result := TFhirBackboneType(inherited Link);
end;

function TFhirBackboneType.Clone : TFhirBackboneType;
begin
  result := TFhirBackboneType(inherited Clone);
end;

function TFhirBackboneType.GetModifierExtensionList : TFhirExtensionList;
begin
  if FModifierExtensionList = nil then
    FModifierExtensionList := TFhirExtensionList.Create;
  result := FModifierExtensionList;
end;

function TFhirBackboneType.GetHasModifierExtensionList : boolean;
begin
  result := (FModifierExtensionList <> nil) and (FModifierExtensionList.count > 0);
end;

procedure TFhirBackboneType.listBackboneTypeFieldsInOrder(fields: TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('modifierExtension');
end;

procedure TFhirBackboneType.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('modifierExtension');
end;

{ TFhirPrimitiveType }

function TFhirPrimitiveType.Link : TFhirPrimitiveType;
begin
  result := TFhirPrimitiveType(inherited Link);
end;

function TFhirPrimitiveType.Clone : TFhirPrimitiveType;
begin
  result := TFhirPrimitiveType(inherited Clone);
end;

function TFhirPrimitiveType.GetStringValue : string;
begin
  if self = nil then
    result := ''
  else
    result := AsStringValue;
end;

function TFhirPrimitiveType.isPrimitive: boolean;
begin
  result := true;
end;

function TFhirPrimitiveType.hasPrimitiveValue: boolean;
begin
  result := StringValue <> '';
end;

function TFhirPrimitiveType.primitiveValue: string;
begin
  result := StringValue;
end;

function TFhirPrimitiveType.setProperty(propName: string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'value') then
  begin
    StringValue := propValue.primitiveValue;
    propValue.Free;
    result := self;
  end
  else
    result := inherited setProperty(propName, propValue);
end;

function TFhirPrimitiveType.toString : String;
begin
  result := StringValue;
end;

{ TFhirEnum }

Constructor TFhirEnum.Create(system : String; value : String);
begin
  Create;
  FSystem := system;
  FValue := value;
end;

destructor TFhirEnum.Destroy;
begin
  inherited;
end;

function TFhirEnum.fhirType : string;
begin
  result := 'code';
end;

function TFhirEnum.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
  inc(result, (FSystem.length * sizeof(char)) + 12);
end;

function TFHIREnum.isEnum : boolean;
begin
  result := true;
end;

procedure TFhirEnum.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirEnum.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'enum', false, nil, FValue));
end;

procedure TFhirEnum.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirEnum(oSource).Value;
end;

function TFhirEnum.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirEnum.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirEnum.equals(other : TObject) : boolean; 
var
  o : TFhirEnum;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirEnum)) then
    result := false
  else
  begin
    o := TFhirEnum(other);
    result := o.value = value;
  end;
end;

function TFhirEnum.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirEnum.Link : TFhirEnum;
begin
  result := TFhirEnum(inherited Link);
end;

function TFhirEnum.Clone : TFhirEnum;
begin
  result := TFhirEnum(inherited Clone);
end;

procedure TFhirEnum.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirEnum.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirEnumListEnumerator }

Constructor TFhirEnumListEnumerator.Create(list : TFhirEnumList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirEnumListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirEnumListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirEnumListEnumerator.GetCurrent : TFhirEnum;
begin
  Result := FList[FIndex];
end;

function TFhirEnumListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirEnumList }
procedure TFhirEnumList.AddItem(value: TFhirEnum);
begin
  assert(value.ClassName = 'TFhirEnum', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirEnum');
  add(value);
end;

constructor TFhirEnumList.Create(Systems, Codes : Array Of String);
var
  i : integer;
begin
  inherited create;
  SetLength(FSystems, length(systems));
  SetLength(FCodes, length(codes));
  for i := 0 to length(systems) - 1 do
  begin
    FSystems[i] := systems[i];
    FCodes[i] := codes[i];
  end;
end;

procedure TFhirEnumList.AddItem(value: String);
begin
  add(TFhirEnum.create(FSystems[StringArrayIndexOf(FCodes, value)], value));
end;

function TFhirEnumList.Append: TFhirEnum;
begin
  result := TFhirEnum.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirEnumList.ClearItems;
begin
  Clear;
end;

function TFhirEnumList.GetEnumerator : TFhirEnumListEnumerator;
begin
  result := TFhirEnumListEnumerator.Create(self.link);
end;

function TFhirEnumList.Clone: TFhirEnumList;
begin
  result := TFhirEnumList(inherited Clone);
end;

function TFhirEnumList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirEnumList.GetItemN(index: Integer): TFhirEnum;
begin
  result := TFhirEnum(ObjectByIndex[index]);
end;

function TFhirEnumList.ItemClass: TFslObjectClass;
begin
  result := TFhirEnum;
end;
function TFhirEnumList.IndexOf(value: TFhirEnum): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirEnumList.Insert(index: Integer): TFhirEnum;
begin
  result := TFhirEnum.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirEnumList.InsertItem(index: Integer; value: TFhirEnum);
begin
  assert(value is TFhirEnum);
  Inherited Insert(index, value);
end;

function TFhirEnumList.Item(index: Integer): TFhirEnum;
begin
  result := TFhirEnum(ObjectByIndex[index]);
end;

function TFhirEnumList.Link: TFhirEnumList;
begin
  result := TFhirEnumList(inherited Link);
end;

procedure TFhirEnumList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirEnumList.SetItemByIndex(index: Integer; value: TFhirEnum);
begin
  assert(value is TFhirEnum);
  FhirEnums[index] := value;
end;

procedure TFhirEnumList.SetItemN(index: Integer; value: TFhirEnum);
begin
  assert(value is TFhirEnum);
  ObjectByIndex[index] := value;
end;

{ TFhirDate }

Constructor TFhirDate.Create(value : TFslDateTime);
begin
  Create;
  FValue := value.fixPrecision(dtpDay);
end;

destructor TFhirDate.Destroy;
begin
  inherited;
end;

function TFhirDate.fhirType : string;
begin
  result := 'date';
end;

function TFhirDate.getdateValue : TFslDateTime;
begin
  result := FValue;
end;

procedure TFhirDate.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirDate.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    if (FValue.notNull) then
      oList.add(TFHIRProperty.create(self, 'value', 'date', false, nil, FValue.ToString));
end;

procedure TFhirDate.setDateValue(value: TFslDateTime);
begin
  FValue := value;
end;

procedure TFhirDate.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirDate(oSource).Value;
end;

function TFhirDate.AsStringValue : string;
begin
  if (FValue.null) then
    result := ''
  else
    result := FValue.toXml;
end;

procedure TFhirDate.SetStringValue(value : string);
begin
  if (value = '') then
    FValue := TFslDateTime.makeNull
  else
    FValue := TFslDateTime.fromXml(value);
end;

function TFhirDate.equals(other : TObject) : boolean; 
var
  o : TFhirDate;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDate)) then
    result := false
  else
  begin
    o := TFhirDate(other);
    result := o.value.equal(value);
  end;
end;

function TFhirDate.isDateTime: boolean;
begin
  result := true;
end;

function TFhirDate.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue.null);
end;

function TFhirDate.Link : TFhirDate;
begin
  result := TFhirDate(inherited Link);
end;

function TFhirDate.Clone : TFhirDate;
begin
  result := TFhirDate(inherited Clone);
end;

procedure TFhirDate.setValue(value : TFslDateTime);
begin
  FValue := value;
end;

procedure TFhirDate.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirDate.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
end;

{ TFhirDateListEnumerator }

Constructor TFhirDateListEnumerator.Create(list : TFhirDateList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDateListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDateListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDateListEnumerator.GetCurrent : TFhirDate;
begin
  Result := FList[FIndex];
end;

function TFhirDateListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDateList }
procedure TFhirDateList.AddItem(value: TFhirDate);
begin
  assert(value.ClassName = 'TFhirDate', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDate');
  add(value);
end;

procedure TFhirDateList.AddItem(value: TFslDateTime);
begin
  add(TFhirDate.create(value));
end;

function TFhirDateList.Append: TFhirDate;
begin
  result := TFhirDate.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDateList.ClearItems;
begin
  Clear;
end;

function TFhirDateList.GetEnumerator : TFhirDateListEnumerator;
begin
  result := TFhirDateListEnumerator.Create(self.link);
end;

function TFhirDateList.Clone: TFhirDateList;
begin
  result := TFhirDateList(inherited Clone);
end;

function TFhirDateList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDateList.GetItemN(index: Integer): TFhirDate;
begin
  result := TFhirDate(ObjectByIndex[index]);
end;

function TFhirDateList.ItemClass: TFslObjectClass;
begin
  result := TFhirDate;
end;
function TFhirDateList.IndexOf(value: TFhirDate): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDateList.Insert(index: Integer): TFhirDate;
begin
  result := TFhirDate.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDateList.InsertItem(index: Integer; value: TFhirDate);
begin
  assert(value is TFhirDate);
  Inherited Insert(index, value);
end;

function TFhirDateList.Item(index: Integer): TFhirDate;
begin
  result := TFhirDate(ObjectByIndex[index]);
end;

function TFhirDateList.Link: TFhirDateList;
begin
  result := TFhirDateList(inherited Link);
end;

procedure TFhirDateList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDateList.SetItemByIndex(index: Integer; value: TFhirDate);
begin
  assert(value is TFhirDate);
  FhirDates[index] := value;
end;

procedure TFhirDateList.SetItemN(index: Integer; value: TFhirDate);
begin
  assert(value is TFhirDate);
  ObjectByIndex[index] := value;
end;

{ TFhirDateTime }

Constructor TFhirDateTime.Create(value : TFslDateTime);
begin
  Create;
  FValue := value;
end;

destructor TFhirDateTime.Destroy;
begin
  inherited;
end;

function TFhirDateTime.fhirType : string;
begin
  result := 'dateTime';
end;

function TFhirDateTime.getdateValue : TFslDateTime;
begin
  result := FValue;
end;

procedure TFhirDateTime.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirDateTime.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    if (FValue.notNull) then
      oList.add(TFHIRProperty.create(self, 'value', 'dateTime', false, nil, FValue.ToString));
end;

procedure TFhirDateTime.setDateValue(value: TFslDateTime);
begin
  FValue := value;
end;

procedure TFhirDateTime.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirDateTime(oSource).Value;
end;

function TFhirDateTime.AsStringValue : string;
begin
  if (FValue.null) then
    result := ''
  else
    result := FValue.toXml;
end;

procedure TFhirDateTime.SetStringValue(value : string);
begin
  if (value = '') then
    FValue := TFslDateTime.makeNull
  else
    FValue := TFslDateTime.fromXml(value);
end;

function TFhirDateTime.equals(other : TObject) : boolean; 
var
  o : TFhirDateTime;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDateTime)) then
    result := false
  else
  begin
    o := TFhirDateTime(other);
    result := o.value.equal(value);
  end;
end;

function TFhirDateTime.isDateTime: boolean;
begin
  result := true;
end;

function TFhirDateTime.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue.null);
end;

function TFhirDateTime.Link : TFhirDateTime;
begin
  result := TFhirDateTime(inherited Link);
end;

function TFhirDateTime.Clone : TFhirDateTime;
begin
  result := TFhirDateTime(inherited Clone);
end;

procedure TFhirDateTime.setValue(value : TFslDateTime);
begin
  FValue := value;
end;

procedure TFhirDateTime.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirDateTime.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
end;

{ TFhirDateTimeListEnumerator }

Constructor TFhirDateTimeListEnumerator.Create(list : TFhirDateTimeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDateTimeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDateTimeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDateTimeListEnumerator.GetCurrent : TFhirDateTime;
begin
  Result := FList[FIndex];
end;

function TFhirDateTimeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDateTimeList }
procedure TFhirDateTimeList.AddItem(value: TFhirDateTime);
begin
  assert(value.ClassName = 'TFhirDateTime', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDateTime');
  add(value);
end;

procedure TFhirDateTimeList.AddItem(value: TFslDateTime);
begin
  add(TFhirDateTime.create(value));
end;

function TFhirDateTimeList.Append: TFhirDateTime;
begin
  result := TFhirDateTime.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDateTimeList.ClearItems;
begin
  Clear;
end;

function TFhirDateTimeList.GetEnumerator : TFhirDateTimeListEnumerator;
begin
  result := TFhirDateTimeListEnumerator.Create(self.link);
end;

function TFhirDateTimeList.Clone: TFhirDateTimeList;
begin
  result := TFhirDateTimeList(inherited Clone);
end;

function TFhirDateTimeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDateTimeList.GetItemN(index: Integer): TFhirDateTime;
begin
  result := TFhirDateTime(ObjectByIndex[index]);
end;

function TFhirDateTimeList.ItemClass: TFslObjectClass;
begin
  result := TFhirDateTime;
end;
function TFhirDateTimeList.IndexOf(value: TFhirDateTime): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDateTimeList.Insert(index: Integer): TFhirDateTime;
begin
  result := TFhirDateTime.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDateTimeList.InsertItem(index: Integer; value: TFhirDateTime);
begin
  assert(value is TFhirDateTime);
  Inherited Insert(index, value);
end;

function TFhirDateTimeList.Item(index: Integer): TFhirDateTime;
begin
  result := TFhirDateTime(ObjectByIndex[index]);
end;

function TFhirDateTimeList.Link: TFhirDateTimeList;
begin
  result := TFhirDateTimeList(inherited Link);
end;

procedure TFhirDateTimeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDateTimeList.SetItemByIndex(index: Integer; value: TFhirDateTime);
begin
  assert(value is TFhirDateTime);
  FhirDateTimes[index] := value;
end;

procedure TFhirDateTimeList.SetItemN(index: Integer; value: TFhirDateTime);
begin
  assert(value is TFhirDateTime);
  ObjectByIndex[index] := value;
end;

{ TFhirString }

Constructor TFhirString.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirString.Destroy;
begin
  inherited;
end;

function TFhirString.fhirType : string;
begin
  result := 'string';
end;

procedure TFhirString.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirString.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'string', false, nil, FValue));
end;

procedure TFhirString.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirString(oSource).Value;
end;

function TFhirString.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirString.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirString.equals(other : TObject) : boolean; 
var
  o : TFhirString;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirString)) then
    result := false
  else
  begin
    o := TFhirString(other);
    result := o.value = value;
  end;
end;

function TFhirString.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirString.Link : TFhirString;
begin
  result := TFhirString(inherited Link);
end;

function TFhirString.Clone : TFhirString;
begin
  result := TFhirString(inherited Clone);
end;

procedure TFhirString.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirString.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirString.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
end;

{ TFhirStringListEnumerator }

Constructor TFhirStringListEnumerator.Create(list : TFhirStringList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStringListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStringListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStringListEnumerator.GetCurrent : TFhirString;
begin
  Result := FList[FIndex];
end;

function TFhirStringListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStringList }
procedure TFhirStringList.AddItem(value: TFhirString);
begin
  assert(value.ClassName = 'TFhirString', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirString');
  add(value);
end;

procedure TFhirStringList.AddItem(value: String);
begin
  add(TFhirString.create(value));
end;

function TFhirStringList.Append: TFhirString;
begin
  result := TFhirString.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStringList.ClearItems;
begin
  Clear;
end;

function TFhirStringList.GetEnumerator : TFhirStringListEnumerator;
begin
  result := TFhirStringListEnumerator.Create(self.link);
end;

function TFhirStringList.Clone: TFhirStringList;
begin
  result := TFhirStringList(inherited Clone);
end;

function TFhirStringList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStringList.GetItemN(index: Integer): TFhirString;
begin
  result := TFhirString(ObjectByIndex[index]);
end;

function TFhirStringList.ItemClass: TFslObjectClass;
begin
  result := TFhirString;
end;
function TFhirStringList.IndexOf(value: TFhirString): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStringList.Insert(index: Integer): TFhirString;
begin
  result := TFhirString.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStringList.InsertItem(index: Integer; value: TFhirString);
begin
  assert(value is TFhirString);
  Inherited Insert(index, value);
end;

function TFhirStringList.Item(index: Integer): TFhirString;
begin
  result := TFhirString(ObjectByIndex[index]);
end;

function TFhirStringList.Link: TFhirStringList;
begin
  result := TFhirStringList(inherited Link);
end;

procedure TFhirStringList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStringList.SetItemByIndex(index: Integer; value: TFhirString);
begin
  assert(value is TFhirString);
  FhirStrings[index] := value;
end;

procedure TFhirStringList.SetItemN(index: Integer; value: TFhirString);
begin
  assert(value is TFhirString);
  ObjectByIndex[index] := value;
end;

{ TFhirInteger }

Constructor TFhirInteger.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirInteger.Destroy;
begin
  inherited;
end;

function TFhirInteger.fhirType : string;
begin
  result := 'integer';
end;

procedure TFhirInteger.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirInteger.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'integer', false, nil, FValue));
end;

procedure TFhirInteger.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirInteger(oSource).Value;
end;

function TFhirInteger.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirInteger.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirInteger.equals(other : TObject) : boolean; 
var
  o : TFhirInteger;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirInteger)) then
    result := false
  else
  begin
    o := TFhirInteger(other);
    result := o.value = value;
  end;
end;

function TFhirInteger.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirInteger.Link : TFhirInteger;
begin
  result := TFhirInteger(inherited Link);
end;

function TFhirInteger.Clone : TFhirInteger;
begin
  result := TFhirInteger(inherited Clone);
end;

procedure TFhirInteger.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirInteger.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirInteger.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
end;

{ TFhirIntegerListEnumerator }

Constructor TFhirIntegerListEnumerator.Create(list : TFhirIntegerList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirIntegerListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirIntegerListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirIntegerListEnumerator.GetCurrent : TFhirInteger;
begin
  Result := FList[FIndex];
end;

function TFhirIntegerListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirIntegerList }
procedure TFhirIntegerList.AddItem(value: TFhirInteger);
begin
  assert(value.ClassName = 'TFhirInteger', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirInteger');
  add(value);
end;

procedure TFhirIntegerList.AddItem(value: String);
begin
  add(TFhirInteger.create(value));
end;

function TFhirIntegerList.Append: TFhirInteger;
begin
  result := TFhirInteger.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirIntegerList.ClearItems;
begin
  Clear;
end;

function TFhirIntegerList.GetEnumerator : TFhirIntegerListEnumerator;
begin
  result := TFhirIntegerListEnumerator.Create(self.link);
end;

function TFhirIntegerList.Clone: TFhirIntegerList;
begin
  result := TFhirIntegerList(inherited Clone);
end;

function TFhirIntegerList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirIntegerList.GetItemN(index: Integer): TFhirInteger;
begin
  result := TFhirInteger(ObjectByIndex[index]);
end;

function TFhirIntegerList.ItemClass: TFslObjectClass;
begin
  result := TFhirInteger;
end;
function TFhirIntegerList.IndexOf(value: TFhirInteger): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirIntegerList.Insert(index: Integer): TFhirInteger;
begin
  result := TFhirInteger.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirIntegerList.InsertItem(index: Integer; value: TFhirInteger);
begin
  assert(value is TFhirInteger);
  Inherited Insert(index, value);
end;

function TFhirIntegerList.Item(index: Integer): TFhirInteger;
begin
  result := TFhirInteger(ObjectByIndex[index]);
end;

function TFhirIntegerList.Link: TFhirIntegerList;
begin
  result := TFhirIntegerList(inherited Link);
end;

procedure TFhirIntegerList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirIntegerList.SetItemByIndex(index: Integer; value: TFhirInteger);
begin
  assert(value is TFhirInteger);
  FhirIntegers[index] := value;
end;

procedure TFhirIntegerList.SetItemN(index: Integer; value: TFhirInteger);
begin
  assert(value is TFhirInteger);
  ObjectByIndex[index] := value;
end;

{ TFhirUri }

Constructor TFhirUri.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirUri.Destroy;
begin
  inherited;
end;

function TFhirUri.fhirType : string;
begin
  result := 'uri';
end;

procedure TFhirUri.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirUri.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'uri', false, nil, FValue));
end;

procedure TFhirUri.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirUri(oSource).Value;
end;

function TFhirUri.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirUri.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirUri.equals(other : TObject) : boolean; 
var
  o : TFhirUri;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirUri)) then
    result := false
  else
  begin
    o := TFhirUri(other);
    result := o.value = value;
  end;
end;

function TFhirUri.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirUri.Link : TFhirUri;
begin
  result := TFhirUri(inherited Link);
end;

function TFhirUri.Clone : TFhirUri;
begin
  result := TFhirUri(inherited Clone);
end;

procedure TFhirUri.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirUri.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirUri.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
end;

{ TFhirUriListEnumerator }

Constructor TFhirUriListEnumerator.Create(list : TFhirUriList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirUriListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirUriListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirUriListEnumerator.GetCurrent : TFhirUri;
begin
  Result := FList[FIndex];
end;

function TFhirUriListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirUriList }
procedure TFhirUriList.AddItem(value: TFhirUri);
begin
  assert(value.ClassName = 'TFhirUri', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirUri');
  add(value);
end;

procedure TFhirUriList.AddItem(value: String);
begin
  add(TFhirUri.create(value));
end;

function TFhirUriList.Append: TFhirUri;
begin
  result := TFhirUri.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUriList.ClearItems;
begin
  Clear;
end;

function TFhirUriList.GetEnumerator : TFhirUriListEnumerator;
begin
  result := TFhirUriListEnumerator.Create(self.link);
end;

function TFhirUriList.Clone: TFhirUriList;
begin
  result := TFhirUriList(inherited Clone);
end;

function TFhirUriList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirUriList.GetItemN(index: Integer): TFhirUri;
begin
  result := TFhirUri(ObjectByIndex[index]);
end;

function TFhirUriList.ItemClass: TFslObjectClass;
begin
  result := TFhirUri;
end;
function TFhirUriList.IndexOf(value: TFhirUri): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirUriList.Insert(index: Integer): TFhirUri;
begin
  result := TFhirUri.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUriList.InsertItem(index: Integer; value: TFhirUri);
begin
  assert(value is TFhirUri);
  Inherited Insert(index, value);
end;

function TFhirUriList.Item(index: Integer): TFhirUri;
begin
  result := TFhirUri(ObjectByIndex[index]);
end;

function TFhirUriList.Link: TFhirUriList;
begin
  result := TFhirUriList(inherited Link);
end;

procedure TFhirUriList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirUriList.SetItemByIndex(index: Integer; value: TFhirUri);
begin
  assert(value is TFhirUri);
  FhirUris[index] := value;
end;

procedure TFhirUriList.SetItemN(index: Integer; value: TFhirUri);
begin
  assert(value is TFhirUri);
  ObjectByIndex[index] := value;
end;

{ TFhirInstant }

Constructor TFhirInstant.Create(value : TFslDateTime);
begin
  Create;
  FValue := value;
end;

destructor TFhirInstant.Destroy;
begin
  inherited;
end;

function TFhirInstant.fhirType : string;
begin
  result := 'instant';
end;

function TFhirInstant.getdateValue : TFslDateTime;
begin
  result := FValue;
end;

procedure TFhirInstant.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirInstant.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    if (FValue.notNull) then
      oList.add(TFHIRProperty.create(self, 'value', 'instant', false, nil, FValue.ToString));
end;

procedure TFhirInstant.setDateValue(value: TFslDateTime);
begin
  FValue := value;
end;

procedure TFhirInstant.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirInstant(oSource).Value;
end;

function TFhirInstant.AsStringValue : string;
begin
  if (FValue.null) then
    result := ''
  else
    result := FValue.toXml;
end;

procedure TFhirInstant.SetStringValue(value : string);
begin
  if (value = '') then
    FValue := TFslDateTime.makeNull
  else
    FValue := TFslDateTime.fromXml(value);
end;

function TFhirInstant.equals(other : TObject) : boolean; 
var
  o : TFhirInstant;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirInstant)) then
    result := false
  else
  begin
    o := TFhirInstant(other);
    result := o.value.equal(value);
  end;
end;

function TFhirInstant.isDateTime: boolean;
begin
  result := true;
end;

function TFhirInstant.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue.null);
end;

function TFhirInstant.Link : TFhirInstant;
begin
  result := TFhirInstant(inherited Link);
end;

function TFhirInstant.Clone : TFhirInstant;
begin
  result := TFhirInstant(inherited Clone);
end;

procedure TFhirInstant.setValue(value : TFslDateTime);
begin
  FValue := value;
end;

procedure TFhirInstant.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirInstant.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
end;

{ TFhirInstantListEnumerator }

Constructor TFhirInstantListEnumerator.Create(list : TFhirInstantList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirInstantListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirInstantListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirInstantListEnumerator.GetCurrent : TFhirInstant;
begin
  Result := FList[FIndex];
end;

function TFhirInstantListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirInstantList }
procedure TFhirInstantList.AddItem(value: TFhirInstant);
begin
  assert(value.ClassName = 'TFhirInstant', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirInstant');
  add(value);
end;

procedure TFhirInstantList.AddItem(value: TFslDateTime);
begin
  add(TFhirInstant.create(value));
end;

function TFhirInstantList.Append: TFhirInstant;
begin
  result := TFhirInstant.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirInstantList.ClearItems;
begin
  Clear;
end;

function TFhirInstantList.GetEnumerator : TFhirInstantListEnumerator;
begin
  result := TFhirInstantListEnumerator.Create(self.link);
end;

function TFhirInstantList.Clone: TFhirInstantList;
begin
  result := TFhirInstantList(inherited Clone);
end;

function TFhirInstantList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirInstantList.GetItemN(index: Integer): TFhirInstant;
begin
  result := TFhirInstant(ObjectByIndex[index]);
end;

function TFhirInstantList.ItemClass: TFslObjectClass;
begin
  result := TFhirInstant;
end;
function TFhirInstantList.IndexOf(value: TFhirInstant): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirInstantList.Insert(index: Integer): TFhirInstant;
begin
  result := TFhirInstant.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirInstantList.InsertItem(index: Integer; value: TFhirInstant);
begin
  assert(value is TFhirInstant);
  Inherited Insert(index, value);
end;

function TFhirInstantList.Item(index: Integer): TFhirInstant;
begin
  result := TFhirInstant(ObjectByIndex[index]);
end;

function TFhirInstantList.Link: TFhirInstantList;
begin
  result := TFhirInstantList(inherited Link);
end;

procedure TFhirInstantList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirInstantList.SetItemByIndex(index: Integer; value: TFhirInstant);
begin
  assert(value is TFhirInstant);
  FhirInstants[index] := value;
end;

procedure TFhirInstantList.SetItemN(index: Integer; value: TFhirInstant);
begin
  assert(value is TFhirInstant);
  ObjectByIndex[index] := value;
end;

{ TFhirXhtml }

Constructor TFhirXhtml.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirXhtml.Destroy;
begin
  inherited;
end;

function TFhirXhtml.fhirType : string;
begin
  result := 'xhtml';
end;

procedure TFhirXhtml.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirXhtml.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'xhtml', false, nil, FValue));
end;

procedure TFhirXhtml.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirXhtml(oSource).Value;
end;

function TFhirXhtml.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirXhtml.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirXhtml.equals(other : TObject) : boolean; 
var
  o : TFhirXhtml;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirXhtml)) then
    result := false
  else
  begin
    o := TFhirXhtml(other);
    result := o.value = value;
  end;
end;

function TFhirXhtml.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirXhtml.Link : TFhirXhtml;
begin
  result := TFhirXhtml(inherited Link);
end;

function TFhirXhtml.Clone : TFhirXhtml;
begin
  result := TFhirXhtml(inherited Clone);
end;

procedure TFhirXhtml.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirXhtml.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirXhtml.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
end;

{ TFhirXhtmlListEnumerator }

Constructor TFhirXhtmlListEnumerator.Create(list : TFhirXhtmlList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirXhtmlListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirXhtmlListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirXhtmlListEnumerator.GetCurrent : TFhirXhtml;
begin
  Result := FList[FIndex];
end;

function TFhirXhtmlListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirXhtmlList }
procedure TFhirXhtmlList.AddItem(value: TFhirXhtml);
begin
  assert(value.ClassName = 'TFhirXhtml', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirXhtml');
  add(value);
end;

procedure TFhirXhtmlList.AddItem(value: String);
begin
  add(TFhirXhtml.create(value));
end;

function TFhirXhtmlList.Append: TFhirXhtml;
begin
  result := TFhirXhtml.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirXhtmlList.ClearItems;
begin
  Clear;
end;

function TFhirXhtmlList.GetEnumerator : TFhirXhtmlListEnumerator;
begin
  result := TFhirXhtmlListEnumerator.Create(self.link);
end;

function TFhirXhtmlList.Clone: TFhirXhtmlList;
begin
  result := TFhirXhtmlList(inherited Clone);
end;

function TFhirXhtmlList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirXhtmlList.GetItemN(index: Integer): TFhirXhtml;
begin
  result := TFhirXhtml(ObjectByIndex[index]);
end;

function TFhirXhtmlList.ItemClass: TFslObjectClass;
begin
  result := TFhirXhtml;
end;
function TFhirXhtmlList.IndexOf(value: TFhirXhtml): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirXhtmlList.Insert(index: Integer): TFhirXhtml;
begin
  result := TFhirXhtml.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirXhtmlList.InsertItem(index: Integer; value: TFhirXhtml);
begin
  assert(value is TFhirXhtml);
  Inherited Insert(index, value);
end;

function TFhirXhtmlList.Item(index: Integer): TFhirXhtml;
begin
  result := TFhirXhtml(ObjectByIndex[index]);
end;

function TFhirXhtmlList.Link: TFhirXhtmlList;
begin
  result := TFhirXhtmlList(inherited Link);
end;

procedure TFhirXhtmlList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirXhtmlList.SetItemByIndex(index: Integer; value: TFhirXhtml);
begin
  assert(value is TFhirXhtml);
  FhirXhtmls[index] := value;
end;

procedure TFhirXhtmlList.SetItemN(index: Integer; value: TFhirXhtml);
begin
  assert(value is TFhirXhtml);
  ObjectByIndex[index] := value;
end;

{ TFhirBoolean }

Constructor TFhirBoolean.Create(value : Boolean);
begin
  Create;
  FValue := value;
end;

destructor TFhirBoolean.Destroy;
begin
  inherited;
end;

function TFhirBoolean.fhirType : string;
begin
  result := 'boolean';
end;

procedure TFhirBoolean.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirBoolean.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'boolean', false, nil, LCBooleanToString(FValue)));
end;

procedure TFhirBoolean.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirBoolean(oSource).Value;
end;

function TFhirBoolean.AsStringValue : string;
begin
  result := LCBooleanToString(FValue);
end;

procedure TFhirBoolean.SetStringValue(value : string);
begin
  FValue := StringToBoolean(value);
end;

function TFhirBoolean.equals(other : TObject) : boolean; 
var
  o : TFhirBoolean;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirBoolean)) then
    result := false
  else
  begin
    o := TFhirBoolean(other);
    result := o.value = value;
  end;
end;

function TFhirBoolean.isBooleanPrimitive: boolean;
begin
  result := true;
end;

function TFhirBoolean.isEmpty : boolean;
begin
  result := false;
end;

function TFhirBoolean.Link : TFhirBoolean;
begin
  result := TFhirBoolean(inherited Link);
end;

function TFhirBoolean.Clone : TFhirBoolean;
begin
  result := TFhirBoolean(inherited Clone);
end;

procedure TFhirBoolean.setValue(value : Boolean);
begin
  FValue := value;
end;

procedure TFhirBoolean.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirBoolean.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
end;

{ TFhirBooleanListEnumerator }

Constructor TFhirBooleanListEnumerator.Create(list : TFhirBooleanList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirBooleanListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirBooleanListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirBooleanListEnumerator.GetCurrent : TFhirBoolean;
begin
  Result := FList[FIndex];
end;

function TFhirBooleanListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirBooleanList }
procedure TFhirBooleanList.AddItem(value: TFhirBoolean);
begin
  assert(value.ClassName = 'TFhirBoolean', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirBoolean');
  add(value);
end;

procedure TFhirBooleanList.AddItem(value: Boolean);
begin
  add(TFhirBoolean.create(value));
end;

function TFhirBooleanList.Append: TFhirBoolean;
begin
  result := TFhirBoolean.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirBooleanList.ClearItems;
begin
  Clear;
end;

function TFhirBooleanList.GetEnumerator : TFhirBooleanListEnumerator;
begin
  result := TFhirBooleanListEnumerator.Create(self.link);
end;

function TFhirBooleanList.Clone: TFhirBooleanList;
begin
  result := TFhirBooleanList(inherited Clone);
end;

function TFhirBooleanList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirBooleanList.GetItemN(index: Integer): TFhirBoolean;
begin
  result := TFhirBoolean(ObjectByIndex[index]);
end;

function TFhirBooleanList.ItemClass: TFslObjectClass;
begin
  result := TFhirBoolean;
end;
function TFhirBooleanList.IndexOf(value: TFhirBoolean): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirBooleanList.Insert(index: Integer): TFhirBoolean;
begin
  result := TFhirBoolean.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirBooleanList.InsertItem(index: Integer; value: TFhirBoolean);
begin
  assert(value is TFhirBoolean);
  Inherited Insert(index, value);
end;

function TFhirBooleanList.Item(index: Integer): TFhirBoolean;
begin
  result := TFhirBoolean(ObjectByIndex[index]);
end;

function TFhirBooleanList.Link: TFhirBooleanList;
begin
  result := TFhirBooleanList(inherited Link);
end;

procedure TFhirBooleanList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirBooleanList.SetItemByIndex(index: Integer; value: TFhirBoolean);
begin
  assert(value is TFhirBoolean);
  FhirBooleans[index] := value;
end;

procedure TFhirBooleanList.SetItemN(index: Integer; value: TFhirBoolean);
begin
  assert(value is TFhirBoolean);
  ObjectByIndex[index] := value;
end;

{ TFhirBase64Binary }

Constructor TFhirBase64Binary.Create(value : TBytes);
begin
  Create;
  FValue := value;
end;

destructor TFhirBase64Binary.Destroy;
begin
  inherited;
end;

function TFhirBase64Binary.fhirType : string;
begin
  result := 'base64Binary';
end;

procedure TFhirBase64Binary.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirBase64Binary.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'base64Binary', false, nil, FValue));
end;

procedure TFhirBase64Binary.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirBase64Binary(oSource).Value;
end;

function TFhirBase64Binary.AsStringValue : string;
begin
  if (length(FValue) = 0) then result := '' else result := string(EncodeBase64(FValue));
end;

procedure TFhirBase64Binary.SetStringValue(value : string);
begin
  if (length(value) = 0) then SetLength(FValue, 0) else FValue := DecodeBase64(wideString(value));
end;

function TFhirBase64Binary.equals(other : TObject) : boolean; 
var
  o : TFhirBase64Binary;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirBase64Binary)) then
    result := false
  else
  begin
    o := TFhirBase64Binary(other);
    result := o.value = value;
  end;
end;

function TFhirBase64Binary.isEmpty : boolean;
begin
  result := inherited isEmpty and (length(FValue) = 0);
end;

function TFhirBase64Binary.Link : TFhirBase64Binary;
begin
  result := TFhirBase64Binary(inherited Link);
end;

function TFhirBase64Binary.Clone : TFhirBase64Binary;
begin
  result := TFhirBase64Binary(inherited Clone);
end;

procedure TFhirBase64Binary.setValue(value : TBytes);
begin
  FValue := value;
end;

procedure TFhirBase64Binary.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirBase64Binary.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, length(FValue));
end;

{ TFhirBase64BinaryListEnumerator }

Constructor TFhirBase64BinaryListEnumerator.Create(list : TFhirBase64BinaryList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirBase64BinaryListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirBase64BinaryListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirBase64BinaryListEnumerator.GetCurrent : TFhirBase64Binary;
begin
  Result := FList[FIndex];
end;

function TFhirBase64BinaryListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirBase64BinaryList }
procedure TFhirBase64BinaryList.AddItem(value: TFhirBase64Binary);
begin
  assert(value.ClassName = 'TFhirBase64Binary', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirBase64Binary');
  add(value);
end;

procedure TFhirBase64BinaryList.AddItem(value: TBytes);
begin
  add(TFhirBase64Binary.create(value));
end;

function TFhirBase64BinaryList.Append: TFhirBase64Binary;
begin
  result := TFhirBase64Binary.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirBase64BinaryList.ClearItems;
begin
  Clear;
end;

function TFhirBase64BinaryList.GetEnumerator : TFhirBase64BinaryListEnumerator;
begin
  result := TFhirBase64BinaryListEnumerator.Create(self.link);
end;

function TFhirBase64BinaryList.Clone: TFhirBase64BinaryList;
begin
  result := TFhirBase64BinaryList(inherited Clone);
end;

function TFhirBase64BinaryList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirBase64BinaryList.GetItemN(index: Integer): TFhirBase64Binary;
begin
  result := TFhirBase64Binary(ObjectByIndex[index]);
end;

function TFhirBase64BinaryList.ItemClass: TFslObjectClass;
begin
  result := TFhirBase64Binary;
end;
function TFhirBase64BinaryList.IndexOf(value: TFhirBase64Binary): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirBase64BinaryList.Insert(index: Integer): TFhirBase64Binary;
begin
  result := TFhirBase64Binary.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirBase64BinaryList.InsertItem(index: Integer; value: TFhirBase64Binary);
begin
  assert(value is TFhirBase64Binary);
  Inherited Insert(index, value);
end;

function TFhirBase64BinaryList.Item(index: Integer): TFhirBase64Binary;
begin
  result := TFhirBase64Binary(ObjectByIndex[index]);
end;

function TFhirBase64BinaryList.Link: TFhirBase64BinaryList;
begin
  result := TFhirBase64BinaryList(inherited Link);
end;

procedure TFhirBase64BinaryList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirBase64BinaryList.SetItemByIndex(index: Integer; value: TFhirBase64Binary);
begin
  assert(value is TFhirBase64Binary);
  FhirBase64Binaries[index] := value;
end;

procedure TFhirBase64BinaryList.SetItemN(index: Integer; value: TFhirBase64Binary);
begin
  assert(value is TFhirBase64Binary);
  ObjectByIndex[index] := value;
end;

{ TFhirTime }

Constructor TFhirTime.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirTime.Destroy;
begin
  inherited;
end;

function TFhirTime.fhirType : string;
begin
  result := 'time';
end;

procedure TFhirTime.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirTime.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'time', false, nil, FValue));
end;

procedure TFhirTime.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirTime(oSource).Value;
end;

function TFhirTime.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirTime.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirTime.equals(other : TObject) : boolean; 
var
  o : TFhirTime;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirTime)) then
    result := false
  else
  begin
    o := TFhirTime(other);
    result := o.value = value;
  end;
end;

function TFhirTime.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirTime.Link : TFhirTime;
begin
  result := TFhirTime(inherited Link);
end;

function TFhirTime.Clone : TFhirTime;
begin
  result := TFhirTime(inherited Clone);
end;

procedure TFhirTime.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirTime.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirTime.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
end;

{ TFhirTimeListEnumerator }

Constructor TFhirTimeListEnumerator.Create(list : TFhirTimeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirTimeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirTimeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirTimeListEnumerator.GetCurrent : TFhirTime;
begin
  Result := FList[FIndex];
end;

function TFhirTimeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirTimeList }
procedure TFhirTimeList.AddItem(value: TFhirTime);
begin
  assert(value.ClassName = 'TFhirTime', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirTime');
  add(value);
end;

procedure TFhirTimeList.AddItem(value: String);
begin
  add(TFhirTime.create(value));
end;

function TFhirTimeList.Append: TFhirTime;
begin
  result := TFhirTime.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTimeList.ClearItems;
begin
  Clear;
end;

function TFhirTimeList.GetEnumerator : TFhirTimeListEnumerator;
begin
  result := TFhirTimeListEnumerator.Create(self.link);
end;

function TFhirTimeList.Clone: TFhirTimeList;
begin
  result := TFhirTimeList(inherited Clone);
end;

function TFhirTimeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirTimeList.GetItemN(index: Integer): TFhirTime;
begin
  result := TFhirTime(ObjectByIndex[index]);
end;

function TFhirTimeList.ItemClass: TFslObjectClass;
begin
  result := TFhirTime;
end;
function TFhirTimeList.IndexOf(value: TFhirTime): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirTimeList.Insert(index: Integer): TFhirTime;
begin
  result := TFhirTime.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTimeList.InsertItem(index: Integer; value: TFhirTime);
begin
  assert(value is TFhirTime);
  Inherited Insert(index, value);
end;

function TFhirTimeList.Item(index: Integer): TFhirTime;
begin
  result := TFhirTime(ObjectByIndex[index]);
end;

function TFhirTimeList.Link: TFhirTimeList;
begin
  result := TFhirTimeList(inherited Link);
end;

procedure TFhirTimeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirTimeList.SetItemByIndex(index: Integer; value: TFhirTime);
begin
  assert(value is TFhirTime);
  FhirTimes[index] := value;
end;

procedure TFhirTimeList.SetItemN(index: Integer; value: TFhirTime);
begin
  assert(value is TFhirTime);
  ObjectByIndex[index] := value;
end;

{ TFhirDecimal }

Constructor TFhirDecimal.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirDecimal.Destroy;
begin
  inherited;
end;

function TFhirDecimal.fhirType : string;
begin
  result := 'decimal';
end;

procedure TFhirDecimal.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if child_name = 'value' then
    list.add(self.link, 'value', TFHIRObjectText.create(value));
end;

procedure TFhirDecimal.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  if (bPrimitiveValues) then
    oList.add(TFHIRProperty.create(self, 'value', 'decimal', false, nil, FValue));
end;

procedure TFhirDecimal.Assign(oSource : TFslObject);
begin
  inherited;
  FValue := TFhirDecimal(oSource).Value;
end;

function TFhirDecimal.AsStringValue : string;
begin
  result := FValue;
end;

procedure TFhirDecimal.SetStringValue(value : string);
begin
  FValue := value;
end;

function TFhirDecimal.equals(other : TObject) : boolean; 
var
  o : TFhirDecimal;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDecimal)) then
    result := false
  else
  begin
    o := TFhirDecimal(other);
    result := o.value = value;
  end;
end;

function TFhirDecimal.isEmpty : boolean;
begin
  result := inherited isEmpty and (FValue = '');
end;

function TFhirDecimal.Link : TFhirDecimal;
begin
  result := TFhirDecimal(inherited Link);
end;

function TFhirDecimal.Clone : TFhirDecimal;
begin
  result := TFhirDecimal(inherited Clone);
end;

procedure TFhirDecimal.setValue(value : String);
begin
  FValue := value;
end;

procedure TFhirDecimal.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

function TFhirDecimal.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, (FValue.length * sizeof(char)) + 12);
end;

{ TFhirDecimalListEnumerator }

Constructor TFhirDecimalListEnumerator.Create(list : TFhirDecimalList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDecimalListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDecimalListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDecimalListEnumerator.GetCurrent : TFhirDecimal;
begin
  Result := FList[FIndex];
end;

function TFhirDecimalListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDecimalList }
procedure TFhirDecimalList.AddItem(value: TFhirDecimal);
begin
  assert(value.ClassName = 'TFhirDecimal', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDecimal');
  add(value);
end;

procedure TFhirDecimalList.AddItem(value: String);
begin
  add(TFhirDecimal.create(value));
end;

function TFhirDecimalList.Append: TFhirDecimal;
begin
  result := TFhirDecimal.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDecimalList.ClearItems;
begin
  Clear;
end;

function TFhirDecimalList.GetEnumerator : TFhirDecimalListEnumerator;
begin
  result := TFhirDecimalListEnumerator.Create(self.link);
end;

function TFhirDecimalList.Clone: TFhirDecimalList;
begin
  result := TFhirDecimalList(inherited Clone);
end;

function TFhirDecimalList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDecimalList.GetItemN(index: Integer): TFhirDecimal;
begin
  result := TFhirDecimal(ObjectByIndex[index]);
end;

function TFhirDecimalList.ItemClass: TFslObjectClass;
begin
  result := TFhirDecimal;
end;
function TFhirDecimalList.IndexOf(value: TFhirDecimal): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDecimalList.Insert(index: Integer): TFhirDecimal;
begin
  result := TFhirDecimal.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDecimalList.InsertItem(index: Integer; value: TFhirDecimal);
begin
  assert(value is TFhirDecimal);
  Inherited Insert(index, value);
end;

function TFhirDecimalList.Item(index: Integer): TFhirDecimal;
begin
  result := TFhirDecimal(ObjectByIndex[index]);
end;

function TFhirDecimalList.Link: TFhirDecimalList;
begin
  result := TFhirDecimalList(inherited Link);
end;

procedure TFhirDecimalList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDecimalList.SetItemByIndex(index: Integer; value: TFhirDecimal);
begin
  assert(value is TFhirDecimal);
  FhirDecimals[index] := value;
end;

procedure TFhirDecimalList.SetItemN(index: Integer; value: TFhirDecimal);
begin
  assert(value is TFhirDecimal);
  ObjectByIndex[index] := value;
end;

{ TFhirCode }

Constructor TFhirCode.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirCode.Destroy;
begin
  inherited;
end;

function TFhirCode.fhirType : string;
begin
  result := 'code';
end;

function TFhirCode.Link : TFhirCode;
begin
  result := TFhirCode(inherited Link);
end;

function TFhirCode.Clone : TFhirCode;
begin
  result := TFhirCode(inherited Clone);
end;

procedure TFhirCode.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirCodeListEnumerator }

Constructor TFhirCodeListEnumerator.Create(list : TFhirCodeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirCodeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirCodeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirCodeListEnumerator.GetCurrent : TFhirCode;
begin
  Result := FList[FIndex];
end;

function TFhirCodeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirCodeList }
procedure TFhirCodeList.AddItem(value: TFhirCode);
begin
  assert(value.ClassName = 'TFhirCode', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirCode');
  add(value);
end;

procedure TFhirCodeList.AddItem(value: String);
begin
  add(TFhirCode.create(value));
end;

function TFhirCodeList.Append: TFhirCode;
begin
  result := TFhirCode.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodeList.ClearItems;
begin
  Clear;
end;

function TFhirCodeList.GetEnumerator : TFhirCodeListEnumerator;
begin
  result := TFhirCodeListEnumerator.Create(self.link);
end;

function TFhirCodeList.Clone: TFhirCodeList;
begin
  result := TFhirCodeList(inherited Clone);
end;

function TFhirCodeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirCodeList.GetItemN(index: Integer): TFhirCode;
begin
  result := TFhirCode(ObjectByIndex[index]);
end;

function TFhirCodeList.ItemClass: TFslObjectClass;
begin
  result := TFhirCode;
end;
function TFhirCodeList.IndexOf(value: TFhirCode): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirCodeList.Insert(index: Integer): TFhirCode;
begin
  result := TFhirCode.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodeList.InsertItem(index: Integer; value: TFhirCode);
begin
  assert(value is TFhirCode);
  Inherited Insert(index, value);
end;

function TFhirCodeList.Item(index: Integer): TFhirCode;
begin
  result := TFhirCode(ObjectByIndex[index]);
end;

function TFhirCodeList.Link: TFhirCodeList;
begin
  result := TFhirCodeList(inherited Link);
end;

procedure TFhirCodeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirCodeList.SetItemByIndex(index: Integer; value: TFhirCode);
begin
  assert(value is TFhirCode);
  FhirCodes[index] := value;
end;

procedure TFhirCodeList.SetItemN(index: Integer; value: TFhirCode);
begin
  assert(value is TFhirCode);
  ObjectByIndex[index] := value;
end;

{ TFhirCanonical }

Constructor TFhirCanonical.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirCanonical.Destroy;
begin
  inherited;
end;

function TFhirCanonical.fhirType : string;
begin
  result := 'canonical';
end;

function TFhirCanonical.Link : TFhirCanonical;
begin
  result := TFhirCanonical(inherited Link);
end;

function TFhirCanonical.Clone : TFhirCanonical;
begin
  result := TFhirCanonical(inherited Clone);
end;

procedure TFhirCanonical.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirCanonicalListEnumerator }

Constructor TFhirCanonicalListEnumerator.Create(list : TFhirCanonicalList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirCanonicalListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirCanonicalListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirCanonicalListEnumerator.GetCurrent : TFhirCanonical;
begin
  Result := FList[FIndex];
end;

function TFhirCanonicalListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirCanonicalList }
procedure TFhirCanonicalList.AddItem(value: TFhirCanonical);
begin
  assert(value.ClassName = 'TFhirCanonical', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirCanonical');
  add(value);
end;

procedure TFhirCanonicalList.AddItem(value: String);
begin
  add(TFhirCanonical.create(value));
end;

function TFhirCanonicalList.Append: TFhirCanonical;
begin
  result := TFhirCanonical.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCanonicalList.ClearItems;
begin
  Clear;
end;

function TFhirCanonicalList.GetEnumerator : TFhirCanonicalListEnumerator;
begin
  result := TFhirCanonicalListEnumerator.Create(self.link);
end;

function TFhirCanonicalList.Clone: TFhirCanonicalList;
begin
  result := TFhirCanonicalList(inherited Clone);
end;

function TFhirCanonicalList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirCanonicalList.GetItemN(index: Integer): TFhirCanonical;
begin
  result := TFhirCanonical(ObjectByIndex[index]);
end;

function TFhirCanonicalList.ItemClass: TFslObjectClass;
begin
  result := TFhirCanonical;
end;
function TFhirCanonicalList.IndexOf(value: TFhirCanonical): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirCanonicalList.Insert(index: Integer): TFhirCanonical;
begin
  result := TFhirCanonical.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCanonicalList.InsertItem(index: Integer; value: TFhirCanonical);
begin
  assert(value is TFhirCanonical);
  Inherited Insert(index, value);
end;

function TFhirCanonicalList.Item(index: Integer): TFhirCanonical;
begin
  result := TFhirCanonical(ObjectByIndex[index]);
end;

function TFhirCanonicalList.Link: TFhirCanonicalList;
begin
  result := TFhirCanonicalList(inherited Link);
end;

procedure TFhirCanonicalList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirCanonicalList.SetItemByIndex(index: Integer; value: TFhirCanonical);
begin
  assert(value is TFhirCanonical);
  FhirCanonicals[index] := value;
end;

procedure TFhirCanonicalList.SetItemN(index: Integer; value: TFhirCanonical);
begin
  assert(value is TFhirCanonical);
  ObjectByIndex[index] := value;
end;

{ TFhirOid }

Constructor TFhirOid.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirOid.Destroy;
begin
  inherited;
end;

function TFhirOid.fhirType : string;
begin
  result := 'oid';
end;

function TFhirOid.Link : TFhirOid;
begin
  result := TFhirOid(inherited Link);
end;

function TFhirOid.Clone : TFhirOid;
begin
  result := TFhirOid(inherited Clone);
end;

procedure TFhirOid.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirOidListEnumerator }

Constructor TFhirOidListEnumerator.Create(list : TFhirOidList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirOidListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirOidListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirOidListEnumerator.GetCurrent : TFhirOid;
begin
  Result := FList[FIndex];
end;

function TFhirOidListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirOidList }
procedure TFhirOidList.AddItem(value: TFhirOid);
begin
  assert(value.ClassName = 'TFhirOid', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirOid');
  add(value);
end;

procedure TFhirOidList.AddItem(value: String);
begin
  add(TFhirOid.create(value));
end;

function TFhirOidList.Append: TFhirOid;
begin
  result := TFhirOid.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirOidList.ClearItems;
begin
  Clear;
end;

function TFhirOidList.GetEnumerator : TFhirOidListEnumerator;
begin
  result := TFhirOidListEnumerator.Create(self.link);
end;

function TFhirOidList.Clone: TFhirOidList;
begin
  result := TFhirOidList(inherited Clone);
end;

function TFhirOidList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirOidList.GetItemN(index: Integer): TFhirOid;
begin
  result := TFhirOid(ObjectByIndex[index]);
end;

function TFhirOidList.ItemClass: TFslObjectClass;
begin
  result := TFhirOid;
end;
function TFhirOidList.IndexOf(value: TFhirOid): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirOidList.Insert(index: Integer): TFhirOid;
begin
  result := TFhirOid.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirOidList.InsertItem(index: Integer; value: TFhirOid);
begin
  assert(value is TFhirOid);
  Inherited Insert(index, value);
end;

function TFhirOidList.Item(index: Integer): TFhirOid;
begin
  result := TFhirOid(ObjectByIndex[index]);
end;

function TFhirOidList.Link: TFhirOidList;
begin
  result := TFhirOidList(inherited Link);
end;

procedure TFhirOidList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirOidList.SetItemByIndex(index: Integer; value: TFhirOid);
begin
  assert(value is TFhirOid);
  FhirOids[index] := value;
end;

procedure TFhirOidList.SetItemN(index: Integer; value: TFhirOid);
begin
  assert(value is TFhirOid);
  ObjectByIndex[index] := value;
end;

{ TFhirUuid }

Constructor TFhirUuid.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirUuid.Destroy;
begin
  inherited;
end;

function TFhirUuid.fhirType : string;
begin
  result := 'uuid';
end;

function TFhirUuid.Link : TFhirUuid;
begin
  result := TFhirUuid(inherited Link);
end;

function TFhirUuid.Clone : TFhirUuid;
begin
  result := TFhirUuid(inherited Clone);
end;

procedure TFhirUuid.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirUuidListEnumerator }

Constructor TFhirUuidListEnumerator.Create(list : TFhirUuidList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirUuidListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirUuidListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirUuidListEnumerator.GetCurrent : TFhirUuid;
begin
  Result := FList[FIndex];
end;

function TFhirUuidListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirUuidList }
procedure TFhirUuidList.AddItem(value: TFhirUuid);
begin
  assert(value.ClassName = 'TFhirUuid', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirUuid');
  add(value);
end;

procedure TFhirUuidList.AddItem(value: String);
begin
  add(TFhirUuid.create(value));
end;

function TFhirUuidList.Append: TFhirUuid;
begin
  result := TFhirUuid.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUuidList.ClearItems;
begin
  Clear;
end;

function TFhirUuidList.GetEnumerator : TFhirUuidListEnumerator;
begin
  result := TFhirUuidListEnumerator.Create(self.link);
end;

function TFhirUuidList.Clone: TFhirUuidList;
begin
  result := TFhirUuidList(inherited Clone);
end;

function TFhirUuidList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirUuidList.GetItemN(index: Integer): TFhirUuid;
begin
  result := TFhirUuid(ObjectByIndex[index]);
end;

function TFhirUuidList.ItemClass: TFslObjectClass;
begin
  result := TFhirUuid;
end;
function TFhirUuidList.IndexOf(value: TFhirUuid): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirUuidList.Insert(index: Integer): TFhirUuid;
begin
  result := TFhirUuid.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUuidList.InsertItem(index: Integer; value: TFhirUuid);
begin
  assert(value is TFhirUuid);
  Inherited Insert(index, value);
end;

function TFhirUuidList.Item(index: Integer): TFhirUuid;
begin
  result := TFhirUuid(ObjectByIndex[index]);
end;

function TFhirUuidList.Link: TFhirUuidList;
begin
  result := TFhirUuidList(inherited Link);
end;

procedure TFhirUuidList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirUuidList.SetItemByIndex(index: Integer; value: TFhirUuid);
begin
  assert(value is TFhirUuid);
  FhirUuids[index] := value;
end;

procedure TFhirUuidList.SetItemN(index: Integer; value: TFhirUuid);
begin
  assert(value is TFhirUuid);
  ObjectByIndex[index] := value;
end;

{ TFhirUrl }

Constructor TFhirUrl.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirUrl.Destroy;
begin
  inherited;
end;

function TFhirUrl.fhirType : string;
begin
  result := 'url';
end;

function TFhirUrl.Link : TFhirUrl;
begin
  result := TFhirUrl(inherited Link);
end;

function TFhirUrl.Clone : TFhirUrl;
begin
  result := TFhirUrl(inherited Clone);
end;

procedure TFhirUrl.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirUrlListEnumerator }

Constructor TFhirUrlListEnumerator.Create(list : TFhirUrlList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirUrlListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirUrlListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirUrlListEnumerator.GetCurrent : TFhirUrl;
begin
  Result := FList[FIndex];
end;

function TFhirUrlListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirUrlList }
procedure TFhirUrlList.AddItem(value: TFhirUrl);
begin
  assert(value.ClassName = 'TFhirUrl', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirUrl');
  add(value);
end;

procedure TFhirUrlList.AddItem(value: String);
begin
  add(TFhirUrl.create(value));
end;

function TFhirUrlList.Append: TFhirUrl;
begin
  result := TFhirUrl.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUrlList.ClearItems;
begin
  Clear;
end;

function TFhirUrlList.GetEnumerator : TFhirUrlListEnumerator;
begin
  result := TFhirUrlListEnumerator.Create(self.link);
end;

function TFhirUrlList.Clone: TFhirUrlList;
begin
  result := TFhirUrlList(inherited Clone);
end;

function TFhirUrlList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirUrlList.GetItemN(index: Integer): TFhirUrl;
begin
  result := TFhirUrl(ObjectByIndex[index]);
end;

function TFhirUrlList.ItemClass: TFslObjectClass;
begin
  result := TFhirUrl;
end;
function TFhirUrlList.IndexOf(value: TFhirUrl): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirUrlList.Insert(index: Integer): TFhirUrl;
begin
  result := TFhirUrl.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUrlList.InsertItem(index: Integer; value: TFhirUrl);
begin
  assert(value is TFhirUrl);
  Inherited Insert(index, value);
end;

function TFhirUrlList.Item(index: Integer): TFhirUrl;
begin
  result := TFhirUrl(ObjectByIndex[index]);
end;

function TFhirUrlList.Link: TFhirUrlList;
begin
  result := TFhirUrlList(inherited Link);
end;

procedure TFhirUrlList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirUrlList.SetItemByIndex(index: Integer; value: TFhirUrl);
begin
  assert(value is TFhirUrl);
  FhirUrls[index] := value;
end;

procedure TFhirUrlList.SetItemN(index: Integer; value: TFhirUrl);
begin
  assert(value is TFhirUrl);
  ObjectByIndex[index] := value;
end;

{ TFhirMarkdown }

Constructor TFhirMarkdown.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirMarkdown.Destroy;
begin
  inherited;
end;

function TFhirMarkdown.fhirType : string;
begin
  result := 'markdown';
end;

function TFhirMarkdown.Link : TFhirMarkdown;
begin
  result := TFhirMarkdown(inherited Link);
end;

function TFhirMarkdown.Clone : TFhirMarkdown;
begin
  result := TFhirMarkdown(inherited Clone);
end;

procedure TFhirMarkdown.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirMarkdownListEnumerator }

Constructor TFhirMarkdownListEnumerator.Create(list : TFhirMarkdownList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirMarkdownListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirMarkdownListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirMarkdownListEnumerator.GetCurrent : TFhirMarkdown;
begin
  Result := FList[FIndex];
end;

function TFhirMarkdownListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirMarkdownList }
procedure TFhirMarkdownList.AddItem(value: TFhirMarkdown);
begin
  assert(value.ClassName = 'TFhirMarkdown', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirMarkdown');
  add(value);
end;

procedure TFhirMarkdownList.AddItem(value: String);
begin
  add(TFhirMarkdown.create(value));
end;

function TFhirMarkdownList.Append: TFhirMarkdown;
begin
  result := TFhirMarkdown.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMarkdownList.ClearItems;
begin
  Clear;
end;

function TFhirMarkdownList.GetEnumerator : TFhirMarkdownListEnumerator;
begin
  result := TFhirMarkdownListEnumerator.Create(self.link);
end;

function TFhirMarkdownList.Clone: TFhirMarkdownList;
begin
  result := TFhirMarkdownList(inherited Clone);
end;

function TFhirMarkdownList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirMarkdownList.GetItemN(index: Integer): TFhirMarkdown;
begin
  result := TFhirMarkdown(ObjectByIndex[index]);
end;

function TFhirMarkdownList.ItemClass: TFslObjectClass;
begin
  result := TFhirMarkdown;
end;
function TFhirMarkdownList.IndexOf(value: TFhirMarkdown): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirMarkdownList.Insert(index: Integer): TFhirMarkdown;
begin
  result := TFhirMarkdown.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMarkdownList.InsertItem(index: Integer; value: TFhirMarkdown);
begin
  assert(value is TFhirMarkdown);
  Inherited Insert(index, value);
end;

function TFhirMarkdownList.Item(index: Integer): TFhirMarkdown;
begin
  result := TFhirMarkdown(ObjectByIndex[index]);
end;

function TFhirMarkdownList.Link: TFhirMarkdownList;
begin
  result := TFhirMarkdownList(inherited Link);
end;

procedure TFhirMarkdownList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirMarkdownList.SetItemByIndex(index: Integer; value: TFhirMarkdown);
begin
  assert(value is TFhirMarkdown);
  FhirMarkdowns[index] := value;
end;

procedure TFhirMarkdownList.SetItemN(index: Integer; value: TFhirMarkdown);
begin
  assert(value is TFhirMarkdown);
  ObjectByIndex[index] := value;
end;

{ TFhirUnsignedInt }

Constructor TFhirUnsignedInt.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirUnsignedInt.Destroy;
begin
  inherited;
end;

function TFhirUnsignedInt.fhirType : string;
begin
  result := 'unsignedInt';
end;

function TFhirUnsignedInt.Link : TFhirUnsignedInt;
begin
  result := TFhirUnsignedInt(inherited Link);
end;

function TFhirUnsignedInt.Clone : TFhirUnsignedInt;
begin
  result := TFhirUnsignedInt(inherited Clone);
end;

procedure TFhirUnsignedInt.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirUnsignedIntListEnumerator }

Constructor TFhirUnsignedIntListEnumerator.Create(list : TFhirUnsignedIntList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirUnsignedIntListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirUnsignedIntListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirUnsignedIntListEnumerator.GetCurrent : TFhirUnsignedInt;
begin
  Result := FList[FIndex];
end;

function TFhirUnsignedIntListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirUnsignedIntList }
procedure TFhirUnsignedIntList.AddItem(value: TFhirUnsignedInt);
begin
  assert(value.ClassName = 'TFhirUnsignedInt', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirUnsignedInt');
  add(value);
end;

procedure TFhirUnsignedIntList.AddItem(value: String);
begin
  add(TFhirUnsignedInt.create(value));
end;

function TFhirUnsignedIntList.Append: TFhirUnsignedInt;
begin
  result := TFhirUnsignedInt.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUnsignedIntList.ClearItems;
begin
  Clear;
end;

function TFhirUnsignedIntList.GetEnumerator : TFhirUnsignedIntListEnumerator;
begin
  result := TFhirUnsignedIntListEnumerator.Create(self.link);
end;

function TFhirUnsignedIntList.Clone: TFhirUnsignedIntList;
begin
  result := TFhirUnsignedIntList(inherited Clone);
end;

function TFhirUnsignedIntList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirUnsignedIntList.GetItemN(index: Integer): TFhirUnsignedInt;
begin
  result := TFhirUnsignedInt(ObjectByIndex[index]);
end;

function TFhirUnsignedIntList.ItemClass: TFslObjectClass;
begin
  result := TFhirUnsignedInt;
end;
function TFhirUnsignedIntList.IndexOf(value: TFhirUnsignedInt): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirUnsignedIntList.Insert(index: Integer): TFhirUnsignedInt;
begin
  result := TFhirUnsignedInt.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUnsignedIntList.InsertItem(index: Integer; value: TFhirUnsignedInt);
begin
  assert(value is TFhirUnsignedInt);
  Inherited Insert(index, value);
end;

function TFhirUnsignedIntList.Item(index: Integer): TFhirUnsignedInt;
begin
  result := TFhirUnsignedInt(ObjectByIndex[index]);
end;

function TFhirUnsignedIntList.Link: TFhirUnsignedIntList;
begin
  result := TFhirUnsignedIntList(inherited Link);
end;

procedure TFhirUnsignedIntList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirUnsignedIntList.SetItemByIndex(index: Integer; value: TFhirUnsignedInt);
begin
  assert(value is TFhirUnsignedInt);
  FhirUnsignedInts[index] := value;
end;

procedure TFhirUnsignedIntList.SetItemN(index: Integer; value: TFhirUnsignedInt);
begin
  assert(value is TFhirUnsignedInt);
  ObjectByIndex[index] := value;
end;

{ TFhirId }

Constructor TFhirId.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirId.Destroy;
begin
  inherited;
end;

function TFhirId.fhirType : string;
begin
  result := 'id';
end;

function TFhirId.Link : TFhirId;
begin
  result := TFhirId(inherited Link);
end;

function TFhirId.Clone : TFhirId;
begin
  result := TFhirId(inherited Clone);
end;

procedure TFhirId.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirIdListEnumerator }

Constructor TFhirIdListEnumerator.Create(list : TFhirIdList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirIdListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirIdListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirIdListEnumerator.GetCurrent : TFhirId;
begin
  Result := FList[FIndex];
end;

function TFhirIdListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirIdList }
procedure TFhirIdList.AddItem(value: TFhirId);
begin
  assert(value.ClassName = 'TFhirId', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirId');
  add(value);
end;

procedure TFhirIdList.AddItem(value: String);
begin
  add(TFhirId.create(value));
end;

function TFhirIdList.Append: TFhirId;
begin
  result := TFhirId.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirIdList.ClearItems;
begin
  Clear;
end;

function TFhirIdList.GetEnumerator : TFhirIdListEnumerator;
begin
  result := TFhirIdListEnumerator.Create(self.link);
end;

function TFhirIdList.Clone: TFhirIdList;
begin
  result := TFhirIdList(inherited Clone);
end;

function TFhirIdList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirIdList.GetItemN(index: Integer): TFhirId;
begin
  result := TFhirId(ObjectByIndex[index]);
end;

function TFhirIdList.ItemClass: TFslObjectClass;
begin
  result := TFhirId;
end;
function TFhirIdList.IndexOf(value: TFhirId): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirIdList.Insert(index: Integer): TFhirId;
begin
  result := TFhirId.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirIdList.InsertItem(index: Integer; value: TFhirId);
begin
  assert(value is TFhirId);
  Inherited Insert(index, value);
end;

function TFhirIdList.Item(index: Integer): TFhirId;
begin
  result := TFhirId(ObjectByIndex[index]);
end;

function TFhirIdList.Link: TFhirIdList;
begin
  result := TFhirIdList(inherited Link);
end;

procedure TFhirIdList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirIdList.SetItemByIndex(index: Integer; value: TFhirId);
begin
  assert(value is TFhirId);
  FhirIds[index] := value;
end;

procedure TFhirIdList.SetItemN(index: Integer; value: TFhirId);
begin
  assert(value is TFhirId);
  ObjectByIndex[index] := value;
end;

{ TFhirPositiveInt }

Constructor TFhirPositiveInt.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirPositiveInt.Destroy;
begin
  inherited;
end;

function TFhirPositiveInt.fhirType : string;
begin
  result := 'positiveInt';
end;

function TFhirPositiveInt.Link : TFhirPositiveInt;
begin
  result := TFhirPositiveInt(inherited Link);
end;

function TFhirPositiveInt.Clone : TFhirPositiveInt;
begin
  result := TFhirPositiveInt(inherited Clone);
end;

procedure TFhirPositiveInt.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirPositiveIntListEnumerator }

Constructor TFhirPositiveIntListEnumerator.Create(list : TFhirPositiveIntList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirPositiveIntListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirPositiveIntListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirPositiveIntListEnumerator.GetCurrent : TFhirPositiveInt;
begin
  Result := FList[FIndex];
end;

function TFhirPositiveIntListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirPositiveIntList }
procedure TFhirPositiveIntList.AddItem(value: TFhirPositiveInt);
begin
  assert(value.ClassName = 'TFhirPositiveInt', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirPositiveInt');
  add(value);
end;

procedure TFhirPositiveIntList.AddItem(value: String);
begin
  add(TFhirPositiveInt.create(value));
end;

function TFhirPositiveIntList.Append: TFhirPositiveInt;
begin
  result := TFhirPositiveInt.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirPositiveIntList.ClearItems;
begin
  Clear;
end;

function TFhirPositiveIntList.GetEnumerator : TFhirPositiveIntListEnumerator;
begin
  result := TFhirPositiveIntListEnumerator.Create(self.link);
end;

function TFhirPositiveIntList.Clone: TFhirPositiveIntList;
begin
  result := TFhirPositiveIntList(inherited Clone);
end;

function TFhirPositiveIntList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirPositiveIntList.GetItemN(index: Integer): TFhirPositiveInt;
begin
  result := TFhirPositiveInt(ObjectByIndex[index]);
end;

function TFhirPositiveIntList.ItemClass: TFslObjectClass;
begin
  result := TFhirPositiveInt;
end;
function TFhirPositiveIntList.IndexOf(value: TFhirPositiveInt): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirPositiveIntList.Insert(index: Integer): TFhirPositiveInt;
begin
  result := TFhirPositiveInt.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirPositiveIntList.InsertItem(index: Integer; value: TFhirPositiveInt);
begin
  assert(value is TFhirPositiveInt);
  Inherited Insert(index, value);
end;

function TFhirPositiveIntList.Item(index: Integer): TFhirPositiveInt;
begin
  result := TFhirPositiveInt(ObjectByIndex[index]);
end;

function TFhirPositiveIntList.Link: TFhirPositiveIntList;
begin
  result := TFhirPositiveIntList(inherited Link);
end;

procedure TFhirPositiveIntList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirPositiveIntList.SetItemByIndex(index: Integer; value: TFhirPositiveInt);
begin
  assert(value is TFhirPositiveInt);
  FhirPositiveInts[index] := value;
end;

procedure TFhirPositiveIntList.SetItemN(index: Integer; value: TFhirPositiveInt);
begin
  assert(value is TFhirPositiveInt);
  ObjectByIndex[index] := value;
end;

{ TFhirInteger64 }

Constructor TFhirInteger64.Create(value : String);
begin
  Create;
  FValue := value;
end;

destructor TFhirInteger64.Destroy;
begin
  inherited;
end;

function TFhirInteger64.fhirType : string;
begin
  result := 'Integer64';
end;

function TFhirInteger64.Link : TFhirInteger64;
begin
  result := TFhirInteger64(inherited Link);
end;

function TFhirInteger64.Clone : TFhirInteger64;
begin
  result := TFhirInteger64(inherited Clone);
end;

procedure TFhirInteger64.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('@value');
end;

{ TFhirInteger64ListEnumerator }

Constructor TFhirInteger64ListEnumerator.Create(list : TFhirInteger64List);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirInteger64ListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirInteger64ListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirInteger64ListEnumerator.GetCurrent : TFhirInteger64;
begin
  Result := FList[FIndex];
end;

function TFhirInteger64ListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirInteger64List }
procedure TFhirInteger64List.AddItem(value: TFhirInteger64);
begin
  assert(value.ClassName = 'TFhirInteger64', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirInteger64');
  add(value);
end;

procedure TFhirInteger64List.AddItem(value: String);
begin
  add(TFhirInteger64.create(value));
end;

function TFhirInteger64List.Append: TFhirInteger64;
begin
  result := TFhirInteger64.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirInteger64List.ClearItems;
begin
  Clear;
end;

function TFhirInteger64List.GetEnumerator : TFhirInteger64ListEnumerator;
begin
  result := TFhirInteger64ListEnumerator.Create(self.link);
end;

function TFhirInteger64List.Clone: TFhirInteger64List;
begin
  result := TFhirInteger64List(inherited Clone);
end;

function TFhirInteger64List.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirInteger64List.GetItemN(index: Integer): TFhirInteger64;
begin
  result := TFhirInteger64(ObjectByIndex[index]);
end;

function TFhirInteger64List.ItemClass: TFslObjectClass;
begin
  result := TFhirInteger64;
end;
function TFhirInteger64List.IndexOf(value: TFhirInteger64): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirInteger64List.Insert(index: Integer): TFhirInteger64;
begin
  result := TFhirInteger64.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirInteger64List.InsertItem(index: Integer; value: TFhirInteger64);
begin
  assert(value is TFhirInteger64);
  Inherited Insert(index, value);
end;

function TFhirInteger64List.Item(index: Integer): TFhirInteger64;
begin
  result := TFhirInteger64(ObjectByIndex[index]);
end;

function TFhirInteger64List.Link: TFhirInteger64List;
begin
  result := TFhirInteger64List(inherited Link);
end;

procedure TFhirInteger64List.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirInteger64List.SetItemByIndex(index: Integer; value: TFhirInteger64);
begin
  assert(value is TFhirInteger64);
  FhirInteger64s[index] := value;
end;

procedure TFhirInteger64List.SetItemN(index: Integer; value: TFhirInteger64);
begin
  assert(value is TFhirInteger64);
  ObjectByIndex[index] := value;
end;

{ TFhirAddress }

constructor TFhirAddress.Create;
begin
  inherited;
end;

destructor TFhirAddress.Destroy;
begin
  FUse.free;
  FType_.free;
  FText.free;
  FLineList.Free;
  FCity.free;
  FDistrict.free;
  FState.free;
  FPostalCode.free;
  FCountry.free;
  FPeriod.free;
  inherited;
end;

procedure TFhirAddress.Assign(oSource : TFslObject);
begin
  inherited;
  useElement := TFhirAddress(oSource).useElement.Clone;
  type_Element := TFhirAddress(oSource).type_Element.Clone;
  textElement := TFhirAddress(oSource).textElement.Clone;
  if (TFhirAddress(oSource).FLineList = nil) then
  begin
    FLineList.free;
    FLineList := nil;
  end
  else
  begin
    if FLineList = nil then
      FLineList := TFhirStringList.Create;
    FLineList.Assign(TFhirAddress(oSource).FLineList);
  end;
  cityElement := TFhirAddress(oSource).cityElement.Clone;
  districtElement := TFhirAddress(oSource).districtElement.Clone;
  stateElement := TFhirAddress(oSource).stateElement.Clone;
  postalCodeElement := TFhirAddress(oSource).postalCodeElement.Clone;
  countryElement := TFhirAddress(oSource).countryElement.Clone;
  period := TFhirAddress(oSource).period.Clone;
end;

procedure TFhirAddress.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'use') Then
     list.add(self.link, 'use', FUse.Link);
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'text') Then
     list.add(self.link, 'text', FText.Link);
  if (child_name = 'line') Then
    list.addAll(self, 'line', FLineList);
  if (child_name = 'city') Then
     list.add(self.link, 'city', FCity.Link);
  if (child_name = 'district') Then
     list.add(self.link, 'district', FDistrict.Link);
  if (child_name = 'state') Then
     list.add(self.link, 'state', FState.Link);
  if (child_name = 'postalCode') Then
     list.add(self.link, 'postalCode', FPostalCode.Link);
  if (child_name = 'country') Then
     list.add(self.link, 'country', FCountry.Link);
  if (child_name = 'period') Then
     list.add(self.link, 'period', FPeriod.Link);
end;

procedure TFhirAddress.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'use', 'code', false, TFhirEnum, FUse.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'text', 'string', false, TFhirString, FText.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'line', 'string', true, TFhirString, FLineList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'city', 'string', false, TFhirString, FCity.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'district', 'string', false, TFhirString, FDistrict.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'state', 'string', false, TFhirString, FState.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'postalCode', 'string', false, TFhirString, FPostalCode.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'country', 'string', false, TFhirString, FCountry.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'period', 'Period', false, TFhirPeriod, FPeriod.Link)); {L1172}
end;

function TFhirAddress.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'use') then
  begin
    UseElement := asEnum(SYSTEMS_TFhirAddressUseEnum, CODES_TFhirAddressUseEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirAddressTypeEnum, CODES_TFhirAddressTypeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'text') then
  begin
    TextElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'line') then
  begin
    LineList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'city') then
  begin
    CityElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'district') then
  begin
    DistrictElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'state') then
  begin
    StateElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'postalCode') then
  begin
    PostalCodeElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'country') then
  begin
    CountryElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'period') then
  begin
    Period := propValue as TFhirPeriod {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirAddress.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'line') then LineList.insertItem(index, asString(propValue)) {L1045}
  else inherited;
end;

function TFhirAddress.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'use') then result := TFhirEnum.create(SYSTEMS_TFhirAddressUseEnum[AddressUseNull], CODES_TFhirAddressUseEnum[AddressUseNull])  {L1211}
  else if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirAddressTypeEnum[AddressTypeNull], CODES_TFhirAddressTypeEnum[AddressTypeNull])  {L1211}
  else if (propName = 'text') then result := TFhirString.create() {L1223}
  else if (propName = 'line') then result := LineList.new() {L1053}
  else if (propName = 'city') then result := TFhirString.create() {L1223}
  else if (propName = 'district') then result := TFhirString.create() {L1223}
  else if (propName = 'state') then result := TFhirString.create() {L1223}
  else if (propName = 'postalCode') then result := TFhirString.create() {L1223}
  else if (propName = 'country') then result := TFhirString.create() {L1223}
  else if (propName = 'period') then result := TFhirPeriod.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirAddress.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'use') then result := 'code'
  else if (propName = 'type') then result := 'code'
  else if (propName = 'text') then result := 'string'
  else if (propName = 'line') then result := 'string'
  else if (propName = 'city') then result := 'string'
  else if (propName = 'district') then result := 'string'
  else if (propName = 'state') then result := 'string'
  else if (propName = 'postalCode') then result := 'string'
  else if (propName = 'country') then result := 'string'
  else if (propName = 'period') then result := 'Period'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirAddress.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'use') then UseElement := nil
  else if (propName = 'type') then Type_Element := nil
  else if (propName = 'text') then TextElement := nil
  else if (propName = 'line') then deletePropertyValue('line', LineList, value) {L1054}
  else if (propName = 'city') then CityElement := nil
  else if (propName = 'district') then DistrictElement := nil
  else if (propName = 'state') then StateElement := nil
  else if (propName = 'postalCode') then PostalCodeElement := nil
  else if (propName = 'country') then CountryElement := nil
  else if (propName = 'period') then PeriodElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirAddress.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'use') then UseElement := asEnum(SYSTEMS_TFhirAddressUseEnum, CODES_TFhirAddressUseEnum, new) {L1210}
  else if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirAddressTypeEnum, CODES_TFhirAddressTypeEnum, new) {L1210}
  else if (propName = 'text') then TextElement := asString(new) {L1222}
  else if (propName = 'line') then replacePropertyValue('line', LineList, existing, new) {L1055}
  else if (propName = 'city') then CityElement := asString(new) {L1222}
  else if (propName = 'district') then DistrictElement := asString(new) {L1222}
  else if (propName = 'state') then StateElement := asString(new) {L1222}
  else if (propName = 'postalCode') then PostalCodeElement := asString(new) {L1222}
  else if (propName = 'country') then CountryElement := asString(new) {L1222}
  else if (propName = 'period') then PeriodElement := new as TFhirPeriod {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirAddress.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'line') then LineList.move(source, destination) {L1046}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirAddress.fhirType : string;
begin
  result := 'Address';
end;

function TFhirAddress.Link : TFhirAddress;
begin
  result := TFhirAddress(inherited Link);
end;

function TFhirAddress.Clone : TFhirAddress;
begin
  result := TFhirAddress(inherited Clone);
end;

function TFhirAddress.equals(other : TObject) : boolean; 
var
  o : TFhirAddress;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirAddress)) then
    result := false
  else
  begin
    o := TFhirAddress(other);
    result := compareDeep(useElement, o.useElement, true) and compareDeep(type_Element, o.type_Element, true) and 
      compareDeep(textElement, o.textElement, true) and compareDeep(lineList, o.lineList, true) and 
      compareDeep(cityElement, o.cityElement, true) and compareDeep(districtElement, o.districtElement, true) and 
      compareDeep(stateElement, o.stateElement, true) and compareDeep(postalCodeElement, o.postalCodeElement, true) and 
      compareDeep(countryElement, o.countryElement, true) and compareDeep(periodElement, o.periodElement, true);
  end;
end;

function TFhirAddress.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FUse) and isEmptyProp(FType_) and isEmptyProp(FText) and isEmptyProp(FlineList) and isEmptyProp(FCity) and isEmptyProp(FDistrict) and isEmptyProp(FState) and isEmptyProp(FPostalCode) and isEmptyProp(FCountry) and isEmptyProp(FPeriod);
end;

procedure TFhirAddress.SetUse(value : TFhirEnum);
begin
  FUse.free;
  FUse := value;
end;

function TFhirAddress.GetUseST : TFhirAddressUseEnum;
begin
  if FUse = nil then
    result := TFhirAddressUseEnum(0)
  else
    result := TFhirAddressUseEnum(StringArrayIndexOfSensitive(CODES_TFhirAddressUseEnum, FUse.value));
end;

procedure TFhirAddress.SetUseST(value : TFhirAddressUseEnum);
begin
  if ord(value) = 0 then
    UseElement := nil
  else
    UseElement := TFhirEnum.create(SYSTEMS_TFhirAddressUseEnum[value], CODES_TFhirAddressUseEnum[value]);
end;

procedure TFhirAddress.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirAddress.GetType_ST : TFhirAddressTypeEnum;
begin
  if FType_ = nil then
    result := TFhirAddressTypeEnum(0)
  else
    result := TFhirAddressTypeEnum(StringArrayIndexOfSensitive(CODES_TFhirAddressTypeEnum, FType_.value));
end;

procedure TFhirAddress.SetType_ST(value : TFhirAddressTypeEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirAddressTypeEnum[value], CODES_TFhirAddressTypeEnum[value]);
end;

procedure TFhirAddress.SetText(value : TFhirString);
begin
  FText.free;
  FText := value; {L1134}
end;

function TFhirAddress.GetTextST : String;
begin
  if FText = nil then
    result := ''
  else
    result := FText.value;
end;

procedure TFhirAddress.SetTextST(value : String);
begin
  if value <> '' then
  begin
    if FText = nil then
      FText := TFhirString.create;
    FText.value := value
  end
  else if FText <> nil then
    FText.value := '';
end;

function TFhirAddress.GetLineList : TFhirStringList;
begin
  if FLineList = nil then
    FLineList := TFhirStringList.Create;
  result := FLineList;
end;

function TFhirAddress.GetHasLineList : boolean;
begin
  result := (FLineList <> nil) and (FLineList.count > 0);
end;

procedure TFhirAddress.SetCity(value : TFhirString);
begin
  FCity.free;
  FCity := value; {L1134}
end;

function TFhirAddress.GetCityST : String;
begin
  if FCity = nil then
    result := ''
  else
    result := FCity.value;
end;

procedure TFhirAddress.SetCityST(value : String);
begin
  if value <> '' then
  begin
    if FCity = nil then
      FCity := TFhirString.create;
    FCity.value := value
  end
  else if FCity <> nil then
    FCity.value := '';
end;

procedure TFhirAddress.SetDistrict(value : TFhirString);
begin
  FDistrict.free;
  FDistrict := value; {L1134}
end;

function TFhirAddress.GetDistrictST : String;
begin
  if FDistrict = nil then
    result := ''
  else
    result := FDistrict.value;
end;

procedure TFhirAddress.SetDistrictST(value : String);
begin
  if value <> '' then
  begin
    if FDistrict = nil then
      FDistrict := TFhirString.create;
    FDistrict.value := value
  end
  else if FDistrict <> nil then
    FDistrict.value := '';
end;

procedure TFhirAddress.SetState(value : TFhirString);
begin
  FState.free;
  FState := value; {L1134}
end;

function TFhirAddress.GetStateST : String;
begin
  if FState = nil then
    result := ''
  else
    result := FState.value;
end;

procedure TFhirAddress.SetStateST(value : String);
begin
  if value <> '' then
  begin
    if FState = nil then
      FState := TFhirString.create;
    FState.value := value
  end
  else if FState <> nil then
    FState.value := '';
end;

procedure TFhirAddress.SetPostalCode(value : TFhirString);
begin
  FPostalCode.free;
  FPostalCode := value; {L1134}
end;

function TFhirAddress.GetPostalCodeST : String;
begin
  if FPostalCode = nil then
    result := ''
  else
    result := FPostalCode.value;
end;

procedure TFhirAddress.SetPostalCodeST(value : String);
begin
  if value <> '' then
  begin
    if FPostalCode = nil then
      FPostalCode := TFhirString.create;
    FPostalCode.value := value
  end
  else if FPostalCode <> nil then
    FPostalCode.value := '';
end;

procedure TFhirAddress.SetCountry(value : TFhirString);
begin
  FCountry.free;
  FCountry := value; {L1134}
end;

function TFhirAddress.GetCountryST : String;
begin
  if FCountry = nil then
    result := ''
  else
    result := FCountry.value;
end;

procedure TFhirAddress.SetCountryST(value : String);
begin
  if value <> '' then
  begin
    if FCountry = nil then
      FCountry := TFhirString.create;
    FCountry.value := value
  end
  else if FCountry <> nil then
    FCountry.value := '';
end;

procedure TFhirAddress.SetPeriod(value : TFhirPeriod);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

procedure TFhirAddress.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('use');
  fields.add('type');
  fields.add('text');
  fields.add('line');
  fields.add('city');
  fields.add('district');
  fields.add('state');
  fields.add('postalCode');
  fields.add('country');
  fields.add('period');
end;

function TFhirAddress.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FUse.sizeInBytes);
  inc(result, FType_.sizeInBytes);
  inc(result, FText.sizeInBytes);
  inc(result, FlineList.sizeInBytes);
  inc(result, FCity.sizeInBytes);
  inc(result, FDistrict.sizeInBytes);
  inc(result, FState.sizeInBytes);
  inc(result, FPostalCode.sizeInBytes);
  inc(result, FCountry.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
end;

{ TFhirAddressListEnumerator }

constructor TFhirAddressListEnumerator.Create(list : TFhirAddressList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirAddressListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirAddressListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirAddressListEnumerator.GetCurrent : TFhirAddress;
begin
  Result := FList[FIndex];
end;

function TFhirAddressListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirAddressList }

procedure TFhirAddressList.AddItem(value: TFhirAddress);
begin
  assert(value.ClassName = 'TFhirAddress', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirAddress');
  add(value);
end;

function TFhirAddressList.Append: TFhirAddress;
begin
  result := TFhirAddress.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAddressList.ClearItems;
begin
  Clear;
end;

function TFhirAddressList.GetEnumerator : TFhirAddressListEnumerator;
begin
  result := TFhirAddressListEnumerator.Create(self.link);
end;

function TFhirAddressList.Clone: TFhirAddressList;
begin
  result := TFhirAddressList(inherited Clone);
end;

function TFhirAddressList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirAddressList.GetItemN(index: Integer): TFhirAddress;
begin
  result := TFhirAddress(ObjectByIndex[index]);
end;

function TFhirAddressList.ItemClass: TFslObjectClass;
begin
  result := TFhirAddress;
end;
function TFhirAddressList.IndexOf(value: TFhirAddress): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirAddressList.Insert(index: Integer): TFhirAddress;
begin
  result := TFhirAddress.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAddressList.InsertItem(index: Integer; value: TFhirAddress);
begin
  assert(value is TFhirAddress);
  Inherited Insert(index, value);
end;

function TFhirAddressList.Item(index: Integer): TFhirAddress;
begin
  result := TFhirAddress(ObjectByIndex[index]);
end;

function TFhirAddressList.Link: TFhirAddressList;
begin
  result := TFhirAddressList(inherited Link);
end;

procedure TFhirAddressList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirAddressList.SetItemByIndex(index: Integer; value: TFhirAddress);
begin
  assert(value is TFhirAddress);
  FhirAddresses[index] := value;
end;

procedure TFhirAddressList.SetItemN(index: Integer; value: TFhirAddress);
begin
  assert(value is TFhirAddress);
  ObjectByIndex[index] := value;
end;

{ TFhirAnnotation }

constructor TFhirAnnotation.Create;
begin
  inherited;
end;

destructor TFhirAnnotation.Destroy;
begin
  FAuthor.free;
  FTime.free;
  FText.free;
  inherited;
end;

procedure TFhirAnnotation.Assign(oSource : TFslObject);
begin
  inherited;
  author := TFhirAnnotation(oSource).author.Clone;
  timeElement := TFhirAnnotation(oSource).timeElement.Clone;
  textElement := TFhirAnnotation(oSource).textElement.Clone;
end;

procedure TFhirAnnotation.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'author[x]') or (child_name = 'author') Then
     list.add(self.link, 'author[x]', FAuthor.Link);
  if (child_name = 'time') Then
     list.add(self.link, 'time', FTime.Link);
  if (child_name = 'text') Then
     list.add(self.link, 'text', FText.Link);
end;

procedure TFhirAnnotation.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'author[x]', 'Reference|string', false, TFhirDataType, FAuthor.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'time', 'dateTime', false, TFhirDateTime, FTime.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'text', 'markdown', false, TFhirMarkdown, FText.Link)); {L1172}
end;

function TFhirAnnotation.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (isMatchingName(propName, 'author', ['Reference', 'String'])) then
  begin
    Author := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'time') then
  begin
    TimeElement := asDateTime(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'text') then
  begin
    TextElement := asMarkdown(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirAnnotation.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirAnnotation.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (isMatchingName(propName, 'author', ['Reference', 'String'])) then raise EFHIRException.create('Cannot make property Author') {L1191}
  else if (propName = 'time') then result := TFhirDateTime.create() {L1223}
  else if (propName = 'text') then result := TFhirMarkdown.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirAnnotation.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'author[x]') then result := 'Reference|string'
  else if (propName = 'time') then result := 'dateTime'
  else if (propName = 'text') then result := 'markdown'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirAnnotation.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (isMatchingName(propName, 'author', ['Reference', 'String'])) then AuthorElement := nil {L1189}
  else if (propName = 'time') then TimeElement := nil
  else if (propName = 'text') then TextElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirAnnotation.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (isMatchingName(propName, 'author', ['Reference', 'String'])) then AuthorElement := new as TFhirDataType {L1190}
  else if (propName = 'time') then TimeElement := asDateTime(new) {L1222}
  else if (propName = 'text') then TextElement := asMarkdown(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirAnnotation.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirAnnotation.fhirType : string;
begin
  result := 'Annotation';
end;

function TFhirAnnotation.Link : TFhirAnnotation;
begin
  result := TFhirAnnotation(inherited Link);
end;

function TFhirAnnotation.Clone : TFhirAnnotation;
begin
  result := TFhirAnnotation(inherited Clone);
end;

function TFhirAnnotation.equals(other : TObject) : boolean; 
var
  o : TFhirAnnotation;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirAnnotation)) then
    result := false
  else
  begin
    o := TFhirAnnotation(other);
    result := compareDeep(authorElement, o.authorElement, true) and compareDeep(timeElement, o.timeElement, true) and 
      compareDeep(textElement, o.textElement, true);
  end;
end;

function TFhirAnnotation.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FAuthor) and isEmptyProp(FTime) and isEmptyProp(FText);
end;

procedure TFhirAnnotation.SetAuthor(value : TFhirDataType);
begin
  FAuthor.free;
  FAuthor := value; {L1134}
end;

procedure TFhirAnnotation.SetTime(value : TFhirDateTime);
begin
  FTime.free;
  FTime := value; {L1134}
end;

function TFhirAnnotation.GetTimeST : TFslDateTime;
begin
  if FTime = nil then
    result := TFslDateTime.makeNull
  else
    result := FTime.value;
end;

procedure TFhirAnnotation.SetTimeST(value : TFslDateTime);
begin
  if FTime = nil then
    FTime := TFhirDateTime.create;
  FTime.value := value
end;

procedure TFhirAnnotation.SetText(value : TFhirMarkdown);
begin
  FText.free;
  FText := value; {L1134}
end;

function TFhirAnnotation.GetTextST : String;
begin
  if FText = nil then
    result := ''
  else
    result := FText.value;
end;

procedure TFhirAnnotation.SetTextST(value : String);
begin
  if value <> '' then
  begin
    if FText = nil then
      FText := TFhirMarkdown.create;
    FText.value := value
  end
  else if FText <> nil then
    FText.value := '';
end;

procedure TFhirAnnotation.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('author[x]');
  fields.add('time');
  fields.add('text');
end;

function TFhirAnnotation.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FAuthor.sizeInBytes);
  inc(result, FTime.sizeInBytes);
  inc(result, FText.sizeInBytes);
end;

{ TFhirAnnotationListEnumerator }

constructor TFhirAnnotationListEnumerator.Create(list : TFhirAnnotationList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirAnnotationListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirAnnotationListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirAnnotationListEnumerator.GetCurrent : TFhirAnnotation;
begin
  Result := FList[FIndex];
end;

function TFhirAnnotationListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirAnnotationList }

procedure TFhirAnnotationList.AddItem(value: TFhirAnnotation);
begin
  assert(value.ClassName = 'TFhirAnnotation', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirAnnotation');
  add(value);
end;

function TFhirAnnotationList.Append: TFhirAnnotation;
begin
  result := TFhirAnnotation.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAnnotationList.ClearItems;
begin
  Clear;
end;

function TFhirAnnotationList.GetEnumerator : TFhirAnnotationListEnumerator;
begin
  result := TFhirAnnotationListEnumerator.Create(self.link);
end;

function TFhirAnnotationList.Clone: TFhirAnnotationList;
begin
  result := TFhirAnnotationList(inherited Clone);
end;

function TFhirAnnotationList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirAnnotationList.GetItemN(index: Integer): TFhirAnnotation;
begin
  result := TFhirAnnotation(ObjectByIndex[index]);
end;

function TFhirAnnotationList.ItemClass: TFslObjectClass;
begin
  result := TFhirAnnotation;
end;
function TFhirAnnotationList.IndexOf(value: TFhirAnnotation): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirAnnotationList.Insert(index: Integer): TFhirAnnotation;
begin
  result := TFhirAnnotation.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAnnotationList.InsertItem(index: Integer; value: TFhirAnnotation);
begin
  assert(value is TFhirAnnotation);
  Inherited Insert(index, value);
end;

function TFhirAnnotationList.Item(index: Integer): TFhirAnnotation;
begin
  result := TFhirAnnotation(ObjectByIndex[index]);
end;

function TFhirAnnotationList.Link: TFhirAnnotationList;
begin
  result := TFhirAnnotationList(inherited Link);
end;

procedure TFhirAnnotationList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirAnnotationList.SetItemByIndex(index: Integer; value: TFhirAnnotation);
begin
  assert(value is TFhirAnnotation);
  FhirAnnotations[index] := value;
end;

procedure TFhirAnnotationList.SetItemN(index: Integer; value: TFhirAnnotation);
begin
  assert(value is TFhirAnnotation);
  ObjectByIndex[index] := value;
end;

{ TFhirAttachment }

constructor TFhirAttachment.Create;
begin
  inherited;
end;

destructor TFhirAttachment.Destroy;
begin
  FContentType.free;
  FLanguage.free;
  FData.free;
  FUrl.free;
  FSize.free;
  FHash.free;
  FTitle.free;
  FCreation.free;
  FHeight.free;
  FWidth.free;
  FFrames.free;
  FDuration.free;
  FPages.free;
  inherited;
end;

procedure TFhirAttachment.Assign(oSource : TFslObject);
begin
  inherited;
  contentTypeElement := TFhirAttachment(oSource).contentTypeElement.Clone;
  languageElement := TFhirAttachment(oSource).languageElement.Clone;
  dataElement := TFhirAttachment(oSource).dataElement.Clone;
  urlElement := TFhirAttachment(oSource).urlElement.Clone;
  sizeElement := TFhirAttachment(oSource).sizeElement.Clone;
  hashElement := TFhirAttachment(oSource).hashElement.Clone;
  titleElement := TFhirAttachment(oSource).titleElement.Clone;
  creationElement := TFhirAttachment(oSource).creationElement.Clone;
  heightElement := TFhirAttachment(oSource).heightElement.Clone;
  widthElement := TFhirAttachment(oSource).widthElement.Clone;
  framesElement := TFhirAttachment(oSource).framesElement.Clone;
  durationElement := TFhirAttachment(oSource).durationElement.Clone;
  pagesElement := TFhirAttachment(oSource).pagesElement.Clone;
end;

procedure TFhirAttachment.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'contentType') Then
     list.add(self.link, 'contentType', FContentType.Link);
  if (child_name = 'language') Then
     list.add(self.link, 'language', FLanguage.Link);
  if (child_name = 'data') Then
     list.add(self.link, 'data', FData.Link);
  if (child_name = 'url') Then
     list.add(self.link, 'url', FUrl.Link);
  if (child_name = 'size') Then
     list.add(self.link, 'size', FSize.Link);
  if (child_name = 'hash') Then
     list.add(self.link, 'hash', FHash.Link);
  if (child_name = 'title') Then
     list.add(self.link, 'title', FTitle.Link);
  if (child_name = 'creation') Then
     list.add(self.link, 'creation', FCreation.Link);
  if (child_name = 'height') Then
     list.add(self.link, 'height', FHeight.Link);
  if (child_name = 'width') Then
     list.add(self.link, 'width', FWidth.Link);
  if (child_name = 'frames') Then
     list.add(self.link, 'frames', FFrames.Link);
  if (child_name = 'duration') Then
     list.add(self.link, 'duration', FDuration.Link);
  if (child_name = 'pages') Then
     list.add(self.link, 'pages', FPages.Link);
end;

procedure TFhirAttachment.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'contentType', 'code', false, TFhirCode, FContentType.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'language', 'code', false, TFhirCode, FLanguage.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'data', 'base64Binary', false, TFhirBase64Binary, FData.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'url', 'url', false, TFhirUrl, FUrl.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'size', 'integer64', false, TFhirInteger64, FSize.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'hash', 'base64Binary', false, TFhirBase64Binary, FHash.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'title', 'string', false, TFhirString, FTitle.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'creation', 'dateTime', false, TFhirDateTime, FCreation.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'height', 'positiveInt', false, TFhirPositiveInt, FHeight.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'width', 'positiveInt', false, TFhirPositiveInt, FWidth.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'frames', 'positiveInt', false, TFhirPositiveInt, FFrames.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'duration', 'decimal', false, TFhirDecimal, FDuration.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'pages', 'positiveInt', false, TFhirPositiveInt, FPages.Link)); {L1172}
end;

function TFhirAttachment.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'contentType') then
  begin
    ContentTypeElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'language') then
  begin
    LanguageElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'data') then
  begin
    DataElement := asBase64Binary(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'url') then
  begin
    UrlElement := asUrl(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'size') then
  begin
    SizeElement := asInteger64(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'hash') then
  begin
    HashElement := asBase64Binary(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'title') then
  begin
    TitleElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'creation') then
  begin
    CreationElement := asDateTime(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'height') then
  begin
    HeightElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'width') then
  begin
    WidthElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'frames') then
  begin
    FramesElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'duration') then
  begin
    DurationElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'pages') then
  begin
    PagesElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirAttachment.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirAttachment.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'contentType') then result := TFhirCode.create() {L1223}
  else if (propName = 'language') then result := TFhirCode.create() {L1223}
  else if (propName = 'data') then result := TFhirBase64Binary.create() {L1223}
  else if (propName = 'url') then result := TFhirUrl.create() {L1223}
  else if (propName = 'size') then result := TFhirInteger64.create() {L1223}
  else if (propName = 'hash') then result := TFhirBase64Binary.create() {L1223}
  else if (propName = 'title') then result := TFhirString.create() {L1223}
  else if (propName = 'creation') then result := TFhirDateTime.create() {L1223}
  else if (propName = 'height') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'width') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'frames') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'duration') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'pages') then result := TFhirPositiveInt.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirAttachment.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'contentType') then result := 'code'
  else if (propName = 'language') then result := 'code'
  else if (propName = 'data') then result := 'base64Binary'
  else if (propName = 'url') then result := 'url'
  else if (propName = 'size') then result := 'integer64'
  else if (propName = 'hash') then result := 'base64Binary'
  else if (propName = 'title') then result := 'string'
  else if (propName = 'creation') then result := 'dateTime'
  else if (propName = 'height') then result := 'positiveInt'
  else if (propName = 'width') then result := 'positiveInt'
  else if (propName = 'frames') then result := 'positiveInt'
  else if (propName = 'duration') then result := 'decimal'
  else if (propName = 'pages') then result := 'positiveInt'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirAttachment.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'contentType') then ContentTypeElement := nil
  else if (propName = 'language') then LanguageElement := nil
  else if (propName = 'data') then DataElement := nil
  else if (propName = 'url') then UrlElement := nil
  else if (propName = 'size') then SizeElement := nil
  else if (propName = 'hash') then HashElement := nil
  else if (propName = 'title') then TitleElement := nil
  else if (propName = 'creation') then CreationElement := nil
  else if (propName = 'height') then HeightElement := nil
  else if (propName = 'width') then WidthElement := nil
  else if (propName = 'frames') then FramesElement := nil
  else if (propName = 'duration') then DurationElement := nil
  else if (propName = 'pages') then PagesElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirAttachment.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'contentType') then ContentTypeElement := asCode(new) {L1222}
  else if (propName = 'language') then LanguageElement := asCode(new) {L1222}
  else if (propName = 'data') then DataElement := asBase64Binary(new) {L1222}
  else if (propName = 'url') then UrlElement := asUrl(new) {L1222}
  else if (propName = 'size') then SizeElement := asInteger64(new) {L1222}
  else if (propName = 'hash') then HashElement := asBase64Binary(new) {L1222}
  else if (propName = 'title') then TitleElement := asString(new) {L1222}
  else if (propName = 'creation') then CreationElement := asDateTime(new) {L1222}
  else if (propName = 'height') then HeightElement := asPositiveInt(new) {L1222}
  else if (propName = 'width') then WidthElement := asPositiveInt(new) {L1222}
  else if (propName = 'frames') then FramesElement := asPositiveInt(new) {L1222}
  else if (propName = 'duration') then DurationElement := asDecimal(new) {L1222}
  else if (propName = 'pages') then PagesElement := asPositiveInt(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirAttachment.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirAttachment.fhirType : string;
begin
  result := 'Attachment';
end;

function TFhirAttachment.Link : TFhirAttachment;
begin
  result := TFhirAttachment(inherited Link);
end;

function TFhirAttachment.Clone : TFhirAttachment;
begin
  result := TFhirAttachment(inherited Clone);
end;

function TFhirAttachment.equals(other : TObject) : boolean; 
var
  o : TFhirAttachment;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirAttachment)) then
    result := false
  else
  begin
    o := TFhirAttachment(other);
    result := compareDeep(contentTypeElement, o.contentTypeElement, true) and compareDeep(languageElement, o.languageElement, true) and 
      compareDeep(dataElement, o.dataElement, true) and compareDeep(urlElement, o.urlElement, true) and 
      compareDeep(sizeElement, o.sizeElement, true) and compareDeep(hashElement, o.hashElement, true) and 
      compareDeep(titleElement, o.titleElement, true) and compareDeep(creationElement, o.creationElement, true) and 
      compareDeep(heightElement, o.heightElement, true) and compareDeep(widthElement, o.widthElement, true) and 
      compareDeep(framesElement, o.framesElement, true) and compareDeep(durationElement, o.durationElement, true) and 
      compareDeep(pagesElement, o.pagesElement, true);
  end;
end;

function TFhirAttachment.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FContentType) and isEmptyProp(FLanguage) and isEmptyProp(FData) and isEmptyProp(FUrl) and isEmptyProp(FSize) and isEmptyProp(FHash) and isEmptyProp(FTitle) and isEmptyProp(FCreation) and isEmptyProp(FHeight) and isEmptyProp(FWidth) and isEmptyProp(FFrames) and isEmptyProp(FDuration) and isEmptyProp(FPages);
end;

procedure TFhirAttachment.SetContentType(value : TFhirCode);
begin
  FContentType.free;
  FContentType := value; {L1134}
end;

function TFhirAttachment.GetContentTypeST : String;
begin
  if FContentType = nil then
    result := ''
  else
    result := FContentType.value;
end;

procedure TFhirAttachment.SetContentTypeST(value : String);
begin
  if value <> '' then
  begin
    if FContentType = nil then
      FContentType := TFhirCode.create;
    FContentType.value := value
  end
  else if FContentType <> nil then
    FContentType.value := '';
end;

procedure TFhirAttachment.SetLanguage(value : TFhirCode);
begin
  FLanguage.free;
  FLanguage := value; {L1134}
end;

function TFhirAttachment.GetLanguageST : String;
begin
  if FLanguage = nil then
    result := ''
  else
    result := FLanguage.value;
end;

procedure TFhirAttachment.SetLanguageST(value : String);
begin
  if value <> '' then
  begin
    if FLanguage = nil then
      FLanguage := TFhirCode.create;
    FLanguage.value := value
  end
  else if FLanguage <> nil then
    FLanguage.value := '';
end;

procedure TFhirAttachment.SetData(value : TFhirBase64Binary);
begin
  FData.free;
  FData := value; {L1134}
end;

function TFhirAttachment.GetDataST : TBytes;
begin
  if FData = nil then
    result := nil {L1148}
  else
    result := FData.value;
end;

procedure TFhirAttachment.SetDataST(value : TBytes);
begin
  if value <> nil then
  begin
    if FData = nil then
      FData := TFhirBase64Binary.create;
    FData.value := value
  end
  else if FData <> nil then
    FData.value := nil;
end;

procedure TFhirAttachment.SetUrl(value : TFhirUrl);
begin
  FUrl.free;
  FUrl := value; {L1134}
end;

function TFhirAttachment.GetUrlST : String;
begin
  if FUrl = nil then
    result := ''
  else
    result := FUrl.value;
end;

procedure TFhirAttachment.SetUrlST(value : String);
begin
  if value <> '' then
  begin
    if FUrl = nil then
      FUrl := TFhirUrl.create;
    FUrl.value := value
  end
  else if FUrl <> nil then
    FUrl.value := '';
end;

procedure TFhirAttachment.SetSize(value : TFhirInteger64);
begin
  FSize.free;
  FSize := value; {L1134}
end;

function TFhirAttachment.GetSizeST : String;
begin
  if FSize = nil then
    result := ''
  else
    result := FSize.value;
end;

procedure TFhirAttachment.SetSizeST(value : String);
begin
  if value <> '' then
  begin
    if FSize = nil then
      FSize := TFhirInteger64.create;
    FSize.value := value
  end
  else if FSize <> nil then
    FSize.value := '';
end;

procedure TFhirAttachment.SetHash(value : TFhirBase64Binary);
begin
  FHash.free;
  FHash := value; {L1134}
end;

function TFhirAttachment.GetHashST : TBytes;
begin
  if FHash = nil then
    result := nil {L1148}
  else
    result := FHash.value;
end;

procedure TFhirAttachment.SetHashST(value : TBytes);
begin
  if value <> nil then
  begin
    if FHash = nil then
      FHash := TFhirBase64Binary.create;
    FHash.value := value
  end
  else if FHash <> nil then
    FHash.value := nil;
end;

procedure TFhirAttachment.SetTitle(value : TFhirString);
begin
  FTitle.free;
  FTitle := value; {L1134}
end;

function TFhirAttachment.GetTitleST : String;
begin
  if FTitle = nil then
    result := ''
  else
    result := FTitle.value;
end;

procedure TFhirAttachment.SetTitleST(value : String);
begin
  if value <> '' then
  begin
    if FTitle = nil then
      FTitle := TFhirString.create;
    FTitle.value := value
  end
  else if FTitle <> nil then
    FTitle.value := '';
end;

procedure TFhirAttachment.SetCreation(value : TFhirDateTime);
begin
  FCreation.free;
  FCreation := value; {L1134}
end;

function TFhirAttachment.GetCreationST : TFslDateTime;
begin
  if FCreation = nil then
    result := TFslDateTime.makeNull
  else
    result := FCreation.value;
end;

procedure TFhirAttachment.SetCreationST(value : TFslDateTime);
begin
  if FCreation = nil then
    FCreation := TFhirDateTime.create;
  FCreation.value := value
end;

procedure TFhirAttachment.SetHeight(value : TFhirPositiveInt);
begin
  FHeight.free;
  FHeight := value; {L1134}
end;

function TFhirAttachment.GetHeightST : String;
begin
  if FHeight = nil then
    result := ''
  else
    result := FHeight.value;
end;

procedure TFhirAttachment.SetHeightST(value : String);
begin
  if value <> '' then
  begin
    if FHeight = nil then
      FHeight := TFhirPositiveInt.create;
    FHeight.value := value
  end
  else if FHeight <> nil then
    FHeight.value := '';
end;

procedure TFhirAttachment.SetWidth(value : TFhirPositiveInt);
begin
  FWidth.free;
  FWidth := value; {L1134}
end;

function TFhirAttachment.GetWidthST : String;
begin
  if FWidth = nil then
    result := ''
  else
    result := FWidth.value;
end;

procedure TFhirAttachment.SetWidthST(value : String);
begin
  if value <> '' then
  begin
    if FWidth = nil then
      FWidth := TFhirPositiveInt.create;
    FWidth.value := value
  end
  else if FWidth <> nil then
    FWidth.value := '';
end;

procedure TFhirAttachment.SetFrames(value : TFhirPositiveInt);
begin
  FFrames.free;
  FFrames := value; {L1134}
end;

function TFhirAttachment.GetFramesST : String;
begin
  if FFrames = nil then
    result := ''
  else
    result := FFrames.value;
end;

procedure TFhirAttachment.SetFramesST(value : String);
begin
  if value <> '' then
  begin
    if FFrames = nil then
      FFrames := TFhirPositiveInt.create;
    FFrames.value := value
  end
  else if FFrames <> nil then
    FFrames.value := '';
end;

procedure TFhirAttachment.SetDuration(value : TFhirDecimal);
begin
  FDuration.free;
  FDuration := value; {L1134}
end;

function TFhirAttachment.GetDurationST : String;
begin
  if FDuration = nil then
    result := ''
  else
    result := FDuration.value;
end;

procedure TFhirAttachment.SetDurationST(value : String);
begin
  if value <> '' then
  begin
    if FDuration = nil then
      FDuration := TFhirDecimal.create;
    FDuration.value := value
  end
  else if FDuration <> nil then
    FDuration.value := '';
end;

procedure TFhirAttachment.SetPages(value : TFhirPositiveInt);
begin
  FPages.free;
  FPages := value; {L1134}
end;

function TFhirAttachment.GetPagesST : String;
begin
  if FPages = nil then
    result := ''
  else
    result := FPages.value;
end;

procedure TFhirAttachment.SetPagesST(value : String);
begin
  if value <> '' then
  begin
    if FPages = nil then
      FPages := TFhirPositiveInt.create;
    FPages.value := value
  end
  else if FPages <> nil then
    FPages.value := '';
end;

procedure TFhirAttachment.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('contentType');
  fields.add('language');
  fields.add('data');
  fields.add('url');
  fields.add('size');
  fields.add('hash');
  fields.add('title');
  fields.add('creation');
  fields.add('height');
  fields.add('width');
  fields.add('frames');
  fields.add('duration');
  fields.add('pages');
end;

function TFhirAttachment.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FContentType.sizeInBytes);
  inc(result, FLanguage.sizeInBytes);
  inc(result, FData.sizeInBytes);
  inc(result, FUrl.sizeInBytes);
  inc(result, FSize.sizeInBytes);
  inc(result, FHash.sizeInBytes);
  inc(result, FTitle.sizeInBytes);
  inc(result, FCreation.sizeInBytes);
  inc(result, FHeight.sizeInBytes);
  inc(result, FWidth.sizeInBytes);
  inc(result, FFrames.sizeInBytes);
  inc(result, FDuration.sizeInBytes);
  inc(result, FPages.sizeInBytes);
end;

{ TFhirAttachmentListEnumerator }

constructor TFhirAttachmentListEnumerator.Create(list : TFhirAttachmentList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirAttachmentListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirAttachmentListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirAttachmentListEnumerator.GetCurrent : TFhirAttachment;
begin
  Result := FList[FIndex];
end;

function TFhirAttachmentListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirAttachmentList }

procedure TFhirAttachmentList.AddItem(value: TFhirAttachment);
begin
  assert(value.ClassName = 'TFhirAttachment', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirAttachment');
  add(value);
end;

function TFhirAttachmentList.Append: TFhirAttachment;
begin
  result := TFhirAttachment.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAttachmentList.ClearItems;
begin
  Clear;
end;

function TFhirAttachmentList.GetEnumerator : TFhirAttachmentListEnumerator;
begin
  result := TFhirAttachmentListEnumerator.Create(self.link);
end;

function TFhirAttachmentList.Clone: TFhirAttachmentList;
begin
  result := TFhirAttachmentList(inherited Clone);
end;

function TFhirAttachmentList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirAttachmentList.GetItemN(index: Integer): TFhirAttachment;
begin
  result := TFhirAttachment(ObjectByIndex[index]);
end;

function TFhirAttachmentList.ItemClass: TFslObjectClass;
begin
  result := TFhirAttachment;
end;
function TFhirAttachmentList.IndexOf(value: TFhirAttachment): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirAttachmentList.Insert(index: Integer): TFhirAttachment;
begin
  result := TFhirAttachment.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAttachmentList.InsertItem(index: Integer; value: TFhirAttachment);
begin
  assert(value is TFhirAttachment);
  Inherited Insert(index, value);
end;

function TFhirAttachmentList.Item(index: Integer): TFhirAttachment;
begin
  result := TFhirAttachment(ObjectByIndex[index]);
end;

function TFhirAttachmentList.Link: TFhirAttachmentList;
begin
  result := TFhirAttachmentList(inherited Link);
end;

procedure TFhirAttachmentList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirAttachmentList.SetItemByIndex(index: Integer; value: TFhirAttachment);
begin
  assert(value is TFhirAttachment);
  FhirAttachments[index] := value;
end;

procedure TFhirAttachmentList.SetItemN(index: Integer; value: TFhirAttachment);
begin
  assert(value is TFhirAttachment);
  ObjectByIndex[index] := value;
end;

{ TFhirCodeableConcept }

constructor TFhirCodeableConcept.Create;
begin
  inherited;
end;

destructor TFhirCodeableConcept.Destroy;
begin
  FCodingList.Free;
  FText.free;
  inherited;
end;

procedure TFhirCodeableConcept.Assign(oSource : TFslObject);
begin
  inherited;
  if (TFhirCodeableConcept(oSource).FCodingList = nil) then
  begin
    FCodingList.free;
    FCodingList := nil;
  end
  else
  begin
    if FCodingList = nil then
      FCodingList := TFhirCodingList.Create;
    FCodingList.Assign(TFhirCodeableConcept(oSource).FCodingList);
  end;
  textElement := TFhirCodeableConcept(oSource).textElement.Clone;
end;

procedure TFhirCodeableConcept.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'coding') Then
    list.addAll(self, 'coding', FCodingList);
  if (child_name = 'text') Then
     list.add(self.link, 'text', FText.Link);
end;

procedure TFhirCodeableConcept.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'coding', 'Coding', true, TFhirCoding, FCodingList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'text', 'string', false, TFhirString, FText.Link)); {L1172}
end;

function TFhirCodeableConcept.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'coding') then
  begin
    CodingList.add(propValue as TFhirCoding) {L1048};
    result := propValue;
  end
  else if (propName = 'text') then
  begin
    TextElement := asString(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirCodeableConcept.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'coding') then CodingList.insertItem(index, propValue as TFhirCoding) {L1049}
  else inherited;
end;

function TFhirCodeableConcept.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'coding') then result := CodingList.new() {L1053}
  else if (propName = 'text') then result := TFhirString.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirCodeableConcept.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'coding') then result := 'Coding'
  else if (propName = 'text') then result := 'string'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirCodeableConcept.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'coding') then deletePropertyValue('coding', CodingList, value) {L1054}
  else if (propName = 'text') then TextElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirCodeableConcept.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'coding') then replacePropertyValue('coding', CodingList, existing, new) {L1055}
  else if (propName = 'text') then TextElement := asString(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirCodeableConcept.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'coding') then CodingList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirCodeableConcept.fhirType : string;
begin
  result := 'CodeableConcept';
end;

function TFhirCodeableConcept.Link : TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept(inherited Link);
end;

function TFhirCodeableConcept.Clone : TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept(inherited Clone);
end;

function TFhirCodeableConcept.equals(other : TObject) : boolean; 
var
  o : TFhirCodeableConcept;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirCodeableConcept)) then
    result := false
  else
  begin
    o := TFhirCodeableConcept(other);
    result := compareDeep(codingList, o.codingList, true) and compareDeep(textElement, o.textElement, true);
  end;
end;

function TFhirCodeableConcept.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FcodingList) and isEmptyProp(FText);
end;

function TFhirCodeableConcept.GetCodingList : TFhirCodingList;
begin
  if FCodingList = nil then
    FCodingList := TFhirCodingList.Create;
  result := FCodingList;
end;

function TFhirCodeableConcept.GetHasCodingList : boolean;
begin
  result := (FCodingList <> nil) and (FCodingList.count > 0);
end;

procedure TFhirCodeableConcept.SetText(value : TFhirString);
begin
  FText.free;
  FText := value; {L1134}
end;

function TFhirCodeableConcept.GetTextST : String;
begin
  if FText = nil then
    result := ''
  else
    result := FText.value;
end;

procedure TFhirCodeableConcept.SetTextST(value : String);
begin
  if value <> '' then
  begin
    if FText = nil then
      FText := TFhirString.create;
    FText.value := value
  end
  else if FText <> nil then
    FText.value := '';
end;

procedure TFhirCodeableConcept.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('coding');
  fields.add('text');
end;

function TFhirCodeableConcept.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FcodingList.sizeInBytes);
  inc(result, FText.sizeInBytes);
end;

{ TFhirCodeableConceptListEnumerator }

constructor TFhirCodeableConceptListEnumerator.Create(list : TFhirCodeableConceptList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirCodeableConceptListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirCodeableConceptListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirCodeableConceptListEnumerator.GetCurrent : TFhirCodeableConcept;
begin
  Result := FList[FIndex];
end;

function TFhirCodeableConceptListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirCodeableConceptList }

procedure TFhirCodeableConceptList.AddItem(value: TFhirCodeableConcept);
begin
  assert(value.ClassName = 'TFhirCodeableConcept', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirCodeableConcept');
  add(value);
end;

function TFhirCodeableConceptList.Append: TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodeableConceptList.ClearItems;
begin
  Clear;
end;

function TFhirCodeableConceptList.GetEnumerator : TFhirCodeableConceptListEnumerator;
begin
  result := TFhirCodeableConceptListEnumerator.Create(self.link);
end;

function TFhirCodeableConceptList.Clone: TFhirCodeableConceptList;
begin
  result := TFhirCodeableConceptList(inherited Clone);
end;

function TFhirCodeableConceptList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirCodeableConceptList.GetItemN(index: Integer): TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept(ObjectByIndex[index]);
end;

function TFhirCodeableConceptList.ItemClass: TFslObjectClass;
begin
  result := TFhirCodeableConcept;
end;
function TFhirCodeableConceptList.IndexOf(value: TFhirCodeableConcept): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirCodeableConceptList.Insert(index: Integer): TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodeableConceptList.InsertItem(index: Integer; value: TFhirCodeableConcept);
begin
  assert(value is TFhirCodeableConcept);
  Inherited Insert(index, value);
end;

function TFhirCodeableConceptList.Item(index: Integer): TFhirCodeableConcept;
begin
  result := TFhirCodeableConcept(ObjectByIndex[index]);
end;

function TFhirCodeableConceptList.Link: TFhirCodeableConceptList;
begin
  result := TFhirCodeableConceptList(inherited Link);
end;

procedure TFhirCodeableConceptList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirCodeableConceptList.SetItemByIndex(index: Integer; value: TFhirCodeableConcept);
begin
  assert(value is TFhirCodeableConcept);
  FhirCodeableConcepts[index] := value;
end;

procedure TFhirCodeableConceptList.SetItemN(index: Integer; value: TFhirCodeableConcept);
begin
  assert(value is TFhirCodeableConcept);
  ObjectByIndex[index] := value;
end;

{ TFhirCodeableReference }

constructor TFhirCodeableReference.Create;
begin
  inherited;
end;

destructor TFhirCodeableReference.Destroy;
begin
  FConcept.free;
  FReference.free;
  inherited;
end;

procedure TFhirCodeableReference.Assign(oSource : TFslObject);
begin
  inherited;
  concept := TFhirCodeableReference(oSource).concept.Clone;
  reference := TFhirCodeableReference(oSource).reference.Clone;
end;

procedure TFhirCodeableReference.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'concept') Then
     list.add(self.link, 'concept', FConcept.Link);
  if (child_name = 'reference') Then
     list.add(self.link, 'reference', FReference.Link);
end;

procedure TFhirCodeableReference.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'concept', 'CodeableConcept', false, TFhirCodeableConcept, FConcept.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'reference', 'Reference', false, TFhirReference, FReference.Link)); {L1172}
end;

function TFhirCodeableReference.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'concept') then
  begin
    Concept := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'reference') then
  begin
    Reference := propValue as TFhirReference {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirCodeableReference.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirCodeableReference.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'concept') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'reference') then result := TFhirReference.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirCodeableReference.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'concept') then result := 'CodeableConcept'
  else if (propName = 'reference') then result := 'Reference'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirCodeableReference.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'concept') then ConceptElement := nil
  else if (propName = 'reference') then ReferenceElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirCodeableReference.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'concept') then ConceptElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'reference') then ReferenceElement := new as TFhirReference {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirCodeableReference.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirCodeableReference.fhirType : string;
begin
  result := 'CodeableReference';
end;

function TFhirCodeableReference.Link : TFhirCodeableReference;
begin
  result := TFhirCodeableReference(inherited Link);
end;

function TFhirCodeableReference.Clone : TFhirCodeableReference;
begin
  result := TFhirCodeableReference(inherited Clone);
end;

function TFhirCodeableReference.equals(other : TObject) : boolean; 
var
  o : TFhirCodeableReference;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirCodeableReference)) then
    result := false
  else
  begin
    o := TFhirCodeableReference(other);
    result := compareDeep(conceptElement, o.conceptElement, true) and compareDeep(referenceElement, o.referenceElement, true);
  end;
end;

function TFhirCodeableReference.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FConcept) and isEmptyProp(FReference);
end;

procedure TFhirCodeableReference.SetConcept(value : TFhirCodeableConcept);
begin
  FConcept.free;
  FConcept := value; {L1134}
end;

procedure TFhirCodeableReference.SetReference(value : TFhirReference);
begin
  FReference.free;
  FReference := value; {L1134}
end;

procedure TFhirCodeableReference.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('concept');
  fields.add('reference');
end;

function TFhirCodeableReference.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FConcept.sizeInBytes);
  inc(result, FReference.sizeInBytes);
end;

{ TFhirCodeableReferenceListEnumerator }

constructor TFhirCodeableReferenceListEnumerator.Create(list : TFhirCodeableReferenceList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirCodeableReferenceListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirCodeableReferenceListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirCodeableReferenceListEnumerator.GetCurrent : TFhirCodeableReference;
begin
  Result := FList[FIndex];
end;

function TFhirCodeableReferenceListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirCodeableReferenceList }

procedure TFhirCodeableReferenceList.AddItem(value: TFhirCodeableReference);
begin
  assert(value.ClassName = 'TFhirCodeableReference', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirCodeableReference');
  add(value);
end;

function TFhirCodeableReferenceList.Append: TFhirCodeableReference;
begin
  result := TFhirCodeableReference.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodeableReferenceList.ClearItems;
begin
  Clear;
end;

function TFhirCodeableReferenceList.GetEnumerator : TFhirCodeableReferenceListEnumerator;
begin
  result := TFhirCodeableReferenceListEnumerator.Create(self.link);
end;

function TFhirCodeableReferenceList.Clone: TFhirCodeableReferenceList;
begin
  result := TFhirCodeableReferenceList(inherited Clone);
end;

function TFhirCodeableReferenceList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirCodeableReferenceList.GetItemN(index: Integer): TFhirCodeableReference;
begin
  result := TFhirCodeableReference(ObjectByIndex[index]);
end;

function TFhirCodeableReferenceList.ItemClass: TFslObjectClass;
begin
  result := TFhirCodeableReference;
end;
function TFhirCodeableReferenceList.IndexOf(value: TFhirCodeableReference): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirCodeableReferenceList.Insert(index: Integer): TFhirCodeableReference;
begin
  result := TFhirCodeableReference.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodeableReferenceList.InsertItem(index: Integer; value: TFhirCodeableReference);
begin
  assert(value is TFhirCodeableReference);
  Inherited Insert(index, value);
end;

function TFhirCodeableReferenceList.Item(index: Integer): TFhirCodeableReference;
begin
  result := TFhirCodeableReference(ObjectByIndex[index]);
end;

function TFhirCodeableReferenceList.Link: TFhirCodeableReferenceList;
begin
  result := TFhirCodeableReferenceList(inherited Link);
end;

procedure TFhirCodeableReferenceList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirCodeableReferenceList.SetItemByIndex(index: Integer; value: TFhirCodeableReference);
begin
  assert(value is TFhirCodeableReference);
  FhirCodeableReferences[index] := value;
end;

procedure TFhirCodeableReferenceList.SetItemN(index: Integer; value: TFhirCodeableReference);
begin
  assert(value is TFhirCodeableReference);
  ObjectByIndex[index] := value;
end;

{ TFhirCoding }

constructor TFhirCoding.Create;
begin
  inherited;
end;

destructor TFhirCoding.Destroy;
begin
  FSystem.free;
  FVersion.free;
  FCode.free;
  FDisplay.free;
  FUserSelected.free;
  inherited;
end;

procedure TFhirCoding.Assign(oSource : TFslObject);
begin
  inherited;
  systemElement := TFhirCoding(oSource).systemElement.Clone;
  versionElement := TFhirCoding(oSource).versionElement.Clone;
  codeElement := TFhirCoding(oSource).codeElement.Clone;
  displayElement := TFhirCoding(oSource).displayElement.Clone;
  userSelectedElement := TFhirCoding(oSource).userSelectedElement.Clone;
end;

procedure TFhirCoding.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'system') Then
     list.add(self.link, 'system', FSystem.Link);
  if (child_name = 'version') Then
     list.add(self.link, 'version', FVersion.Link);
  if (child_name = 'code') Then
     list.add(self.link, 'code', FCode.Link);
  if (child_name = 'display') Then
     list.add(self.link, 'display', FDisplay.Link);
  if (child_name = 'userSelected') Then
     list.add(self.link, 'userSelected', FUserSelected.Link);
end;

procedure TFhirCoding.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'system', 'uri', false, TFhirUri, FSystem.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'version', 'string', false, TFhirString, FVersion.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'code', 'code', false, TFhirCode, FCode.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'display', 'string', false, TFhirString, FDisplay.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'userSelected', 'boolean', false, TFhirBoolean, FUserSelected.Link)); {L1172}
end;

function TFhirCoding.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'system') then
  begin
    SystemElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'version') then
  begin
    VersionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'code') then
  begin
    CodeElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'display') then
  begin
    DisplayElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'userSelected') then
  begin
    UserSelectedElement := asBoolean(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirCoding.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirCoding.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'system') then result := TFhirUri.create() {L1223}
  else if (propName = 'version') then result := TFhirString.create() {L1223}
  else if (propName = 'code') then result := TFhirCode.create() {L1223}
  else if (propName = 'display') then result := TFhirString.create() {L1223}
  else if (propName = 'userSelected') then result := TFhirBoolean.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirCoding.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'system') then result := 'uri'
  else if (propName = 'version') then result := 'string'
  else if (propName = 'code') then result := 'code'
  else if (propName = 'display') then result := 'string'
  else if (propName = 'userSelected') then result := 'boolean'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirCoding.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'system') then SystemElement := nil
  else if (propName = 'version') then VersionElement := nil
  else if (propName = 'code') then CodeElement := nil
  else if (propName = 'display') then DisplayElement := nil
  else if (propName = 'userSelected') then UserSelectedElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirCoding.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'system') then SystemElement := asUri(new) {L1222}
  else if (propName = 'version') then VersionElement := asString(new) {L1222}
  else if (propName = 'code') then CodeElement := asCode(new) {L1222}
  else if (propName = 'display') then DisplayElement := asString(new) {L1222}
  else if (propName = 'userSelected') then UserSelectedElement := asBoolean(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirCoding.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirCoding.fhirType : string;
begin
  result := 'Coding';
end;

function TFhirCoding.Link : TFhirCoding;
begin
  result := TFhirCoding(inherited Link);
end;

function TFhirCoding.Clone : TFhirCoding;
begin
  result := TFhirCoding(inherited Clone);
end;

function TFhirCoding.equals(other : TObject) : boolean; 
var
  o : TFhirCoding;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirCoding)) then
    result := false
  else
  begin
    o := TFhirCoding(other);
    result := compareDeep(systemElement, o.systemElement, true) and compareDeep(versionElement, o.versionElement, true) and 
      compareDeep(codeElement, o.codeElement, true) and compareDeep(displayElement, o.displayElement, true) and 
      compareDeep(userSelectedElement, o.userSelectedElement, true);
  end;
end;

function TFhirCoding.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FSystem) and isEmptyProp(FVersion) and isEmptyProp(FCode) and isEmptyProp(FDisplay) and isEmptyProp(FUserSelected);
end;

procedure TFhirCoding.SetSystem(value : TFhirUri);
begin
  FSystem.free;
  FSystem := value; {L1134}
end;

function TFhirCoding.GetSystemST : String;
begin
  if FSystem = nil then
    result := ''
  else
    result := FSystem.value;
end;

procedure TFhirCoding.SetSystemST(value : String);
begin
  if value <> '' then
  begin
    if FSystem = nil then
      FSystem := TFhirUri.create;
    FSystem.value := value
  end
  else if FSystem <> nil then
    FSystem.value := '';
end;

procedure TFhirCoding.SetVersion(value : TFhirString);
begin
  FVersion.free;
  FVersion := value; {L1134}
end;

function TFhirCoding.GetVersionST : String;
begin
  if FVersion = nil then
    result := ''
  else
    result := FVersion.value;
end;

procedure TFhirCoding.SetVersionST(value : String);
begin
  if value <> '' then
  begin
    if FVersion = nil then
      FVersion := TFhirString.create;
    FVersion.value := value
  end
  else if FVersion <> nil then
    FVersion.value := '';
end;

procedure TFhirCoding.SetCode(value : TFhirCode);
begin
  FCode.free;
  FCode := value; {L1134}
end;

function TFhirCoding.GetCodeST : String;
begin
  if FCode = nil then
    result := ''
  else
    result := FCode.value;
end;

procedure TFhirCoding.SetCodeST(value : String);
begin
  if value <> '' then
  begin
    if FCode = nil then
      FCode := TFhirCode.create;
    FCode.value := value
  end
  else if FCode <> nil then
    FCode.value := '';
end;

procedure TFhirCoding.SetDisplay(value : TFhirString);
begin
  FDisplay.free;
  FDisplay := value; {L1134}
end;

function TFhirCoding.GetDisplayST : String;
begin
  if FDisplay = nil then
    result := ''
  else
    result := FDisplay.value;
end;

procedure TFhirCoding.SetDisplayST(value : String);
begin
  if value <> '' then
  begin
    if FDisplay = nil then
      FDisplay := TFhirString.create;
    FDisplay.value := value
  end
  else if FDisplay <> nil then
    FDisplay.value := '';
end;

procedure TFhirCoding.SetUserSelected(value : TFhirBoolean);
begin
  FUserSelected.free;
  FUserSelected := value; {L1134}
end;

function TFhirCoding.GetUserSelectedST : Boolean;
begin
  if FUserSelected = nil then
    result := false
  else
    result := FUserSelected.value;
end;

procedure TFhirCoding.SetUserSelectedST(value : Boolean);
begin
  if FUserSelected = nil then
    FUserSelected := TFhirBoolean.create;
  FUserSelected.value := value
end;

procedure TFhirCoding.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('system');
  fields.add('version');
  fields.add('code');
  fields.add('display');
  fields.add('userSelected');
end;

function TFhirCoding.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FSystem.sizeInBytes);
  inc(result, FVersion.sizeInBytes);
  inc(result, FCode.sizeInBytes);
  inc(result, FDisplay.sizeInBytes);
  inc(result, FUserSelected.sizeInBytes);
end;

{ TFhirCodingListEnumerator }

constructor TFhirCodingListEnumerator.Create(list : TFhirCodingList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirCodingListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirCodingListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirCodingListEnumerator.GetCurrent : TFhirCoding;
begin
  Result := FList[FIndex];
end;

function TFhirCodingListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirCodingList }

procedure TFhirCodingList.AddItem(value: TFhirCoding);
begin
  assert(value.ClassName = 'TFhirCoding', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirCoding');
  add(value);
end;

function TFhirCodingList.Append: TFhirCoding;
begin
  result := TFhirCoding.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodingList.ClearItems;
begin
  Clear;
end;

function TFhirCodingList.GetEnumerator : TFhirCodingListEnumerator;
begin
  result := TFhirCodingListEnumerator.Create(self.link);
end;

function TFhirCodingList.Clone: TFhirCodingList;
begin
  result := TFhirCodingList(inherited Clone);
end;

function TFhirCodingList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirCodingList.GetItemN(index: Integer): TFhirCoding;
begin
  result := TFhirCoding(ObjectByIndex[index]);
end;

function TFhirCodingList.ItemClass: TFslObjectClass;
begin
  result := TFhirCoding;
end;
function TFhirCodingList.IndexOf(value: TFhirCoding): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirCodingList.Insert(index: Integer): TFhirCoding;
begin
  result := TFhirCoding.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCodingList.InsertItem(index: Integer; value: TFhirCoding);
begin
  assert(value is TFhirCoding);
  Inherited Insert(index, value);
end;

function TFhirCodingList.Item(index: Integer): TFhirCoding;
begin
  result := TFhirCoding(ObjectByIndex[index]);
end;

function TFhirCodingList.Link: TFhirCodingList;
begin
  result := TFhirCodingList(inherited Link);
end;

procedure TFhirCodingList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirCodingList.SetItemByIndex(index: Integer; value: TFhirCoding);
begin
  assert(value is TFhirCoding);
  FhirCodings[index] := value;
end;

procedure TFhirCodingList.SetItemN(index: Integer; value: TFhirCoding);
begin
  assert(value is TFhirCoding);
  ObjectByIndex[index] := value;
end;

{ TFhirContactDetail }

constructor TFhirContactDetail.Create;
begin
  inherited;
end;

destructor TFhirContactDetail.Destroy;
begin
  FName.free;
  FTelecomList.Free;
  inherited;
end;

procedure TFhirContactDetail.Assign(oSource : TFslObject);
begin
  inherited;
  nameElement := TFhirContactDetail(oSource).nameElement.Clone;
  if (TFhirContactDetail(oSource).FTelecomList = nil) then
  begin
    FTelecomList.free;
    FTelecomList := nil;
  end
  else
  begin
    if FTelecomList = nil then
      FTelecomList := TFhirContactPointList.Create;
    FTelecomList.Assign(TFhirContactDetail(oSource).FTelecomList);
  end;
end;

procedure TFhirContactDetail.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'name') Then
     list.add(self.link, 'name', FName.Link);
  if (child_name = 'telecom') Then
    list.addAll(self, 'telecom', FTelecomList);
end;

procedure TFhirContactDetail.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'name', 'string', false, TFhirString, FName.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'telecom', 'ContactPoint', true, TFhirContactPoint, FTelecomList.Link)) {L1039};
end;

function TFhirContactDetail.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'name') then
  begin
    NameElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'telecom') then
  begin
    TelecomList.add(propValue as TFhirContactPoint) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirContactDetail.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'telecom') then TelecomList.insertItem(index, propValue as TFhirContactPoint) {L1049}
  else inherited;
end;

function TFhirContactDetail.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'name') then result := TFhirString.create() {L1223}
  else if (propName = 'telecom') then result := TelecomList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirContactDetail.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'name') then result := 'string'
  else if (propName = 'telecom') then result := 'ContactPoint'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirContactDetail.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'name') then NameElement := nil
  else if (propName = 'telecom') then deletePropertyValue('telecom', TelecomList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirContactDetail.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'name') then NameElement := asString(new) {L1222}
  else if (propName = 'telecom') then replacePropertyValue('telecom', TelecomList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirContactDetail.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'telecom') then TelecomList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirContactDetail.fhirType : string;
begin
  result := 'ContactDetail';
end;

function TFhirContactDetail.Link : TFhirContactDetail;
begin
  result := TFhirContactDetail(inherited Link);
end;

function TFhirContactDetail.Clone : TFhirContactDetail;
begin
  result := TFhirContactDetail(inherited Clone);
end;

function TFhirContactDetail.equals(other : TObject) : boolean; 
var
  o : TFhirContactDetail;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirContactDetail)) then
    result := false
  else
  begin
    o := TFhirContactDetail(other);
    result := compareDeep(nameElement, o.nameElement, true) and compareDeep(telecomList, o.telecomList, true);
  end;
end;

function TFhirContactDetail.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FName) and isEmptyProp(FtelecomList);
end;

procedure TFhirContactDetail.SetName(value : TFhirString);
begin
  FName.free;
  FName := value; {L1134}
end;

function TFhirContactDetail.GetNameST : String;
begin
  if FName = nil then
    result := ''
  else
    result := FName.value;
end;

procedure TFhirContactDetail.SetNameST(value : String);
begin
  if value <> '' then
  begin
    if FName = nil then
      FName := TFhirString.create;
    FName.value := value
  end
  else if FName <> nil then
    FName.value := '';
end;

function TFhirContactDetail.GetTelecomList : TFhirContactPointList;
begin
  if FTelecomList = nil then
    FTelecomList := TFhirContactPointList.Create;
  result := FTelecomList;
end;

function TFhirContactDetail.GetHasTelecomList : boolean;
begin
  result := (FTelecomList <> nil) and (FTelecomList.count > 0);
end;

procedure TFhirContactDetail.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('name');
  fields.add('telecom');
end;

function TFhirContactDetail.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FName.sizeInBytes);
  inc(result, FtelecomList.sizeInBytes);
end;

{ TFhirContactDetailListEnumerator }

constructor TFhirContactDetailListEnumerator.Create(list : TFhirContactDetailList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirContactDetailListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirContactDetailListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirContactDetailListEnumerator.GetCurrent : TFhirContactDetail;
begin
  Result := FList[FIndex];
end;

function TFhirContactDetailListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirContactDetailList }

procedure TFhirContactDetailList.AddItem(value: TFhirContactDetail);
begin
  assert(value.ClassName = 'TFhirContactDetail', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirContactDetail');
  add(value);
end;

function TFhirContactDetailList.Append: TFhirContactDetail;
begin
  result := TFhirContactDetail.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirContactDetailList.ClearItems;
begin
  Clear;
end;

function TFhirContactDetailList.GetEnumerator : TFhirContactDetailListEnumerator;
begin
  result := TFhirContactDetailListEnumerator.Create(self.link);
end;

function TFhirContactDetailList.Clone: TFhirContactDetailList;
begin
  result := TFhirContactDetailList(inherited Clone);
end;

function TFhirContactDetailList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirContactDetailList.GetItemN(index: Integer): TFhirContactDetail;
begin
  result := TFhirContactDetail(ObjectByIndex[index]);
end;

function TFhirContactDetailList.ItemClass: TFslObjectClass;
begin
  result := TFhirContactDetail;
end;
function TFhirContactDetailList.IndexOf(value: TFhirContactDetail): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirContactDetailList.Insert(index: Integer): TFhirContactDetail;
begin
  result := TFhirContactDetail.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirContactDetailList.InsertItem(index: Integer; value: TFhirContactDetail);
begin
  assert(value is TFhirContactDetail);
  Inherited Insert(index, value);
end;

function TFhirContactDetailList.Item(index: Integer): TFhirContactDetail;
begin
  result := TFhirContactDetail(ObjectByIndex[index]);
end;

function TFhirContactDetailList.Link: TFhirContactDetailList;
begin
  result := TFhirContactDetailList(inherited Link);
end;

procedure TFhirContactDetailList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirContactDetailList.SetItemByIndex(index: Integer; value: TFhirContactDetail);
begin
  assert(value is TFhirContactDetail);
  FhirContactDetails[index] := value;
end;

procedure TFhirContactDetailList.SetItemN(index: Integer; value: TFhirContactDetail);
begin
  assert(value is TFhirContactDetail);
  ObjectByIndex[index] := value;
end;

{ TFhirContactPoint }

constructor TFhirContactPoint.Create;
begin
  inherited;
end;

destructor TFhirContactPoint.Destroy;
begin
  FSystem.free;
  FValue.free;
  FUse.free;
  FRank.free;
  FPeriod.free;
  inherited;
end;

procedure TFhirContactPoint.Assign(oSource : TFslObject);
begin
  inherited;
  systemElement := TFhirContactPoint(oSource).systemElement.Clone;
  valueElement := TFhirContactPoint(oSource).valueElement.Clone;
  useElement := TFhirContactPoint(oSource).useElement.Clone;
  rankElement := TFhirContactPoint(oSource).rankElement.Clone;
  period := TFhirContactPoint(oSource).period.Clone;
end;

procedure TFhirContactPoint.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'system') Then
     list.add(self.link, 'system', FSystem.Link);
  if (child_name = 'value') Then
     list.add(self.link, 'value', FValue.Link);
  if (child_name = 'use') Then
     list.add(self.link, 'use', FUse.Link);
  if (child_name = 'rank') Then
     list.add(self.link, 'rank', FRank.Link);
  if (child_name = 'period') Then
     list.add(self.link, 'period', FPeriod.Link);
end;

procedure TFhirContactPoint.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'system', 'code', false, TFhirEnum, FSystem.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'value', 'string', false, TFhirString, FValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'use', 'code', false, TFhirEnum, FUse.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'rank', 'positiveInt', false, TFhirPositiveInt, FRank.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'period', 'Period', false, TFhirPeriod, FPeriod.Link)); {L1172}
end;

function TFhirContactPoint.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'system') then
  begin
    SystemElement := asEnum(SYSTEMS_TFhirContactPointSystemEnum, CODES_TFhirContactPointSystemEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'value') then
  begin
    ValueElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'use') then
  begin
    UseElement := asEnum(SYSTEMS_TFhirContactPointUseEnum, CODES_TFhirContactPointUseEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'rank') then
  begin
    RankElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'period') then
  begin
    Period := propValue as TFhirPeriod {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirContactPoint.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirContactPoint.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'system') then result := TFhirEnum.create(SYSTEMS_TFhirContactPointSystemEnum[ContactPointSystemNull], CODES_TFhirContactPointSystemEnum[ContactPointSystemNull])  {L1211}
  else if (propName = 'value') then result := TFhirString.create() {L1223}
  else if (propName = 'use') then result := TFhirEnum.create(SYSTEMS_TFhirContactPointUseEnum[ContactPointUseNull], CODES_TFhirContactPointUseEnum[ContactPointUseNull])  {L1211}
  else if (propName = 'rank') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'period') then result := TFhirPeriod.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirContactPoint.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'system') then result := 'code'
  else if (propName = 'value') then result := 'string'
  else if (propName = 'use') then result := 'code'
  else if (propName = 'rank') then result := 'positiveInt'
  else if (propName = 'period') then result := 'Period'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirContactPoint.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'system') then SystemElement := nil
  else if (propName = 'value') then ValueElement := nil
  else if (propName = 'use') then UseElement := nil
  else if (propName = 'rank') then RankElement := nil
  else if (propName = 'period') then PeriodElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirContactPoint.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'system') then SystemElement := asEnum(SYSTEMS_TFhirContactPointSystemEnum, CODES_TFhirContactPointSystemEnum, new) {L1210}
  else if (propName = 'value') then ValueElement := asString(new) {L1222}
  else if (propName = 'use') then UseElement := asEnum(SYSTEMS_TFhirContactPointUseEnum, CODES_TFhirContactPointUseEnum, new) {L1210}
  else if (propName = 'rank') then RankElement := asPositiveInt(new) {L1222}
  else if (propName = 'period') then PeriodElement := new as TFhirPeriod {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirContactPoint.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirContactPoint.fhirType : string;
begin
  result := 'ContactPoint';
end;

function TFhirContactPoint.Link : TFhirContactPoint;
begin
  result := TFhirContactPoint(inherited Link);
end;

function TFhirContactPoint.Clone : TFhirContactPoint;
begin
  result := TFhirContactPoint(inherited Clone);
end;

function TFhirContactPoint.equals(other : TObject) : boolean; 
var
  o : TFhirContactPoint;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirContactPoint)) then
    result := false
  else
  begin
    o := TFhirContactPoint(other);
    result := compareDeep(systemElement, o.systemElement, true) and compareDeep(valueElement, o.valueElement, true) and 
      compareDeep(useElement, o.useElement, true) and compareDeep(rankElement, o.rankElement, true) and 
      compareDeep(periodElement, o.periodElement, true);
  end;
end;

function TFhirContactPoint.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FSystem) and isEmptyProp(FValue) and isEmptyProp(FUse) and isEmptyProp(FRank) and isEmptyProp(FPeriod);
end;

procedure TFhirContactPoint.SetSystem(value : TFhirEnum);
begin
  FSystem.free;
  FSystem := value;
end;

function TFhirContactPoint.GetSystemST : TFhirContactPointSystemEnum;
begin
  if FSystem = nil then
    result := TFhirContactPointSystemEnum(0)
  else
    result := TFhirContactPointSystemEnum(StringArrayIndexOfSensitive(CODES_TFhirContactPointSystemEnum, FSystem.value));
end;

procedure TFhirContactPoint.SetSystemST(value : TFhirContactPointSystemEnum);
begin
  if ord(value) = 0 then
    SystemElement := nil
  else
    SystemElement := TFhirEnum.create(SYSTEMS_TFhirContactPointSystemEnum[value], CODES_TFhirContactPointSystemEnum[value]);
end;

procedure TFhirContactPoint.SetValue(value : TFhirString);
begin
  FValue.free;
  FValue := value; {L1134}
end;

function TFhirContactPoint.GetValueST : String;
begin
  if FValue = nil then
    result := ''
  else
    result := FValue.value;
end;

procedure TFhirContactPoint.SetValueST(value : String);
begin
  if value <> '' then
  begin
    if FValue = nil then
      FValue := TFhirString.create;
    FValue.value := value
  end
  else if FValue <> nil then
    FValue.value := '';
end;

procedure TFhirContactPoint.SetUse(value : TFhirEnum);
begin
  FUse.free;
  FUse := value;
end;

function TFhirContactPoint.GetUseST : TFhirContactPointUseEnum;
begin
  if FUse = nil then
    result := TFhirContactPointUseEnum(0)
  else
    result := TFhirContactPointUseEnum(StringArrayIndexOfSensitive(CODES_TFhirContactPointUseEnum, FUse.value));
end;

procedure TFhirContactPoint.SetUseST(value : TFhirContactPointUseEnum);
begin
  if ord(value) = 0 then
    UseElement := nil
  else
    UseElement := TFhirEnum.create(SYSTEMS_TFhirContactPointUseEnum[value], CODES_TFhirContactPointUseEnum[value]);
end;

procedure TFhirContactPoint.SetRank(value : TFhirPositiveInt);
begin
  FRank.free;
  FRank := value; {L1134}
end;

function TFhirContactPoint.GetRankST : String;
begin
  if FRank = nil then
    result := ''
  else
    result := FRank.value;
end;

procedure TFhirContactPoint.SetRankST(value : String);
begin
  if value <> '' then
  begin
    if FRank = nil then
      FRank := TFhirPositiveInt.create;
    FRank.value := value
  end
  else if FRank <> nil then
    FRank.value := '';
end;

procedure TFhirContactPoint.SetPeriod(value : TFhirPeriod);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

procedure TFhirContactPoint.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('system');
  fields.add('value');
  fields.add('use');
  fields.add('rank');
  fields.add('period');
end;

function TFhirContactPoint.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FSystem.sizeInBytes);
  inc(result, FValue.sizeInBytes);
  inc(result, FUse.sizeInBytes);
  inc(result, FRank.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
end;

{ TFhirContactPointListEnumerator }

constructor TFhirContactPointListEnumerator.Create(list : TFhirContactPointList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirContactPointListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirContactPointListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirContactPointListEnumerator.GetCurrent : TFhirContactPoint;
begin
  Result := FList[FIndex];
end;

function TFhirContactPointListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirContactPointList }

procedure TFhirContactPointList.AddItem(value: TFhirContactPoint);
begin
  assert(value.ClassName = 'TFhirContactPoint', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirContactPoint');
  add(value);
end;

function TFhirContactPointList.Append: TFhirContactPoint;
begin
  result := TFhirContactPoint.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirContactPointList.ClearItems;
begin
  Clear;
end;

function TFhirContactPointList.GetEnumerator : TFhirContactPointListEnumerator;
begin
  result := TFhirContactPointListEnumerator.Create(self.link);
end;

function TFhirContactPointList.Clone: TFhirContactPointList;
begin
  result := TFhirContactPointList(inherited Clone);
end;

function TFhirContactPointList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirContactPointList.GetItemN(index: Integer): TFhirContactPoint;
begin
  result := TFhirContactPoint(ObjectByIndex[index]);
end;

function TFhirContactPointList.ItemClass: TFslObjectClass;
begin
  result := TFhirContactPoint;
end;
function TFhirContactPointList.IndexOf(value: TFhirContactPoint): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirContactPointList.Insert(index: Integer): TFhirContactPoint;
begin
  result := TFhirContactPoint.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirContactPointList.InsertItem(index: Integer; value: TFhirContactPoint);
begin
  assert(value is TFhirContactPoint);
  Inherited Insert(index, value);
end;

function TFhirContactPointList.Item(index: Integer): TFhirContactPoint;
begin
  result := TFhirContactPoint(ObjectByIndex[index]);
end;

function TFhirContactPointList.Link: TFhirContactPointList;
begin
  result := TFhirContactPointList(inherited Link);
end;

procedure TFhirContactPointList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirContactPointList.SetItemByIndex(index: Integer; value: TFhirContactPoint);
begin
  assert(value is TFhirContactPoint);
  FhirContactPoints[index] := value;
end;

procedure TFhirContactPointList.SetItemN(index: Integer; value: TFhirContactPoint);
begin
  assert(value is TFhirContactPoint);
  ObjectByIndex[index] := value;
end;

{ TFhirContributor }

constructor TFhirContributor.Create;
begin
  inherited;
end;

destructor TFhirContributor.Destroy;
begin
  FType_.free;
  FName.free;
  FContactList.Free;
  inherited;
end;

procedure TFhirContributor.Assign(oSource : TFslObject);
begin
  inherited;
  type_Element := TFhirContributor(oSource).type_Element.Clone;
  nameElement := TFhirContributor(oSource).nameElement.Clone;
  if (TFhirContributor(oSource).FContactList = nil) then
  begin
    FContactList.free;
    FContactList := nil;
  end
  else
  begin
    if FContactList = nil then
      FContactList := TFhirContactDetailList.Create;
    FContactList.Assign(TFhirContributor(oSource).FContactList);
  end;
end;

procedure TFhirContributor.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'name') Then
     list.add(self.link, 'name', FName.Link);
  if (child_name = 'contact') Then
    list.addAll(self, 'contact', FContactList);
end;

procedure TFhirContributor.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'name', 'string', false, TFhirString, FName.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'contact', 'ContactDetail', true, TFhirContactDetail, FContactList.Link)) {L1039};
end;

function TFhirContributor.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirContributorTypeEnum, CODES_TFhirContributorTypeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'name') then
  begin
    NameElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'contact') then
  begin
    ContactList.add(propValue as TFhirContactDetail) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirContributor.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'contact') then ContactList.insertItem(index, propValue as TFhirContactDetail) {L1049}
  else inherited;
end;

function TFhirContributor.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirContributorTypeEnum[ContributorTypeNull], CODES_TFhirContributorTypeEnum[ContributorTypeNull])  {L1211}
  else if (propName = 'name') then result := TFhirString.create() {L1223}
  else if (propName = 'contact') then result := ContactList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirContributor.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'code'
  else if (propName = 'name') then result := 'string'
  else if (propName = 'contact') then result := 'ContactDetail'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirContributor.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (propName = 'name') then NameElement := nil
  else if (propName = 'contact') then deletePropertyValue('contact', ContactList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirContributor.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirContributorTypeEnum, CODES_TFhirContributorTypeEnum, new) {L1210}
  else if (propName = 'name') then NameElement := asString(new) {L1222}
  else if (propName = 'contact') then replacePropertyValue('contact', ContactList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirContributor.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'contact') then ContactList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirContributor.fhirType : string;
begin
  result := 'Contributor';
end;

function TFhirContributor.Link : TFhirContributor;
begin
  result := TFhirContributor(inherited Link);
end;

function TFhirContributor.Clone : TFhirContributor;
begin
  result := TFhirContributor(inherited Clone);
end;

function TFhirContributor.equals(other : TObject) : boolean; 
var
  o : TFhirContributor;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirContributor)) then
    result := false
  else
  begin
    o := TFhirContributor(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(nameElement, o.nameElement, true) and 
      compareDeep(contactList, o.contactList, true);
  end;
end;

function TFhirContributor.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FName) and isEmptyProp(FcontactList);
end;

procedure TFhirContributor.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirContributor.GetType_ST : TFhirContributorTypeEnum;
begin
  if FType_ = nil then
    result := TFhirContributorTypeEnum(0)
  else
    result := TFhirContributorTypeEnum(StringArrayIndexOfSensitive(CODES_TFhirContributorTypeEnum, FType_.value));
end;

procedure TFhirContributor.SetType_ST(value : TFhirContributorTypeEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirContributorTypeEnum[value], CODES_TFhirContributorTypeEnum[value]);
end;

procedure TFhirContributor.SetName(value : TFhirString);
begin
  FName.free;
  FName := value; {L1134}
end;

function TFhirContributor.GetNameST : String;
begin
  if FName = nil then
    result := ''
  else
    result := FName.value;
end;

procedure TFhirContributor.SetNameST(value : String);
begin
  if value <> '' then
  begin
    if FName = nil then
      FName := TFhirString.create;
    FName.value := value
  end
  else if FName <> nil then
    FName.value := '';
end;

function TFhirContributor.GetContactList : TFhirContactDetailList;
begin
  if FContactList = nil then
    FContactList := TFhirContactDetailList.Create;
  result := FContactList;
end;

function TFhirContributor.GetHasContactList : boolean;
begin
  result := (FContactList <> nil) and (FContactList.count > 0);
end;

procedure TFhirContributor.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('name');
  fields.add('contact');
end;

function TFhirContributor.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FName.sizeInBytes);
  inc(result, FcontactList.sizeInBytes);
end;

{ TFhirContributorListEnumerator }

constructor TFhirContributorListEnumerator.Create(list : TFhirContributorList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirContributorListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirContributorListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirContributorListEnumerator.GetCurrent : TFhirContributor;
begin
  Result := FList[FIndex];
end;

function TFhirContributorListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirContributorList }

procedure TFhirContributorList.AddItem(value: TFhirContributor);
begin
  assert(value.ClassName = 'TFhirContributor', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirContributor');
  add(value);
end;

function TFhirContributorList.Append: TFhirContributor;
begin
  result := TFhirContributor.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirContributorList.ClearItems;
begin
  Clear;
end;

function TFhirContributorList.GetEnumerator : TFhirContributorListEnumerator;
begin
  result := TFhirContributorListEnumerator.Create(self.link);
end;

function TFhirContributorList.Clone: TFhirContributorList;
begin
  result := TFhirContributorList(inherited Clone);
end;

function TFhirContributorList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirContributorList.GetItemN(index: Integer): TFhirContributor;
begin
  result := TFhirContributor(ObjectByIndex[index]);
end;

function TFhirContributorList.ItemClass: TFslObjectClass;
begin
  result := TFhirContributor;
end;
function TFhirContributorList.IndexOf(value: TFhirContributor): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirContributorList.Insert(index: Integer): TFhirContributor;
begin
  result := TFhirContributor.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirContributorList.InsertItem(index: Integer; value: TFhirContributor);
begin
  assert(value is TFhirContributor);
  Inherited Insert(index, value);
end;

function TFhirContributorList.Item(index: Integer): TFhirContributor;
begin
  result := TFhirContributor(ObjectByIndex[index]);
end;

function TFhirContributorList.Link: TFhirContributorList;
begin
  result := TFhirContributorList(inherited Link);
end;

procedure TFhirContributorList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirContributorList.SetItemByIndex(index: Integer; value: TFhirContributor);
begin
  assert(value is TFhirContributor);
  FhirContributors[index] := value;
end;

procedure TFhirContributorList.SetItemN(index: Integer; value: TFhirContributor);
begin
  assert(value is TFhirContributor);
  ObjectByIndex[index] := value;
end;

{ TFhirDataRequirementCodeFilter }

constructor TFhirDataRequirementCodeFilter.Create;
begin
  inherited;
end;

destructor TFhirDataRequirementCodeFilter.Destroy;
begin
  FPath.free;
  FSearchParam.free;
  FValueSet.free;
  FCodeList.Free;
  inherited;
end;

procedure TFhirDataRequirementCodeFilter.Assign(oSource : TFslObject);
begin
  inherited;
  pathElement := TFhirDataRequirementCodeFilter(oSource).pathElement.Clone;
  searchParamElement := TFhirDataRequirementCodeFilter(oSource).searchParamElement.Clone;
  valueSetElement := TFhirDataRequirementCodeFilter(oSource).valueSetElement.Clone;
  if (TFhirDataRequirementCodeFilter(oSource).FCodeList = nil) then
  begin
    FCodeList.free;
    FCodeList := nil;
  end
  else
  begin
    if FCodeList = nil then
      FCodeList := TFhirCodingList.Create;
    FCodeList.Assign(TFhirDataRequirementCodeFilter(oSource).FCodeList);
  end;
end;

procedure TFhirDataRequirementCodeFilter.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'path') Then
     list.add(self.link, 'path', FPath.Link);
  if (child_name = 'searchParam') Then
     list.add(self.link, 'searchParam', FSearchParam.Link);
  if (child_name = 'valueSet') Then
     list.add(self.link, 'valueSet', FValueSet.Link);
  if (child_name = 'code') Then
    list.addAll(self, 'code', FCodeList);
end;

procedure TFhirDataRequirementCodeFilter.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'path', 'string', false, TFhirString, FPath.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'searchParam', 'string', false, TFhirString, FSearchParam.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'valueSet', 'canonical', false, TFhirCanonical, FValueSet.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'code', 'Coding', true, TFhirCoding, FCodeList.Link)) {L1039};
end;

function TFhirDataRequirementCodeFilter.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'path') then
  begin
    PathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'searchParam') then
  begin
    SearchParamElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'valueSet') then
  begin
    ValueSetElement := asCanonical(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'code') then
  begin
    CodeList.add(propValue as TFhirCoding) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirDataRequirementCodeFilter.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'code') then CodeList.insertItem(index, propValue as TFhirCoding) {L1049}
  else inherited;
end;

function TFhirDataRequirementCodeFilter.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'path') then result := TFhirString.create() {L1223}
  else if (propName = 'searchParam') then result := TFhirString.create() {L1223}
  else if (propName = 'valueSet') then result := TFhirCanonical.create() {L1223}
  else if (propName = 'code') then result := CodeList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirDataRequirementCodeFilter.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'path') then result := 'string'
  else if (propName = 'searchParam') then result := 'string'
  else if (propName = 'valueSet') then result := 'canonical'
  else if (propName = 'code') then result := 'Coding'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirDataRequirementCodeFilter.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'path') then PathElement := nil
  else if (propName = 'searchParam') then SearchParamElement := nil
  else if (propName = 'valueSet') then ValueSetElement := nil
  else if (propName = 'code') then deletePropertyValue('code', CodeList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirDataRequirementCodeFilter.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'path') then PathElement := asString(new) {L1222}
  else if (propName = 'searchParam') then SearchParamElement := asString(new) {L1222}
  else if (propName = 'valueSet') then ValueSetElement := asCanonical(new) {L1222}
  else if (propName = 'code') then replacePropertyValue('code', CodeList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirDataRequirementCodeFilter.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'code') then CodeList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirDataRequirementCodeFilter.fhirType : string;
begin
  result := 'DataRequirement.codeFilter';
end;

function TFhirDataRequirementCodeFilter.Link : TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter(inherited Link);
end;

function TFhirDataRequirementCodeFilter.Clone : TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter(inherited Clone);
end;

function TFhirDataRequirementCodeFilter.equals(other : TObject) : boolean; 
var
  o : TFhirDataRequirementCodeFilter;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDataRequirementCodeFilter)) then
    result := false
  else
  begin
    o := TFhirDataRequirementCodeFilter(other);
    result := compareDeep(pathElement, o.pathElement, true) and compareDeep(searchParamElement, o.searchParamElement, true) and 
      compareDeep(valueSetElement, o.valueSetElement, true) and compareDeep(codeList, o.codeList, true);
  end;
end;

function TFhirDataRequirementCodeFilter.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FPath) and isEmptyProp(FSearchParam) and isEmptyProp(FValueSet) and isEmptyProp(FcodeList);
end;

procedure TFhirDataRequirementCodeFilter.SetPath(value : TFhirString);
begin
  FPath.free;
  FPath := value; {L1134}
end;

function TFhirDataRequirementCodeFilter.GetPathST : String;
begin
  if FPath = nil then
    result := ''
  else
    result := FPath.value;
end;

procedure TFhirDataRequirementCodeFilter.SetPathST(value : String);
begin
  if value <> '' then
  begin
    if FPath = nil then
      FPath := TFhirString.create;
    FPath.value := value
  end
  else if FPath <> nil then
    FPath.value := '';
end;

procedure TFhirDataRequirementCodeFilter.SetSearchParam(value : TFhirString);
begin
  FSearchParam.free;
  FSearchParam := value; {L1134}
end;

function TFhirDataRequirementCodeFilter.GetSearchParamST : String;
begin
  if FSearchParam = nil then
    result := ''
  else
    result := FSearchParam.value;
end;

procedure TFhirDataRequirementCodeFilter.SetSearchParamST(value : String);
begin
  if value <> '' then
  begin
    if FSearchParam = nil then
      FSearchParam := TFhirString.create;
    FSearchParam.value := value
  end
  else if FSearchParam <> nil then
    FSearchParam.value := '';
end;

procedure TFhirDataRequirementCodeFilter.SetValueSet(value : TFhirCanonical);
begin
  FValueSet.free;
  FValueSet := value; {L1134}
end;

function TFhirDataRequirementCodeFilter.GetValueSetST : String;
begin
  if FValueSet = nil then
    result := ''
  else
    result := FValueSet.value;
end;

procedure TFhirDataRequirementCodeFilter.SetValueSetST(value : String);
begin
  if value <> '' then
  begin
    if FValueSet = nil then
      FValueSet := TFhirCanonical.create;
    FValueSet.value := value
  end
  else if FValueSet <> nil then
    FValueSet.value := '';
end;

function TFhirDataRequirementCodeFilter.GetCodeList : TFhirCodingList;
begin
  if FCodeList = nil then
    FCodeList := TFhirCodingList.Create;
  result := FCodeList;
end;

function TFhirDataRequirementCodeFilter.GetHasCodeList : boolean;
begin
  result := (FCodeList <> nil) and (FCodeList.count > 0);
end;

procedure TFhirDataRequirementCodeFilter.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('path');
  fields.add('searchParam');
  fields.add('valueSet');
  fields.add('code');
end;

function TFhirDataRequirementCodeFilter.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FPath.sizeInBytes);
  inc(result, FSearchParam.sizeInBytes);
  inc(result, FValueSet.sizeInBytes);
  inc(result, FcodeList.sizeInBytes);
end;

{ TFhirDataRequirementCodeFilterListEnumerator }

constructor TFhirDataRequirementCodeFilterListEnumerator.Create(list : TFhirDataRequirementCodeFilterList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDataRequirementCodeFilterListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDataRequirementCodeFilterListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDataRequirementCodeFilterListEnumerator.GetCurrent : TFhirDataRequirementCodeFilter;
begin
  Result := FList[FIndex];
end;

function TFhirDataRequirementCodeFilterListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDataRequirementCodeFilterList }

procedure TFhirDataRequirementCodeFilterList.AddItem(value: TFhirDataRequirementCodeFilter);
begin
  assert(value.ClassName = 'TFhirDataRequirementCodeFilter', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDataRequirementCodeFilter');
  add(value);
end;

function TFhirDataRequirementCodeFilterList.Append: TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementCodeFilterList.ClearItems;
begin
  Clear;
end;

function TFhirDataRequirementCodeFilterList.GetEnumerator : TFhirDataRequirementCodeFilterListEnumerator;
begin
  result := TFhirDataRequirementCodeFilterListEnumerator.Create(self.link);
end;

function TFhirDataRequirementCodeFilterList.Clone: TFhirDataRequirementCodeFilterList;
begin
  result := TFhirDataRequirementCodeFilterList(inherited Clone);
end;

function TFhirDataRequirementCodeFilterList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDataRequirementCodeFilterList.GetItemN(index: Integer): TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter(ObjectByIndex[index]);
end;

function TFhirDataRequirementCodeFilterList.ItemClass: TFslObjectClass;
begin
  result := TFhirDataRequirementCodeFilter;
end;
function TFhirDataRequirementCodeFilterList.IndexOf(value: TFhirDataRequirementCodeFilter): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDataRequirementCodeFilterList.Insert(index: Integer): TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementCodeFilterList.InsertItem(index: Integer; value: TFhirDataRequirementCodeFilter);
begin
  assert(value is TFhirDataRequirementCodeFilter);
  Inherited Insert(index, value);
end;

function TFhirDataRequirementCodeFilterList.Item(index: Integer): TFhirDataRequirementCodeFilter;
begin
  result := TFhirDataRequirementCodeFilter(ObjectByIndex[index]);
end;

function TFhirDataRequirementCodeFilterList.Link: TFhirDataRequirementCodeFilterList;
begin
  result := TFhirDataRequirementCodeFilterList(inherited Link);
end;

procedure TFhirDataRequirementCodeFilterList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDataRequirementCodeFilterList.SetItemByIndex(index: Integer; value: TFhirDataRequirementCodeFilter);
begin
  assert(value is TFhirDataRequirementCodeFilter);
  FhirDataRequirementCodeFilters[index] := value;
end;

procedure TFhirDataRequirementCodeFilterList.SetItemN(index: Integer; value: TFhirDataRequirementCodeFilter);
begin
  assert(value is TFhirDataRequirementCodeFilter);
  ObjectByIndex[index] := value;
end;

{ TFhirDataRequirementDateFilter }

constructor TFhirDataRequirementDateFilter.Create;
begin
  inherited;
end;

destructor TFhirDataRequirementDateFilter.Destroy;
begin
  FPath.free;
  FSearchParam.free;
  FValue.free;
  inherited;
end;

procedure TFhirDataRequirementDateFilter.Assign(oSource : TFslObject);
begin
  inherited;
  pathElement := TFhirDataRequirementDateFilter(oSource).pathElement.Clone;
  searchParamElement := TFhirDataRequirementDateFilter(oSource).searchParamElement.Clone;
  value := TFhirDataRequirementDateFilter(oSource).value.Clone;
end;

procedure TFhirDataRequirementDateFilter.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'path') Then
     list.add(self.link, 'path', FPath.Link);
  if (child_name = 'searchParam') Then
     list.add(self.link, 'searchParam', FSearchParam.Link);
  if (child_name = 'value[x]') or (child_name = 'value') Then
     list.add(self.link, 'value[x]', FValue.Link);
end;

procedure TFhirDataRequirementDateFilter.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'path', 'string', false, TFhirString, FPath.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'searchParam', 'string', false, TFhirString, FSearchParam.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'value[x]', 'dateTime|Period|Duration', false, TFhirDataType, FValue.Link)); {L1172}
end;

function TFhirDataRequirementDateFilter.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'path') then
  begin
    PathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'searchParam') then
  begin
    SearchParamElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (isMatchingName(propName, 'value', ['DateTime', 'Period', 'Duration'])) then
  begin
    Value := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirDataRequirementDateFilter.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirDataRequirementDateFilter.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'path') then result := TFhirString.create() {L1223}
  else if (propName = 'searchParam') then result := TFhirString.create() {L1223}
  else if (isMatchingName(propName, 'value', ['DateTime', 'Period', 'Duration'])) then raise EFHIRException.create('Cannot make property Value') {L1191}
  else result := inherited createPropertyValue(propName);
end;

function TFhirDataRequirementDateFilter.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'path') then result := 'string'
  else if (propName = 'searchParam') then result := 'string'
  else if (propName = 'value[x]') then result := 'dateTime|Period|Duration'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirDataRequirementDateFilter.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'path') then PathElement := nil
  else if (propName = 'searchParam') then SearchParamElement := nil
  else if (isMatchingName(propName, 'value', ['DateTime', 'Period', 'Duration'])) then ValueElement := nil {L1189}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirDataRequirementDateFilter.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'path') then PathElement := asString(new) {L1222}
  else if (propName = 'searchParam') then SearchParamElement := asString(new) {L1222}
  else if (isMatchingName(propName, 'value', ['DateTime', 'Period', 'Duration'])) then ValueElement := new as TFhirDataType {L1190}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirDataRequirementDateFilter.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirDataRequirementDateFilter.fhirType : string;
begin
  result := 'DataRequirement.dateFilter';
end;

function TFhirDataRequirementDateFilter.Link : TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter(inherited Link);
end;

function TFhirDataRequirementDateFilter.Clone : TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter(inherited Clone);
end;

function TFhirDataRequirementDateFilter.equals(other : TObject) : boolean; 
var
  o : TFhirDataRequirementDateFilter;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDataRequirementDateFilter)) then
    result := false
  else
  begin
    o := TFhirDataRequirementDateFilter(other);
    result := compareDeep(pathElement, o.pathElement, true) and compareDeep(searchParamElement, o.searchParamElement, true) and 
      compareDeep(valueElement, o.valueElement, true);
  end;
end;

function TFhirDataRequirementDateFilter.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FPath) and isEmptyProp(FSearchParam) and isEmptyProp(FValue);
end;

procedure TFhirDataRequirementDateFilter.SetPath(value : TFhirString);
begin
  FPath.free;
  FPath := value; {L1134}
end;

function TFhirDataRequirementDateFilter.GetPathST : String;
begin
  if FPath = nil then
    result := ''
  else
    result := FPath.value;
end;

procedure TFhirDataRequirementDateFilter.SetPathST(value : String);
begin
  if value <> '' then
  begin
    if FPath = nil then
      FPath := TFhirString.create;
    FPath.value := value
  end
  else if FPath <> nil then
    FPath.value := '';
end;

procedure TFhirDataRequirementDateFilter.SetSearchParam(value : TFhirString);
begin
  FSearchParam.free;
  FSearchParam := value; {L1134}
end;

function TFhirDataRequirementDateFilter.GetSearchParamST : String;
begin
  if FSearchParam = nil then
    result := ''
  else
    result := FSearchParam.value;
end;

procedure TFhirDataRequirementDateFilter.SetSearchParamST(value : String);
begin
  if value <> '' then
  begin
    if FSearchParam = nil then
      FSearchParam := TFhirString.create;
    FSearchParam.value := value
  end
  else if FSearchParam <> nil then
    FSearchParam.value := '';
end;

procedure TFhirDataRequirementDateFilter.SetValue(value : TFhirDataType);
begin
  FValue.free;
  FValue := value; {L1134}
end;

procedure TFhirDataRequirementDateFilter.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('path');
  fields.add('searchParam');
  fields.add('value[x]');
end;

function TFhirDataRequirementDateFilter.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FPath.sizeInBytes);
  inc(result, FSearchParam.sizeInBytes);
  inc(result, FValue.sizeInBytes);
end;

{ TFhirDataRequirementDateFilterListEnumerator }

constructor TFhirDataRequirementDateFilterListEnumerator.Create(list : TFhirDataRequirementDateFilterList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDataRequirementDateFilterListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDataRequirementDateFilterListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDataRequirementDateFilterListEnumerator.GetCurrent : TFhirDataRequirementDateFilter;
begin
  Result := FList[FIndex];
end;

function TFhirDataRequirementDateFilterListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDataRequirementDateFilterList }

procedure TFhirDataRequirementDateFilterList.AddItem(value: TFhirDataRequirementDateFilter);
begin
  assert(value.ClassName = 'TFhirDataRequirementDateFilter', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDataRequirementDateFilter');
  add(value);
end;

function TFhirDataRequirementDateFilterList.Append: TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementDateFilterList.ClearItems;
begin
  Clear;
end;

function TFhirDataRequirementDateFilterList.GetEnumerator : TFhirDataRequirementDateFilterListEnumerator;
begin
  result := TFhirDataRequirementDateFilterListEnumerator.Create(self.link);
end;

function TFhirDataRequirementDateFilterList.Clone: TFhirDataRequirementDateFilterList;
begin
  result := TFhirDataRequirementDateFilterList(inherited Clone);
end;

function TFhirDataRequirementDateFilterList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDataRequirementDateFilterList.GetItemN(index: Integer): TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter(ObjectByIndex[index]);
end;

function TFhirDataRequirementDateFilterList.ItemClass: TFslObjectClass;
begin
  result := TFhirDataRequirementDateFilter;
end;
function TFhirDataRequirementDateFilterList.IndexOf(value: TFhirDataRequirementDateFilter): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDataRequirementDateFilterList.Insert(index: Integer): TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementDateFilterList.InsertItem(index: Integer; value: TFhirDataRequirementDateFilter);
begin
  assert(value is TFhirDataRequirementDateFilter);
  Inherited Insert(index, value);
end;

function TFhirDataRequirementDateFilterList.Item(index: Integer): TFhirDataRequirementDateFilter;
begin
  result := TFhirDataRequirementDateFilter(ObjectByIndex[index]);
end;

function TFhirDataRequirementDateFilterList.Link: TFhirDataRequirementDateFilterList;
begin
  result := TFhirDataRequirementDateFilterList(inherited Link);
end;

procedure TFhirDataRequirementDateFilterList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDataRequirementDateFilterList.SetItemByIndex(index: Integer; value: TFhirDataRequirementDateFilter);
begin
  assert(value is TFhirDataRequirementDateFilter);
  FhirDataRequirementDateFilters[index] := value;
end;

procedure TFhirDataRequirementDateFilterList.SetItemN(index: Integer; value: TFhirDataRequirementDateFilter);
begin
  assert(value is TFhirDataRequirementDateFilter);
  ObjectByIndex[index] := value;
end;

{ TFhirDataRequirementSort }

constructor TFhirDataRequirementSort.Create;
begin
  inherited;
end;

destructor TFhirDataRequirementSort.Destroy;
begin
  FPath.free;
  FDirection.free;
  inherited;
end;

procedure TFhirDataRequirementSort.Assign(oSource : TFslObject);
begin
  inherited;
  pathElement := TFhirDataRequirementSort(oSource).pathElement.Clone;
  directionElement := TFhirDataRequirementSort(oSource).directionElement.Clone;
end;

procedure TFhirDataRequirementSort.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'path') Then
     list.add(self.link, 'path', FPath.Link);
  if (child_name = 'direction') Then
     list.add(self.link, 'direction', FDirection.Link);
end;

procedure TFhirDataRequirementSort.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'path', 'string', false, TFhirString, FPath.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'direction', 'code', false, TFhirEnum, FDirection.Link)); {L1170}
end;

function TFhirDataRequirementSort.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'path') then
  begin
    PathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'direction') then
  begin
    DirectionElement := asEnum(SYSTEMS_TFhirSortDirectionEnum, CODES_TFhirSortDirectionEnum, propValue) {L1209};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirDataRequirementSort.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirDataRequirementSort.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'path') then result := TFhirString.create() {L1223}
  else if (propName = 'direction') then result := TFhirEnum.create(SYSTEMS_TFhirSortDirectionEnum[SortDirectionNull], CODES_TFhirSortDirectionEnum[SortDirectionNull])  {L1211}
  else result := inherited createPropertyValue(propName);
end;

function TFhirDataRequirementSort.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'path') then result := 'string'
  else if (propName = 'direction') then result := 'code'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirDataRequirementSort.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'path') then PathElement := nil
  else if (propName = 'direction') then DirectionElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirDataRequirementSort.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'path') then PathElement := asString(new) {L1222}
  else if (propName = 'direction') then DirectionElement := asEnum(SYSTEMS_TFhirSortDirectionEnum, CODES_TFhirSortDirectionEnum, new) {L1210}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirDataRequirementSort.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirDataRequirementSort.fhirType : string;
begin
  result := 'DataRequirement.sort';
end;

function TFhirDataRequirementSort.Link : TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort(inherited Link);
end;

function TFhirDataRequirementSort.Clone : TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort(inherited Clone);
end;

function TFhirDataRequirementSort.equals(other : TObject) : boolean; 
var
  o : TFhirDataRequirementSort;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDataRequirementSort)) then
    result := false
  else
  begin
    o := TFhirDataRequirementSort(other);
    result := compareDeep(pathElement, o.pathElement, true) and compareDeep(directionElement, o.directionElement, true);
  end;
end;

function TFhirDataRequirementSort.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FPath) and isEmptyProp(FDirection);
end;

procedure TFhirDataRequirementSort.SetPath(value : TFhirString);
begin
  FPath.free;
  FPath := value; {L1134}
end;

function TFhirDataRequirementSort.GetPathST : String;
begin
  if FPath = nil then
    result := ''
  else
    result := FPath.value;
end;

procedure TFhirDataRequirementSort.SetPathST(value : String);
begin
  if value <> '' then
  begin
    if FPath = nil then
      FPath := TFhirString.create;
    FPath.value := value
  end
  else if FPath <> nil then
    FPath.value := '';
end;

procedure TFhirDataRequirementSort.SetDirection(value : TFhirEnum);
begin
  FDirection.free;
  FDirection := value;
end;

function TFhirDataRequirementSort.GetDirectionST : TFhirSortDirectionEnum;
begin
  if FDirection = nil then
    result := TFhirSortDirectionEnum(0)
  else
    result := TFhirSortDirectionEnum(StringArrayIndexOfSensitive(CODES_TFhirSortDirectionEnum, FDirection.value));
end;

procedure TFhirDataRequirementSort.SetDirectionST(value : TFhirSortDirectionEnum);
begin
  if ord(value) = 0 then
    DirectionElement := nil
  else
    DirectionElement := TFhirEnum.create(SYSTEMS_TFhirSortDirectionEnum[value], CODES_TFhirSortDirectionEnum[value]);
end;

procedure TFhirDataRequirementSort.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('path');
  fields.add('direction');
end;

function TFhirDataRequirementSort.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FPath.sizeInBytes);
  inc(result, FDirection.sizeInBytes);
end;

{ TFhirDataRequirementSortListEnumerator }

constructor TFhirDataRequirementSortListEnumerator.Create(list : TFhirDataRequirementSortList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDataRequirementSortListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDataRequirementSortListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDataRequirementSortListEnumerator.GetCurrent : TFhirDataRequirementSort;
begin
  Result := FList[FIndex];
end;

function TFhirDataRequirementSortListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDataRequirementSortList }

procedure TFhirDataRequirementSortList.AddItem(value: TFhirDataRequirementSort);
begin
  assert(value.ClassName = 'TFhirDataRequirementSort', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDataRequirementSort');
  add(value);
end;

function TFhirDataRequirementSortList.Append: TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementSortList.ClearItems;
begin
  Clear;
end;

function TFhirDataRequirementSortList.GetEnumerator : TFhirDataRequirementSortListEnumerator;
begin
  result := TFhirDataRequirementSortListEnumerator.Create(self.link);
end;

function TFhirDataRequirementSortList.Clone: TFhirDataRequirementSortList;
begin
  result := TFhirDataRequirementSortList(inherited Clone);
end;

function TFhirDataRequirementSortList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDataRequirementSortList.GetItemN(index: Integer): TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort(ObjectByIndex[index]);
end;

function TFhirDataRequirementSortList.ItemClass: TFslObjectClass;
begin
  result := TFhirDataRequirementSort;
end;
function TFhirDataRequirementSortList.IndexOf(value: TFhirDataRequirementSort): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDataRequirementSortList.Insert(index: Integer): TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementSortList.InsertItem(index: Integer; value: TFhirDataRequirementSort);
begin
  assert(value is TFhirDataRequirementSort);
  Inherited Insert(index, value);
end;

function TFhirDataRequirementSortList.Item(index: Integer): TFhirDataRequirementSort;
begin
  result := TFhirDataRequirementSort(ObjectByIndex[index]);
end;

function TFhirDataRequirementSortList.Link: TFhirDataRequirementSortList;
begin
  result := TFhirDataRequirementSortList(inherited Link);
end;

procedure TFhirDataRequirementSortList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDataRequirementSortList.SetItemByIndex(index: Integer; value: TFhirDataRequirementSort);
begin
  assert(value is TFhirDataRequirementSort);
  FhirDataRequirementSorts[index] := value;
end;

procedure TFhirDataRequirementSortList.SetItemN(index: Integer; value: TFhirDataRequirementSort);
begin
  assert(value is TFhirDataRequirementSort);
  ObjectByIndex[index] := value;
end;

{ TFhirDataRequirement }

constructor TFhirDataRequirement.Create;
begin
  inherited;
end;

destructor TFhirDataRequirement.Destroy;
begin
  FType_.free;
  FProfileList.Free;
  FSubject.free;
  FMustSupportList.Free;
  FCodeFilterList.Free;
  FDateFilterList.Free;
  FLimit.free;
  FSortList.Free;
  inherited;
end;

procedure TFhirDataRequirement.Assign(oSource : TFslObject);
begin
  inherited;
  type_Element := TFhirDataRequirement(oSource).type_Element.Clone;
  if (TFhirDataRequirement(oSource).FProfileList = nil) then
  begin
    FProfileList.free;
    FProfileList := nil;
  end
  else
  begin
    if FProfileList = nil then
      FProfileList := TFhirCanonicalList.Create;
    FProfileList.Assign(TFhirDataRequirement(oSource).FProfileList);
  end;
  subject := TFhirDataRequirement(oSource).subject.Clone;
  if (TFhirDataRequirement(oSource).FMustSupportList = nil) then
  begin
    FMustSupportList.free;
    FMustSupportList := nil;
  end
  else
  begin
    if FMustSupportList = nil then
      FMustSupportList := TFhirStringList.Create;
    FMustSupportList.Assign(TFhirDataRequirement(oSource).FMustSupportList);
  end;
  if (TFhirDataRequirement(oSource).FCodeFilterList = nil) then
  begin
    FCodeFilterList.free;
    FCodeFilterList := nil;
  end
  else
  begin
    if FCodeFilterList = nil then
      FCodeFilterList := TFhirDataRequirementCodeFilterList.Create;
    FCodeFilterList.Assign(TFhirDataRequirement(oSource).FCodeFilterList);
  end;
  if (TFhirDataRequirement(oSource).FDateFilterList = nil) then
  begin
    FDateFilterList.free;
    FDateFilterList := nil;
  end
  else
  begin
    if FDateFilterList = nil then
      FDateFilterList := TFhirDataRequirementDateFilterList.Create;
    FDateFilterList.Assign(TFhirDataRequirement(oSource).FDateFilterList);
  end;
  limitElement := TFhirDataRequirement(oSource).limitElement.Clone;
  if (TFhirDataRequirement(oSource).FSortList = nil) then
  begin
    FSortList.free;
    FSortList := nil;
  end
  else
  begin
    if FSortList = nil then
      FSortList := TFhirDataRequirementSortList.Create;
    FSortList.Assign(TFhirDataRequirement(oSource).FSortList);
  end;
end;

procedure TFhirDataRequirement.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'profile') Then
    list.addAll(self, 'profile', FProfileList);
  if (child_name = 'subject[x]') or (child_name = 'subject') Then
     list.add(self.link, 'subject[x]', FSubject.Link);
  if (child_name = 'mustSupport') Then
    list.addAll(self, 'mustSupport', FMustSupportList);
  if (child_name = 'codeFilter') Then
    list.addAll(self, 'codeFilter', FCodeFilterList);
  if (child_name = 'dateFilter') Then
    list.addAll(self, 'dateFilter', FDateFilterList);
  if (child_name = 'limit') Then
     list.add(self.link, 'limit', FLimit.Link);
  if (child_name = 'sort') Then
    list.addAll(self, 'sort', FSortList);
end;

procedure TFhirDataRequirement.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'profile', 'canonical', true, TFhirCanonical, FProfileList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'subject[x]', 'CodeableConcept|Reference', false, TFhirDataType, FSubject.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'mustSupport', 'string', true, TFhirString, FMustSupportList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'codeFilter', 'Element', true, TFhirDataRequirementCodeFilter, FCodeFilterList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'dateFilter', 'Element', true, TFhirDataRequirementDateFilter, FDateFilterList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'limit', 'positiveInt', false, TFhirPositiveInt, FLimit.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'sort', 'Element', true, TFhirDataRequirementSort, FSortList.Link)) {L1039};
end;

function TFhirDataRequirement.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirAllTypesEnum, CODES_TFhirAllTypesEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'profile') then
  begin
    ProfileList.add(asCanonical(propValue)){2};     result := propValue;

  end
  else if (isMatchingName(propName, 'subject', ['CodeableConcept', 'Reference'])) then
  begin
    Subject := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'mustSupport') then
  begin
    MustSupportList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'codeFilter') then
  begin
    CodeFilterList.add(propValue as TFhirDataRequirementCodeFilter) {L1048};
    result := propValue;
  end
  else if (propName = 'dateFilter') then
  begin
    DateFilterList.add(propValue as TFhirDataRequirementDateFilter) {L1048};
    result := propValue;
  end
  else if (propName = 'limit') then
  begin
    LimitElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'sort') then
  begin
    SortList.add(propValue as TFhirDataRequirementSort) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirDataRequirement.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'profile') then ProfileList.insertItem(index, asCanonical(propValue)) {L1045}
  else if (propName = 'mustSupport') then MustSupportList.insertItem(index, asString(propValue)) {L1045}
  else if (propName = 'codeFilter') then CodeFilterList.insertItem(index, propValue as TFhirDataRequirementCodeFilter) {L1049}
  else if (propName = 'dateFilter') then DateFilterList.insertItem(index, propValue as TFhirDataRequirementDateFilter) {L1049}
  else if (propName = 'sort') then SortList.insertItem(index, propValue as TFhirDataRequirementSort) {L1049}
  else inherited;
end;

function TFhirDataRequirement.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirAllTypesEnum[AllTypesNull], CODES_TFhirAllTypesEnum[AllTypesNull])  {L1211}
  else if (propName = 'profile') then result := ProfileList.new() {L1053}
  else if (isMatchingName(propName, 'subject', ['CodeableConcept', 'Reference'])) then raise EFHIRException.create('Cannot make property Subject') {L1191}
  else if (propName = 'mustSupport') then result := MustSupportList.new() {L1053}
  else if (propName = 'codeFilter') then result := CodeFilterList.new() {L1053}
  else if (propName = 'dateFilter') then result := DateFilterList.new() {L1053}
  else if (propName = 'limit') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'sort') then result := SortList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirDataRequirement.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'code'
  else if (propName = 'profile') then result := 'canonical'
  else if (propName = 'subject[x]') then result := 'CodeableConcept|Reference'
  else if (propName = 'mustSupport') then result := 'string'
  else if (propName = 'codeFilter') then result := 'Element'
  else if (propName = 'dateFilter') then result := 'Element'
  else if (propName = 'limit') then result := 'positiveInt'
  else if (propName = 'sort') then result := 'Element'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirDataRequirement.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (propName = 'profile') then deletePropertyValue('profile', ProfileList, value) {L1054}
  else if (isMatchingName(propName, 'subject', ['CodeableConcept', 'Reference'])) then SubjectElement := nil {L1189}
  else if (propName = 'mustSupport') then deletePropertyValue('mustSupport', MustSupportList, value) {L1054}
  else if (propName = 'codeFilter') then deletePropertyValue('codeFilter', CodeFilterList, value) {L1054}
  else if (propName = 'dateFilter') then deletePropertyValue('dateFilter', DateFilterList, value) {L1054}
  else if (propName = 'limit') then LimitElement := nil
  else if (propName = 'sort') then deletePropertyValue('sort', SortList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirDataRequirement.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirAllTypesEnum, CODES_TFhirAllTypesEnum, new) {L1210}
  else if (propName = 'profile') then replacePropertyValue('profile', ProfileList, existing, new) {L1055}
  else if (isMatchingName(propName, 'subject', ['CodeableConcept', 'Reference'])) then SubjectElement := new as TFhirDataType {L1190}
  else if (propName = 'mustSupport') then replacePropertyValue('mustSupport', MustSupportList, existing, new) {L1055}
  else if (propName = 'codeFilter') then replacePropertyValue('codeFilter', CodeFilterList, existing, new) {L1055}
  else if (propName = 'dateFilter') then replacePropertyValue('dateFilter', DateFilterList, existing, new) {L1055}
  else if (propName = 'limit') then LimitElement := asPositiveInt(new) {L1222}
  else if (propName = 'sort') then replacePropertyValue('sort', SortList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirDataRequirement.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'profile') then ProfileList.move(source, destination) {L1046}
  else if (propName = 'mustSupport') then MustSupportList.move(source, destination) {L1046}
  else if (propName = 'codeFilter') then CodeFilterList.move(source, destination) {L1050}
  else if (propName = 'dateFilter') then DateFilterList.move(source, destination) {L1050}
  else if (propName = 'sort') then SortList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirDataRequirement.fhirType : string;
begin
  result := 'DataRequirement';
end;

function TFhirDataRequirement.Link : TFhirDataRequirement;
begin
  result := TFhirDataRequirement(inherited Link);
end;

function TFhirDataRequirement.Clone : TFhirDataRequirement;
begin
  result := TFhirDataRequirement(inherited Clone);
end;

function TFhirDataRequirement.equals(other : TObject) : boolean; 
var
  o : TFhirDataRequirement;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDataRequirement)) then
    result := false
  else
  begin
    o := TFhirDataRequirement(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(profileList, o.profileList, true) and 
      compareDeep(subjectElement, o.subjectElement, true) and compareDeep(mustSupportList, o.mustSupportList, true) and 
      compareDeep(codeFilterList, o.codeFilterList, true) and compareDeep(dateFilterList, o.dateFilterList, true) and 
      compareDeep(limitElement, o.limitElement, true) and compareDeep(sortList, o.sortList, true);
  end;
end;

function TFhirDataRequirement.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FprofileList) and isEmptyProp(FSubject) and isEmptyProp(FmustSupportList) and isEmptyProp(FcodeFilterList) and isEmptyProp(FdateFilterList) and isEmptyProp(FLimit) and isEmptyProp(FsortList);
end;

procedure TFhirDataRequirement.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirDataRequirement.GetType_ST : TFhirAllTypesEnum;
begin
  if FType_ = nil then
    result := TFhirAllTypesEnum(0)
  else
    result := TFhirAllTypesEnum(StringArrayIndexOfSensitive(CODES_TFhirAllTypesEnum, FType_.value));
end;

procedure TFhirDataRequirement.SetType_ST(value : TFhirAllTypesEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirAllTypesEnum[value], CODES_TFhirAllTypesEnum[value]);
end;

function TFhirDataRequirement.GetProfileList : TFhirCanonicalList;
begin
  if FProfileList = nil then
    FProfileList := TFhirCanonicalList.Create;
  result := FProfileList;
end;

function TFhirDataRequirement.GetHasProfileList : boolean;
begin
  result := (FProfileList <> nil) and (FProfileList.count > 0);
end;

procedure TFhirDataRequirement.SetSubject(value : TFhirDataType);
begin
  FSubject.free;
  FSubject := value; {L1134}
end;

function TFhirDataRequirement.GetMustSupportList : TFhirStringList;
begin
  if FMustSupportList = nil then
    FMustSupportList := TFhirStringList.Create;
  result := FMustSupportList;
end;

function TFhirDataRequirement.GetHasMustSupportList : boolean;
begin
  result := (FMustSupportList <> nil) and (FMustSupportList.count > 0);
end;

function TFhirDataRequirement.GetCodeFilterList : TFhirDataRequirementCodeFilterList;
begin
  if FCodeFilterList = nil then
    FCodeFilterList := TFhirDataRequirementCodeFilterList.Create;
  result := FCodeFilterList;
end;

function TFhirDataRequirement.GetHasCodeFilterList : boolean;
begin
  result := (FCodeFilterList <> nil) and (FCodeFilterList.count > 0);
end;

function TFhirDataRequirement.GetDateFilterList : TFhirDataRequirementDateFilterList;
begin
  if FDateFilterList = nil then
    FDateFilterList := TFhirDataRequirementDateFilterList.Create;
  result := FDateFilterList;
end;

function TFhirDataRequirement.GetHasDateFilterList : boolean;
begin
  result := (FDateFilterList <> nil) and (FDateFilterList.count > 0);
end;

procedure TFhirDataRequirement.SetLimit(value : TFhirPositiveInt);
begin
  FLimit.free;
  FLimit := value; {L1134}
end;

function TFhirDataRequirement.GetLimitST : String;
begin
  if FLimit = nil then
    result := ''
  else
    result := FLimit.value;
end;

procedure TFhirDataRequirement.SetLimitST(value : String);
begin
  if value <> '' then
  begin
    if FLimit = nil then
      FLimit := TFhirPositiveInt.create;
    FLimit.value := value
  end
  else if FLimit <> nil then
    FLimit.value := '';
end;

function TFhirDataRequirement.GetSortList : TFhirDataRequirementSortList;
begin
  if FSortList = nil then
    FSortList := TFhirDataRequirementSortList.Create;
  result := FSortList;
end;

function TFhirDataRequirement.GetHasSortList : boolean;
begin
  result := (FSortList <> nil) and (FSortList.count > 0);
end;

procedure TFhirDataRequirement.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('profile');
  fields.add('subject[x]');
  fields.add('mustSupport');
  fields.add('codeFilter');
  fields.add('dateFilter');
  fields.add('limit');
  fields.add('sort');
end;

function TFhirDataRequirement.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FprofileList.sizeInBytes);
  inc(result, FSubject.sizeInBytes);
  inc(result, FmustSupportList.sizeInBytes);
  inc(result, FcodeFilterList.sizeInBytes);
  inc(result, FdateFilterList.sizeInBytes);
  inc(result, FLimit.sizeInBytes);
  inc(result, FsortList.sizeInBytes);
end;

{ TFhirDataRequirementListEnumerator }

constructor TFhirDataRequirementListEnumerator.Create(list : TFhirDataRequirementList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDataRequirementListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDataRequirementListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDataRequirementListEnumerator.GetCurrent : TFhirDataRequirement;
begin
  Result := FList[FIndex];
end;

function TFhirDataRequirementListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDataRequirementList }

procedure TFhirDataRequirementList.AddItem(value: TFhirDataRequirement);
begin
  assert(value.ClassName = 'TFhirDataRequirement', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDataRequirement');
  add(value);
end;

function TFhirDataRequirementList.Append: TFhirDataRequirement;
begin
  result := TFhirDataRequirement.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementList.ClearItems;
begin
  Clear;
end;

function TFhirDataRequirementList.GetEnumerator : TFhirDataRequirementListEnumerator;
begin
  result := TFhirDataRequirementListEnumerator.Create(self.link);
end;

function TFhirDataRequirementList.Clone: TFhirDataRequirementList;
begin
  result := TFhirDataRequirementList(inherited Clone);
end;

function TFhirDataRequirementList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDataRequirementList.GetItemN(index: Integer): TFhirDataRequirement;
begin
  result := TFhirDataRequirement(ObjectByIndex[index]);
end;

function TFhirDataRequirementList.ItemClass: TFslObjectClass;
begin
  result := TFhirDataRequirement;
end;
function TFhirDataRequirementList.IndexOf(value: TFhirDataRequirement): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDataRequirementList.Insert(index: Integer): TFhirDataRequirement;
begin
  result := TFhirDataRequirement.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDataRequirementList.InsertItem(index: Integer; value: TFhirDataRequirement);
begin
  assert(value is TFhirDataRequirement);
  Inherited Insert(index, value);
end;

function TFhirDataRequirementList.Item(index: Integer): TFhirDataRequirement;
begin
  result := TFhirDataRequirement(ObjectByIndex[index]);
end;

function TFhirDataRequirementList.Link: TFhirDataRequirementList;
begin
  result := TFhirDataRequirementList(inherited Link);
end;

procedure TFhirDataRequirementList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDataRequirementList.SetItemByIndex(index: Integer; value: TFhirDataRequirement);
begin
  assert(value is TFhirDataRequirement);
  FhirDataRequirements[index] := value;
end;

procedure TFhirDataRequirementList.SetItemN(index: Integer; value: TFhirDataRequirement);
begin
  assert(value is TFhirDataRequirement);
  ObjectByIndex[index] := value;
end;

{ TFhirExpression }

constructor TFhirExpression.Create;
begin
  inherited;
end;

destructor TFhirExpression.Destroy;
begin
  FDescription.free;
  FName.free;
  FLanguage.free;
  FExpression.free;
  FReference.free;
  inherited;
end;

procedure TFhirExpression.Assign(oSource : TFslObject);
begin
  inherited;
  descriptionElement := TFhirExpression(oSource).descriptionElement.Clone;
  nameElement := TFhirExpression(oSource).nameElement.Clone;
  languageElement := TFhirExpression(oSource).languageElement.Clone;
  expressionElement := TFhirExpression(oSource).expressionElement.Clone;
  referenceElement := TFhirExpression(oSource).referenceElement.Clone;
end;

procedure TFhirExpression.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'name') Then
     list.add(self.link, 'name', FName.Link);
  if (child_name = 'language') Then
     list.add(self.link, 'language', FLanguage.Link);
  if (child_name = 'expression') Then
     list.add(self.link, 'expression', FExpression.Link);
  if (child_name = 'reference') Then
     list.add(self.link, 'reference', FReference.Link);
end;

procedure TFhirExpression.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'name', 'id', false, TFhirId, FName.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'language', 'code', false, TFhirCode, FLanguage.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'expression', 'string', false, TFhirString, FExpression.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'reference', 'uri', false, TFhirUri, FReference.Link)); {L1172}
end;

function TFhirExpression.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'name') then
  begin
    NameElement := asId(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'language') then
  begin
    LanguageElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'expression') then
  begin
    ExpressionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'reference') then
  begin
    ReferenceElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirExpression.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirExpression.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'name') then result := TFhirId.create() {L1223}
  else if (propName = 'language') then result := TFhirCode.create() {L1223}
  else if (propName = 'expression') then result := TFhirString.create() {L1223}
  else if (propName = 'reference') then result := TFhirUri.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirExpression.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'description') then result := 'string'
  else if (propName = 'name') then result := 'id'
  else if (propName = 'language') then result := 'code'
  else if (propName = 'expression') then result := 'string'
  else if (propName = 'reference') then result := 'uri'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirExpression.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'name') then NameElement := nil
  else if (propName = 'language') then LanguageElement := nil
  else if (propName = 'expression') then ExpressionElement := nil
  else if (propName = 'reference') then ReferenceElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirExpression.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'name') then NameElement := asId(new) {L1222}
  else if (propName = 'language') then LanguageElement := asCode(new) {L1222}
  else if (propName = 'expression') then ExpressionElement := asString(new) {L1222}
  else if (propName = 'reference') then ReferenceElement := asUri(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirExpression.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirExpression.fhirType : string;
begin
  result := 'Expression';
end;

function TFhirExpression.Link : TFhirExpression;
begin
  result := TFhirExpression(inherited Link);
end;

function TFhirExpression.Clone : TFhirExpression;
begin
  result := TFhirExpression(inherited Clone);
end;

function TFhirExpression.equals(other : TObject) : boolean; 
var
  o : TFhirExpression;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirExpression)) then
    result := false
  else
  begin
    o := TFhirExpression(other);
    result := compareDeep(descriptionElement, o.descriptionElement, true) and compareDeep(nameElement, o.nameElement, true) and 
      compareDeep(languageElement, o.languageElement, true) and compareDeep(expressionElement, o.expressionElement, true) and 
      compareDeep(referenceElement, o.referenceElement, true);
  end;
end;

function TFhirExpression.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FDescription) and isEmptyProp(FName) and isEmptyProp(FLanguage) and isEmptyProp(FExpression) and isEmptyProp(FReference);
end;

procedure TFhirExpression.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirExpression.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirExpression.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

procedure TFhirExpression.SetName(value : TFhirId);
begin
  FName.free;
  FName := value; {L1134}
end;

function TFhirExpression.GetNameST : String;
begin
  if FName = nil then
    result := ''
  else
    result := FName.value;
end;

procedure TFhirExpression.SetNameST(value : String);
begin
  if value <> '' then
  begin
    if FName = nil then
      FName := TFhirId.create;
    FName.value := value
  end
  else if FName <> nil then
    FName.value := '';
end;

procedure TFhirExpression.SetLanguage(value : TFhirCode);
begin
  FLanguage.free;
  FLanguage := value; {L1134}
end;

function TFhirExpression.GetLanguageST : String;
begin
  if FLanguage = nil then
    result := ''
  else
    result := FLanguage.value;
end;

procedure TFhirExpression.SetLanguageST(value : String);
begin
  if value <> '' then
  begin
    if FLanguage = nil then
      FLanguage := TFhirCode.create;
    FLanguage.value := value
  end
  else if FLanguage <> nil then
    FLanguage.value := '';
end;

procedure TFhirExpression.SetExpression(value : TFhirString);
begin
  FExpression.free;
  FExpression := value; {L1134}
end;

function TFhirExpression.GetExpressionST : String;
begin
  if FExpression = nil then
    result := ''
  else
    result := FExpression.value;
end;

procedure TFhirExpression.SetExpressionST(value : String);
begin
  if value <> '' then
  begin
    if FExpression = nil then
      FExpression := TFhirString.create;
    FExpression.value := value
  end
  else if FExpression <> nil then
    FExpression.value := '';
end;

procedure TFhirExpression.SetReference(value : TFhirUri);
begin
  FReference.free;
  FReference := value; {L1134}
end;

function TFhirExpression.GetReferenceST : String;
begin
  if FReference = nil then
    result := ''
  else
    result := FReference.value;
end;

procedure TFhirExpression.SetReferenceST(value : String);
begin
  if value <> '' then
  begin
    if FReference = nil then
      FReference := TFhirUri.create;
    FReference.value := value
  end
  else if FReference <> nil then
    FReference.value := '';
end;

procedure TFhirExpression.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('description');
  fields.add('name');
  fields.add('language');
  fields.add('expression');
  fields.add('reference');
end;

function TFhirExpression.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FDescription.sizeInBytes);
  inc(result, FName.sizeInBytes);
  inc(result, FLanguage.sizeInBytes);
  inc(result, FExpression.sizeInBytes);
  inc(result, FReference.sizeInBytes);
end;

{ TFhirExpressionListEnumerator }

constructor TFhirExpressionListEnumerator.Create(list : TFhirExpressionList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirExpressionListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirExpressionListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirExpressionListEnumerator.GetCurrent : TFhirExpression;
begin
  Result := FList[FIndex];
end;

function TFhirExpressionListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirExpressionList }

procedure TFhirExpressionList.AddItem(value: TFhirExpression);
begin
  assert(value.ClassName = 'TFhirExpression', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirExpression');
  add(value);
end;

function TFhirExpressionList.Append: TFhirExpression;
begin
  result := TFhirExpression.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirExpressionList.ClearItems;
begin
  Clear;
end;

function TFhirExpressionList.GetEnumerator : TFhirExpressionListEnumerator;
begin
  result := TFhirExpressionListEnumerator.Create(self.link);
end;

function TFhirExpressionList.Clone: TFhirExpressionList;
begin
  result := TFhirExpressionList(inherited Clone);
end;

function TFhirExpressionList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirExpressionList.GetItemN(index: Integer): TFhirExpression;
begin
  result := TFhirExpression(ObjectByIndex[index]);
end;

function TFhirExpressionList.ItemClass: TFslObjectClass;
begin
  result := TFhirExpression;
end;
function TFhirExpressionList.IndexOf(value: TFhirExpression): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirExpressionList.Insert(index: Integer): TFhirExpression;
begin
  result := TFhirExpression.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirExpressionList.InsertItem(index: Integer; value: TFhirExpression);
begin
  assert(value is TFhirExpression);
  Inherited Insert(index, value);
end;

function TFhirExpressionList.Item(index: Integer): TFhirExpression;
begin
  result := TFhirExpression(ObjectByIndex[index]);
end;

function TFhirExpressionList.Link: TFhirExpressionList;
begin
  result := TFhirExpressionList(inherited Link);
end;

procedure TFhirExpressionList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirExpressionList.SetItemByIndex(index: Integer; value: TFhirExpression);
begin
  assert(value is TFhirExpression);
  FhirExpressions[index] := value;
end;

procedure TFhirExpressionList.SetItemN(index: Integer; value: TFhirExpression);
begin
  assert(value is TFhirExpression);
  ObjectByIndex[index] := value;
end;

{ TFhirExtension }

constructor TFhirExtension.Create;
begin
  inherited;
end;

destructor TFhirExtension.Destroy;
begin
  FUrl.free;
  FValue.free;
  inherited;
end;

procedure TFhirExtension.Assign(oSource : TFslObject);
begin
  inherited;
  urlElement := TFhirExtension(oSource).urlElement.Clone;
  value := TFhirExtension(oSource).value.Clone;
end;

procedure TFhirExtension.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'url') Then
     list.add(self.link, 'url', FUrl.Link);
  if (child_name = 'value[x]') or (child_name = 'value') Then
     list.add(self.link, 'value[x]', FValue.Link);
end;

procedure TFhirExtension.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'url', 'uri', false, TFhirUri, FUrl.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'value[x]', 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta', false, TFhirDataType, FValue.Link)); {L1172}
end;

function TFhirExtension.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'url') then
  begin
    UrlElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then
  begin
    Value := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirExtension.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirExtension.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'url') then result := TFhirUri.create() {L1223}
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then raise EFHIRException.create('Cannot make property Value') {L1191}
  else result := inherited createPropertyValue(propName);
end;

function TFhirExtension.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'url') then result := 'uri'
  else if (propName = 'value[x]') then result := 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirExtension.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'url') then UrlElement := nil
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then ValueElement := nil {L1189}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirExtension.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'url') then UrlElement := asUri(new) {L1222}
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then ValueElement := new as TFhirDataType {L1190}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirExtension.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirExtension.fhirType : string;
begin
  result := 'Extension';
end;

function TFhirExtension.Link : TFhirExtension;
begin
  result := TFhirExtension(inherited Link);
end;

function TFhirExtension.Clone : TFhirExtension;
begin
  result := TFhirExtension(inherited Clone);
end;

function TFhirExtension.equals(other : TObject) : boolean; 
var
  o : TFhirExtension;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirExtension)) then
    result := false
  else
  begin
    o := TFhirExtension(other);
    result := compareDeep(urlElement, o.urlElement, true) and compareDeep(valueElement, o.valueElement, true);
  end;
end;

function TFhirExtension.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FUrl) and isEmptyProp(FValue);
end;

procedure TFhirExtension.SetUrl(value : TFhirUri);
begin
  FUrl.free;
  FUrl := value; {L1134}
end;

function TFhirExtension.GetUrlST : String;
begin
  if FUrl = nil then
    result := ''
  else
    result := FUrl.value;
end;

procedure TFhirExtension.SetUrlST(value : String);
begin
  if value <> '' then
  begin
    if FUrl = nil then
      FUrl := TFhirUri.create;
    FUrl.value := value
  end
  else if FUrl <> nil then
    FUrl.value := '';
end;

procedure TFhirExtension.SetValue(value : TFhirDataType);
begin
  FValue.free;
  FValue := value; {L1134}
end;

procedure TFhirExtension.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('url');
  fields.add('value[x]');
end;

function TFhirExtension.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FUrl.sizeInBytes);
  inc(result, FValue.sizeInBytes);
end;

{ TFhirExtensionListEnumerator }

constructor TFhirExtensionListEnumerator.Create(list : TFhirExtensionList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirExtensionListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirExtensionListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirExtensionListEnumerator.GetCurrent : TFhirExtension;
begin
  Result := FList[FIndex];
end;

function TFhirExtensionListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirExtensionList }

procedure TFhirExtensionList.AddItem(value: TFhirExtension);
begin
  assert(value.ClassName = 'TFhirExtension', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirExtension');
  add(value);
end;

function TFhirExtensionList.Append: TFhirExtension;
begin
  result := TFhirExtension.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirExtensionList.ClearItems;
begin
  Clear;
end;

function TFhirExtensionList.GetEnumerator : TFhirExtensionListEnumerator;
begin
  result := TFhirExtensionListEnumerator.Create(self.link);
end;

function TFhirExtensionList.Clone: TFhirExtensionList;
begin
  result := TFhirExtensionList(inherited Clone);
end;

function TFhirExtensionList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirExtensionList.GetItemN(index: Integer): TFhirExtension;
begin
  result := TFhirExtension(ObjectByIndex[index]);
end;

function TFhirExtensionList.ItemClass: TFslObjectClass;
begin
  result := TFhirExtension;
end;
function TFhirExtensionList.IndexOf(value: TFhirExtension): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirExtensionList.Insert(index: Integer): TFhirExtension;
begin
  result := TFhirExtension.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirExtensionList.InsertItem(index: Integer; value: TFhirExtension);
begin
  assert(value is TFhirExtension);
  Inherited Insert(index, value);
end;

function TFhirExtensionList.Item(index: Integer): TFhirExtension;
begin
  result := TFhirExtension(ObjectByIndex[index]);
end;

function TFhirExtensionList.Link: TFhirExtensionList;
begin
  result := TFhirExtensionList(inherited Link);
end;

procedure TFhirExtensionList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirExtensionList.SetItemByIndex(index: Integer; value: TFhirExtension);
begin
  assert(value is TFhirExtension);
  FhirExtensions[index] := value;
end;

procedure TFhirExtensionList.SetItemN(index: Integer; value: TFhirExtension);
begin
  assert(value is TFhirExtension);
  ObjectByIndex[index] := value;
end;

{ TFhirHumanName }

constructor TFhirHumanName.Create;
begin
  inherited;
end;

destructor TFhirHumanName.Destroy;
begin
  FUse.free;
  FText.free;
  FFamily.free;
  FGivenList.Free;
  FPrefixList.Free;
  FSuffixList.Free;
  FPeriod.free;
  inherited;
end;

procedure TFhirHumanName.Assign(oSource : TFslObject);
begin
  inherited;
  useElement := TFhirHumanName(oSource).useElement.Clone;
  textElement := TFhirHumanName(oSource).textElement.Clone;
  familyElement := TFhirHumanName(oSource).familyElement.Clone;
  if (TFhirHumanName(oSource).FGivenList = nil) then
  begin
    FGivenList.free;
    FGivenList := nil;
  end
  else
  begin
    if FGivenList = nil then
      FGivenList := TFhirStringList.Create;
    FGivenList.Assign(TFhirHumanName(oSource).FGivenList);
  end;
  if (TFhirHumanName(oSource).FPrefixList = nil) then
  begin
    FPrefixList.free;
    FPrefixList := nil;
  end
  else
  begin
    if FPrefixList = nil then
      FPrefixList := TFhirStringList.Create;
    FPrefixList.Assign(TFhirHumanName(oSource).FPrefixList);
  end;
  if (TFhirHumanName(oSource).FSuffixList = nil) then
  begin
    FSuffixList.free;
    FSuffixList := nil;
  end
  else
  begin
    if FSuffixList = nil then
      FSuffixList := TFhirStringList.Create;
    FSuffixList.Assign(TFhirHumanName(oSource).FSuffixList);
  end;
  period := TFhirHumanName(oSource).period.Clone;
end;

procedure TFhirHumanName.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'use') Then
     list.add(self.link, 'use', FUse.Link);
  if (child_name = 'text') Then
     list.add(self.link, 'text', FText.Link);
  if (child_name = 'family') Then
     list.add(self.link, 'family', FFamily.Link);
  if (child_name = 'given') Then
    list.addAll(self, 'given', FGivenList);
  if (child_name = 'prefix') Then
    list.addAll(self, 'prefix', FPrefixList);
  if (child_name = 'suffix') Then
    list.addAll(self, 'suffix', FSuffixList);
  if (child_name = 'period') Then
     list.add(self.link, 'period', FPeriod.Link);
end;

procedure TFhirHumanName.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'use', 'code', false, TFhirEnum, FUse.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'text', 'string', false, TFhirString, FText.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'family', 'string', false, TFhirString, FFamily.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'given', 'string', true, TFhirString, FGivenList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'prefix', 'string', true, TFhirString, FPrefixList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'suffix', 'string', true, TFhirString, FSuffixList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'period', 'Period', false, TFhirPeriod, FPeriod.Link)); {L1172}
end;

function TFhirHumanName.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'use') then
  begin
    UseElement := asEnum(SYSTEMS_TFhirNameUseEnum, CODES_TFhirNameUseEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'text') then
  begin
    TextElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'family') then
  begin
    FamilyElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'given') then
  begin
    GivenList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'prefix') then
  begin
    PrefixList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'suffix') then
  begin
    SuffixList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'period') then
  begin
    Period := propValue as TFhirPeriod {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirHumanName.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'given') then GivenList.insertItem(index, asString(propValue)) {L1045}
  else if (propName = 'prefix') then PrefixList.insertItem(index, asString(propValue)) {L1045}
  else if (propName = 'suffix') then SuffixList.insertItem(index, asString(propValue)) {L1045}
  else inherited;
end;

function TFhirHumanName.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'use') then result := TFhirEnum.create(SYSTEMS_TFhirNameUseEnum[NameUseNull], CODES_TFhirNameUseEnum[NameUseNull])  {L1211}
  else if (propName = 'text') then result := TFhirString.create() {L1223}
  else if (propName = 'family') then result := TFhirString.create() {L1223}
  else if (propName = 'given') then result := GivenList.new() {L1053}
  else if (propName = 'prefix') then result := PrefixList.new() {L1053}
  else if (propName = 'suffix') then result := SuffixList.new() {L1053}
  else if (propName = 'period') then result := TFhirPeriod.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirHumanName.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'use') then result := 'code'
  else if (propName = 'text') then result := 'string'
  else if (propName = 'family') then result := 'string'
  else if (propName = 'given') then result := 'string'
  else if (propName = 'prefix') then result := 'string'
  else if (propName = 'suffix') then result := 'string'
  else if (propName = 'period') then result := 'Period'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirHumanName.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'use') then UseElement := nil
  else if (propName = 'text') then TextElement := nil
  else if (propName = 'family') then FamilyElement := nil
  else if (propName = 'given') then deletePropertyValue('given', GivenList, value) {L1054}
  else if (propName = 'prefix') then deletePropertyValue('prefix', PrefixList, value) {L1054}
  else if (propName = 'suffix') then deletePropertyValue('suffix', SuffixList, value) {L1054}
  else if (propName = 'period') then PeriodElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirHumanName.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'use') then UseElement := asEnum(SYSTEMS_TFhirNameUseEnum, CODES_TFhirNameUseEnum, new) {L1210}
  else if (propName = 'text') then TextElement := asString(new) {L1222}
  else if (propName = 'family') then FamilyElement := asString(new) {L1222}
  else if (propName = 'given') then replacePropertyValue('given', GivenList, existing, new) {L1055}
  else if (propName = 'prefix') then replacePropertyValue('prefix', PrefixList, existing, new) {L1055}
  else if (propName = 'suffix') then replacePropertyValue('suffix', SuffixList, existing, new) {L1055}
  else if (propName = 'period') then PeriodElement := new as TFhirPeriod {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirHumanName.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'given') then GivenList.move(source, destination) {L1046}
  else if (propName = 'prefix') then PrefixList.move(source, destination) {L1046}
  else if (propName = 'suffix') then SuffixList.move(source, destination) {L1046}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirHumanName.fhirType : string;
begin
  result := 'HumanName';
end;

function TFhirHumanName.Link : TFhirHumanName;
begin
  result := TFhirHumanName(inherited Link);
end;

function TFhirHumanName.Clone : TFhirHumanName;
begin
  result := TFhirHumanName(inherited Clone);
end;

function TFhirHumanName.equals(other : TObject) : boolean; 
var
  o : TFhirHumanName;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirHumanName)) then
    result := false
  else
  begin
    o := TFhirHumanName(other);
    result := compareDeep(useElement, o.useElement, true) and compareDeep(textElement, o.textElement, true) and 
      compareDeep(familyElement, o.familyElement, true) and compareDeep(givenList, o.givenList, true) and 
      compareDeep(prefixList, o.prefixList, true) and compareDeep(suffixList, o.suffixList, true) and 
      compareDeep(periodElement, o.periodElement, true);
  end;
end;

function TFhirHumanName.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FUse) and isEmptyProp(FText) and isEmptyProp(FFamily) and isEmptyProp(FgivenList) and isEmptyProp(FprefixList) and isEmptyProp(FsuffixList) and isEmptyProp(FPeriod);
end;

procedure TFhirHumanName.SetUse(value : TFhirEnum);
begin
  FUse.free;
  FUse := value;
end;

function TFhirHumanName.GetUseST : TFhirNameUseEnum;
begin
  if FUse = nil then
    result := TFhirNameUseEnum(0)
  else
    result := TFhirNameUseEnum(StringArrayIndexOfSensitive(CODES_TFhirNameUseEnum, FUse.value));
end;

procedure TFhirHumanName.SetUseST(value : TFhirNameUseEnum);
begin
  if ord(value) = 0 then
    UseElement := nil
  else
    UseElement := TFhirEnum.create(SYSTEMS_TFhirNameUseEnum[value], CODES_TFhirNameUseEnum[value]);
end;

procedure TFhirHumanName.SetText(value : TFhirString);
begin
  FText.free;
  FText := value; {L1134}
end;

function TFhirHumanName.GetTextST : String;
begin
  if FText = nil then
    result := ''
  else
    result := FText.value;
end;

procedure TFhirHumanName.SetTextST(value : String);
begin
  if value <> '' then
  begin
    if FText = nil then
      FText := TFhirString.create;
    FText.value := value
  end
  else if FText <> nil then
    FText.value := '';
end;

procedure TFhirHumanName.SetFamily(value : TFhirString);
begin
  FFamily.free;
  FFamily := value; {L1134}
end;

function TFhirHumanName.GetFamilyST : String;
begin
  if FFamily = nil then
    result := ''
  else
    result := FFamily.value;
end;

procedure TFhirHumanName.SetFamilyST(value : String);
begin
  if value <> '' then
  begin
    if FFamily = nil then
      FFamily := TFhirString.create;
    FFamily.value := value
  end
  else if FFamily <> nil then
    FFamily.value := '';
end;

function TFhirHumanName.GetGivenList : TFhirStringList;
begin
  if FGivenList = nil then
    FGivenList := TFhirStringList.Create;
  result := FGivenList;
end;

function TFhirHumanName.GetHasGivenList : boolean;
begin
  result := (FGivenList <> nil) and (FGivenList.count > 0);
end;

function TFhirHumanName.GetPrefixList : TFhirStringList;
begin
  if FPrefixList = nil then
    FPrefixList := TFhirStringList.Create;
  result := FPrefixList;
end;

function TFhirHumanName.GetHasPrefixList : boolean;
begin
  result := (FPrefixList <> nil) and (FPrefixList.count > 0);
end;

function TFhirHumanName.GetSuffixList : TFhirStringList;
begin
  if FSuffixList = nil then
    FSuffixList := TFhirStringList.Create;
  result := FSuffixList;
end;

function TFhirHumanName.GetHasSuffixList : boolean;
begin
  result := (FSuffixList <> nil) and (FSuffixList.count > 0);
end;

procedure TFhirHumanName.SetPeriod(value : TFhirPeriod);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

procedure TFhirHumanName.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('use');
  fields.add('text');
  fields.add('family');
  fields.add('given');
  fields.add('prefix');
  fields.add('suffix');
  fields.add('period');
end;

function TFhirHumanName.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FUse.sizeInBytes);
  inc(result, FText.sizeInBytes);
  inc(result, FFamily.sizeInBytes);
  inc(result, FgivenList.sizeInBytes);
  inc(result, FprefixList.sizeInBytes);
  inc(result, FsuffixList.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
end;

{ TFhirHumanNameListEnumerator }

constructor TFhirHumanNameListEnumerator.Create(list : TFhirHumanNameList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirHumanNameListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirHumanNameListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirHumanNameListEnumerator.GetCurrent : TFhirHumanName;
begin
  Result := FList[FIndex];
end;

function TFhirHumanNameListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirHumanNameList }

procedure TFhirHumanNameList.AddItem(value: TFhirHumanName);
begin
  assert(value.ClassName = 'TFhirHumanName', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirHumanName');
  add(value);
end;

function TFhirHumanNameList.Append: TFhirHumanName;
begin
  result := TFhirHumanName.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirHumanNameList.ClearItems;
begin
  Clear;
end;

function TFhirHumanNameList.GetEnumerator : TFhirHumanNameListEnumerator;
begin
  result := TFhirHumanNameListEnumerator.Create(self.link);
end;

function TFhirHumanNameList.Clone: TFhirHumanNameList;
begin
  result := TFhirHumanNameList(inherited Clone);
end;

function TFhirHumanNameList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirHumanNameList.GetItemN(index: Integer): TFhirHumanName;
begin
  result := TFhirHumanName(ObjectByIndex[index]);
end;

function TFhirHumanNameList.ItemClass: TFslObjectClass;
begin
  result := TFhirHumanName;
end;
function TFhirHumanNameList.IndexOf(value: TFhirHumanName): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirHumanNameList.Insert(index: Integer): TFhirHumanName;
begin
  result := TFhirHumanName.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirHumanNameList.InsertItem(index: Integer; value: TFhirHumanName);
begin
  assert(value is TFhirHumanName);
  Inherited Insert(index, value);
end;

function TFhirHumanNameList.Item(index: Integer): TFhirHumanName;
begin
  result := TFhirHumanName(ObjectByIndex[index]);
end;

function TFhirHumanNameList.Link: TFhirHumanNameList;
begin
  result := TFhirHumanNameList(inherited Link);
end;

procedure TFhirHumanNameList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirHumanNameList.SetItemByIndex(index: Integer; value: TFhirHumanName);
begin
  assert(value is TFhirHumanName);
  FhirHumanNames[index] := value;
end;

procedure TFhirHumanNameList.SetItemN(index: Integer; value: TFhirHumanName);
begin
  assert(value is TFhirHumanName);
  ObjectByIndex[index] := value;
end;

{ TFhirIdentifier }

constructor TFhirIdentifier.Create;
begin
  inherited;
end;

destructor TFhirIdentifier.Destroy;
begin
  FUse.free;
  FType_.free;
  FSystem.free;
  FValue.free;
  FPeriod.free;
  FAssigner.free;
  inherited;
end;

procedure TFhirIdentifier.Assign(oSource : TFslObject);
begin
  inherited;
  useElement := TFhirIdentifier(oSource).useElement.Clone;
  type_ := TFhirIdentifier(oSource).type_.Clone;
  systemElement := TFhirIdentifier(oSource).systemElement.Clone;
  valueElement := TFhirIdentifier(oSource).valueElement.Clone;
  period := TFhirIdentifier(oSource).period.Clone;
  assigner := TFhirIdentifier(oSource).assigner.Clone;
end;

procedure TFhirIdentifier.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'use') Then
     list.add(self.link, 'use', FUse.Link);
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'system') Then
     list.add(self.link, 'system', FSystem.Link);
  if (child_name = 'value') Then
     list.add(self.link, 'value', FValue.Link);
  if (child_name = 'period') Then
     list.add(self.link, 'period', FPeriod.Link);
  if (child_name = 'assigner') Then
     list.add(self.link, 'assigner', FAssigner.Link);
end;

procedure TFhirIdentifier.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'use', 'code', false, TFhirEnum, FUse.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'type', 'CodeableConcept', false, TFhirCodeableConcept, FType_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'system', 'uri', false, TFhirUri, FSystem.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'value', 'string', false, TFhirString, FValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'period', 'Period', false, TFhirPeriod, FPeriod.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'assigner', 'Reference', false, TFhirReference, FAssigner.Link)); {L1172}
end;

function TFhirIdentifier.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'use') then
  begin
    UseElement := asEnum(SYSTEMS_TFhirIdentifierUseEnum, CODES_TFhirIdentifierUseEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_ := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'system') then
  begin
    SystemElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'value') then
  begin
    ValueElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'period') then
  begin
    Period := propValue as TFhirPeriod {L1199};
    result := propValue;
  end
  else if (propName = 'assigner') then
  begin
    Assigner := propValue as TFhirReference {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirIdentifier.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirIdentifier.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'use') then result := TFhirEnum.create(SYSTEMS_TFhirIdentifierUseEnum[IdentifierUseNull], CODES_TFhirIdentifierUseEnum[IdentifierUseNull])  {L1211}
  else if (propName = 'type') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'system') then result := TFhirUri.create() {L1223}
  else if (propName = 'value') then result := TFhirString.create() {L1223}
  else if (propName = 'period') then result := TFhirPeriod.create() {L1203}
  else if (propName = 'assigner') then result := TFhirReference.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirIdentifier.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'use') then result := 'code'
  else if (propName = 'type') then result := 'CodeableConcept'
  else if (propName = 'system') then result := 'uri'
  else if (propName = 'value') then result := 'string'
  else if (propName = 'period') then result := 'Period'
  else if (propName = 'assigner') then result := 'Reference'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirIdentifier.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'use') then UseElement := nil
  else if (propName = 'type') then Type_Element := nil
  else if (propName = 'system') then SystemElement := nil
  else if (propName = 'value') then ValueElement := nil
  else if (propName = 'period') then PeriodElement := nil
  else if (propName = 'assigner') then AssignerElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirIdentifier.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'use') then UseElement := asEnum(SYSTEMS_TFhirIdentifierUseEnum, CODES_TFhirIdentifierUseEnum, new) {L1210}
  else if (propName = 'type') then Type_Element := new as TFhirCodeableConcept {L1195}
  else if (propName = 'system') then SystemElement := asUri(new) {L1222}
  else if (propName = 'value') then ValueElement := asString(new) {L1222}
  else if (propName = 'period') then PeriodElement := new as TFhirPeriod {L1195}
  else if (propName = 'assigner') then AssignerElement := new as TFhirReference {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirIdentifier.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirIdentifier.fhirType : string;
begin
  result := 'Identifier';
end;

function TFhirIdentifier.Link : TFhirIdentifier;
begin
  result := TFhirIdentifier(inherited Link);
end;

function TFhirIdentifier.Clone : TFhirIdentifier;
begin
  result := TFhirIdentifier(inherited Clone);
end;

function TFhirIdentifier.equals(other : TObject) : boolean; 
var
  o : TFhirIdentifier;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirIdentifier)) then
    result := false
  else
  begin
    o := TFhirIdentifier(other);
    result := compareDeep(useElement, o.useElement, true) and compareDeep(type_Element, o.type_Element, true) and 
      compareDeep(systemElement, o.systemElement, true) and compareDeep(valueElement, o.valueElement, true) and 
      compareDeep(periodElement, o.periodElement, true) and compareDeep(assignerElement, o.assignerElement, true);
  end;
end;

function TFhirIdentifier.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FUse) and isEmptyProp(FType_) and isEmptyProp(FSystem) and isEmptyProp(FValue) and isEmptyProp(FPeriod) and isEmptyProp(FAssigner);
end;

procedure TFhirIdentifier.SetUse(value : TFhirEnum);
begin
  FUse.free;
  FUse := value;
end;

function TFhirIdentifier.GetUseST : TFhirIdentifierUseEnum;
begin
  if FUse = nil then
    result := TFhirIdentifierUseEnum(0)
  else
    result := TFhirIdentifierUseEnum(StringArrayIndexOfSensitive(CODES_TFhirIdentifierUseEnum, FUse.value));
end;

procedure TFhirIdentifier.SetUseST(value : TFhirIdentifierUseEnum);
begin
  if ord(value) = 0 then
    UseElement := nil
  else
    UseElement := TFhirEnum.create(SYSTEMS_TFhirIdentifierUseEnum[value], CODES_TFhirIdentifierUseEnum[value]);
end;

procedure TFhirIdentifier.SetType_(value : TFhirCodeableConcept);
begin
  FType_.free;
  FType_ := value; {L1134}
end;

procedure TFhirIdentifier.SetSystem(value : TFhirUri);
begin
  FSystem.free;
  FSystem := value; {L1134}
end;

function TFhirIdentifier.GetSystemST : String;
begin
  if FSystem = nil then
    result := ''
  else
    result := FSystem.value;
end;

procedure TFhirIdentifier.SetSystemST(value : String);
begin
  if value <> '' then
  begin
    if FSystem = nil then
      FSystem := TFhirUri.create;
    FSystem.value := value
  end
  else if FSystem <> nil then
    FSystem.value := '';
end;

procedure TFhirIdentifier.SetValue(value : TFhirString);
begin
  FValue.free;
  FValue := value; {L1134}
end;

function TFhirIdentifier.GetValueST : String;
begin
  if FValue = nil then
    result := ''
  else
    result := FValue.value;
end;

procedure TFhirIdentifier.SetValueST(value : String);
begin
  if value <> '' then
  begin
    if FValue = nil then
      FValue := TFhirString.create;
    FValue.value := value
  end
  else if FValue <> nil then
    FValue.value := '';
end;

procedure TFhirIdentifier.SetPeriod(value : TFhirPeriod);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

procedure TFhirIdentifier.SetAssigner(value : TFhirReference);
begin
  FAssigner.free;
  FAssigner := value; {L1134}
end;

procedure TFhirIdentifier.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('use');
  fields.add('type');
  fields.add('system');
  fields.add('value');
  fields.add('period');
  fields.add('assigner');
end;

function TFhirIdentifier.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FUse.sizeInBytes);
  inc(result, FType_.sizeInBytes);
  inc(result, FSystem.sizeInBytes);
  inc(result, FValue.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
  inc(result, FAssigner.sizeInBytes);
end;

{ TFhirIdentifierListEnumerator }

constructor TFhirIdentifierListEnumerator.Create(list : TFhirIdentifierList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirIdentifierListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirIdentifierListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirIdentifierListEnumerator.GetCurrent : TFhirIdentifier;
begin
  Result := FList[FIndex];
end;

function TFhirIdentifierListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirIdentifierList }

procedure TFhirIdentifierList.AddItem(value: TFhirIdentifier);
begin
  assert(value.ClassName = 'TFhirIdentifier', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirIdentifier');
  add(value);
end;

function TFhirIdentifierList.Append: TFhirIdentifier;
begin
  result := TFhirIdentifier.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirIdentifierList.ClearItems;
begin
  Clear;
end;

function TFhirIdentifierList.GetEnumerator : TFhirIdentifierListEnumerator;
begin
  result := TFhirIdentifierListEnumerator.Create(self.link);
end;

function TFhirIdentifierList.Clone: TFhirIdentifierList;
begin
  result := TFhirIdentifierList(inherited Clone);
end;

function TFhirIdentifierList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirIdentifierList.GetItemN(index: Integer): TFhirIdentifier;
begin
  result := TFhirIdentifier(ObjectByIndex[index]);
end;

function TFhirIdentifierList.ItemClass: TFslObjectClass;
begin
  result := TFhirIdentifier;
end;
function TFhirIdentifierList.IndexOf(value: TFhirIdentifier): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirIdentifierList.Insert(index: Integer): TFhirIdentifier;
begin
  result := TFhirIdentifier.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirIdentifierList.InsertItem(index: Integer; value: TFhirIdentifier);
begin
  assert(value is TFhirIdentifier);
  Inherited Insert(index, value);
end;

function TFhirIdentifierList.Item(index: Integer): TFhirIdentifier;
begin
  result := TFhirIdentifier(ObjectByIndex[index]);
end;

function TFhirIdentifierList.Link: TFhirIdentifierList;
begin
  result := TFhirIdentifierList(inherited Link);
end;

procedure TFhirIdentifierList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirIdentifierList.SetItemByIndex(index: Integer; value: TFhirIdentifier);
begin
  assert(value is TFhirIdentifier);
  FhirIdentifiers[index] := value;
end;

procedure TFhirIdentifierList.SetItemN(index: Integer; value: TFhirIdentifier);
begin
  assert(value is TFhirIdentifier);
  ObjectByIndex[index] := value;
end;

{ TFhirMeta }

constructor TFhirMeta.Create;
begin
  inherited;
end;

destructor TFhirMeta.Destroy;
begin
  FVersionId.free;
  FLastUpdated.free;
  FSource.free;
  FProfileList.Free;
  FSecurityList.Free;
  FTagList.Free;
  inherited;
end;

procedure TFhirMeta.Assign(oSource : TFslObject);
begin
  inherited;
  versionIdElement := TFhirMeta(oSource).versionIdElement.Clone;
  lastUpdatedElement := TFhirMeta(oSource).lastUpdatedElement.Clone;
  sourceElement := TFhirMeta(oSource).sourceElement.Clone;
  if (TFhirMeta(oSource).FProfileList = nil) then
  begin
    FProfileList.free;
    FProfileList := nil;
  end
  else
  begin
    if FProfileList = nil then
      FProfileList := TFhirCanonicalList.Create;
    FProfileList.Assign(TFhirMeta(oSource).FProfileList);
  end;
  if (TFhirMeta(oSource).FSecurityList = nil) then
  begin
    FSecurityList.free;
    FSecurityList := nil;
  end
  else
  begin
    if FSecurityList = nil then
      FSecurityList := TFhirCodingList.Create;
    FSecurityList.Assign(TFhirMeta(oSource).FSecurityList);
  end;
  if (TFhirMeta(oSource).FTagList = nil) then
  begin
    FTagList.free;
    FTagList := nil;
  end
  else
  begin
    if FTagList = nil then
      FTagList := TFhirCodingList.Create;
    FTagList.Assign(TFhirMeta(oSource).FTagList);
  end;
end;

procedure TFhirMeta.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'versionId') Then
     list.add(self.link, 'versionId', FVersionId.Link);
  if (child_name = 'lastUpdated') Then
     list.add(self.link, 'lastUpdated', FLastUpdated.Link);
  if (child_name = 'source') Then
     list.add(self.link, 'source', FSource.Link);
  if (child_name = 'profile') Then
    list.addAll(self, 'profile', FProfileList);
  if (child_name = 'security') Then
    list.addAll(self, 'security', FSecurityList);
  if (child_name = 'tag') Then
    list.addAll(self, 'tag', FTagList);
end;

procedure TFhirMeta.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'versionId', 'id', false, TFhirId, FVersionId.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'lastUpdated', 'instant', false, TFhirInstant, FLastUpdated.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'source', 'uri', false, TFhirUri, FSource.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'profile', 'canonical', true, TFhirCanonical, FProfileList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'security', 'Coding', true, TFhirCoding, FSecurityList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'tag', 'Coding', true, TFhirCoding, FTagList.Link)) {L1039};
end;

function TFhirMeta.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'versionId') then
  begin
    VersionIdElement := asId(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'lastUpdated') then
  begin
    LastUpdatedElement := asInstant(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'source') then
  begin
    SourceElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'profile') then
  begin
    ProfileList.add(asCanonical(propValue)){2};     result := propValue;

  end
  else if (propName = 'security') then
  begin
    SecurityList.add(propValue as TFhirCoding) {L1048};
    result := propValue;
  end
  else if (propName = 'tag') then
  begin
    TagList.add(propValue as TFhirCoding) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirMeta.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'profile') then ProfileList.insertItem(index, asCanonical(propValue)) {L1045}
  else if (propName = 'security') then SecurityList.insertItem(index, propValue as TFhirCoding) {L1049}
  else if (propName = 'tag') then TagList.insertItem(index, propValue as TFhirCoding) {L1049}
  else inherited;
end;

function TFhirMeta.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'versionId') then result := TFhirId.create() {L1223}
  else if (propName = 'lastUpdated') then result := TFhirInstant.create() {L1223}
  else if (propName = 'source') then result := TFhirUri.create() {L1223}
  else if (propName = 'profile') then result := ProfileList.new() {L1053}
  else if (propName = 'security') then result := SecurityList.new() {L1053}
  else if (propName = 'tag') then result := TagList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirMeta.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'versionId') then result := 'id'
  else if (propName = 'lastUpdated') then result := 'instant'
  else if (propName = 'source') then result := 'uri'
  else if (propName = 'profile') then result := 'canonical'
  else if (propName = 'security') then result := 'Coding'
  else if (propName = 'tag') then result := 'Coding'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirMeta.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'versionId') then VersionIdElement := nil
  else if (propName = 'lastUpdated') then LastUpdatedElement := nil
  else if (propName = 'source') then SourceElement := nil
  else if (propName = 'profile') then deletePropertyValue('profile', ProfileList, value) {L1054}
  else if (propName = 'security') then deletePropertyValue('security', SecurityList, value) {L1054}
  else if (propName = 'tag') then deletePropertyValue('tag', TagList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirMeta.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'versionId') then VersionIdElement := asId(new) {L1222}
  else if (propName = 'lastUpdated') then LastUpdatedElement := asInstant(new) {L1222}
  else if (propName = 'source') then SourceElement := asUri(new) {L1222}
  else if (propName = 'profile') then replacePropertyValue('profile', ProfileList, existing, new) {L1055}
  else if (propName = 'security') then replacePropertyValue('security', SecurityList, existing, new) {L1055}
  else if (propName = 'tag') then replacePropertyValue('tag', TagList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirMeta.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'profile') then ProfileList.move(source, destination) {L1046}
  else if (propName = 'security') then SecurityList.move(source, destination) {L1050}
  else if (propName = 'tag') then TagList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirMeta.fhirType : string;
begin
  result := 'Meta';
end;

function TFhirMeta.Link : TFhirMeta;
begin
  result := TFhirMeta(inherited Link);
end;

function TFhirMeta.Clone : TFhirMeta;
begin
  result := TFhirMeta(inherited Clone);
end;

function TFhirMeta.equals(other : TObject) : boolean; 
var
  o : TFhirMeta;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirMeta)) then
    result := false
  else
  begin
    o := TFhirMeta(other);
    result := compareDeep(versionIdElement, o.versionIdElement, true) and compareDeep(lastUpdatedElement, o.lastUpdatedElement, true) and 
      compareDeep(sourceElement, o.sourceElement, true) and compareDeep(profileList, o.profileList, true) and 
      compareDeep(securityList, o.securityList, true) and compareDeep(tagList, o.tagList, true);
  end;
end;

function TFhirMeta.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FVersionId) and isEmptyProp(FLastUpdated) and isEmptyProp(FSource) and isEmptyProp(FprofileList) and isEmptyProp(FsecurityList) and isEmptyProp(FtagList);
end;

procedure TFhirMeta.SetVersionId(value : TFhirId);
begin
  FVersionId.free;
  FVersionId := value; {L1134}
end;

function TFhirMeta.GetVersionIdST : String;
begin
  if FVersionId = nil then
    result := ''
  else
    result := FVersionId.value;
end;

procedure TFhirMeta.SetVersionIdST(value : String);
begin
  if value <> '' then
  begin
    if FVersionId = nil then
      FVersionId := TFhirId.create;
    FVersionId.value := value
  end
  else if FVersionId <> nil then
    FVersionId.value := '';
end;

procedure TFhirMeta.SetLastUpdated(value : TFhirInstant);
begin
  FLastUpdated.free;
  FLastUpdated := value; {L1134}
end;

function TFhirMeta.GetLastUpdatedST : TFslDateTime;
begin
  if FLastUpdated = nil then
    result := TFslDateTime.makeNull
  else
    result := FLastUpdated.value;
end;

procedure TFhirMeta.SetLastUpdatedST(value : TFslDateTime);
begin
  if FLastUpdated = nil then
    FLastUpdated := TFhirInstant.create;
  FLastUpdated.value := value
end;

procedure TFhirMeta.SetSource(value : TFhirUri);
begin
  FSource.free;
  FSource := value; {L1134}
end;

function TFhirMeta.GetSourceST : String;
begin
  if FSource = nil then
    result := ''
  else
    result := FSource.value;
end;

procedure TFhirMeta.SetSourceST(value : String);
begin
  if value <> '' then
  begin
    if FSource = nil then
      FSource := TFhirUri.create;
    FSource.value := value
  end
  else if FSource <> nil then
    FSource.value := '';
end;

function TFhirMeta.GetProfileList : TFhirCanonicalList;
begin
  if FProfileList = nil then
    FProfileList := TFhirCanonicalList.Create;
  result := FProfileList;
end;

function TFhirMeta.GetHasProfileList : boolean;
begin
  result := (FProfileList <> nil) and (FProfileList.count > 0);
end;

function TFhirMeta.GetSecurityList : TFhirCodingList;
begin
  if FSecurityList = nil then
    FSecurityList := TFhirCodingList.Create;
  result := FSecurityList;
end;

function TFhirMeta.GetHasSecurityList : boolean;
begin
  result := (FSecurityList <> nil) and (FSecurityList.count > 0);
end;

function TFhirMeta.GetTagList : TFhirCodingList;
begin
  if FTagList = nil then
    FTagList := TFhirCodingList.Create;
  result := FTagList;
end;

function TFhirMeta.GetHasTagList : boolean;
begin
  result := (FTagList <> nil) and (FTagList.count > 0);
end;

procedure TFhirMeta.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('versionId');
  fields.add('lastUpdated');
  fields.add('source');
  fields.add('profile');
  fields.add('security');
  fields.add('tag');
end;

function TFhirMeta.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FVersionId.sizeInBytes);
  inc(result, FLastUpdated.sizeInBytes);
  inc(result, FSource.sizeInBytes);
  inc(result, FprofileList.sizeInBytes);
  inc(result, FsecurityList.sizeInBytes);
  inc(result, FtagList.sizeInBytes);
end;

{ TFhirMetaListEnumerator }

constructor TFhirMetaListEnumerator.Create(list : TFhirMetaList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirMetaListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirMetaListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirMetaListEnumerator.GetCurrent : TFhirMeta;
begin
  Result := FList[FIndex];
end;

function TFhirMetaListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirMetaList }

procedure TFhirMetaList.AddItem(value: TFhirMeta);
begin
  assert(value.ClassName = 'TFhirMeta', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirMeta');
  add(value);
end;

function TFhirMetaList.Append: TFhirMeta;
begin
  result := TFhirMeta.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMetaList.ClearItems;
begin
  Clear;
end;

function TFhirMetaList.GetEnumerator : TFhirMetaListEnumerator;
begin
  result := TFhirMetaListEnumerator.Create(self.link);
end;

function TFhirMetaList.Clone: TFhirMetaList;
begin
  result := TFhirMetaList(inherited Clone);
end;

function TFhirMetaList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirMetaList.GetItemN(index: Integer): TFhirMeta;
begin
  result := TFhirMeta(ObjectByIndex[index]);
end;

function TFhirMetaList.ItemClass: TFslObjectClass;
begin
  result := TFhirMeta;
end;
function TFhirMetaList.IndexOf(value: TFhirMeta): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirMetaList.Insert(index: Integer): TFhirMeta;
begin
  result := TFhirMeta.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMetaList.InsertItem(index: Integer; value: TFhirMeta);
begin
  assert(value is TFhirMeta);
  Inherited Insert(index, value);
end;

function TFhirMetaList.Item(index: Integer): TFhirMeta;
begin
  result := TFhirMeta(ObjectByIndex[index]);
end;

function TFhirMetaList.Link: TFhirMetaList;
begin
  result := TFhirMetaList(inherited Link);
end;

procedure TFhirMetaList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirMetaList.SetItemByIndex(index: Integer; value: TFhirMeta);
begin
  assert(value is TFhirMeta);
  FhirMeta[index] := value;
end;

procedure TFhirMetaList.SetItemN(index: Integer; value: TFhirMeta);
begin
  assert(value is TFhirMeta);
  ObjectByIndex[index] := value;
end;

{ TFhirMoney }

constructor TFhirMoney.Create;
begin
  inherited;
end;

destructor TFhirMoney.Destroy;
begin
  FValue.free;
  FCurrency.free;
  inherited;
end;

procedure TFhirMoney.Assign(oSource : TFslObject);
begin
  inherited;
  valueElement := TFhirMoney(oSource).valueElement.Clone;
  currencyElement := TFhirMoney(oSource).currencyElement.Clone;
end;

procedure TFhirMoney.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'value') Then
     list.add(self.link, 'value', FValue.Link);
  if (child_name = 'currency') Then
     list.add(self.link, 'currency', FCurrency.Link);
end;

procedure TFhirMoney.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'value', 'decimal', false, TFhirDecimal, FValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'currency', 'code', false, TFhirCode, FCurrency.Link)); {L1172}
end;

function TFhirMoney.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'value') then
  begin
    ValueElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'currency') then
  begin
    CurrencyElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirMoney.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirMoney.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'value') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'currency') then result := TFhirCode.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirMoney.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'value') then result := 'decimal'
  else if (propName = 'currency') then result := 'code'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirMoney.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'value') then ValueElement := nil
  else if (propName = 'currency') then CurrencyElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirMoney.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'value') then ValueElement := asDecimal(new) {L1222}
  else if (propName = 'currency') then CurrencyElement := asCode(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirMoney.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirMoney.fhirType : string;
begin
  result := 'Money';
end;

function TFhirMoney.Link : TFhirMoney;
begin
  result := TFhirMoney(inherited Link);
end;

function TFhirMoney.Clone : TFhirMoney;
begin
  result := TFhirMoney(inherited Clone);
end;

function TFhirMoney.equals(other : TObject) : boolean; 
var
  o : TFhirMoney;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirMoney)) then
    result := false
  else
  begin
    o := TFhirMoney(other);
    result := compareDeep(valueElement, o.valueElement, true) and compareDeep(currencyElement, o.currencyElement, true);
  end;
end;

function TFhirMoney.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FValue) and isEmptyProp(FCurrency);
end;

procedure TFhirMoney.SetValue(value : TFhirDecimal);
begin
  FValue.free;
  FValue := value; {L1134}
end;

function TFhirMoney.GetValueST : String;
begin
  if FValue = nil then
    result := ''
  else
    result := FValue.value;
end;

procedure TFhirMoney.SetValueST(value : String);
begin
  if value <> '' then
  begin
    if FValue = nil then
      FValue := TFhirDecimal.create;
    FValue.value := value
  end
  else if FValue <> nil then
    FValue.value := '';
end;

procedure TFhirMoney.SetCurrency(value : TFhirCode);
begin
  FCurrency.free;
  FCurrency := value; {L1134}
end;

function TFhirMoney.GetCurrencyST : String;
begin
  if FCurrency = nil then
    result := ''
  else
    result := FCurrency.value;
end;

procedure TFhirMoney.SetCurrencyST(value : String);
begin
  if value <> '' then
  begin
    if FCurrency = nil then
      FCurrency := TFhirCode.create;
    FCurrency.value := value
  end
  else if FCurrency <> nil then
    FCurrency.value := '';
end;

procedure TFhirMoney.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('value');
  fields.add('currency');
end;

function TFhirMoney.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FValue.sizeInBytes);
  inc(result, FCurrency.sizeInBytes);
end;

{ TFhirMoneyListEnumerator }

constructor TFhirMoneyListEnumerator.Create(list : TFhirMoneyList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirMoneyListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirMoneyListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirMoneyListEnumerator.GetCurrent : TFhirMoney;
begin
  Result := FList[FIndex];
end;

function TFhirMoneyListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirMoneyList }

procedure TFhirMoneyList.AddItem(value: TFhirMoney);
begin
  assert(value.ClassName = 'TFhirMoney', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirMoney');
  add(value);
end;

function TFhirMoneyList.Append: TFhirMoney;
begin
  result := TFhirMoney.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMoneyList.ClearItems;
begin
  Clear;
end;

function TFhirMoneyList.GetEnumerator : TFhirMoneyListEnumerator;
begin
  result := TFhirMoneyListEnumerator.Create(self.link);
end;

function TFhirMoneyList.Clone: TFhirMoneyList;
begin
  result := TFhirMoneyList(inherited Clone);
end;

function TFhirMoneyList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirMoneyList.GetItemN(index: Integer): TFhirMoney;
begin
  result := TFhirMoney(ObjectByIndex[index]);
end;

function TFhirMoneyList.ItemClass: TFslObjectClass;
begin
  result := TFhirMoney;
end;
function TFhirMoneyList.IndexOf(value: TFhirMoney): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirMoneyList.Insert(index: Integer): TFhirMoney;
begin
  result := TFhirMoney.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMoneyList.InsertItem(index: Integer; value: TFhirMoney);
begin
  assert(value is TFhirMoney);
  Inherited Insert(index, value);
end;

function TFhirMoneyList.Item(index: Integer): TFhirMoney;
begin
  result := TFhirMoney(ObjectByIndex[index]);
end;

function TFhirMoneyList.Link: TFhirMoneyList;
begin
  result := TFhirMoneyList(inherited Link);
end;

procedure TFhirMoneyList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirMoneyList.SetItemByIndex(index: Integer; value: TFhirMoney);
begin
  assert(value is TFhirMoney);
  FhirMoneys[index] := value;
end;

procedure TFhirMoneyList.SetItemN(index: Integer; value: TFhirMoney);
begin
  assert(value is TFhirMoney);
  ObjectByIndex[index] := value;
end;

{ TFhirNarrative }

constructor TFhirNarrative.Create;
begin
  inherited;
end;

destructor TFhirNarrative.Destroy;
begin
  FStatus.free;
  FDiv_.free;
  inherited;
end;

procedure TFhirNarrative.Assign(oSource : TFslObject);
begin
  inherited;
  statusElement := TFhirNarrative(oSource).statusElement.Clone;
  div_ := TFhirNarrative(oSource).div_.Clone;
end;

procedure TFhirNarrative.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'status') Then
     list.add(self.link, 'status', FStatus.Link);
  if (child_name = 'div') Then
     list.add(self.link, 'div', FDiv_.Link);
end;

procedure TFhirNarrative.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'status', 'code', false, TFhirEnum, FStatus.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'div', 'xhtml', false, TFhirXHtmlNode, FDiv_.Link)); {L1172}
end;

function TFhirNarrative.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'status') then
  begin
    StatusElement := asEnum(SYSTEMS_TFhirNarrativeStatusEnum, CODES_TFhirNarrativeStatusEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'div') then
  begin
    Div_Element := asXHtmlNode(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirNarrative.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirNarrative.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'status') then result := TFhirEnum.create(SYSTEMS_TFhirNarrativeStatusEnum[NarrativeStatusNull], CODES_TFhirNarrativeStatusEnum[NarrativeStatusNull])  {L1211}
  else if (propName = 'div') then result := TFhirXHtmlNode.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirNarrative.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'status') then result := 'code'
  else if (propName = 'div') then result := 'xhtml'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirNarrative.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'status') then StatusElement := nil
  else if (propName = 'div') then Div_Element := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirNarrative.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'status') then StatusElement := asEnum(SYSTEMS_TFhirNarrativeStatusEnum, CODES_TFhirNarrativeStatusEnum, new) {L1210}
  else if (propName = 'div') then Div_Element := asXHtmlNode(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirNarrative.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirNarrative.fhirType : string;
begin
  result := 'Narrative';
end;

function TFhirNarrative.Link : TFhirNarrative;
begin
  result := TFhirNarrative(inherited Link);
end;

function TFhirNarrative.Clone : TFhirNarrative;
begin
  result := TFhirNarrative(inherited Clone);
end;

function TFhirNarrative.equals(other : TObject) : boolean; 
var
  o : TFhirNarrative;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirNarrative)) then
    result := false
  else
  begin
    o := TFhirNarrative(other);
    result := compareDeep(statusElement, o.statusElement, true) and compareDeep(div_Element, o.div_Element, true);
  end;
end;

function TFhirNarrative.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FStatus) and isEmptyProp(FDiv_);
end;

procedure TFhirNarrative.SetStatus(value : TFhirEnum);
begin
  FStatus.free;
  FStatus := value;
end;

function TFhirNarrative.GetStatusST : TFhirNarrativeStatusEnum;
begin
  if FStatus = nil then
    result := TFhirNarrativeStatusEnum(0)
  else
    result := TFhirNarrativeStatusEnum(StringArrayIndexOfSensitive(CODES_TFhirNarrativeStatusEnum, FStatus.value));
end;

procedure TFhirNarrative.SetStatusST(value : TFhirNarrativeStatusEnum);
begin
  if ord(value) = 0 then
    StatusElement := nil
  else
    StatusElement := TFhirEnum.create(SYSTEMS_TFhirNarrativeStatusEnum[value], CODES_TFhirNarrativeStatusEnum[value]);
end;

procedure TFhirNarrative.SetDiv_(value : TFhirXHtmlNode);
begin
  FDiv_.free;
  FDiv_ := value; {L1134}
end;

procedure TFhirNarrative.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('status');
  fields.add('div');
end;

function TFhirNarrative.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FStatus.sizeInBytes);
  inc(result, FDiv_.sizeInBytes);
end;

{ TFhirNarrativeListEnumerator }

constructor TFhirNarrativeListEnumerator.Create(list : TFhirNarrativeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirNarrativeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirNarrativeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirNarrativeListEnumerator.GetCurrent : TFhirNarrative;
begin
  Result := FList[FIndex];
end;

function TFhirNarrativeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirNarrativeList }

procedure TFhirNarrativeList.AddItem(value: TFhirNarrative);
begin
  assert(value.ClassName = 'TFhirNarrative', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirNarrative');
  add(value);
end;

function TFhirNarrativeList.Append: TFhirNarrative;
begin
  result := TFhirNarrative.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirNarrativeList.ClearItems;
begin
  Clear;
end;

function TFhirNarrativeList.GetEnumerator : TFhirNarrativeListEnumerator;
begin
  result := TFhirNarrativeListEnumerator.Create(self.link);
end;

function TFhirNarrativeList.Clone: TFhirNarrativeList;
begin
  result := TFhirNarrativeList(inherited Clone);
end;

function TFhirNarrativeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirNarrativeList.GetItemN(index: Integer): TFhirNarrative;
begin
  result := TFhirNarrative(ObjectByIndex[index]);
end;

function TFhirNarrativeList.ItemClass: TFslObjectClass;
begin
  result := TFhirNarrative;
end;
function TFhirNarrativeList.IndexOf(value: TFhirNarrative): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirNarrativeList.Insert(index: Integer): TFhirNarrative;
begin
  result := TFhirNarrative.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirNarrativeList.InsertItem(index: Integer; value: TFhirNarrative);
begin
  assert(value is TFhirNarrative);
  Inherited Insert(index, value);
end;

function TFhirNarrativeList.Item(index: Integer): TFhirNarrative;
begin
  result := TFhirNarrative(ObjectByIndex[index]);
end;

function TFhirNarrativeList.Link: TFhirNarrativeList;
begin
  result := TFhirNarrativeList(inherited Link);
end;

procedure TFhirNarrativeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirNarrativeList.SetItemByIndex(index: Integer; value: TFhirNarrative);
begin
  assert(value is TFhirNarrative);
  FhirNarratives[index] := value;
end;

procedure TFhirNarrativeList.SetItemN(index: Integer; value: TFhirNarrative);
begin
  assert(value is TFhirNarrative);
  ObjectByIndex[index] := value;
end;

{ TFhirParameterDefinition }

constructor TFhirParameterDefinition.Create;
begin
  inherited;
end;

destructor TFhirParameterDefinition.Destroy;
begin
  FName.free;
  FUse.free;
  FMin.free;
  FMax.free;
  FDocumentation.free;
  FType_.free;
  FProfile.free;
  inherited;
end;

procedure TFhirParameterDefinition.Assign(oSource : TFslObject);
begin
  inherited;
  nameElement := TFhirParameterDefinition(oSource).nameElement.Clone;
  useElement := TFhirParameterDefinition(oSource).useElement.Clone;
  minElement := TFhirParameterDefinition(oSource).minElement.Clone;
  maxElement := TFhirParameterDefinition(oSource).maxElement.Clone;
  documentationElement := TFhirParameterDefinition(oSource).documentationElement.Clone;
  type_Element := TFhirParameterDefinition(oSource).type_Element.Clone;
  profileElement := TFhirParameterDefinition(oSource).profileElement.Clone;
end;

procedure TFhirParameterDefinition.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'name') Then
     list.add(self.link, 'name', FName.Link);
  if (child_name = 'use') Then
     list.add(self.link, 'use', FUse.Link);
  if (child_name = 'min') Then
     list.add(self.link, 'min', FMin.Link);
  if (child_name = 'max') Then
     list.add(self.link, 'max', FMax.Link);
  if (child_name = 'documentation') Then
     list.add(self.link, 'documentation', FDocumentation.Link);
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'profile') Then
     list.add(self.link, 'profile', FProfile.Link);
end;

procedure TFhirParameterDefinition.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'name', 'code', false, TFhirCode, FName.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'use', 'code', false, TFhirEnum, FUse.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'min', 'integer', false, TFhirInteger, FMin.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'max', 'string', false, TFhirString, FMax.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'documentation', 'string', false, TFhirString, FDocumentation.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'profile', 'canonical', false, TFhirCanonical, FProfile.Link)); {L1172}
end;

function TFhirParameterDefinition.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'name') then
  begin
    NameElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'use') then
  begin
    UseElement := asEnum(SYSTEMS_TFhirOperationParameterUseEnum, CODES_TFhirOperationParameterUseEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'min') then
  begin
    MinElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'max') then
  begin
    MaxElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'documentation') then
  begin
    DocumentationElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirAllTypesEnum, CODES_TFhirAllTypesEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'profile') then
  begin
    ProfileElement := asCanonical(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirParameterDefinition.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirParameterDefinition.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'name') then result := TFhirCode.create() {L1223}
  else if (propName = 'use') then result := TFhirEnum.create(SYSTEMS_TFhirOperationParameterUseEnum[OperationParameterUseNull], CODES_TFhirOperationParameterUseEnum[OperationParameterUseNull])  {L1211}
  else if (propName = 'min') then result := TFhirInteger.create() {L1223}
  else if (propName = 'max') then result := TFhirString.create() {L1223}
  else if (propName = 'documentation') then result := TFhirString.create() {L1223}
  else if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirAllTypesEnum[AllTypesNull], CODES_TFhirAllTypesEnum[AllTypesNull])  {L1211}
  else if (propName = 'profile') then result := TFhirCanonical.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirParameterDefinition.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'name') then result := 'code'
  else if (propName = 'use') then result := 'code'
  else if (propName = 'min') then result := 'integer'
  else if (propName = 'max') then result := 'string'
  else if (propName = 'documentation') then result := 'string'
  else if (propName = 'type') then result := 'code'
  else if (propName = 'profile') then result := 'canonical'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirParameterDefinition.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'name') then NameElement := nil
  else if (propName = 'use') then UseElement := nil
  else if (propName = 'min') then MinElement := nil
  else if (propName = 'max') then MaxElement := nil
  else if (propName = 'documentation') then DocumentationElement := nil
  else if (propName = 'type') then Type_Element := nil
  else if (propName = 'profile') then ProfileElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirParameterDefinition.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'name') then NameElement := asCode(new) {L1222}
  else if (propName = 'use') then UseElement := asEnum(SYSTEMS_TFhirOperationParameterUseEnum, CODES_TFhirOperationParameterUseEnum, new) {L1210}
  else if (propName = 'min') then MinElement := asInteger(new) {L1222}
  else if (propName = 'max') then MaxElement := asString(new) {L1222}
  else if (propName = 'documentation') then DocumentationElement := asString(new) {L1222}
  else if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirAllTypesEnum, CODES_TFhirAllTypesEnum, new) {L1210}
  else if (propName = 'profile') then ProfileElement := asCanonical(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirParameterDefinition.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirParameterDefinition.fhirType : string;
begin
  result := 'ParameterDefinition';
end;

function TFhirParameterDefinition.Link : TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition(inherited Link);
end;

function TFhirParameterDefinition.Clone : TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition(inherited Clone);
end;

function TFhirParameterDefinition.equals(other : TObject) : boolean; 
var
  o : TFhirParameterDefinition;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirParameterDefinition)) then
    result := false
  else
  begin
    o := TFhirParameterDefinition(other);
    result := compareDeep(nameElement, o.nameElement, true) and compareDeep(useElement, o.useElement, true) and 
      compareDeep(minElement, o.minElement, true) and compareDeep(maxElement, o.maxElement, true) and 
      compareDeep(documentationElement, o.documentationElement, true) and compareDeep(type_Element, o.type_Element, true) and 
      compareDeep(profileElement, o.profileElement, true);
  end;
end;

function TFhirParameterDefinition.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FName) and isEmptyProp(FUse) and isEmptyProp(FMin) and isEmptyProp(FMax) and isEmptyProp(FDocumentation) and isEmptyProp(FType_) and isEmptyProp(FProfile);
end;

procedure TFhirParameterDefinition.SetName(value : TFhirCode);
begin
  FName.free;
  FName := value; {L1134}
end;

function TFhirParameterDefinition.GetNameST : String;
begin
  if FName = nil then
    result := ''
  else
    result := FName.value;
end;

procedure TFhirParameterDefinition.SetNameST(value : String);
begin
  if value <> '' then
  begin
    if FName = nil then
      FName := TFhirCode.create;
    FName.value := value
  end
  else if FName <> nil then
    FName.value := '';
end;

procedure TFhirParameterDefinition.SetUse(value : TFhirEnum);
begin
  FUse.free;
  FUse := value;
end;

function TFhirParameterDefinition.GetUseST : TFhirOperationParameterUseEnum;
begin
  if FUse = nil then
    result := TFhirOperationParameterUseEnum(0)
  else
    result := TFhirOperationParameterUseEnum(StringArrayIndexOfSensitive(CODES_TFhirOperationParameterUseEnum, FUse.value));
end;

procedure TFhirParameterDefinition.SetUseST(value : TFhirOperationParameterUseEnum);
begin
  if ord(value) = 0 then
    UseElement := nil
  else
    UseElement := TFhirEnum.create(SYSTEMS_TFhirOperationParameterUseEnum[value], CODES_TFhirOperationParameterUseEnum[value]);
end;

procedure TFhirParameterDefinition.SetMin(value : TFhirInteger);
begin
  FMin.free;
  FMin := value; {L1134}
end;

function TFhirParameterDefinition.GetMinST : String;
begin
  if FMin = nil then
    result := ''
  else
    result := FMin.value;
end;

procedure TFhirParameterDefinition.SetMinST(value : String);
begin
  if value <> '' then
  begin
    if FMin = nil then
      FMin := TFhirInteger.create;
    FMin.value := value
  end
  else if FMin <> nil then
    FMin.value := '';
end;

procedure TFhirParameterDefinition.SetMax(value : TFhirString);
begin
  FMax.free;
  FMax := value; {L1134}
end;

function TFhirParameterDefinition.GetMaxST : String;
begin
  if FMax = nil then
    result := ''
  else
    result := FMax.value;
end;

procedure TFhirParameterDefinition.SetMaxST(value : String);
begin
  if value <> '' then
  begin
    if FMax = nil then
      FMax := TFhirString.create;
    FMax.value := value
  end
  else if FMax <> nil then
    FMax.value := '';
end;

procedure TFhirParameterDefinition.SetDocumentation(value : TFhirString);
begin
  FDocumentation.free;
  FDocumentation := value; {L1134}
end;

function TFhirParameterDefinition.GetDocumentationST : String;
begin
  if FDocumentation = nil then
    result := ''
  else
    result := FDocumentation.value;
end;

procedure TFhirParameterDefinition.SetDocumentationST(value : String);
begin
  if value <> '' then
  begin
    if FDocumentation = nil then
      FDocumentation := TFhirString.create;
    FDocumentation.value := value
  end
  else if FDocumentation <> nil then
    FDocumentation.value := '';
end;

procedure TFhirParameterDefinition.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirParameterDefinition.GetType_ST : TFhirAllTypesEnum;
begin
  if FType_ = nil then
    result := TFhirAllTypesEnum(0)
  else
    result := TFhirAllTypesEnum(StringArrayIndexOfSensitive(CODES_TFhirAllTypesEnum, FType_.value));
end;

procedure TFhirParameterDefinition.SetType_ST(value : TFhirAllTypesEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirAllTypesEnum[value], CODES_TFhirAllTypesEnum[value]);
end;

procedure TFhirParameterDefinition.SetProfile(value : TFhirCanonical);
begin
  FProfile.free;
  FProfile := value; {L1134}
end;

function TFhirParameterDefinition.GetProfileST : String;
begin
  if FProfile = nil then
    result := ''
  else
    result := FProfile.value;
end;

procedure TFhirParameterDefinition.SetProfileST(value : String);
begin
  if value <> '' then
  begin
    if FProfile = nil then
      FProfile := TFhirCanonical.create;
    FProfile.value := value
  end
  else if FProfile <> nil then
    FProfile.value := '';
end;

procedure TFhirParameterDefinition.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('name');
  fields.add('use');
  fields.add('min');
  fields.add('max');
  fields.add('documentation');
  fields.add('type');
  fields.add('profile');
end;

function TFhirParameterDefinition.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FName.sizeInBytes);
  inc(result, FUse.sizeInBytes);
  inc(result, FMin.sizeInBytes);
  inc(result, FMax.sizeInBytes);
  inc(result, FDocumentation.sizeInBytes);
  inc(result, FType_.sizeInBytes);
  inc(result, FProfile.sizeInBytes);
end;

{ TFhirParameterDefinitionListEnumerator }

constructor TFhirParameterDefinitionListEnumerator.Create(list : TFhirParameterDefinitionList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirParameterDefinitionListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirParameterDefinitionListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirParameterDefinitionListEnumerator.GetCurrent : TFhirParameterDefinition;
begin
  Result := FList[FIndex];
end;

function TFhirParameterDefinitionListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirParameterDefinitionList }

procedure TFhirParameterDefinitionList.AddItem(value: TFhirParameterDefinition);
begin
  assert(value.ClassName = 'TFhirParameterDefinition', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirParameterDefinition');
  add(value);
end;

function TFhirParameterDefinitionList.Append: TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirParameterDefinitionList.ClearItems;
begin
  Clear;
end;

function TFhirParameterDefinitionList.GetEnumerator : TFhirParameterDefinitionListEnumerator;
begin
  result := TFhirParameterDefinitionListEnumerator.Create(self.link);
end;

function TFhirParameterDefinitionList.Clone: TFhirParameterDefinitionList;
begin
  result := TFhirParameterDefinitionList(inherited Clone);
end;

function TFhirParameterDefinitionList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirParameterDefinitionList.GetItemN(index: Integer): TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition(ObjectByIndex[index]);
end;

function TFhirParameterDefinitionList.ItemClass: TFslObjectClass;
begin
  result := TFhirParameterDefinition;
end;
function TFhirParameterDefinitionList.IndexOf(value: TFhirParameterDefinition): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirParameterDefinitionList.Insert(index: Integer): TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirParameterDefinitionList.InsertItem(index: Integer; value: TFhirParameterDefinition);
begin
  assert(value is TFhirParameterDefinition);
  Inherited Insert(index, value);
end;

function TFhirParameterDefinitionList.Item(index: Integer): TFhirParameterDefinition;
begin
  result := TFhirParameterDefinition(ObjectByIndex[index]);
end;

function TFhirParameterDefinitionList.Link: TFhirParameterDefinitionList;
begin
  result := TFhirParameterDefinitionList(inherited Link);
end;

procedure TFhirParameterDefinitionList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirParameterDefinitionList.SetItemByIndex(index: Integer; value: TFhirParameterDefinition);
begin
  assert(value is TFhirParameterDefinition);
  FhirParameterDefinitions[index] := value;
end;

procedure TFhirParameterDefinitionList.SetItemN(index: Integer; value: TFhirParameterDefinition);
begin
  assert(value is TFhirParameterDefinition);
  ObjectByIndex[index] := value;
end;

{ TFhirPeriod }

constructor TFhirPeriod.Create;
begin
  inherited;
end;

destructor TFhirPeriod.Destroy;
begin
  FStart.free;
  FEnd_.free;
  inherited;
end;

procedure TFhirPeriod.Assign(oSource : TFslObject);
begin
  inherited;
  startElement := TFhirPeriod(oSource).startElement.Clone;
  end_Element := TFhirPeriod(oSource).end_Element.Clone;
end;

procedure TFhirPeriod.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'start') Then
     list.add(self.link, 'start', FStart.Link);
  if (child_name = 'end') Then
     list.add(self.link, 'end', FEnd_.Link);
end;

procedure TFhirPeriod.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'start', 'dateTime', false, TFhirDateTime, FStart.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'end', 'dateTime', false, TFhirDateTime, FEnd_.Link)); {L1172}
end;

function TFhirPeriod.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'start') then
  begin
    StartElement := asDateTime(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'end') then
  begin
    End_Element := asDateTime(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirPeriod.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirPeriod.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'start') then result := TFhirDateTime.create() {L1223}
  else if (propName = 'end') then result := TFhirDateTime.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirPeriod.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'start') then result := 'dateTime'
  else if (propName = 'end') then result := 'dateTime'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirPeriod.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'start') then StartElement := nil
  else if (propName = 'end') then End_Element := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirPeriod.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'start') then StartElement := asDateTime(new) {L1222}
  else if (propName = 'end') then End_Element := asDateTime(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirPeriod.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirPeriod.fhirType : string;
begin
  result := 'Period';
end;

function TFhirPeriod.Link : TFhirPeriod;
begin
  result := TFhirPeriod(inherited Link);
end;

function TFhirPeriod.Clone : TFhirPeriod;
begin
  result := TFhirPeriod(inherited Clone);
end;

function TFhirPeriod.equals(other : TObject) : boolean; 
var
  o : TFhirPeriod;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirPeriod)) then
    result := false
  else
  begin
    o := TFhirPeriod(other);
    result := compareDeep(startElement, o.startElement, true) and compareDeep(end_Element, o.end_Element, true);
  end;
end;

function TFhirPeriod.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FStart) and isEmptyProp(FEnd_);
end;

procedure TFhirPeriod.SetStart(value : TFhirDateTime);
begin
  FStart.free;
  FStart := value; {L1134}
end;

function TFhirPeriod.GetStartST : TFslDateTime;
begin
  if FStart = nil then
    result := TFslDateTime.makeNull
  else
    result := FStart.value;
end;

procedure TFhirPeriod.SetStartST(value : TFslDateTime);
begin
  if FStart = nil then
    FStart := TFhirDateTime.create;
  FStart.value := value
end;

procedure TFhirPeriod.SetEnd_(value : TFhirDateTime);
begin
  FEnd_.free;
  FEnd_ := value; {L1134}
end;

function TFhirPeriod.GetEnd_ST : TFslDateTime;
begin
  if FEnd_ = nil then
    result := TFslDateTime.makeNull
  else
    result := FEnd_.value;
end;

procedure TFhirPeriod.SetEnd_ST(value : TFslDateTime);
begin
  if FEnd_ = nil then
    FEnd_ := TFhirDateTime.create;
  FEnd_.value := value
end;

procedure TFhirPeriod.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('start');
  fields.add('end');
end;

function TFhirPeriod.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FStart.sizeInBytes);
  inc(result, FEnd_.sizeInBytes);
end;

{ TFhirPeriodListEnumerator }

constructor TFhirPeriodListEnumerator.Create(list : TFhirPeriodList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirPeriodListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirPeriodListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirPeriodListEnumerator.GetCurrent : TFhirPeriod;
begin
  Result := FList[FIndex];
end;

function TFhirPeriodListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirPeriodList }

procedure TFhirPeriodList.AddItem(value: TFhirPeriod);
begin
  assert(value.ClassName = 'TFhirPeriod', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirPeriod');
  add(value);
end;

function TFhirPeriodList.Append: TFhirPeriod;
begin
  result := TFhirPeriod.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirPeriodList.ClearItems;
begin
  Clear;
end;

function TFhirPeriodList.GetEnumerator : TFhirPeriodListEnumerator;
begin
  result := TFhirPeriodListEnumerator.Create(self.link);
end;

function TFhirPeriodList.Clone: TFhirPeriodList;
begin
  result := TFhirPeriodList(inherited Clone);
end;

function TFhirPeriodList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirPeriodList.GetItemN(index: Integer): TFhirPeriod;
begin
  result := TFhirPeriod(ObjectByIndex[index]);
end;

function TFhirPeriodList.ItemClass: TFslObjectClass;
begin
  result := TFhirPeriod;
end;
function TFhirPeriodList.IndexOf(value: TFhirPeriod): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirPeriodList.Insert(index: Integer): TFhirPeriod;
begin
  result := TFhirPeriod.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirPeriodList.InsertItem(index: Integer; value: TFhirPeriod);
begin
  assert(value is TFhirPeriod);
  Inherited Insert(index, value);
end;

function TFhirPeriodList.Item(index: Integer): TFhirPeriod;
begin
  result := TFhirPeriod(ObjectByIndex[index]);
end;

function TFhirPeriodList.Link: TFhirPeriodList;
begin
  result := TFhirPeriodList(inherited Link);
end;

procedure TFhirPeriodList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirPeriodList.SetItemByIndex(index: Integer; value: TFhirPeriod);
begin
  assert(value is TFhirPeriod);
  FhirPeriods[index] := value;
end;

procedure TFhirPeriodList.SetItemN(index: Integer; value: TFhirPeriod);
begin
  assert(value is TFhirPeriod);
  ObjectByIndex[index] := value;
end;

{ TFhirQuantity }

constructor TFhirQuantity.Create;
begin
  inherited;
end;

destructor TFhirQuantity.Destroy;
begin
  FValue.free;
  FComparator.free;
  FUnit_.free;
  FSystem.free;
  FCode.free;
  inherited;
end;

procedure TFhirQuantity.Assign(oSource : TFslObject);
begin
  inherited;
  valueElement := TFhirQuantity(oSource).valueElement.Clone;
  comparatorElement := TFhirQuantity(oSource).comparatorElement.Clone;
  unit_Element := TFhirQuantity(oSource).unit_Element.Clone;
  systemElement := TFhirQuantity(oSource).systemElement.Clone;
  codeElement := TFhirQuantity(oSource).codeElement.Clone;
end;

procedure TFhirQuantity.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'value') Then
     list.add(self.link, 'value', FValue.Link);
  if (child_name = 'comparator') Then
     list.add(self.link, 'comparator', FComparator.Link);
  if (child_name = 'unit') Then
     list.add(self.link, 'unit', FUnit_.Link);
  if (child_name = 'system') Then
     list.add(self.link, 'system', FSystem.Link);
  if (child_name = 'code') Then
     list.add(self.link, 'code', FCode.Link);
end;

procedure TFhirQuantity.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'value', 'decimal', false, TFhirDecimal, FValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'comparator', 'code', false, TFhirEnum, FComparator.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'unit', 'string', false, TFhirString, FUnit_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'system', 'uri', false, TFhirUri, FSystem.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'code', 'code', false, TFhirCode, FCode.Link)); {L1172}
end;

procedure TFhirQuantity.listQuantityFieldsInOrder(fields: TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('value');
  fields.add('comparator');
  fields.add('unit');
  fields.add('system');
  fields.add('code');
end;

function TFhirQuantity.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'value') then
  begin
    ValueElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'comparator') then
  begin
    ComparatorElement := asEnum(SYSTEMS_TFhirQuantityComparatorEnum, CODES_TFhirQuantityComparatorEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'unit') then
  begin
    Unit_Element := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'system') then
  begin
    SystemElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'code') then
  begin
    CodeElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirQuantity.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirQuantity.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'value') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'comparator') then result := TFhirEnum.create(SYSTEMS_TFhirQuantityComparatorEnum[QuantityComparatorNull], CODES_TFhirQuantityComparatorEnum[QuantityComparatorNull])  {L1211}
  else if (propName = 'unit') then result := TFhirString.create() {L1223}
  else if (propName = 'system') then result := TFhirUri.create() {L1223}
  else if (propName = 'code') then result := TFhirCode.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirQuantity.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'value') then result := 'decimal'
  else if (propName = 'comparator') then result := 'code'
  else if (propName = 'unit') then result := 'string'
  else if (propName = 'system') then result := 'uri'
  else if (propName = 'code') then result := 'code'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirQuantity.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'value') then ValueElement := nil
  else if (propName = 'comparator') then ComparatorElement := nil
  else if (propName = 'unit') then Unit_Element := nil
  else if (propName = 'system') then SystemElement := nil
  else if (propName = 'code') then CodeElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirQuantity.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'value') then ValueElement := asDecimal(new) {L1222}
  else if (propName = 'comparator') then ComparatorElement := asEnum(SYSTEMS_TFhirQuantityComparatorEnum, CODES_TFhirQuantityComparatorEnum, new) {L1210}
  else if (propName = 'unit') then Unit_Element := asString(new) {L1222}
  else if (propName = 'system') then SystemElement := asUri(new) {L1222}
  else if (propName = 'code') then CodeElement := asCode(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirQuantity.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirQuantity.fhirType : string;
begin
  result := 'Quantity';
end;

function TFhirQuantity.Link : TFhirQuantity;
begin
  result := TFhirQuantity(inherited Link);
end;

function TFhirQuantity.Clone : TFhirQuantity;
begin
  result := TFhirQuantity(inherited Clone);
end;

function TFhirQuantity.equals(other : TObject) : boolean; 
var
  o : TFhirQuantity;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirQuantity)) then
    result := false
  else
  begin
    o := TFhirQuantity(other);
    result := compareDeep(valueElement, o.valueElement, true) and compareDeep(comparatorElement, o.comparatorElement, true) and 
      compareDeep(unit_Element, o.unit_Element, true) and compareDeep(systemElement, o.systemElement, true) and 
      compareDeep(codeElement, o.codeElement, true);
  end;
end;

function TFhirQuantity.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FValue) and isEmptyProp(FComparator) and isEmptyProp(FUnit_) and isEmptyProp(FSystem) and isEmptyProp(FCode);
end;

procedure TFhirQuantity.SetValue(value : TFhirDecimal);
begin
  FValue.free;
  FValue := value; {L1134}
end;

function TFhirQuantity.GetValueST : String;
begin
  if FValue = nil then
    result := ''
  else
    result := FValue.value;
end;

procedure TFhirQuantity.SetValueST(value : String);
begin
  if value <> '' then
  begin
    if FValue = nil then
      FValue := TFhirDecimal.create;
    FValue.value := value
  end
  else if FValue <> nil then
    FValue.value := '';
end;

procedure TFhirQuantity.SetComparator(value : TFhirEnum);
begin
  FComparator.free;
  FComparator := value;
end;

function TFhirQuantity.GetComparatorST : TFhirQuantityComparatorEnum;
begin
  if FComparator = nil then
    result := TFhirQuantityComparatorEnum(0)
  else
    result := TFhirQuantityComparatorEnum(StringArrayIndexOfSensitive(CODES_TFhirQuantityComparatorEnum, FComparator.value));
end;

procedure TFhirQuantity.SetComparatorST(value : TFhirQuantityComparatorEnum);
begin
  if ord(value) = 0 then
    ComparatorElement := nil
  else
    ComparatorElement := TFhirEnum.create(SYSTEMS_TFhirQuantityComparatorEnum[value], CODES_TFhirQuantityComparatorEnum[value]);
end;

procedure TFhirQuantity.SetUnit_(value : TFhirString);
begin
  FUnit_.free;
  FUnit_ := value; {L1134}
end;

function TFhirQuantity.GetUnit_ST : String;
begin
  if FUnit_ = nil then
    result := ''
  else
    result := FUnit_.value;
end;

procedure TFhirQuantity.SetUnit_ST(value : String);
begin
  if value <> '' then
  begin
    if FUnit_ = nil then
      FUnit_ := TFhirString.create;
    FUnit_.value := value
  end
  else if FUnit_ <> nil then
    FUnit_.value := '';
end;

procedure TFhirQuantity.SetSystem(value : TFhirUri);
begin
  FSystem.free;
  FSystem := value; {L1134}
end;

function TFhirQuantity.GetSystemST : String;
begin
  if FSystem = nil then
    result := ''
  else
    result := FSystem.value;
end;

procedure TFhirQuantity.SetSystemST(value : String);
begin
  if value <> '' then
  begin
    if FSystem = nil then
      FSystem := TFhirUri.create;
    FSystem.value := value
  end
  else if FSystem <> nil then
    FSystem.value := '';
end;

procedure TFhirQuantity.SetCode(value : TFhirCode);
begin
  FCode.free;
  FCode := value; {L1134}
end;

function TFhirQuantity.GetCodeST : String;
begin
  if FCode = nil then
    result := ''
  else
    result := FCode.value;
end;

procedure TFhirQuantity.SetCodeST(value : String);
begin
  if value <> '' then
  begin
    if FCode = nil then
      FCode := TFhirCode.create;
    FCode.value := value
  end
  else if FCode <> nil then
    FCode.value := '';
end;

procedure TFhirQuantity.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('value');
  fields.add('comparator');
  fields.add('unit');
  fields.add('system');
  fields.add('code');
end;

function TFhirQuantity.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FValue.sizeInBytes);
  inc(result, FComparator.sizeInBytes);
  inc(result, FUnit_.sizeInBytes);
  inc(result, FSystem.sizeInBytes);
  inc(result, FCode.sizeInBytes);
end;

{ TFhirQuantityListEnumerator }

constructor TFhirQuantityListEnumerator.Create(list : TFhirQuantityList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirQuantityListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirQuantityListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirQuantityListEnumerator.GetCurrent : TFhirQuantity;
begin
  Result := FList[FIndex];
end;

function TFhirQuantityListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirQuantityList }

procedure TFhirQuantityList.AddItem(value: TFhirQuantity);
begin
  assert(value.ClassName = 'TFhirQuantity', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirQuantity');
  add(value);
end;

function TFhirQuantityList.Append: TFhirQuantity;
begin
  result := TFhirQuantity.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirQuantityList.ClearItems;
begin
  Clear;
end;

function TFhirQuantityList.GetEnumerator : TFhirQuantityListEnumerator;
begin
  result := TFhirQuantityListEnumerator.Create(self.link);
end;

function TFhirQuantityList.Clone: TFhirQuantityList;
begin
  result := TFhirQuantityList(inherited Clone);
end;

function TFhirQuantityList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirQuantityList.GetItemN(index: Integer): TFhirQuantity;
begin
  result := TFhirQuantity(ObjectByIndex[index]);
end;

function TFhirQuantityList.ItemClass: TFslObjectClass;
begin
  result := TFhirQuantity;
end;
function TFhirQuantityList.IndexOf(value: TFhirQuantity): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirQuantityList.Insert(index: Integer): TFhirQuantity;
begin
  result := TFhirQuantity.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirQuantityList.InsertItem(index: Integer; value: TFhirQuantity);
begin
  assert(value is TFhirQuantity);
  Inherited Insert(index, value);
end;

function TFhirQuantityList.Item(index: Integer): TFhirQuantity;
begin
  result := TFhirQuantity(ObjectByIndex[index]);
end;

function TFhirQuantityList.Link: TFhirQuantityList;
begin
  result := TFhirQuantityList(inherited Link);
end;

procedure TFhirQuantityList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirQuantityList.SetItemByIndex(index: Integer; value: TFhirQuantity);
begin
  assert(value is TFhirQuantity);
  FhirQuantities[index] := value;
end;

procedure TFhirQuantityList.SetItemN(index: Integer; value: TFhirQuantity);
begin
  assert(value is TFhirQuantity);
  ObjectByIndex[index] := value;
end;

{ TFhirRange }

constructor TFhirRange.Create;
begin
  inherited;
end;

destructor TFhirRange.Destroy;
begin
  FLow.free;
  FHigh.free;
  inherited;
end;

procedure TFhirRange.Assign(oSource : TFslObject);
begin
  inherited;
  low := TFhirRange(oSource).low.Clone;
  high := TFhirRange(oSource).high.Clone;
end;

procedure TFhirRange.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'low') Then
     list.add(self.link, 'low', FLow.Link);
  if (child_name = 'high') Then
     list.add(self.link, 'high', FHigh.Link);
end;

procedure TFhirRange.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'low', 'Quantity', false, TFhirQuantity, FLow.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'high', 'Quantity', false, TFhirQuantity, FHigh.Link)); {L1172}
end;

function TFhirRange.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'low') then
  begin
    Low := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'high') then
  begin
    High := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirRange.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirRange.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'low') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'high') then result := TFhirQuantity.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirRange.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'low') then result := 'Quantity'
  else if (propName = 'high') then result := 'Quantity'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirRange.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'low') then LowElement := nil
  else if (propName = 'high') then HighElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirRange.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'low') then LowElement := new as TFhirQuantity {L1195}
  else if (propName = 'high') then HighElement := new as TFhirQuantity {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirRange.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirRange.fhirType : string;
begin
  result := 'Range';
end;

function TFhirRange.Link : TFhirRange;
begin
  result := TFhirRange(inherited Link);
end;

function TFhirRange.Clone : TFhirRange;
begin
  result := TFhirRange(inherited Clone);
end;

function TFhirRange.equals(other : TObject) : boolean; 
var
  o : TFhirRange;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirRange)) then
    result := false
  else
  begin
    o := TFhirRange(other);
    result := compareDeep(lowElement, o.lowElement, true) and compareDeep(highElement, o.highElement, true);
  end;
end;

function TFhirRange.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FLow) and isEmptyProp(FHigh);
end;

procedure TFhirRange.SetLow(value : TFhirQuantity);
begin
  FLow.free;
  FLow := value; {L1134}
end;

procedure TFhirRange.SetHigh(value : TFhirQuantity);
begin
  FHigh.free;
  FHigh := value; {L1134}
end;

procedure TFhirRange.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('low');
  fields.add('high');
end;

function TFhirRange.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FLow.sizeInBytes);
  inc(result, FHigh.sizeInBytes);
end;

{ TFhirRangeListEnumerator }

constructor TFhirRangeListEnumerator.Create(list : TFhirRangeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirRangeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirRangeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirRangeListEnumerator.GetCurrent : TFhirRange;
begin
  Result := FList[FIndex];
end;

function TFhirRangeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirRangeList }

procedure TFhirRangeList.AddItem(value: TFhirRange);
begin
  assert(value.ClassName = 'TFhirRange', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirRange');
  add(value);
end;

function TFhirRangeList.Append: TFhirRange;
begin
  result := TFhirRange.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirRangeList.ClearItems;
begin
  Clear;
end;

function TFhirRangeList.GetEnumerator : TFhirRangeListEnumerator;
begin
  result := TFhirRangeListEnumerator.Create(self.link);
end;

function TFhirRangeList.Clone: TFhirRangeList;
begin
  result := TFhirRangeList(inherited Clone);
end;

function TFhirRangeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirRangeList.GetItemN(index: Integer): TFhirRange;
begin
  result := TFhirRange(ObjectByIndex[index]);
end;

function TFhirRangeList.ItemClass: TFslObjectClass;
begin
  result := TFhirRange;
end;
function TFhirRangeList.IndexOf(value: TFhirRange): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirRangeList.Insert(index: Integer): TFhirRange;
begin
  result := TFhirRange.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirRangeList.InsertItem(index: Integer; value: TFhirRange);
begin
  assert(value is TFhirRange);
  Inherited Insert(index, value);
end;

function TFhirRangeList.Item(index: Integer): TFhirRange;
begin
  result := TFhirRange(ObjectByIndex[index]);
end;

function TFhirRangeList.Link: TFhirRangeList;
begin
  result := TFhirRangeList(inherited Link);
end;

procedure TFhirRangeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirRangeList.SetItemByIndex(index: Integer; value: TFhirRange);
begin
  assert(value is TFhirRange);
  FhirRanges[index] := value;
end;

procedure TFhirRangeList.SetItemN(index: Integer; value: TFhirRange);
begin
  assert(value is TFhirRange);
  ObjectByIndex[index] := value;
end;

{ TFhirRatio }

constructor TFhirRatio.Create;
begin
  inherited;
end;

destructor TFhirRatio.Destroy;
begin
  FNumerator.free;
  FDenominator.free;
  inherited;
end;

procedure TFhirRatio.Assign(oSource : TFslObject);
begin
  inherited;
  numerator := TFhirRatio(oSource).numerator.Clone;
  denominator := TFhirRatio(oSource).denominator.Clone;
end;

procedure TFhirRatio.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'numerator') Then
     list.add(self.link, 'numerator', FNumerator.Link);
  if (child_name = 'denominator') Then
     list.add(self.link, 'denominator', FDenominator.Link);
end;

procedure TFhirRatio.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'numerator', 'Quantity', false, TFhirQuantity, FNumerator.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'denominator', 'Quantity', false, TFhirQuantity, FDenominator.Link)); {L1172}
end;

function TFhirRatio.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'numerator') then
  begin
    Numerator := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'denominator') then
  begin
    Denominator := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirRatio.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirRatio.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'numerator') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'denominator') then result := TFhirQuantity.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirRatio.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'numerator') then result := 'Quantity'
  else if (propName = 'denominator') then result := 'Quantity'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirRatio.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'numerator') then NumeratorElement := nil
  else if (propName = 'denominator') then DenominatorElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirRatio.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'numerator') then NumeratorElement := new as TFhirQuantity {L1195}
  else if (propName = 'denominator') then DenominatorElement := new as TFhirQuantity {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirRatio.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirRatio.fhirType : string;
begin
  result := 'Ratio';
end;

function TFhirRatio.Link : TFhirRatio;
begin
  result := TFhirRatio(inherited Link);
end;

function TFhirRatio.Clone : TFhirRatio;
begin
  result := TFhirRatio(inherited Clone);
end;

function TFhirRatio.equals(other : TObject) : boolean; 
var
  o : TFhirRatio;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirRatio)) then
    result := false
  else
  begin
    o := TFhirRatio(other);
    result := compareDeep(numeratorElement, o.numeratorElement, true) and compareDeep(denominatorElement, o.denominatorElement, true);
  end;
end;

function TFhirRatio.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FNumerator) and isEmptyProp(FDenominator);
end;

procedure TFhirRatio.SetNumerator(value : TFhirQuantity);
begin
  FNumerator.free;
  FNumerator := value; {L1134}
end;

procedure TFhirRatio.SetDenominator(value : TFhirQuantity);
begin
  FDenominator.free;
  FDenominator := value; {L1134}
end;

procedure TFhirRatio.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('numerator');
  fields.add('denominator');
end;

function TFhirRatio.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FNumerator.sizeInBytes);
  inc(result, FDenominator.sizeInBytes);
end;

{ TFhirRatioListEnumerator }

constructor TFhirRatioListEnumerator.Create(list : TFhirRatioList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirRatioListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirRatioListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirRatioListEnumerator.GetCurrent : TFhirRatio;
begin
  Result := FList[FIndex];
end;

function TFhirRatioListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirRatioList }

procedure TFhirRatioList.AddItem(value: TFhirRatio);
begin
  assert(value.ClassName = 'TFhirRatio', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirRatio');
  add(value);
end;

function TFhirRatioList.Append: TFhirRatio;
begin
  result := TFhirRatio.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirRatioList.ClearItems;
begin
  Clear;
end;

function TFhirRatioList.GetEnumerator : TFhirRatioListEnumerator;
begin
  result := TFhirRatioListEnumerator.Create(self.link);
end;

function TFhirRatioList.Clone: TFhirRatioList;
begin
  result := TFhirRatioList(inherited Clone);
end;

function TFhirRatioList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirRatioList.GetItemN(index: Integer): TFhirRatio;
begin
  result := TFhirRatio(ObjectByIndex[index]);
end;

function TFhirRatioList.ItemClass: TFslObjectClass;
begin
  result := TFhirRatio;
end;
function TFhirRatioList.IndexOf(value: TFhirRatio): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirRatioList.Insert(index: Integer): TFhirRatio;
begin
  result := TFhirRatio.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirRatioList.InsertItem(index: Integer; value: TFhirRatio);
begin
  assert(value is TFhirRatio);
  Inherited Insert(index, value);
end;

function TFhirRatioList.Item(index: Integer): TFhirRatio;
begin
  result := TFhirRatio(ObjectByIndex[index]);
end;

function TFhirRatioList.Link: TFhirRatioList;
begin
  result := TFhirRatioList(inherited Link);
end;

procedure TFhirRatioList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirRatioList.SetItemByIndex(index: Integer; value: TFhirRatio);
begin
  assert(value is TFhirRatio);
  FhirRatios[index] := value;
end;

procedure TFhirRatioList.SetItemN(index: Integer; value: TFhirRatio);
begin
  assert(value is TFhirRatio);
  ObjectByIndex[index] := value;
end;

{ TFhirReference }

constructor TFhirReference.Create;
begin
  inherited;
end;

destructor TFhirReference.Destroy;
begin
  FReference.free;
  FType_.free;
  FIdentifier.free;
  FDisplay.free;
  inherited;
end;

procedure TFhirReference.Assign(oSource : TFslObject);
begin
  inherited;
  referenceElement := TFhirReference(oSource).referenceElement.Clone;
  type_Element := TFhirReference(oSource).type_Element.Clone;
  identifier := TFhirReference(oSource).identifier.Clone;
  displayElement := TFhirReference(oSource).displayElement.Clone;
end;

procedure TFhirReference.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'reference') Then
     list.add(self.link, 'reference', FReference.Link);
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'identifier') Then
     list.add(self.link, 'identifier', FIdentifier.Link);
  if (child_name = 'display') Then
     list.add(self.link, 'display', FDisplay.Link);
end;

procedure TFhirReference.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'reference', 'string', false, TFhirString, FReference.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'type', 'uri', false, TFhirUri, FType_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'identifier', 'Identifier', false, TFhirIdentifier, FIdentifier.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'display', 'string', false, TFhirString, FDisplay.Link)); {L1172}
end;

function TFhirReference.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'reference') then
  begin
    ReferenceElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_Element := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'identifier') then
  begin
    Identifier := propValue as TFhirIdentifier {L1199};
    result := propValue;
  end
  else if (propName = 'display') then
  begin
    DisplayElement := asString(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirReference.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirReference.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'reference') then result := TFhirString.create() {L1223}
  else if (propName = 'type') then result := TFhirUri.create() {L1223}
  else if (propName = 'identifier') then result := TFhirIdentifier.create() {L1203}
  else if (propName = 'display') then result := TFhirString.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirReference.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'reference') then result := 'string'
  else if (propName = 'type') then result := 'uri'
  else if (propName = 'identifier') then result := 'Identifier'
  else if (propName = 'display') then result := 'string'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirReference.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'reference') then ReferenceElement := nil
  else if (propName = 'type') then Type_Element := nil
  else if (propName = 'identifier') then IdentifierElement := nil
  else if (propName = 'display') then DisplayElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirReference.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'reference') then ReferenceElement := asString(new) {L1222}
  else if (propName = 'type') then Type_Element := asUri(new) {L1222}
  else if (propName = 'identifier') then IdentifierElement := new as TFhirIdentifier {L1195}
  else if (propName = 'display') then DisplayElement := asString(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirReference.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirReference.fhirType : string;
begin
  result := 'Reference';
end;

function TFhirReference.Link : TFhirReference;
begin
  result := TFhirReference(inherited Link);
end;

function TFhirReference.Clone : TFhirReference;
begin
  result := TFhirReference(inherited Clone);
end;

function TFhirReference.equals(other : TObject) : boolean; 
var
  o : TFhirReference;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirReference)) then
    result := false
  else
  begin
    o := TFhirReference(other);
    result := compareDeep(referenceElement, o.referenceElement, true) and compareDeep(type_Element, o.type_Element, true) and 
      compareDeep(identifierElement, o.identifierElement, true) and compareDeep(displayElement, o.displayElement, true);
  end;
end;

function TFhirReference.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FReference) and isEmptyProp(FType_) and isEmptyProp(FIdentifier) and isEmptyProp(FDisplay);
end;

procedure TFhirReference.SetReference(value : TFhirString);
begin
  FReference.free;
  FReference := value; {L1134}
end;

function TFhirReference.GetReferenceST : String;
begin
  if FReference = nil then
    result := ''
  else
    result := FReference.value;
end;

procedure TFhirReference.SetReferenceST(value : String);
begin
  if value <> '' then
  begin
    if FReference = nil then
      FReference := TFhirString.create;
    FReference.value := value
  end
  else if FReference <> nil then
    FReference.value := '';
end;

procedure TFhirReference.SetType_(value : TFhirUri);
begin
  FType_.free;
  FType_ := value; {L1134}
end;

function TFhirReference.GetType_ST : String;
begin
  if FType_ = nil then
    result := ''
  else
    result := FType_.value;
end;

procedure TFhirReference.SetType_ST(value : String);
begin
  if value <> '' then
  begin
    if FType_ = nil then
      FType_ := TFhirUri.create;
    FType_.value := value
  end
  else if FType_ <> nil then
    FType_.value := '';
end;

procedure TFhirReference.SetIdentifier(value : TFhirIdentifier);
begin
  FIdentifier.free;
  FIdentifier := value; {L1134}
end;

procedure TFhirReference.SetDisplay(value : TFhirString);
begin
  FDisplay.free;
  FDisplay := value; {L1134}
end;

function TFhirReference.GetDisplayST : String;
begin
  if FDisplay = nil then
    result := ''
  else
    result := FDisplay.value;
end;

procedure TFhirReference.SetDisplayST(value : String);
begin
  if value <> '' then
  begin
    if FDisplay = nil then
      FDisplay := TFhirString.create;
    FDisplay.value := value
  end
  else if FDisplay <> nil then
    FDisplay.value := '';
end;

procedure TFhirReference.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('reference');
  fields.add('type');
  fields.add('identifier');
  fields.add('display');
end;

function TFhirReference.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FReference.sizeInBytes);
  inc(result, FType_.sizeInBytes);
  inc(result, FIdentifier.sizeInBytes);
  inc(result, FDisplay.sizeInBytes);
end;

{ TFhirReferenceListEnumerator }

constructor TFhirReferenceListEnumerator.Create(list : TFhirReferenceList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirReferenceListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirReferenceListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirReferenceListEnumerator.GetCurrent : TFhirReference;
begin
  Result := FList[FIndex];
end;

function TFhirReferenceListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirReferenceList }

procedure TFhirReferenceList.AddItem(value: TFhirReference);
begin
  assert(value.ClassName = 'TFhirReference', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirReference');
  add(value);
end;

function TFhirReferenceList.Append: TFhirReference;
begin
  result := TFhirReference.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirReferenceList.ClearItems;
begin
  Clear;
end;

function TFhirReferenceList.GetEnumerator : TFhirReferenceListEnumerator;
begin
  result := TFhirReferenceListEnumerator.Create(self.link);
end;

function TFhirReferenceList.Clone: TFhirReferenceList;
begin
  result := TFhirReferenceList(inherited Clone);
end;

function TFhirReferenceList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirReferenceList.GetItemN(index: Integer): TFhirReference;
begin
  result := TFhirReference(ObjectByIndex[index]);
end;

function TFhirReferenceList.ItemClass: TFslObjectClass;
begin
  result := TFhirReference;
end;
function TFhirReferenceList.IndexOf(value: TFhirReference): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirReferenceList.Insert(index: Integer): TFhirReference;
begin
  result := TFhirReference.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirReferenceList.InsertItem(index: Integer; value: TFhirReference);
begin
  assert(value is TFhirReference);
  Inherited Insert(index, value);
end;

function TFhirReferenceList.Item(index: Integer): TFhirReference;
begin
  result := TFhirReference(ObjectByIndex[index]);
end;

function TFhirReferenceList.Link: TFhirReferenceList;
begin
  result := TFhirReferenceList(inherited Link);
end;

procedure TFhirReferenceList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirReferenceList.SetItemByIndex(index: Integer; value: TFhirReference);
begin
  assert(value is TFhirReference);
  FhirReferences[index] := value;
end;

procedure TFhirReferenceList.SetItemN(index: Integer; value: TFhirReference);
begin
  assert(value is TFhirReference);
  ObjectByIndex[index] := value;
end;

{ TFhirRelatedArtifact }

constructor TFhirRelatedArtifact.Create;
begin
  inherited;
end;

destructor TFhirRelatedArtifact.Destroy;
begin
  FType_.free;
  FLabel_.free;
  FDisplay.free;
  FCitation.free;
  FUrl.free;
  FDocument.free;
  FResource.free;
  inherited;
end;

procedure TFhirRelatedArtifact.Assign(oSource : TFslObject);
begin
  inherited;
  type_Element := TFhirRelatedArtifact(oSource).type_Element.Clone;
  label_Element := TFhirRelatedArtifact(oSource).label_Element.Clone;
  displayElement := TFhirRelatedArtifact(oSource).displayElement.Clone;
  citationElement := TFhirRelatedArtifact(oSource).citationElement.Clone;
  urlElement := TFhirRelatedArtifact(oSource).urlElement.Clone;
  document := TFhirRelatedArtifact(oSource).document.Clone;
  resourceElement := TFhirRelatedArtifact(oSource).resourceElement.Clone;
end;

procedure TFhirRelatedArtifact.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'label') Then
     list.add(self.link, 'label', FLabel_.Link);
  if (child_name = 'display') Then
     list.add(self.link, 'display', FDisplay.Link);
  if (child_name = 'citation') Then
     list.add(self.link, 'citation', FCitation.Link);
  if (child_name = 'url') Then
     list.add(self.link, 'url', FUrl.Link);
  if (child_name = 'document') Then
     list.add(self.link, 'document', FDocument.Link);
  if (child_name = 'resource') Then
     list.add(self.link, 'resource', FResource.Link);
end;

procedure TFhirRelatedArtifact.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'label', 'string', false, TFhirString, FLabel_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'display', 'string', false, TFhirString, FDisplay.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'citation', 'markdown', false, TFhirMarkdown, FCitation.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'url', 'url', false, TFhirUrl, FUrl.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'document', 'Attachment', false, TFhirAttachment, FDocument.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'resource', 'canonical', false, TFhirCanonical, FResource.Link)); {L1172}
end;

function TFhirRelatedArtifact.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirRelatedArtifactTypeEnum, CODES_TFhirRelatedArtifactTypeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'label') then
  begin
    Label_Element := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'display') then
  begin
    DisplayElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'citation') then
  begin
    CitationElement := asMarkdown(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'url') then
  begin
    UrlElement := asUrl(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'document') then
  begin
    Document := propValue as TFhirAttachment {L1199};
    result := propValue;
  end
  else if (propName = 'resource') then
  begin
    ResourceElement := asCanonical(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirRelatedArtifact.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirRelatedArtifact.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirRelatedArtifactTypeEnum[RelatedArtifactTypeNull], CODES_TFhirRelatedArtifactTypeEnum[RelatedArtifactTypeNull])  {L1211}
  else if (propName = 'label') then result := TFhirString.create() {L1223}
  else if (propName = 'display') then result := TFhirString.create() {L1223}
  else if (propName = 'citation') then result := TFhirMarkdown.create() {L1223}
  else if (propName = 'url') then result := TFhirUrl.create() {L1223}
  else if (propName = 'document') then result := TFhirAttachment.create() {L1203}
  else if (propName = 'resource') then result := TFhirCanonical.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirRelatedArtifact.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'code'
  else if (propName = 'label') then result := 'string'
  else if (propName = 'display') then result := 'string'
  else if (propName = 'citation') then result := 'markdown'
  else if (propName = 'url') then result := 'url'
  else if (propName = 'document') then result := 'Attachment'
  else if (propName = 'resource') then result := 'canonical'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirRelatedArtifact.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (propName = 'label') then Label_Element := nil
  else if (propName = 'display') then DisplayElement := nil
  else if (propName = 'citation') then CitationElement := nil
  else if (propName = 'url') then UrlElement := nil
  else if (propName = 'document') then DocumentElement := nil
  else if (propName = 'resource') then ResourceElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirRelatedArtifact.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirRelatedArtifactTypeEnum, CODES_TFhirRelatedArtifactTypeEnum, new) {L1210}
  else if (propName = 'label') then Label_Element := asString(new) {L1222}
  else if (propName = 'display') then DisplayElement := asString(new) {L1222}
  else if (propName = 'citation') then CitationElement := asMarkdown(new) {L1222}
  else if (propName = 'url') then UrlElement := asUrl(new) {L1222}
  else if (propName = 'document') then DocumentElement := new as TFhirAttachment {L1195}
  else if (propName = 'resource') then ResourceElement := asCanonical(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirRelatedArtifact.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirRelatedArtifact.fhirType : string;
begin
  result := 'RelatedArtifact';
end;

function TFhirRelatedArtifact.Link : TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact(inherited Link);
end;

function TFhirRelatedArtifact.Clone : TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact(inherited Clone);
end;

function TFhirRelatedArtifact.equals(other : TObject) : boolean; 
var
  o : TFhirRelatedArtifact;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirRelatedArtifact)) then
    result := false
  else
  begin
    o := TFhirRelatedArtifact(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(label_Element, o.label_Element, true) and 
      compareDeep(displayElement, o.displayElement, true) and compareDeep(citationElement, o.citationElement, true) and 
      compareDeep(urlElement, o.urlElement, true) and compareDeep(documentElement, o.documentElement, true) and 
      compareDeep(resourceElement, o.resourceElement, true);
  end;
end;

function TFhirRelatedArtifact.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FLabel_) and isEmptyProp(FDisplay) and isEmptyProp(FCitation) and isEmptyProp(FUrl) and isEmptyProp(FDocument) and isEmptyProp(FResource);
end;

procedure TFhirRelatedArtifact.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirRelatedArtifact.GetType_ST : TFhirRelatedArtifactTypeEnum;
begin
  if FType_ = nil then
    result := TFhirRelatedArtifactTypeEnum(0)
  else
    result := TFhirRelatedArtifactTypeEnum(StringArrayIndexOfSensitive(CODES_TFhirRelatedArtifactTypeEnum, FType_.value));
end;

procedure TFhirRelatedArtifact.SetType_ST(value : TFhirRelatedArtifactTypeEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirRelatedArtifactTypeEnum[value], CODES_TFhirRelatedArtifactTypeEnum[value]);
end;

procedure TFhirRelatedArtifact.SetLabel_(value : TFhirString);
begin
  FLabel_.free;
  FLabel_ := value; {L1134}
end;

function TFhirRelatedArtifact.GetLabel_ST : String;
begin
  if FLabel_ = nil then
    result := ''
  else
    result := FLabel_.value;
end;

procedure TFhirRelatedArtifact.SetLabel_ST(value : String);
begin
  if value <> '' then
  begin
    if FLabel_ = nil then
      FLabel_ := TFhirString.create;
    FLabel_.value := value
  end
  else if FLabel_ <> nil then
    FLabel_.value := '';
end;

procedure TFhirRelatedArtifact.SetDisplay(value : TFhirString);
begin
  FDisplay.free;
  FDisplay := value; {L1134}
end;

function TFhirRelatedArtifact.GetDisplayST : String;
begin
  if FDisplay = nil then
    result := ''
  else
    result := FDisplay.value;
end;

procedure TFhirRelatedArtifact.SetDisplayST(value : String);
begin
  if value <> '' then
  begin
    if FDisplay = nil then
      FDisplay := TFhirString.create;
    FDisplay.value := value
  end
  else if FDisplay <> nil then
    FDisplay.value := '';
end;

procedure TFhirRelatedArtifact.SetCitation(value : TFhirMarkdown);
begin
  FCitation.free;
  FCitation := value; {L1134}
end;

function TFhirRelatedArtifact.GetCitationST : String;
begin
  if FCitation = nil then
    result := ''
  else
    result := FCitation.value;
end;

procedure TFhirRelatedArtifact.SetCitationST(value : String);
begin
  if value <> '' then
  begin
    if FCitation = nil then
      FCitation := TFhirMarkdown.create;
    FCitation.value := value
  end
  else if FCitation <> nil then
    FCitation.value := '';
end;

procedure TFhirRelatedArtifact.SetUrl(value : TFhirUrl);
begin
  FUrl.free;
  FUrl := value; {L1134}
end;

function TFhirRelatedArtifact.GetUrlST : String;
begin
  if FUrl = nil then
    result := ''
  else
    result := FUrl.value;
end;

procedure TFhirRelatedArtifact.SetUrlST(value : String);
begin
  if value <> '' then
  begin
    if FUrl = nil then
      FUrl := TFhirUrl.create;
    FUrl.value := value
  end
  else if FUrl <> nil then
    FUrl.value := '';
end;

procedure TFhirRelatedArtifact.SetDocument(value : TFhirAttachment);
begin
  FDocument.free;
  FDocument := value; {L1134}
end;

procedure TFhirRelatedArtifact.SetResource(value : TFhirCanonical);
begin
  FResource.free;
  FResource := value; {L1134}
end;

function TFhirRelatedArtifact.GetResourceST : String;
begin
  if FResource = nil then
    result := ''
  else
    result := FResource.value;
end;

procedure TFhirRelatedArtifact.SetResourceST(value : String);
begin
  if value <> '' then
  begin
    if FResource = nil then
      FResource := TFhirCanonical.create;
    FResource.value := value
  end
  else if FResource <> nil then
    FResource.value := '';
end;

procedure TFhirRelatedArtifact.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('label');
  fields.add('display');
  fields.add('citation');
  fields.add('url');
  fields.add('document');
  fields.add('resource');
end;

function TFhirRelatedArtifact.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FLabel_.sizeInBytes);
  inc(result, FDisplay.sizeInBytes);
  inc(result, FCitation.sizeInBytes);
  inc(result, FUrl.sizeInBytes);
  inc(result, FDocument.sizeInBytes);
  inc(result, FResource.sizeInBytes);
end;

{ TFhirRelatedArtifactListEnumerator }

constructor TFhirRelatedArtifactListEnumerator.Create(list : TFhirRelatedArtifactList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirRelatedArtifactListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirRelatedArtifactListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirRelatedArtifactListEnumerator.GetCurrent : TFhirRelatedArtifact;
begin
  Result := FList[FIndex];
end;

function TFhirRelatedArtifactListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirRelatedArtifactList }

procedure TFhirRelatedArtifactList.AddItem(value: TFhirRelatedArtifact);
begin
  assert(value.ClassName = 'TFhirRelatedArtifact', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirRelatedArtifact');
  add(value);
end;

function TFhirRelatedArtifactList.Append: TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirRelatedArtifactList.ClearItems;
begin
  Clear;
end;

function TFhirRelatedArtifactList.GetEnumerator : TFhirRelatedArtifactListEnumerator;
begin
  result := TFhirRelatedArtifactListEnumerator.Create(self.link);
end;

function TFhirRelatedArtifactList.Clone: TFhirRelatedArtifactList;
begin
  result := TFhirRelatedArtifactList(inherited Clone);
end;

function TFhirRelatedArtifactList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirRelatedArtifactList.GetItemN(index: Integer): TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact(ObjectByIndex[index]);
end;

function TFhirRelatedArtifactList.ItemClass: TFslObjectClass;
begin
  result := TFhirRelatedArtifact;
end;
function TFhirRelatedArtifactList.IndexOf(value: TFhirRelatedArtifact): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirRelatedArtifactList.Insert(index: Integer): TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirRelatedArtifactList.InsertItem(index: Integer; value: TFhirRelatedArtifact);
begin
  assert(value is TFhirRelatedArtifact);
  Inherited Insert(index, value);
end;

function TFhirRelatedArtifactList.Item(index: Integer): TFhirRelatedArtifact;
begin
  result := TFhirRelatedArtifact(ObjectByIndex[index]);
end;

function TFhirRelatedArtifactList.Link: TFhirRelatedArtifactList;
begin
  result := TFhirRelatedArtifactList(inherited Link);
end;

procedure TFhirRelatedArtifactList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirRelatedArtifactList.SetItemByIndex(index: Integer; value: TFhirRelatedArtifact);
begin
  assert(value is TFhirRelatedArtifact);
  FhirRelatedArtifacts[index] := value;
end;

procedure TFhirRelatedArtifactList.SetItemN(index: Integer; value: TFhirRelatedArtifact);
begin
  assert(value is TFhirRelatedArtifact);
  ObjectByIndex[index] := value;
end;

{ TFhirSampledData }

constructor TFhirSampledData.Create;
begin
  inherited;
end;

destructor TFhirSampledData.Destroy;
begin
  FOrigin.free;
  FPeriod.free;
  FFactor.free;
  FLowerLimit.free;
  FUpperLimit.free;
  FDimensions.free;
  FData.free;
  inherited;
end;

procedure TFhirSampledData.Assign(oSource : TFslObject);
begin
  inherited;
  origin := TFhirSampledData(oSource).origin.Clone;
  periodElement := TFhirSampledData(oSource).periodElement.Clone;
  factorElement := TFhirSampledData(oSource).factorElement.Clone;
  lowerLimitElement := TFhirSampledData(oSource).lowerLimitElement.Clone;
  upperLimitElement := TFhirSampledData(oSource).upperLimitElement.Clone;
  dimensionsElement := TFhirSampledData(oSource).dimensionsElement.Clone;
  dataElement := TFhirSampledData(oSource).dataElement.Clone;
end;

procedure TFhirSampledData.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'origin') Then
     list.add(self.link, 'origin', FOrigin.Link);
  if (child_name = 'period') Then
     list.add(self.link, 'period', FPeriod.Link);
  if (child_name = 'factor') Then
     list.add(self.link, 'factor', FFactor.Link);
  if (child_name = 'lowerLimit') Then
     list.add(self.link, 'lowerLimit', FLowerLimit.Link);
  if (child_name = 'upperLimit') Then
     list.add(self.link, 'upperLimit', FUpperLimit.Link);
  if (child_name = 'dimensions') Then
     list.add(self.link, 'dimensions', FDimensions.Link);
  if (child_name = 'data') Then
     list.add(self.link, 'data', FData.Link);
end;

procedure TFhirSampledData.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'origin', 'Quantity', false, TFhirQuantity, FOrigin.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'period', 'decimal', false, TFhirDecimal, FPeriod.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'factor', 'decimal', false, TFhirDecimal, FFactor.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'lowerLimit', 'decimal', false, TFhirDecimal, FLowerLimit.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'upperLimit', 'decimal', false, TFhirDecimal, FUpperLimit.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'dimensions', 'positiveInt', false, TFhirPositiveInt, FDimensions.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'data', 'string', false, TFhirString, FData.Link)); {L1172}
end;

function TFhirSampledData.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'origin') then
  begin
    Origin := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'period') then
  begin
    PeriodElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'factor') then
  begin
    FactorElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'lowerLimit') then
  begin
    LowerLimitElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'upperLimit') then
  begin
    UpperLimitElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'dimensions') then
  begin
    DimensionsElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'data') then
  begin
    DataElement := asString(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirSampledData.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirSampledData.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'origin') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'period') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'factor') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'lowerLimit') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'upperLimit') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'dimensions') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'data') then result := TFhirString.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirSampledData.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'origin') then result := 'Quantity'
  else if (propName = 'period') then result := 'decimal'
  else if (propName = 'factor') then result := 'decimal'
  else if (propName = 'lowerLimit') then result := 'decimal'
  else if (propName = 'upperLimit') then result := 'decimal'
  else if (propName = 'dimensions') then result := 'positiveInt'
  else if (propName = 'data') then result := 'string'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirSampledData.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'origin') then OriginElement := nil
  else if (propName = 'period') then PeriodElement := nil
  else if (propName = 'factor') then FactorElement := nil
  else if (propName = 'lowerLimit') then LowerLimitElement := nil
  else if (propName = 'upperLimit') then UpperLimitElement := nil
  else if (propName = 'dimensions') then DimensionsElement := nil
  else if (propName = 'data') then DataElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirSampledData.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'origin') then OriginElement := new as TFhirQuantity {L1195}
  else if (propName = 'period') then PeriodElement := asDecimal(new) {L1222}
  else if (propName = 'factor') then FactorElement := asDecimal(new) {L1222}
  else if (propName = 'lowerLimit') then LowerLimitElement := asDecimal(new) {L1222}
  else if (propName = 'upperLimit') then UpperLimitElement := asDecimal(new) {L1222}
  else if (propName = 'dimensions') then DimensionsElement := asPositiveInt(new) {L1222}
  else if (propName = 'data') then DataElement := asString(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirSampledData.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirSampledData.fhirType : string;
begin
  result := 'SampledData';
end;

function TFhirSampledData.Link : TFhirSampledData;
begin
  result := TFhirSampledData(inherited Link);
end;

function TFhirSampledData.Clone : TFhirSampledData;
begin
  result := TFhirSampledData(inherited Clone);
end;

function TFhirSampledData.equals(other : TObject) : boolean; 
var
  o : TFhirSampledData;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirSampledData)) then
    result := false
  else
  begin
    o := TFhirSampledData(other);
    result := compareDeep(originElement, o.originElement, true) and compareDeep(periodElement, o.periodElement, true) and 
      compareDeep(factorElement, o.factorElement, true) and compareDeep(lowerLimitElement, o.lowerLimitElement, true) and 
      compareDeep(upperLimitElement, o.upperLimitElement, true) and compareDeep(dimensionsElement, o.dimensionsElement, true) and 
      compareDeep(dataElement, o.dataElement, true);
  end;
end;

function TFhirSampledData.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FOrigin) and isEmptyProp(FPeriod) and isEmptyProp(FFactor) and isEmptyProp(FLowerLimit) and isEmptyProp(FUpperLimit) and isEmptyProp(FDimensions) and isEmptyProp(FData);
end;

procedure TFhirSampledData.SetOrigin(value : TFhirQuantity);
begin
  FOrigin.free;
  FOrigin := value; {L1134}
end;

procedure TFhirSampledData.SetPeriod(value : TFhirDecimal);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

function TFhirSampledData.GetPeriodST : String;
begin
  if FPeriod = nil then
    result := ''
  else
    result := FPeriod.value;
end;

procedure TFhirSampledData.SetPeriodST(value : String);
begin
  if value <> '' then
  begin
    if FPeriod = nil then
      FPeriod := TFhirDecimal.create;
    FPeriod.value := value
  end
  else if FPeriod <> nil then
    FPeriod.value := '';
end;

procedure TFhirSampledData.SetFactor(value : TFhirDecimal);
begin
  FFactor.free;
  FFactor := value; {L1134}
end;

function TFhirSampledData.GetFactorST : String;
begin
  if FFactor = nil then
    result := ''
  else
    result := FFactor.value;
end;

procedure TFhirSampledData.SetFactorST(value : String);
begin
  if value <> '' then
  begin
    if FFactor = nil then
      FFactor := TFhirDecimal.create;
    FFactor.value := value
  end
  else if FFactor <> nil then
    FFactor.value := '';
end;

procedure TFhirSampledData.SetLowerLimit(value : TFhirDecimal);
begin
  FLowerLimit.free;
  FLowerLimit := value; {L1134}
end;

function TFhirSampledData.GetLowerLimitST : String;
begin
  if FLowerLimit = nil then
    result := ''
  else
    result := FLowerLimit.value;
end;

procedure TFhirSampledData.SetLowerLimitST(value : String);
begin
  if value <> '' then
  begin
    if FLowerLimit = nil then
      FLowerLimit := TFhirDecimal.create;
    FLowerLimit.value := value
  end
  else if FLowerLimit <> nil then
    FLowerLimit.value := '';
end;

procedure TFhirSampledData.SetUpperLimit(value : TFhirDecimal);
begin
  FUpperLimit.free;
  FUpperLimit := value; {L1134}
end;

function TFhirSampledData.GetUpperLimitST : String;
begin
  if FUpperLimit = nil then
    result := ''
  else
    result := FUpperLimit.value;
end;

procedure TFhirSampledData.SetUpperLimitST(value : String);
begin
  if value <> '' then
  begin
    if FUpperLimit = nil then
      FUpperLimit := TFhirDecimal.create;
    FUpperLimit.value := value
  end
  else if FUpperLimit <> nil then
    FUpperLimit.value := '';
end;

procedure TFhirSampledData.SetDimensions(value : TFhirPositiveInt);
begin
  FDimensions.free;
  FDimensions := value; {L1134}
end;

function TFhirSampledData.GetDimensionsST : String;
begin
  if FDimensions = nil then
    result := ''
  else
    result := FDimensions.value;
end;

procedure TFhirSampledData.SetDimensionsST(value : String);
begin
  if value <> '' then
  begin
    if FDimensions = nil then
      FDimensions := TFhirPositiveInt.create;
    FDimensions.value := value
  end
  else if FDimensions <> nil then
    FDimensions.value := '';
end;

procedure TFhirSampledData.SetData(value : TFhirString);
begin
  FData.free;
  FData := value; {L1134}
end;

function TFhirSampledData.GetDataST : String;
begin
  if FData = nil then
    result := ''
  else
    result := FData.value;
end;

procedure TFhirSampledData.SetDataST(value : String);
begin
  if value <> '' then
  begin
    if FData = nil then
      FData := TFhirString.create;
    FData.value := value
  end
  else if FData <> nil then
    FData.value := '';
end;

procedure TFhirSampledData.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('origin');
  fields.add('period');
  fields.add('factor');
  fields.add('lowerLimit');
  fields.add('upperLimit');
  fields.add('dimensions');
  fields.add('data');
end;

function TFhirSampledData.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FOrigin.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
  inc(result, FFactor.sizeInBytes);
  inc(result, FLowerLimit.sizeInBytes);
  inc(result, FUpperLimit.sizeInBytes);
  inc(result, FDimensions.sizeInBytes);
  inc(result, FData.sizeInBytes);
end;

{ TFhirSampledDataListEnumerator }

constructor TFhirSampledDataListEnumerator.Create(list : TFhirSampledDataList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirSampledDataListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirSampledDataListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirSampledDataListEnumerator.GetCurrent : TFhirSampledData;
begin
  Result := FList[FIndex];
end;

function TFhirSampledDataListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirSampledDataList }

procedure TFhirSampledDataList.AddItem(value: TFhirSampledData);
begin
  assert(value.ClassName = 'TFhirSampledData', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirSampledData');
  add(value);
end;

function TFhirSampledDataList.Append: TFhirSampledData;
begin
  result := TFhirSampledData.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirSampledDataList.ClearItems;
begin
  Clear;
end;

function TFhirSampledDataList.GetEnumerator : TFhirSampledDataListEnumerator;
begin
  result := TFhirSampledDataListEnumerator.Create(self.link);
end;

function TFhirSampledDataList.Clone: TFhirSampledDataList;
begin
  result := TFhirSampledDataList(inherited Clone);
end;

function TFhirSampledDataList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirSampledDataList.GetItemN(index: Integer): TFhirSampledData;
begin
  result := TFhirSampledData(ObjectByIndex[index]);
end;

function TFhirSampledDataList.ItemClass: TFslObjectClass;
begin
  result := TFhirSampledData;
end;
function TFhirSampledDataList.IndexOf(value: TFhirSampledData): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirSampledDataList.Insert(index: Integer): TFhirSampledData;
begin
  result := TFhirSampledData.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirSampledDataList.InsertItem(index: Integer; value: TFhirSampledData);
begin
  assert(value is TFhirSampledData);
  Inherited Insert(index, value);
end;

function TFhirSampledDataList.Item(index: Integer): TFhirSampledData;
begin
  result := TFhirSampledData(ObjectByIndex[index]);
end;

function TFhirSampledDataList.Link: TFhirSampledDataList;
begin
  result := TFhirSampledDataList(inherited Link);
end;

procedure TFhirSampledDataList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirSampledDataList.SetItemByIndex(index: Integer; value: TFhirSampledData);
begin
  assert(value is TFhirSampledData);
  FhirSampledData[index] := value;
end;

procedure TFhirSampledDataList.SetItemN(index: Integer; value: TFhirSampledData);
begin
  assert(value is TFhirSampledData);
  ObjectByIndex[index] := value;
end;

{ TFhirSignature }

constructor TFhirSignature.Create;
begin
  inherited;
end;

destructor TFhirSignature.Destroy;
begin
  FType_List.Free;
  FWhen.free;
  FWho.free;
  FOnBehalfOf.free;
  FTargetFormat.free;
  FSigFormat.free;
  FData.free;
  inherited;
end;

procedure TFhirSignature.Assign(oSource : TFslObject);
begin
  inherited;
  if (TFhirSignature(oSource).FType_List = nil) then
  begin
    FType_List.free;
    FType_List := nil;
  end
  else
  begin
    if FType_List = nil then
      FType_List := TFhirCodingList.Create;
    FType_List.Assign(TFhirSignature(oSource).FType_List);
  end;
  whenElement := TFhirSignature(oSource).whenElement.Clone;
  who := TFhirSignature(oSource).who.Clone;
  onBehalfOf := TFhirSignature(oSource).onBehalfOf.Clone;
  targetFormatElement := TFhirSignature(oSource).targetFormatElement.Clone;
  sigFormatElement := TFhirSignature(oSource).sigFormatElement.Clone;
  dataElement := TFhirSignature(oSource).dataElement.Clone;
end;

procedure TFhirSignature.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
    list.addAll(self, 'type', FType_List);
  if (child_name = 'when') Then
     list.add(self.link, 'when', FWhen.Link);
  if (child_name = 'who') Then
     list.add(self.link, 'who', FWho.Link);
  if (child_name = 'onBehalfOf') Then
     list.add(self.link, 'onBehalfOf', FOnBehalfOf.Link);
  if (child_name = 'targetFormat') Then
     list.add(self.link, 'targetFormat', FTargetFormat.Link);
  if (child_name = 'sigFormat') Then
     list.add(self.link, 'sigFormat', FSigFormat.Link);
  if (child_name = 'data') Then
     list.add(self.link, 'data', FData.Link);
end;

procedure TFhirSignature.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'Coding', true, TFhirCoding, FType_List.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'when', 'instant', false, TFhirInstant, FWhen.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'who', 'Reference', false, TFhirReference, FWho.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'onBehalfOf', 'Reference', false, TFhirReference, FOnBehalfOf.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'targetFormat', 'code', false, TFhirCode, FTargetFormat.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'sigFormat', 'code', false, TFhirCode, FSigFormat.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'data', 'base64Binary', false, TFhirBase64Binary, FData.Link)); {L1172}
end;

function TFhirSignature.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_List.add(propValue as TFhirCoding) {L1048};
    result := propValue;
  end
  else if (propName = 'when') then
  begin
    WhenElement := asInstant(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'who') then
  begin
    Who := propValue as TFhirReference {L1199};
    result := propValue;
  end
  else if (propName = 'onBehalfOf') then
  begin
    OnBehalfOf := propValue as TFhirReference {L1199};
    result := propValue;
  end
  else if (propName = 'targetFormat') then
  begin
    TargetFormatElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'sigFormat') then
  begin
    SigFormatElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'data') then
  begin
    DataElement := asBase64Binary(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirSignature.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'type') then Type_List.insertItem(index, propValue as TFhirCoding) {L1049}
  else inherited;
end;

function TFhirSignature.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := Type_List.new() {L1053}
  else if (propName = 'when') then result := TFhirInstant.create() {L1223}
  else if (propName = 'who') then result := TFhirReference.create() {L1203}
  else if (propName = 'onBehalfOf') then result := TFhirReference.create() {L1203}
  else if (propName = 'targetFormat') then result := TFhirCode.create() {L1223}
  else if (propName = 'sigFormat') then result := TFhirCode.create() {L1223}
  else if (propName = 'data') then result := TFhirBase64Binary.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirSignature.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'Coding'
  else if (propName = 'when') then result := 'instant'
  else if (propName = 'who') then result := 'Reference'
  else if (propName = 'onBehalfOf') then result := 'Reference'
  else if (propName = 'targetFormat') then result := 'code'
  else if (propName = 'sigFormat') then result := 'code'
  else if (propName = 'data') then result := 'base64Binary'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirSignature.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then deletePropertyValue('type', Type_List, value) {L1054}
  else if (propName = 'when') then WhenElement := nil
  else if (propName = 'who') then WhoElement := nil
  else if (propName = 'onBehalfOf') then OnBehalfOfElement := nil
  else if (propName = 'targetFormat') then TargetFormatElement := nil
  else if (propName = 'sigFormat') then SigFormatElement := nil
  else if (propName = 'data') then DataElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirSignature.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then replacePropertyValue('type', Type_List, existing, new) {L1055}
  else if (propName = 'when') then WhenElement := asInstant(new) {L1222}
  else if (propName = 'who') then WhoElement := new as TFhirReference {L1195}
  else if (propName = 'onBehalfOf') then OnBehalfOfElement := new as TFhirReference {L1195}
  else if (propName = 'targetFormat') then TargetFormatElement := asCode(new) {L1222}
  else if (propName = 'sigFormat') then SigFormatElement := asCode(new) {L1222}
  else if (propName = 'data') then DataElement := asBase64Binary(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirSignature.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'type') then Type_List.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirSignature.fhirType : string;
begin
  result := 'Signature';
end;

function TFhirSignature.Link : TFhirSignature;
begin
  result := TFhirSignature(inherited Link);
end;

function TFhirSignature.Clone : TFhirSignature;
begin
  result := TFhirSignature(inherited Clone);
end;

function TFhirSignature.equals(other : TObject) : boolean; 
var
  o : TFhirSignature;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirSignature)) then
    result := false
  else
  begin
    o := TFhirSignature(other);
    result := compareDeep(type_List, o.type_List, true) and compareDeep(whenElement, o.whenElement, true) and 
      compareDeep(whoElement, o.whoElement, true) and compareDeep(onBehalfOfElement, o.onBehalfOfElement, true) and 
      compareDeep(targetFormatElement, o.targetFormatElement, true) and compareDeep(sigFormatElement, o.sigFormatElement, true) and 
      compareDeep(dataElement, o.dataElement, true);
  end;
end;

function TFhirSignature.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(Ftype_List) and isEmptyProp(FWhen) and isEmptyProp(FWho) and isEmptyProp(FOnBehalfOf) and isEmptyProp(FTargetFormat) and isEmptyProp(FSigFormat) and isEmptyProp(FData);
end;

function TFhirSignature.GetType_List : TFhirCodingList;
begin
  if FType_List = nil then
    FType_List := TFhirCodingList.Create;
  result := FType_List;
end;

function TFhirSignature.GetHasType_List : boolean;
begin
  result := (FType_List <> nil) and (FType_List.count > 0);
end;

procedure TFhirSignature.SetWhen(value : TFhirInstant);
begin
  FWhen.free;
  FWhen := value; {L1134}
end;

function TFhirSignature.GetWhenST : TFslDateTime;
begin
  if FWhen = nil then
    result := TFslDateTime.makeNull
  else
    result := FWhen.value;
end;

procedure TFhirSignature.SetWhenST(value : TFslDateTime);
begin
  if FWhen = nil then
    FWhen := TFhirInstant.create;
  FWhen.value := value
end;

procedure TFhirSignature.SetWho(value : TFhirReference);
begin
  FWho.free;
  FWho := value; {L1134}
end;

procedure TFhirSignature.SetOnBehalfOf(value : TFhirReference);
begin
  FOnBehalfOf.free;
  FOnBehalfOf := value; {L1134}
end;

procedure TFhirSignature.SetTargetFormat(value : TFhirCode);
begin
  FTargetFormat.free;
  FTargetFormat := value; {L1134}
end;

function TFhirSignature.GetTargetFormatST : String;
begin
  if FTargetFormat = nil then
    result := ''
  else
    result := FTargetFormat.value;
end;

procedure TFhirSignature.SetTargetFormatST(value : String);
begin
  if value <> '' then
  begin
    if FTargetFormat = nil then
      FTargetFormat := TFhirCode.create;
    FTargetFormat.value := value
  end
  else if FTargetFormat <> nil then
    FTargetFormat.value := '';
end;

procedure TFhirSignature.SetSigFormat(value : TFhirCode);
begin
  FSigFormat.free;
  FSigFormat := value; {L1134}
end;

function TFhirSignature.GetSigFormatST : String;
begin
  if FSigFormat = nil then
    result := ''
  else
    result := FSigFormat.value;
end;

procedure TFhirSignature.SetSigFormatST(value : String);
begin
  if value <> '' then
  begin
    if FSigFormat = nil then
      FSigFormat := TFhirCode.create;
    FSigFormat.value := value
  end
  else if FSigFormat <> nil then
    FSigFormat.value := '';
end;

procedure TFhirSignature.SetData(value : TFhirBase64Binary);
begin
  FData.free;
  FData := value; {L1134}
end;

function TFhirSignature.GetDataST : TBytes;
begin
  if FData = nil then
    result := nil {L1148}
  else
    result := FData.value;
end;

procedure TFhirSignature.SetDataST(value : TBytes);
begin
  if value <> nil then
  begin
    if FData = nil then
      FData := TFhirBase64Binary.create;
    FData.value := value
  end
  else if FData <> nil then
    FData.value := nil;
end;

procedure TFhirSignature.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('when');
  fields.add('who');
  fields.add('onBehalfOf');
  fields.add('targetFormat');
  fields.add('sigFormat');
  fields.add('data');
end;

function TFhirSignature.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, Ftype_List.sizeInBytes);
  inc(result, FWhen.sizeInBytes);
  inc(result, FWho.sizeInBytes);
  inc(result, FOnBehalfOf.sizeInBytes);
  inc(result, FTargetFormat.sizeInBytes);
  inc(result, FSigFormat.sizeInBytes);
  inc(result, FData.sizeInBytes);
end;

{ TFhirSignatureListEnumerator }

constructor TFhirSignatureListEnumerator.Create(list : TFhirSignatureList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirSignatureListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirSignatureListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirSignatureListEnumerator.GetCurrent : TFhirSignature;
begin
  Result := FList[FIndex];
end;

function TFhirSignatureListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirSignatureList }

procedure TFhirSignatureList.AddItem(value: TFhirSignature);
begin
  assert(value.ClassName = 'TFhirSignature', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirSignature');
  add(value);
end;

function TFhirSignatureList.Append: TFhirSignature;
begin
  result := TFhirSignature.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirSignatureList.ClearItems;
begin
  Clear;
end;

function TFhirSignatureList.GetEnumerator : TFhirSignatureListEnumerator;
begin
  result := TFhirSignatureListEnumerator.Create(self.link);
end;

function TFhirSignatureList.Clone: TFhirSignatureList;
begin
  result := TFhirSignatureList(inherited Clone);
end;

function TFhirSignatureList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirSignatureList.GetItemN(index: Integer): TFhirSignature;
begin
  result := TFhirSignature(ObjectByIndex[index]);
end;

function TFhirSignatureList.ItemClass: TFslObjectClass;
begin
  result := TFhirSignature;
end;
function TFhirSignatureList.IndexOf(value: TFhirSignature): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirSignatureList.Insert(index: Integer): TFhirSignature;
begin
  result := TFhirSignature.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirSignatureList.InsertItem(index: Integer; value: TFhirSignature);
begin
  assert(value is TFhirSignature);
  Inherited Insert(index, value);
end;

function TFhirSignatureList.Item(index: Integer): TFhirSignature;
begin
  result := TFhirSignature(ObjectByIndex[index]);
end;

function TFhirSignatureList.Link: TFhirSignatureList;
begin
  result := TFhirSignatureList(inherited Link);
end;

procedure TFhirSignatureList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirSignatureList.SetItemByIndex(index: Integer; value: TFhirSignature);
begin
  assert(value is TFhirSignature);
  FhirSignatures[index] := value;
end;

procedure TFhirSignatureList.SetItemN(index: Integer; value: TFhirSignature);
begin
  assert(value is TFhirSignature);
  ObjectByIndex[index] := value;
end;

{ TFhirTriggerDefinition }

constructor TFhirTriggerDefinition.Create;
begin
  inherited;
end;

destructor TFhirTriggerDefinition.Destroy;
begin
  FType_.free;
  FName.free;
  FTiming.free;
  FDataList.Free;
  FCondition.free;
  inherited;
end;

procedure TFhirTriggerDefinition.Assign(oSource : TFslObject);
begin
  inherited;
  type_Element := TFhirTriggerDefinition(oSource).type_Element.Clone;
  nameElement := TFhirTriggerDefinition(oSource).nameElement.Clone;
  timing := TFhirTriggerDefinition(oSource).timing.Clone;
  if (TFhirTriggerDefinition(oSource).FDataList = nil) then
  begin
    FDataList.free;
    FDataList := nil;
  end
  else
  begin
    if FDataList = nil then
      FDataList := TFhirDataRequirementList.Create;
    FDataList.Assign(TFhirTriggerDefinition(oSource).FDataList);
  end;
  condition := TFhirTriggerDefinition(oSource).condition.Clone;
end;

procedure TFhirTriggerDefinition.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'name') Then
     list.add(self.link, 'name', FName.Link);
  if (child_name = 'timing[x]') or (child_name = 'timing') Then
     list.add(self.link, 'timing[x]', FTiming.Link);
  if (child_name = 'data') Then
    list.addAll(self, 'data', FDataList);
  if (child_name = 'condition') Then
     list.add(self.link, 'condition', FCondition.Link);
end;

procedure TFhirTriggerDefinition.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'name', 'string', false, TFhirString, FName.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'timing[x]', 'Timing|Reference|date|dateTime', false, TFhirDataType, FTiming.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'data', 'DataRequirement', true, TFhirDataRequirement, FDataList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'condition', 'Expression', false, TFhirExpression, FCondition.Link)); {L1172}
end;

function TFhirTriggerDefinition.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirTriggerTypeEnum, CODES_TFhirTriggerTypeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'name') then
  begin
    NameElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (isMatchingName(propName, 'timing', ['Timing', 'Reference', 'Date', 'DateTime'])) then
  begin
    Timing := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'data') then
  begin
    DataList.add(propValue as TFhirDataRequirement) {L1048};
    result := propValue;
  end
  else if (propName = 'condition') then
  begin
    Condition := propValue as TFhirExpression {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirTriggerDefinition.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'data') then DataList.insertItem(index, propValue as TFhirDataRequirement) {L1049}
  else inherited;
end;

function TFhirTriggerDefinition.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirTriggerTypeEnum[TriggerTypeNull], CODES_TFhirTriggerTypeEnum[TriggerTypeNull])  {L1211}
  else if (propName = 'name') then result := TFhirString.create() {L1223}
  else if (isMatchingName(propName, 'timing', ['Timing', 'Reference', 'Date', 'DateTime'])) then raise EFHIRException.create('Cannot make property Timing') {L1191}
  else if (propName = 'data') then result := DataList.new() {L1053}
  else if (propName = 'condition') then result := TFhirExpression.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirTriggerDefinition.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'code'
  else if (propName = 'name') then result := 'string'
  else if (propName = 'timing[x]') then result := 'Timing|Reference|date|dateTime'
  else if (propName = 'data') then result := 'DataRequirement'
  else if (propName = 'condition') then result := 'Expression'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirTriggerDefinition.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (propName = 'name') then NameElement := nil
  else if (isMatchingName(propName, 'timing', ['Timing', 'Reference', 'Date', 'DateTime'])) then TimingElement := nil {L1189}
  else if (propName = 'data') then deletePropertyValue('data', DataList, value) {L1054}
  else if (propName = 'condition') then ConditionElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirTriggerDefinition.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirTriggerTypeEnum, CODES_TFhirTriggerTypeEnum, new) {L1210}
  else if (propName = 'name') then NameElement := asString(new) {L1222}
  else if (isMatchingName(propName, 'timing', ['Timing', 'Reference', 'Date', 'DateTime'])) then TimingElement := new as TFhirDataType {L1190}
  else if (propName = 'data') then replacePropertyValue('data', DataList, existing, new) {L1055}
  else if (propName = 'condition') then ConditionElement := new as TFhirExpression {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirTriggerDefinition.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'data') then DataList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirTriggerDefinition.fhirType : string;
begin
  result := 'TriggerDefinition';
end;

function TFhirTriggerDefinition.Link : TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition(inherited Link);
end;

function TFhirTriggerDefinition.Clone : TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition(inherited Clone);
end;

function TFhirTriggerDefinition.equals(other : TObject) : boolean; 
var
  o : TFhirTriggerDefinition;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirTriggerDefinition)) then
    result := false
  else
  begin
    o := TFhirTriggerDefinition(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(nameElement, o.nameElement, true) and 
      compareDeep(timingElement, o.timingElement, true) and compareDeep(dataList, o.dataList, true) and 
      compareDeep(conditionElement, o.conditionElement, true);
  end;
end;

function TFhirTriggerDefinition.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FName) and isEmptyProp(FTiming) and isEmptyProp(FdataList) and isEmptyProp(FCondition);
end;

procedure TFhirTriggerDefinition.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirTriggerDefinition.GetType_ST : TFhirTriggerTypeEnum;
begin
  if FType_ = nil then
    result := TFhirTriggerTypeEnum(0)
  else
    result := TFhirTriggerTypeEnum(StringArrayIndexOfSensitive(CODES_TFhirTriggerTypeEnum, FType_.value));
end;

procedure TFhirTriggerDefinition.SetType_ST(value : TFhirTriggerTypeEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirTriggerTypeEnum[value], CODES_TFhirTriggerTypeEnum[value]);
end;

procedure TFhirTriggerDefinition.SetName(value : TFhirString);
begin
  FName.free;
  FName := value; {L1134}
end;

function TFhirTriggerDefinition.GetNameST : String;
begin
  if FName = nil then
    result := ''
  else
    result := FName.value;
end;

procedure TFhirTriggerDefinition.SetNameST(value : String);
begin
  if value <> '' then
  begin
    if FName = nil then
      FName := TFhirString.create;
    FName.value := value
  end
  else if FName <> nil then
    FName.value := '';
end;

procedure TFhirTriggerDefinition.SetTiming(value : TFhirDataType);
begin
  FTiming.free;
  FTiming := value; {L1134}
end;

function TFhirTriggerDefinition.GetDataList : TFhirDataRequirementList;
begin
  if FDataList = nil then
    FDataList := TFhirDataRequirementList.Create;
  result := FDataList;
end;

function TFhirTriggerDefinition.GetHasDataList : boolean;
begin
  result := (FDataList <> nil) and (FDataList.count > 0);
end;

procedure TFhirTriggerDefinition.SetCondition(value : TFhirExpression);
begin
  FCondition.free;
  FCondition := value; {L1134}
end;

procedure TFhirTriggerDefinition.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('name');
  fields.add('timing[x]');
  fields.add('data');
  fields.add('condition');
end;

function TFhirTriggerDefinition.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FName.sizeInBytes);
  inc(result, FTiming.sizeInBytes);
  inc(result, FdataList.sizeInBytes);
  inc(result, FCondition.sizeInBytes);
end;

{ TFhirTriggerDefinitionListEnumerator }

constructor TFhirTriggerDefinitionListEnumerator.Create(list : TFhirTriggerDefinitionList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirTriggerDefinitionListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirTriggerDefinitionListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirTriggerDefinitionListEnumerator.GetCurrent : TFhirTriggerDefinition;
begin
  Result := FList[FIndex];
end;

function TFhirTriggerDefinitionListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirTriggerDefinitionList }

procedure TFhirTriggerDefinitionList.AddItem(value: TFhirTriggerDefinition);
begin
  assert(value.ClassName = 'TFhirTriggerDefinition', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirTriggerDefinition');
  add(value);
end;

function TFhirTriggerDefinitionList.Append: TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTriggerDefinitionList.ClearItems;
begin
  Clear;
end;

function TFhirTriggerDefinitionList.GetEnumerator : TFhirTriggerDefinitionListEnumerator;
begin
  result := TFhirTriggerDefinitionListEnumerator.Create(self.link);
end;

function TFhirTriggerDefinitionList.Clone: TFhirTriggerDefinitionList;
begin
  result := TFhirTriggerDefinitionList(inherited Clone);
end;

function TFhirTriggerDefinitionList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirTriggerDefinitionList.GetItemN(index: Integer): TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition(ObjectByIndex[index]);
end;

function TFhirTriggerDefinitionList.ItemClass: TFslObjectClass;
begin
  result := TFhirTriggerDefinition;
end;
function TFhirTriggerDefinitionList.IndexOf(value: TFhirTriggerDefinition): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirTriggerDefinitionList.Insert(index: Integer): TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTriggerDefinitionList.InsertItem(index: Integer; value: TFhirTriggerDefinition);
begin
  assert(value is TFhirTriggerDefinition);
  Inherited Insert(index, value);
end;

function TFhirTriggerDefinitionList.Item(index: Integer): TFhirTriggerDefinition;
begin
  result := TFhirTriggerDefinition(ObjectByIndex[index]);
end;

function TFhirTriggerDefinitionList.Link: TFhirTriggerDefinitionList;
begin
  result := TFhirTriggerDefinitionList(inherited Link);
end;

procedure TFhirTriggerDefinitionList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirTriggerDefinitionList.SetItemByIndex(index: Integer; value: TFhirTriggerDefinition);
begin
  assert(value is TFhirTriggerDefinition);
  FhirTriggerDefinitions[index] := value;
end;

procedure TFhirTriggerDefinitionList.SetItemN(index: Integer; value: TFhirTriggerDefinition);
begin
  assert(value is TFhirTriggerDefinition);
  ObjectByIndex[index] := value;
end;

{ TFhirUsageContext }

constructor TFhirUsageContext.Create;
begin
  inherited;
end;

destructor TFhirUsageContext.Destroy;
begin
  FCode.free;
  FValue.free;
  inherited;
end;

procedure TFhirUsageContext.Assign(oSource : TFslObject);
begin
  inherited;
  code := TFhirUsageContext(oSource).code.Clone;
  value := TFhirUsageContext(oSource).value.Clone;
end;

procedure TFhirUsageContext.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'code') Then
     list.add(self.link, 'code', FCode.Link);
  if (child_name = 'value[x]') or (child_name = 'value') Then
     list.add(self.link, 'value[x]', FValue.Link);
end;

procedure TFhirUsageContext.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'code', 'Coding', false, TFhirCoding, FCode.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'value[x]', 'CodeableConcept|Quantity|Range|Reference', false, TFhirDataType, FValue.Link)); {L1172}
end;

function TFhirUsageContext.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'code') then
  begin
    Code := propValue as TFhirCoding {L1199};
    result := propValue;
  end
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Quantity', 'Range', 'Reference'])) then
  begin
    Value := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirUsageContext.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirUsageContext.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'code') then result := TFhirCoding.create() {L1203}
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Quantity', 'Range', 'Reference'])) then raise EFHIRException.create('Cannot make property Value') {L1191}
  else result := inherited createPropertyValue(propName);
end;

function TFhirUsageContext.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'code') then result := 'Coding'
  else if (propName = 'value[x]') then result := 'CodeableConcept|Quantity|Range|Reference'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirUsageContext.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'code') then CodeElement := nil
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Quantity', 'Range', 'Reference'])) then ValueElement := nil {L1189}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirUsageContext.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'code') then CodeElement := new as TFhirCoding {L1195}
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Quantity', 'Range', 'Reference'])) then ValueElement := new as TFhirDataType {L1190}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirUsageContext.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirUsageContext.fhirType : string;
begin
  result := 'UsageContext';
end;

function TFhirUsageContext.Link : TFhirUsageContext;
begin
  result := TFhirUsageContext(inherited Link);
end;

function TFhirUsageContext.Clone : TFhirUsageContext;
begin
  result := TFhirUsageContext(inherited Clone);
end;

function TFhirUsageContext.equals(other : TObject) : boolean; 
var
  o : TFhirUsageContext;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirUsageContext)) then
    result := false
  else
  begin
    o := TFhirUsageContext(other);
    result := compareDeep(codeElement, o.codeElement, true) and compareDeep(valueElement, o.valueElement, true);
  end;
end;

function TFhirUsageContext.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FCode) and isEmptyProp(FValue);
end;

procedure TFhirUsageContext.SetCode(value : TFhirCoding);
begin
  FCode.free;
  FCode := value; {L1134}
end;

procedure TFhirUsageContext.SetValue(value : TFhirDataType);
begin
  FValue.free;
  FValue := value; {L1134}
end;

procedure TFhirUsageContext.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('code');
  fields.add('value[x]');
end;

function TFhirUsageContext.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FCode.sizeInBytes);
  inc(result, FValue.sizeInBytes);
end;

{ TFhirUsageContextListEnumerator }

constructor TFhirUsageContextListEnumerator.Create(list : TFhirUsageContextList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirUsageContextListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirUsageContextListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirUsageContextListEnumerator.GetCurrent : TFhirUsageContext;
begin
  Result := FList[FIndex];
end;

function TFhirUsageContextListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirUsageContextList }

procedure TFhirUsageContextList.AddItem(value: TFhirUsageContext);
begin
  assert(value.ClassName = 'TFhirUsageContext', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirUsageContext');
  add(value);
end;

function TFhirUsageContextList.Append: TFhirUsageContext;
begin
  result := TFhirUsageContext.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUsageContextList.ClearItems;
begin
  Clear;
end;

function TFhirUsageContextList.GetEnumerator : TFhirUsageContextListEnumerator;
begin
  result := TFhirUsageContextListEnumerator.Create(self.link);
end;

function TFhirUsageContextList.Clone: TFhirUsageContextList;
begin
  result := TFhirUsageContextList(inherited Clone);
end;

function TFhirUsageContextList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirUsageContextList.GetItemN(index: Integer): TFhirUsageContext;
begin
  result := TFhirUsageContext(ObjectByIndex[index]);
end;

function TFhirUsageContextList.ItemClass: TFslObjectClass;
begin
  result := TFhirUsageContext;
end;
function TFhirUsageContextList.IndexOf(value: TFhirUsageContext): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirUsageContextList.Insert(index: Integer): TFhirUsageContext;
begin
  result := TFhirUsageContext.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirUsageContextList.InsertItem(index: Integer; value: TFhirUsageContext);
begin
  assert(value is TFhirUsageContext);
  Inherited Insert(index, value);
end;

function TFhirUsageContextList.Item(index: Integer): TFhirUsageContext;
begin
  result := TFhirUsageContext(ObjectByIndex[index]);
end;

function TFhirUsageContextList.Link: TFhirUsageContextList;
begin
  result := TFhirUsageContextList(inherited Link);
end;

procedure TFhirUsageContextList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirUsageContextList.SetItemByIndex(index: Integer; value: TFhirUsageContext);
begin
  assert(value is TFhirUsageContext);
  FhirUsageContexts[index] := value;
end;

procedure TFhirUsageContextList.SetItemN(index: Integer; value: TFhirUsageContext);
begin
  assert(value is TFhirUsageContext);
  ObjectByIndex[index] := value;
end;

{ TFhirAge }

function TFhirAge.fhirType : string;
begin
  result := 'Age';
end;

function TFhirAge.Link : TFhirAge;
begin
  result := TFhirAge(inherited Link);
end;

function TFhirAge.Clone : TFhirAge;
begin
  result := TFhirAge(inherited Clone);
end;

procedure TFhirAge.listFieldsInOrder(fields : TStringList);
begin
  listQuantityFieldsInOrder(fields);
end;

{ TFhirAgeListEnumerator }

constructor TFhirAgeListEnumerator.Create(list : TFhirAgeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirAgeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirAgeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirAgeListEnumerator.GetCurrent : TFhirAge;
begin
  Result := FList[FIndex];
end;

function TFhirAgeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirAgeList }

procedure TFhirAgeList.AddItem(value: TFhirAge);
begin
  assert(value.ClassName = 'TFhirAge', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirAge');
  add(value);
end;

function TFhirAgeList.Append: TFhirAge;
begin
  result := TFhirAge.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAgeList.ClearItems;
begin
  Clear;
end;

function TFhirAgeList.GetEnumerator : TFhirAgeListEnumerator;
begin
  result := TFhirAgeListEnumerator.Create(self.link);
end;

function TFhirAgeList.Clone: TFhirAgeList;
begin
  result := TFhirAgeList(inherited Clone);
end;

function TFhirAgeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirAgeList.GetItemN(index: Integer): TFhirAge;
begin
  result := TFhirAge(ObjectByIndex[index]);
end;

function TFhirAgeList.ItemClass: TFslObjectClass;
begin
  result := TFhirAge;
end;
function TFhirAgeList.IndexOf(value: TFhirAge): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirAgeList.Insert(index: Integer): TFhirAge;
begin
  result := TFhirAge.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirAgeList.InsertItem(index: Integer; value: TFhirAge);
begin
  assert(value is TFhirAge);
  Inherited Insert(index, value);
end;

function TFhirAgeList.Item(index: Integer): TFhirAge;
begin
  result := TFhirAge(ObjectByIndex[index]);
end;

function TFhirAgeList.Link: TFhirAgeList;
begin
  result := TFhirAgeList(inherited Link);
end;

procedure TFhirAgeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirAgeList.SetItemByIndex(index: Integer; value: TFhirAge);
begin
  assert(value is TFhirAge);
  FhirAges[index] := value;
end;

procedure TFhirAgeList.SetItemN(index: Integer; value: TFhirAge);
begin
  assert(value is TFhirAge);
  ObjectByIndex[index] := value;
end;

{ TFhirCount }

function TFhirCount.fhirType : string;
begin
  result := 'Count';
end;

function TFhirCount.Link : TFhirCount;
begin
  result := TFhirCount(inherited Link);
end;

function TFhirCount.Clone : TFhirCount;
begin
  result := TFhirCount(inherited Clone);
end;

procedure TFhirCount.listFieldsInOrder(fields : TStringList);
begin
  listQuantityFieldsInOrder(fields);
end;

{ TFhirCountListEnumerator }

constructor TFhirCountListEnumerator.Create(list : TFhirCountList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirCountListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirCountListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirCountListEnumerator.GetCurrent : TFhirCount;
begin
  Result := FList[FIndex];
end;

function TFhirCountListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirCountList }

procedure TFhirCountList.AddItem(value: TFhirCount);
begin
  assert(value.ClassName = 'TFhirCount', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirCount');
  add(value);
end;

function TFhirCountList.Append: TFhirCount;
begin
  result := TFhirCount.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCountList.ClearItems;
begin
  Clear;
end;

function TFhirCountList.GetEnumerator : TFhirCountListEnumerator;
begin
  result := TFhirCountListEnumerator.Create(self.link);
end;

function TFhirCountList.Clone: TFhirCountList;
begin
  result := TFhirCountList(inherited Clone);
end;

function TFhirCountList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirCountList.GetItemN(index: Integer): TFhirCount;
begin
  result := TFhirCount(ObjectByIndex[index]);
end;

function TFhirCountList.ItemClass: TFslObjectClass;
begin
  result := TFhirCount;
end;
function TFhirCountList.IndexOf(value: TFhirCount): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirCountList.Insert(index: Integer): TFhirCount;
begin
  result := TFhirCount.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirCountList.InsertItem(index: Integer; value: TFhirCount);
begin
  assert(value is TFhirCount);
  Inherited Insert(index, value);
end;

function TFhirCountList.Item(index: Integer): TFhirCount;
begin
  result := TFhirCount(ObjectByIndex[index]);
end;

function TFhirCountList.Link: TFhirCountList;
begin
  result := TFhirCountList(inherited Link);
end;

procedure TFhirCountList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirCountList.SetItemByIndex(index: Integer; value: TFhirCount);
begin
  assert(value is TFhirCount);
  FhirCounts[index] := value;
end;

procedure TFhirCountList.SetItemN(index: Integer; value: TFhirCount);
begin
  assert(value is TFhirCount);
  ObjectByIndex[index] := value;
end;

{ TFhirDistance }

function TFhirDistance.fhirType : string;
begin
  result := 'Distance';
end;

function TFhirDistance.Link : TFhirDistance;
begin
  result := TFhirDistance(inherited Link);
end;

function TFhirDistance.Clone : TFhirDistance;
begin
  result := TFhirDistance(inherited Clone);
end;

procedure TFhirDistance.listFieldsInOrder(fields : TStringList);
begin
  listQuantityFieldsInOrder(fields);
end;

{ TFhirDistanceListEnumerator }

constructor TFhirDistanceListEnumerator.Create(list : TFhirDistanceList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDistanceListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDistanceListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDistanceListEnumerator.GetCurrent : TFhirDistance;
begin
  Result := FList[FIndex];
end;

function TFhirDistanceListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDistanceList }

procedure TFhirDistanceList.AddItem(value: TFhirDistance);
begin
  assert(value.ClassName = 'TFhirDistance', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDistance');
  add(value);
end;

function TFhirDistanceList.Append: TFhirDistance;
begin
  result := TFhirDistance.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDistanceList.ClearItems;
begin
  Clear;
end;

function TFhirDistanceList.GetEnumerator : TFhirDistanceListEnumerator;
begin
  result := TFhirDistanceListEnumerator.Create(self.link);
end;

function TFhirDistanceList.Clone: TFhirDistanceList;
begin
  result := TFhirDistanceList(inherited Clone);
end;

function TFhirDistanceList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDistanceList.GetItemN(index: Integer): TFhirDistance;
begin
  result := TFhirDistance(ObjectByIndex[index]);
end;

function TFhirDistanceList.ItemClass: TFslObjectClass;
begin
  result := TFhirDistance;
end;
function TFhirDistanceList.IndexOf(value: TFhirDistance): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDistanceList.Insert(index: Integer): TFhirDistance;
begin
  result := TFhirDistance.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDistanceList.InsertItem(index: Integer; value: TFhirDistance);
begin
  assert(value is TFhirDistance);
  Inherited Insert(index, value);
end;

function TFhirDistanceList.Item(index: Integer): TFhirDistance;
begin
  result := TFhirDistance(ObjectByIndex[index]);
end;

function TFhirDistanceList.Link: TFhirDistanceList;
begin
  result := TFhirDistanceList(inherited Link);
end;

procedure TFhirDistanceList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDistanceList.SetItemByIndex(index: Integer; value: TFhirDistance);
begin
  assert(value is TFhirDistance);
  FhirDistances[index] := value;
end;

procedure TFhirDistanceList.SetItemN(index: Integer; value: TFhirDistance);
begin
  assert(value is TFhirDistance);
  ObjectByIndex[index] := value;
end;

{ TFhirDosageDoseAndRate }

constructor TFhirDosageDoseAndRate.Create;
begin
  inherited;
end;

destructor TFhirDosageDoseAndRate.Destroy;
begin
  FType_.free;
  FDose.free;
  FRate.free;
  inherited;
end;

procedure TFhirDosageDoseAndRate.Assign(oSource : TFslObject);
begin
  inherited;
  type_ := TFhirDosageDoseAndRate(oSource).type_.Clone;
  dose := TFhirDosageDoseAndRate(oSource).dose.Clone;
  rate := TFhirDosageDoseAndRate(oSource).rate.Clone;
end;

procedure TFhirDosageDoseAndRate.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'dose[x]') or (child_name = 'dose') Then
     list.add(self.link, 'dose[x]', FDose.Link);
  if (child_name = 'rate[x]') or (child_name = 'rate') Then
     list.add(self.link, 'rate[x]', FRate.Link);
end;

procedure TFhirDosageDoseAndRate.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'CodeableConcept', false, TFhirCodeableConcept, FType_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'dose[x]', 'Range|Quantity', false, TFhirDataType, FDose.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'rate[x]', 'Ratio|Range|Quantity', false, TFhirDataType, FRate.Link)); {L1172}
end;

function TFhirDosageDoseAndRate.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_ := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (isMatchingName(propName, 'dose', ['Range', 'Quantity'])) then
  begin
    Dose := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (isMatchingName(propName, 'rate', ['Ratio', 'Range', 'Quantity'])) then
  begin
    Rate := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirDosageDoseAndRate.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirDosageDoseAndRate.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirCodeableConcept.create() {L1203}
  else if (isMatchingName(propName, 'dose', ['Range', 'Quantity'])) then raise EFHIRException.create('Cannot make property Dose') {L1191}
  else if (isMatchingName(propName, 'rate', ['Ratio', 'Range', 'Quantity'])) then raise EFHIRException.create('Cannot make property Rate') {L1191}
  else result := inherited createPropertyValue(propName);
end;

function TFhirDosageDoseAndRate.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'CodeableConcept'
  else if (propName = 'dose[x]') then result := 'Range|Quantity'
  else if (propName = 'rate[x]') then result := 'Ratio|Range|Quantity'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirDosageDoseAndRate.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (isMatchingName(propName, 'dose', ['Range', 'Quantity'])) then DoseElement := nil {L1189}
  else if (isMatchingName(propName, 'rate', ['Ratio', 'Range', 'Quantity'])) then RateElement := nil {L1189}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirDosageDoseAndRate.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := new as TFhirCodeableConcept {L1195}
  else if (isMatchingName(propName, 'dose', ['Range', 'Quantity'])) then DoseElement := new as TFhirDataType {L1190}
  else if (isMatchingName(propName, 'rate', ['Ratio', 'Range', 'Quantity'])) then RateElement := new as TFhirDataType {L1190}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirDosageDoseAndRate.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirDosageDoseAndRate.fhirType : string;
begin
  result := 'Dosage.doseAndRate';
end;

function TFhirDosageDoseAndRate.Link : TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate(inherited Link);
end;

function TFhirDosageDoseAndRate.Clone : TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate(inherited Clone);
end;

function TFhirDosageDoseAndRate.equals(other : TObject) : boolean; 
var
  o : TFhirDosageDoseAndRate;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDosageDoseAndRate)) then
    result := false
  else
  begin
    o := TFhirDosageDoseAndRate(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(doseElement, o.doseElement, true) and 
      compareDeep(rateElement, o.rateElement, true);
  end;
end;

function TFhirDosageDoseAndRate.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FDose) and isEmptyProp(FRate);
end;

procedure TFhirDosageDoseAndRate.SetType_(value : TFhirCodeableConcept);
begin
  FType_.free;
  FType_ := value; {L1134}
end;

procedure TFhirDosageDoseAndRate.SetDose(value : TFhirDataType);
begin
  FDose.free;
  FDose := value; {L1134}
end;

procedure TFhirDosageDoseAndRate.SetRate(value : TFhirDataType);
begin
  FRate.free;
  FRate := value; {L1134}
end;

procedure TFhirDosageDoseAndRate.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('dose[x]');
  fields.add('rate[x]');
end;

function TFhirDosageDoseAndRate.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FDose.sizeInBytes);
  inc(result, FRate.sizeInBytes);
end;

{ TFhirDosageDoseAndRateListEnumerator }

constructor TFhirDosageDoseAndRateListEnumerator.Create(list : TFhirDosageDoseAndRateList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDosageDoseAndRateListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDosageDoseAndRateListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDosageDoseAndRateListEnumerator.GetCurrent : TFhirDosageDoseAndRate;
begin
  Result := FList[FIndex];
end;

function TFhirDosageDoseAndRateListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDosageDoseAndRateList }

procedure TFhirDosageDoseAndRateList.AddItem(value: TFhirDosageDoseAndRate);
begin
  assert(value.ClassName = 'TFhirDosageDoseAndRate', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDosageDoseAndRate');
  add(value);
end;

function TFhirDosageDoseAndRateList.Append: TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDosageDoseAndRateList.ClearItems;
begin
  Clear;
end;

function TFhirDosageDoseAndRateList.GetEnumerator : TFhirDosageDoseAndRateListEnumerator;
begin
  result := TFhirDosageDoseAndRateListEnumerator.Create(self.link);
end;

function TFhirDosageDoseAndRateList.Clone: TFhirDosageDoseAndRateList;
begin
  result := TFhirDosageDoseAndRateList(inherited Clone);
end;

function TFhirDosageDoseAndRateList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDosageDoseAndRateList.GetItemN(index: Integer): TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate(ObjectByIndex[index]);
end;

function TFhirDosageDoseAndRateList.ItemClass: TFslObjectClass;
begin
  result := TFhirDosageDoseAndRate;
end;
function TFhirDosageDoseAndRateList.IndexOf(value: TFhirDosageDoseAndRate): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDosageDoseAndRateList.Insert(index: Integer): TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDosageDoseAndRateList.InsertItem(index: Integer; value: TFhirDosageDoseAndRate);
begin
  assert(value is TFhirDosageDoseAndRate);
  Inherited Insert(index, value);
end;

function TFhirDosageDoseAndRateList.Item(index: Integer): TFhirDosageDoseAndRate;
begin
  result := TFhirDosageDoseAndRate(ObjectByIndex[index]);
end;

function TFhirDosageDoseAndRateList.Link: TFhirDosageDoseAndRateList;
begin
  result := TFhirDosageDoseAndRateList(inherited Link);
end;

procedure TFhirDosageDoseAndRateList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDosageDoseAndRateList.SetItemByIndex(index: Integer; value: TFhirDosageDoseAndRate);
begin
  assert(value is TFhirDosageDoseAndRate);
  FhirDosageDoseAndRates[index] := value;
end;

procedure TFhirDosageDoseAndRateList.SetItemN(index: Integer; value: TFhirDosageDoseAndRate);
begin
  assert(value is TFhirDosageDoseAndRate);
  ObjectByIndex[index] := value;
end;

{ TFhirDosage }

constructor TFhirDosage.Create;
begin
  inherited;
end;

destructor TFhirDosage.Destroy;
begin
  FSequence.free;
  FText.free;
  FAdditionalInstructionList.Free;
  FPatientInstruction.free;
  FTiming.free;
  FAsNeeded.free;
  FSite.free;
  FRoute.free;
  FMethod.free;
  FDoseAndRateList.Free;
  FMaxDosePerPeriod.free;
  FMaxDosePerAdministration.free;
  FMaxDosePerLifetime.free;
  inherited;
end;

procedure TFhirDosage.Assign(oSource : TFslObject);
begin
  inherited;
  sequenceElement := TFhirDosage(oSource).sequenceElement.Clone;
  textElement := TFhirDosage(oSource).textElement.Clone;
  if (TFhirDosage(oSource).FAdditionalInstructionList = nil) then
  begin
    FAdditionalInstructionList.free;
    FAdditionalInstructionList := nil;
  end
  else
  begin
    if FAdditionalInstructionList = nil then
      FAdditionalInstructionList := TFhirCodeableConceptList.Create;
    FAdditionalInstructionList.Assign(TFhirDosage(oSource).FAdditionalInstructionList);
  end;
  patientInstructionElement := TFhirDosage(oSource).patientInstructionElement.Clone;
  timing := TFhirDosage(oSource).timing.Clone;
  asNeeded := TFhirDosage(oSource).asNeeded.Clone;
  site := TFhirDosage(oSource).site.Clone;
  route := TFhirDosage(oSource).route.Clone;
  method := TFhirDosage(oSource).method.Clone;
  if (TFhirDosage(oSource).FDoseAndRateList = nil) then
  begin
    FDoseAndRateList.free;
    FDoseAndRateList := nil;
  end
  else
  begin
    if FDoseAndRateList = nil then
      FDoseAndRateList := TFhirDosageDoseAndRateList.Create;
    FDoseAndRateList.Assign(TFhirDosage(oSource).FDoseAndRateList);
  end;
  maxDosePerPeriod := TFhirDosage(oSource).maxDosePerPeriod.Clone;
  maxDosePerAdministration := TFhirDosage(oSource).maxDosePerAdministration.Clone;
  maxDosePerLifetime := TFhirDosage(oSource).maxDosePerLifetime.Clone;
end;

procedure TFhirDosage.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'sequence') Then
     list.add(self.link, 'sequence', FSequence.Link);
  if (child_name = 'text') Then
     list.add(self.link, 'text', FText.Link);
  if (child_name = 'additionalInstruction') Then
    list.addAll(self, 'additionalInstruction', FAdditionalInstructionList);
  if (child_name = 'patientInstruction') Then
     list.add(self.link, 'patientInstruction', FPatientInstruction.Link);
  if (child_name = 'timing') Then
     list.add(self.link, 'timing', FTiming.Link);
  if (child_name = 'asNeeded[x]') or (child_name = 'asNeeded') Then
     list.add(self.link, 'asNeeded[x]', FAsNeeded.Link);
  if (child_name = 'site') Then
     list.add(self.link, 'site', FSite.Link);
  if (child_name = 'route') Then
     list.add(self.link, 'route', FRoute.Link);
  if (child_name = 'method') Then
     list.add(self.link, 'method', FMethod.Link);
  if (child_name = 'doseAndRate') Then
    list.addAll(self, 'doseAndRate', FDoseAndRateList);
  if (child_name = 'maxDosePerPeriod') Then
     list.add(self.link, 'maxDosePerPeriod', FMaxDosePerPeriod.Link);
  if (child_name = 'maxDosePerAdministration') Then
     list.add(self.link, 'maxDosePerAdministration', FMaxDosePerAdministration.Link);
  if (child_name = 'maxDosePerLifetime') Then
     list.add(self.link, 'maxDosePerLifetime', FMaxDosePerLifetime.Link);
end;

procedure TFhirDosage.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'sequence', 'integer', false, TFhirInteger, FSequence.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'text', 'string', false, TFhirString, FText.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'additionalInstruction', 'CodeableConcept', true, TFhirCodeableConcept, FAdditionalInstructionList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'patientInstruction', 'string', false, TFhirString, FPatientInstruction.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'timing', 'Timing', false, TFhirTiming, FTiming.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'asNeeded[x]', 'boolean|CodeableConcept', false, TFhirDataType, FAsNeeded.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'site', 'CodeableConcept', false, TFhirCodeableConcept, FSite.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'route', 'CodeableConcept', false, TFhirCodeableConcept, FRoute.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'method', 'CodeableConcept', false, TFhirCodeableConcept, FMethod.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'doseAndRate', 'Element', true, TFhirDosageDoseAndRate, FDoseAndRateList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'maxDosePerPeriod', 'Ratio', false, TFhirRatio, FMaxDosePerPeriod.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'maxDosePerAdministration', 'Quantity', false, TFhirQuantity, FMaxDosePerAdministration.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'maxDosePerLifetime', 'Quantity', false, TFhirQuantity, FMaxDosePerLifetime.Link)); {L1172}
end;

function TFhirDosage.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'sequence') then
  begin
    SequenceElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'text') then
  begin
    TextElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'additionalInstruction') then
  begin
    AdditionalInstructionList.add(propValue as TFhirCodeableConcept) {L1048};
    result := propValue;
  end
  else if (propName = 'patientInstruction') then
  begin
    PatientInstructionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'timing') then
  begin
    Timing := propValue as TFhirTiming {L1199};
    result := propValue;
  end
  else if (isMatchingName(propName, 'asNeeded', ['Boolean', 'CodeableConcept'])) then
  begin
    AsNeeded := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'site') then
  begin
    Site := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'route') then
  begin
    Route := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'method') then
  begin
    Method := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'doseAndRate') then
  begin
    DoseAndRateList.add(propValue as TFhirDosageDoseAndRate) {L1048};
    result := propValue;
  end
  else if (propName = 'maxDosePerPeriod') then
  begin
    MaxDosePerPeriod := propValue as TFhirRatio {L1199};
    result := propValue;
  end
  else if (propName = 'maxDosePerAdministration') then
  begin
    MaxDosePerAdministration := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'maxDosePerLifetime') then
  begin
    MaxDosePerLifetime := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirDosage.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'additionalInstruction') then AdditionalInstructionList.insertItem(index, propValue as TFhirCodeableConcept) {L1049}
  else if (propName = 'doseAndRate') then DoseAndRateList.insertItem(index, propValue as TFhirDosageDoseAndRate) {L1049}
  else inherited;
end;

function TFhirDosage.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'sequence') then result := TFhirInteger.create() {L1223}
  else if (propName = 'text') then result := TFhirString.create() {L1223}
  else if (propName = 'additionalInstruction') then result := AdditionalInstructionList.new() {L1053}
  else if (propName = 'patientInstruction') then result := TFhirString.create() {L1223}
  else if (propName = 'timing') then result := TFhirTiming.create() {L1203}
  else if (isMatchingName(propName, 'asNeeded', ['Boolean', 'CodeableConcept'])) then raise EFHIRException.create('Cannot make property AsNeeded') {L1191}
  else if (propName = 'site') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'route') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'method') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'doseAndRate') then result := DoseAndRateList.new() {L1053}
  else if (propName = 'maxDosePerPeriod') then result := TFhirRatio.create() {L1203}
  else if (propName = 'maxDosePerAdministration') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'maxDosePerLifetime') then result := TFhirQuantity.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirDosage.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'sequence') then result := 'integer'
  else if (propName = 'text') then result := 'string'
  else if (propName = 'additionalInstruction') then result := 'CodeableConcept'
  else if (propName = 'patientInstruction') then result := 'string'
  else if (propName = 'timing') then result := 'Timing'
  else if (propName = 'asNeeded[x]') then result := 'boolean|CodeableConcept'
  else if (propName = 'site') then result := 'CodeableConcept'
  else if (propName = 'route') then result := 'CodeableConcept'
  else if (propName = 'method') then result := 'CodeableConcept'
  else if (propName = 'doseAndRate') then result := 'Element'
  else if (propName = 'maxDosePerPeriod') then result := 'Ratio'
  else if (propName = 'maxDosePerAdministration') then result := 'Quantity'
  else if (propName = 'maxDosePerLifetime') then result := 'Quantity'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirDosage.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'sequence') then SequenceElement := nil
  else if (propName = 'text') then TextElement := nil
  else if (propName = 'additionalInstruction') then deletePropertyValue('additionalInstruction', AdditionalInstructionList, value) {L1054}
  else if (propName = 'patientInstruction') then PatientInstructionElement := nil
  else if (propName = 'timing') then TimingElement := nil
  else if (isMatchingName(propName, 'asNeeded', ['Boolean', 'CodeableConcept'])) then AsNeededElement := nil {L1189}
  else if (propName = 'site') then SiteElement := nil
  else if (propName = 'route') then RouteElement := nil
  else if (propName = 'method') then MethodElement := nil
  else if (propName = 'doseAndRate') then deletePropertyValue('doseAndRate', DoseAndRateList, value) {L1054}
  else if (propName = 'maxDosePerPeriod') then MaxDosePerPeriodElement := nil
  else if (propName = 'maxDosePerAdministration') then MaxDosePerAdministrationElement := nil
  else if (propName = 'maxDosePerLifetime') then MaxDosePerLifetimeElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirDosage.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'sequence') then SequenceElement := asInteger(new) {L1222}
  else if (propName = 'text') then TextElement := asString(new) {L1222}
  else if (propName = 'additionalInstruction') then replacePropertyValue('additionalInstruction', AdditionalInstructionList, existing, new) {L1055}
  else if (propName = 'patientInstruction') then PatientInstructionElement := asString(new) {L1222}
  else if (propName = 'timing') then TimingElement := new as TFhirTiming {L1195}
  else if (isMatchingName(propName, 'asNeeded', ['Boolean', 'CodeableConcept'])) then AsNeededElement := new as TFhirDataType {L1190}
  else if (propName = 'site') then SiteElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'route') then RouteElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'method') then MethodElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'doseAndRate') then replacePropertyValue('doseAndRate', DoseAndRateList, existing, new) {L1055}
  else if (propName = 'maxDosePerPeriod') then MaxDosePerPeriodElement := new as TFhirRatio {L1195}
  else if (propName = 'maxDosePerAdministration') then MaxDosePerAdministrationElement := new as TFhirQuantity {L1195}
  else if (propName = 'maxDosePerLifetime') then MaxDosePerLifetimeElement := new as TFhirQuantity {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirDosage.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'additionalInstruction') then AdditionalInstructionList.move(source, destination) {L1050}
  else if (propName = 'doseAndRate') then DoseAndRateList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirDosage.fhirType : string;
begin
  result := 'Dosage';
end;

function TFhirDosage.Link : TFhirDosage;
begin
  result := TFhirDosage(inherited Link);
end;

function TFhirDosage.Clone : TFhirDosage;
begin
  result := TFhirDosage(inherited Clone);
end;

function TFhirDosage.equals(other : TObject) : boolean; 
var
  o : TFhirDosage;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirDosage)) then
    result := false
  else
  begin
    o := TFhirDosage(other);
    result := compareDeep(sequenceElement, o.sequenceElement, true) and compareDeep(textElement, o.textElement, true) and 
      compareDeep(additionalInstructionList, o.additionalInstructionList, true) and 
      compareDeep(patientInstructionElement, o.patientInstructionElement, true) and 
      compareDeep(timingElement, o.timingElement, true) and compareDeep(asNeededElement, o.asNeededElement, true) and 
      compareDeep(siteElement, o.siteElement, true) and compareDeep(routeElement, o.routeElement, true) and 
      compareDeep(methodElement, o.methodElement, true) and compareDeep(doseAndRateList, o.doseAndRateList, true) and 
      compareDeep(maxDosePerPeriodElement, o.maxDosePerPeriodElement, true) and compareDeep(maxDosePerAdministrationElement, o.maxDosePerAdministrationElement, true) and 
      compareDeep(maxDosePerLifetimeElement, o.maxDosePerLifetimeElement, true);
  end;
end;

function TFhirDosage.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FSequence) and isEmptyProp(FText) and isEmptyProp(FadditionalInstructionList) and isEmptyProp(FPatientInstruction) and isEmptyProp(FTiming) and isEmptyProp(FAsNeeded) and isEmptyProp(FSite) and isEmptyProp(FRoute) and isEmptyProp(FMethod) and isEmptyProp(FdoseAndRateList) and isEmptyProp(FMaxDosePerPeriod) and isEmptyProp(FMaxDosePerAdministration) and isEmptyProp(FMaxDosePerLifetime);
end;

procedure TFhirDosage.SetSequence(value : TFhirInteger);
begin
  FSequence.free;
  FSequence := value; {L1134}
end;

function TFhirDosage.GetSequenceST : String;
begin
  if FSequence = nil then
    result := ''
  else
    result := FSequence.value;
end;

procedure TFhirDosage.SetSequenceST(value : String);
begin
  if value <> '' then
  begin
    if FSequence = nil then
      FSequence := TFhirInteger.create;
    FSequence.value := value
  end
  else if FSequence <> nil then
    FSequence.value := '';
end;

procedure TFhirDosage.SetText(value : TFhirString);
begin
  FText.free;
  FText := value; {L1134}
end;

function TFhirDosage.GetTextST : String;
begin
  if FText = nil then
    result := ''
  else
    result := FText.value;
end;

procedure TFhirDosage.SetTextST(value : String);
begin
  if value <> '' then
  begin
    if FText = nil then
      FText := TFhirString.create;
    FText.value := value
  end
  else if FText <> nil then
    FText.value := '';
end;

function TFhirDosage.GetAdditionalInstructionList : TFhirCodeableConceptList;
begin
  if FAdditionalInstructionList = nil then
    FAdditionalInstructionList := TFhirCodeableConceptList.Create;
  result := FAdditionalInstructionList;
end;

function TFhirDosage.GetHasAdditionalInstructionList : boolean;
begin
  result := (FAdditionalInstructionList <> nil) and (FAdditionalInstructionList.count > 0);
end;

procedure TFhirDosage.SetPatientInstruction(value : TFhirString);
begin
  FPatientInstruction.free;
  FPatientInstruction := value; {L1134}
end;

function TFhirDosage.GetPatientInstructionST : String;
begin
  if FPatientInstruction = nil then
    result := ''
  else
    result := FPatientInstruction.value;
end;

procedure TFhirDosage.SetPatientInstructionST(value : String);
begin
  if value <> '' then
  begin
    if FPatientInstruction = nil then
      FPatientInstruction := TFhirString.create;
    FPatientInstruction.value := value
  end
  else if FPatientInstruction <> nil then
    FPatientInstruction.value := '';
end;

procedure TFhirDosage.SetTiming(value : TFhirTiming);
begin
  FTiming.free;
  FTiming := value; {L1134}
end;

procedure TFhirDosage.SetAsNeeded(value : TFhirDataType);
begin
  FAsNeeded.free;
  FAsNeeded := value; {L1134}
end;

procedure TFhirDosage.SetSite(value : TFhirCodeableConcept);
begin
  FSite.free;
  FSite := value; {L1134}
end;

procedure TFhirDosage.SetRoute(value : TFhirCodeableConcept);
begin
  FRoute.free;
  FRoute := value; {L1134}
end;

procedure TFhirDosage.SetMethod(value : TFhirCodeableConcept);
begin
  FMethod.free;
  FMethod := value; {L1134}
end;

function TFhirDosage.GetDoseAndRateList : TFhirDosageDoseAndRateList;
begin
  if FDoseAndRateList = nil then
    FDoseAndRateList := TFhirDosageDoseAndRateList.Create;
  result := FDoseAndRateList;
end;

function TFhirDosage.GetHasDoseAndRateList : boolean;
begin
  result := (FDoseAndRateList <> nil) and (FDoseAndRateList.count > 0);
end;

procedure TFhirDosage.SetMaxDosePerPeriod(value : TFhirRatio);
begin
  FMaxDosePerPeriod.free;
  FMaxDosePerPeriod := value; {L1134}
end;

procedure TFhirDosage.SetMaxDosePerAdministration(value : TFhirQuantity);
begin
  FMaxDosePerAdministration.free;
  FMaxDosePerAdministration := value; {L1134}
end;

procedure TFhirDosage.SetMaxDosePerLifetime(value : TFhirQuantity);
begin
  FMaxDosePerLifetime.free;
  FMaxDosePerLifetime := value; {L1134}
end;

procedure TFhirDosage.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('sequence');
  fields.add('text');
  fields.add('additionalInstruction');
  fields.add('patientInstruction');
  fields.add('timing');
  fields.add('asNeeded[x]');
  fields.add('site');
  fields.add('route');
  fields.add('method');
  fields.add('doseAndRate');
  fields.add('maxDosePerPeriod');
  fields.add('maxDosePerAdministration');
  fields.add('maxDosePerLifetime');
end;

function TFhirDosage.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FSequence.sizeInBytes);
  inc(result, FText.sizeInBytes);
  inc(result, FadditionalInstructionList.sizeInBytes);
  inc(result, FPatientInstruction.sizeInBytes);
  inc(result, FTiming.sizeInBytes);
  inc(result, FAsNeeded.sizeInBytes);
  inc(result, FSite.sizeInBytes);
  inc(result, FRoute.sizeInBytes);
  inc(result, FMethod.sizeInBytes);
  inc(result, FdoseAndRateList.sizeInBytes);
  inc(result, FMaxDosePerPeriod.sizeInBytes);
  inc(result, FMaxDosePerAdministration.sizeInBytes);
  inc(result, FMaxDosePerLifetime.sizeInBytes);
end;

{ TFhirDosageListEnumerator }

constructor TFhirDosageListEnumerator.Create(list : TFhirDosageList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDosageListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDosageListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDosageListEnumerator.GetCurrent : TFhirDosage;
begin
  Result := FList[FIndex];
end;

function TFhirDosageListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDosageList }

procedure TFhirDosageList.AddItem(value: TFhirDosage);
begin
  assert(value.ClassName = 'TFhirDosage', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDosage');
  add(value);
end;

function TFhirDosageList.Append: TFhirDosage;
begin
  result := TFhirDosage.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDosageList.ClearItems;
begin
  Clear;
end;

function TFhirDosageList.GetEnumerator : TFhirDosageListEnumerator;
begin
  result := TFhirDosageListEnumerator.Create(self.link);
end;

function TFhirDosageList.Clone: TFhirDosageList;
begin
  result := TFhirDosageList(inherited Clone);
end;

function TFhirDosageList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDosageList.GetItemN(index: Integer): TFhirDosage;
begin
  result := TFhirDosage(ObjectByIndex[index]);
end;

function TFhirDosageList.ItemClass: TFslObjectClass;
begin
  result := TFhirDosage;
end;
function TFhirDosageList.IndexOf(value: TFhirDosage): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDosageList.Insert(index: Integer): TFhirDosage;
begin
  result := TFhirDosage.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDosageList.InsertItem(index: Integer; value: TFhirDosage);
begin
  assert(value is TFhirDosage);
  Inherited Insert(index, value);
end;

function TFhirDosageList.Item(index: Integer): TFhirDosage;
begin
  result := TFhirDosage(ObjectByIndex[index]);
end;

function TFhirDosageList.Link: TFhirDosageList;
begin
  result := TFhirDosageList(inherited Link);
end;

procedure TFhirDosageList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDosageList.SetItemByIndex(index: Integer; value: TFhirDosage);
begin
  assert(value is TFhirDosage);
  FhirDosages[index] := value;
end;

procedure TFhirDosageList.SetItemN(index: Integer; value: TFhirDosage);
begin
  assert(value is TFhirDosage);
  ObjectByIndex[index] := value;
end;

{ TFhirDuration }

function TFhirDuration.fhirType : string;
begin
  result := 'Duration';
end;

function TFhirDuration.Link : TFhirDuration;
begin
  result := TFhirDuration(inherited Link);
end;

function TFhirDuration.Clone : TFhirDuration;
begin
  result := TFhirDuration(inherited Clone);
end;

procedure TFhirDuration.listFieldsInOrder(fields : TStringList);
begin
  listQuantityFieldsInOrder(fields);
end;

{ TFhirDurationListEnumerator }

constructor TFhirDurationListEnumerator.Create(list : TFhirDurationList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirDurationListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirDurationListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirDurationListEnumerator.GetCurrent : TFhirDuration;
begin
  Result := FList[FIndex];
end;

function TFhirDurationListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirDurationList }

procedure TFhirDurationList.AddItem(value: TFhirDuration);
begin
  assert(value.ClassName = 'TFhirDuration', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirDuration');
  add(value);
end;

function TFhirDurationList.Append: TFhirDuration;
begin
  result := TFhirDuration.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDurationList.ClearItems;
begin
  Clear;
end;

function TFhirDurationList.GetEnumerator : TFhirDurationListEnumerator;
begin
  result := TFhirDurationListEnumerator.Create(self.link);
end;

function TFhirDurationList.Clone: TFhirDurationList;
begin
  result := TFhirDurationList(inherited Clone);
end;

function TFhirDurationList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirDurationList.GetItemN(index: Integer): TFhirDuration;
begin
  result := TFhirDuration(ObjectByIndex[index]);
end;

function TFhirDurationList.ItemClass: TFslObjectClass;
begin
  result := TFhirDuration;
end;
function TFhirDurationList.IndexOf(value: TFhirDuration): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirDurationList.Insert(index: Integer): TFhirDuration;
begin
  result := TFhirDuration.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirDurationList.InsertItem(index: Integer; value: TFhirDuration);
begin
  assert(value is TFhirDuration);
  Inherited Insert(index, value);
end;

function TFhirDurationList.Item(index: Integer): TFhirDuration;
begin
  result := TFhirDuration(ObjectByIndex[index]);
end;

function TFhirDurationList.Link: TFhirDurationList;
begin
  result := TFhirDurationList(inherited Link);
end;

procedure TFhirDurationList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirDurationList.SetItemByIndex(index: Integer; value: TFhirDuration);
begin
  assert(value is TFhirDuration);
  FhirDurations[index] := value;
end;

procedure TFhirDurationList.SetItemN(index: Integer; value: TFhirDuration);
begin
  assert(value is TFhirDuration);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionSlicing }

constructor TFhirElementDefinitionSlicing.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionSlicing.Destroy;
begin
  FDiscriminatorList.Free;
  FDescription.free;
  FOrdered.free;
  FRules.free;
  inherited;
end;

procedure TFhirElementDefinitionSlicing.Assign(oSource : TFslObject);
begin
  inherited;
  if (TFhirElementDefinitionSlicing(oSource).FDiscriminatorList = nil) then
  begin
    FDiscriminatorList.free;
    FDiscriminatorList := nil;
  end
  else
  begin
    if FDiscriminatorList = nil then
      FDiscriminatorList := TFhirElementDefinitionSlicingDiscriminatorList.Create;
    FDiscriminatorList.Assign(TFhirElementDefinitionSlicing(oSource).FDiscriminatorList);
  end;
  descriptionElement := TFhirElementDefinitionSlicing(oSource).descriptionElement.Clone;
  orderedElement := TFhirElementDefinitionSlicing(oSource).orderedElement.Clone;
  rulesElement := TFhirElementDefinitionSlicing(oSource).rulesElement.Clone;
end;

procedure TFhirElementDefinitionSlicing.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'discriminator') Then
    list.addAll(self, 'discriminator', FDiscriminatorList);
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'ordered') Then
     list.add(self.link, 'ordered', FOrdered.Link);
  if (child_name = 'rules') Then
     list.add(self.link, 'rules', FRules.Link);
end;

procedure TFhirElementDefinitionSlicing.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'discriminator', 'Element', true, TFhirElementDefinitionSlicingDiscriminator, FDiscriminatorList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'ordered', 'boolean', false, TFhirBoolean, FOrdered.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'rules', 'code', false, TFhirEnum, FRules.Link)); {L1170}
end;

function TFhirElementDefinitionSlicing.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'discriminator') then
  begin
    DiscriminatorList.add(propValue as TFhirElementDefinitionSlicingDiscriminator) {L1048};
    result := propValue;
  end
  else if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'ordered') then
  begin
    OrderedElement := asBoolean(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'rules') then
  begin
    RulesElement := asEnum(SYSTEMS_TFhirSlicingRulesEnum, CODES_TFhirSlicingRulesEnum, propValue) {L1209};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionSlicing.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'discriminator') then DiscriminatorList.insertItem(index, propValue as TFhirElementDefinitionSlicingDiscriminator) {L1049}
  else inherited;
end;

function TFhirElementDefinitionSlicing.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'discriminator') then result := DiscriminatorList.new() {L1053}
  else if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'ordered') then result := TFhirBoolean.create() {L1223}
  else if (propName = 'rules') then result := TFhirEnum.create(SYSTEMS_TFhirSlicingRulesEnum[SlicingRulesNull], CODES_TFhirSlicingRulesEnum[SlicingRulesNull])  {L1211}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionSlicing.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'discriminator') then result := 'Element'
  else if (propName = 'description') then result := 'string'
  else if (propName = 'ordered') then result := 'boolean'
  else if (propName = 'rules') then result := 'code'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionSlicing.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'discriminator') then deletePropertyValue('discriminator', DiscriminatorList, value) {L1054}
  else if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'ordered') then OrderedElement := nil
  else if (propName = 'rules') then RulesElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionSlicing.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'discriminator') then replacePropertyValue('discriminator', DiscriminatorList, existing, new) {L1055}
  else if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'ordered') then OrderedElement := asBoolean(new) {L1222}
  else if (propName = 'rules') then RulesElement := asEnum(SYSTEMS_TFhirSlicingRulesEnum, CODES_TFhirSlicingRulesEnum, new) {L1210}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionSlicing.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'discriminator') then DiscriminatorList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionSlicing.fhirType : string;
begin
  result := 'ElementDefinition.slicing';
end;

function TFhirElementDefinitionSlicing.Link : TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing(inherited Link);
end;

function TFhirElementDefinitionSlicing.Clone : TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing(inherited Clone);
end;

function TFhirElementDefinitionSlicing.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionSlicing;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionSlicing)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionSlicing(other);
    result := compareDeep(discriminatorList, o.discriminatorList, true) and compareDeep(descriptionElement, o.descriptionElement, true) and 
      compareDeep(orderedElement, o.orderedElement, true) and compareDeep(rulesElement, o.rulesElement, true);
  end;
end;

function TFhirElementDefinitionSlicing.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FdiscriminatorList) and isEmptyProp(FDescription) and isEmptyProp(FOrdered) and isEmptyProp(FRules);
end;

function TFhirElementDefinitionSlicing.GetDiscriminatorList : TFhirElementDefinitionSlicingDiscriminatorList;
begin
  if FDiscriminatorList = nil then
    FDiscriminatorList := TFhirElementDefinitionSlicingDiscriminatorList.Create;
  result := FDiscriminatorList;
end;

function TFhirElementDefinitionSlicing.GetHasDiscriminatorList : boolean;
begin
  result := (FDiscriminatorList <> nil) and (FDiscriminatorList.count > 0);
end;

procedure TFhirElementDefinitionSlicing.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirElementDefinitionSlicing.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirElementDefinitionSlicing.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

procedure TFhirElementDefinitionSlicing.SetOrdered(value : TFhirBoolean);
begin
  FOrdered.free;
  FOrdered := value; {L1134}
end;

function TFhirElementDefinitionSlicing.GetOrderedST : Boolean;
begin
  if FOrdered = nil then
    result := false
  else
    result := FOrdered.value;
end;

procedure TFhirElementDefinitionSlicing.SetOrderedST(value : Boolean);
begin
  if FOrdered = nil then
    FOrdered := TFhirBoolean.create;
  FOrdered.value := value
end;

procedure TFhirElementDefinitionSlicing.SetRules(value : TFhirEnum);
begin
  FRules.free;
  FRules := value;
end;

function TFhirElementDefinitionSlicing.GetRulesST : TFhirSlicingRulesEnum;
begin
  if FRules = nil then
    result := TFhirSlicingRulesEnum(0)
  else
    result := TFhirSlicingRulesEnum(StringArrayIndexOfSensitive(CODES_TFhirSlicingRulesEnum, FRules.value));
end;

procedure TFhirElementDefinitionSlicing.SetRulesST(value : TFhirSlicingRulesEnum);
begin
  if ord(value) = 0 then
    RulesElement := nil
  else
    RulesElement := TFhirEnum.create(SYSTEMS_TFhirSlicingRulesEnum[value], CODES_TFhirSlicingRulesEnum[value]);
end;

procedure TFhirElementDefinitionSlicing.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('discriminator');
  fields.add('description');
  fields.add('ordered');
  fields.add('rules');
end;

function TFhirElementDefinitionSlicing.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FdiscriminatorList.sizeInBytes);
  inc(result, FDescription.sizeInBytes);
  inc(result, FOrdered.sizeInBytes);
  inc(result, FRules.sizeInBytes);
end;

{ TFhirElementDefinitionSlicingListEnumerator }

constructor TFhirElementDefinitionSlicingListEnumerator.Create(list : TFhirElementDefinitionSlicingList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionSlicingListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionSlicingListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionSlicingListEnumerator.GetCurrent : TFhirElementDefinitionSlicing;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionSlicingListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionSlicingList }

procedure TFhirElementDefinitionSlicingList.AddItem(value: TFhirElementDefinitionSlicing);
begin
  assert(value.ClassName = 'TFhirElementDefinitionSlicing', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionSlicing');
  add(value);
end;

function TFhirElementDefinitionSlicingList.Append: TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionSlicingList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionSlicingList.GetEnumerator : TFhirElementDefinitionSlicingListEnumerator;
begin
  result := TFhirElementDefinitionSlicingListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionSlicingList.Clone: TFhirElementDefinitionSlicingList;
begin
  result := TFhirElementDefinitionSlicingList(inherited Clone);
end;

function TFhirElementDefinitionSlicingList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionSlicingList.GetItemN(index: Integer): TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing(ObjectByIndex[index]);
end;

function TFhirElementDefinitionSlicingList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionSlicing;
end;
function TFhirElementDefinitionSlicingList.IndexOf(value: TFhirElementDefinitionSlicing): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionSlicingList.Insert(index: Integer): TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionSlicingList.InsertItem(index: Integer; value: TFhirElementDefinitionSlicing);
begin
  assert(value is TFhirElementDefinitionSlicing);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionSlicingList.Item(index: Integer): TFhirElementDefinitionSlicing;
begin
  result := TFhirElementDefinitionSlicing(ObjectByIndex[index]);
end;

function TFhirElementDefinitionSlicingList.Link: TFhirElementDefinitionSlicingList;
begin
  result := TFhirElementDefinitionSlicingList(inherited Link);
end;

procedure TFhirElementDefinitionSlicingList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionSlicingList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionSlicing);
begin
  assert(value is TFhirElementDefinitionSlicing);
  FhirElementDefinitionSlicings[index] := value;
end;

procedure TFhirElementDefinitionSlicingList.SetItemN(index: Integer; value: TFhirElementDefinitionSlicing);
begin
  assert(value is TFhirElementDefinitionSlicing);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionSlicingDiscriminator }

constructor TFhirElementDefinitionSlicingDiscriminator.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionSlicingDiscriminator.Destroy;
begin
  FType_.free;
  FPath.free;
  inherited;
end;

procedure TFhirElementDefinitionSlicingDiscriminator.Assign(oSource : TFslObject);
begin
  inherited;
  type_Element := TFhirElementDefinitionSlicingDiscriminator(oSource).type_Element.Clone;
  pathElement := TFhirElementDefinitionSlicingDiscriminator(oSource).pathElement.Clone;
end;

procedure TFhirElementDefinitionSlicingDiscriminator.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'path') Then
     list.add(self.link, 'path', FPath.Link);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'code', false, TFhirEnum, FType_.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'path', 'string', false, TFhirString, FPath.Link)); {L1172}
end;

function TFhirElementDefinitionSlicingDiscriminator.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_Element := asEnum(SYSTEMS_TFhirDiscriminatorTypeEnum, CODES_TFhirDiscriminatorTypeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'path') then
  begin
    PathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirElementDefinitionSlicingDiscriminator.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirEnum.create(SYSTEMS_TFhirDiscriminatorTypeEnum[DiscriminatorTypeNull], CODES_TFhirDiscriminatorTypeEnum[DiscriminatorTypeNull])  {L1211}
  else if (propName = 'path') then result := TFhirString.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionSlicingDiscriminator.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'code'
  else if (propName = 'path') then result := 'string'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (propName = 'path') then PathElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := asEnum(SYSTEMS_TFhirDiscriminatorTypeEnum, CODES_TFhirDiscriminatorTypeEnum, new) {L1210}
  else if (propName = 'path') then PathElement := asString(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionSlicingDiscriminator.fhirType : string;
begin
  result := 'ElementDefinition.slicing.discriminator';
end;

function TFhirElementDefinitionSlicingDiscriminator.Link : TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator(inherited Link);
end;

function TFhirElementDefinitionSlicingDiscriminator.Clone : TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator(inherited Clone);
end;

function TFhirElementDefinitionSlicingDiscriminator.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionSlicingDiscriminator;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionSlicingDiscriminator)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionSlicingDiscriminator(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(pathElement, o.pathElement, true);
  end;
end;

function TFhirElementDefinitionSlicingDiscriminator.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FPath);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.SetType_(value : TFhirEnum);
begin
  FType_.free;
  FType_ := value;
end;

function TFhirElementDefinitionSlicingDiscriminator.GetType_ST : TFhirDiscriminatorTypeEnum;
begin
  if FType_ = nil then
    result := TFhirDiscriminatorTypeEnum(0)
  else
    result := TFhirDiscriminatorTypeEnum(StringArrayIndexOfSensitive(CODES_TFhirDiscriminatorTypeEnum, FType_.value));
end;

procedure TFhirElementDefinitionSlicingDiscriminator.SetType_ST(value : TFhirDiscriminatorTypeEnum);
begin
  if ord(value) = 0 then
    Type_Element := nil
  else
    Type_Element := TFhirEnum.create(SYSTEMS_TFhirDiscriminatorTypeEnum[value], CODES_TFhirDiscriminatorTypeEnum[value]);
end;

procedure TFhirElementDefinitionSlicingDiscriminator.SetPath(value : TFhirString);
begin
  FPath.free;
  FPath := value; {L1134}
end;

function TFhirElementDefinitionSlicingDiscriminator.GetPathST : String;
begin
  if FPath = nil then
    result := ''
  else
    result := FPath.value;
end;

procedure TFhirElementDefinitionSlicingDiscriminator.SetPathST(value : String);
begin
  if value <> '' then
  begin
    if FPath = nil then
      FPath := TFhirString.create;
    FPath.value := value
  end
  else if FPath <> nil then
    FPath.value := '';
end;

procedure TFhirElementDefinitionSlicingDiscriminator.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('type');
  fields.add('path');
end;

function TFhirElementDefinitionSlicingDiscriminator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FPath.sizeInBytes);
end;

{ TFhirElementDefinitionSlicingDiscriminatorListEnumerator }

constructor TFhirElementDefinitionSlicingDiscriminatorListEnumerator.Create(list : TFhirElementDefinitionSlicingDiscriminatorList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionSlicingDiscriminatorListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionSlicingDiscriminatorListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionSlicingDiscriminatorListEnumerator.GetCurrent : TFhirElementDefinitionSlicingDiscriminator;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionSlicingDiscriminatorListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionSlicingDiscriminatorList }

procedure TFhirElementDefinitionSlicingDiscriminatorList.AddItem(value: TFhirElementDefinitionSlicingDiscriminator);
begin
  assert(value.ClassName = 'TFhirElementDefinitionSlicingDiscriminator', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionSlicingDiscriminator');
  add(value);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.Append: TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionSlicingDiscriminatorList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionSlicingDiscriminatorList.GetEnumerator : TFhirElementDefinitionSlicingDiscriminatorListEnumerator;
begin
  result := TFhirElementDefinitionSlicingDiscriminatorListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.Clone: TFhirElementDefinitionSlicingDiscriminatorList;
begin
  result := TFhirElementDefinitionSlicingDiscriminatorList(inherited Clone);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionSlicingDiscriminatorList.GetItemN(index: Integer): TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator(ObjectByIndex[index]);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionSlicingDiscriminator;
end;
function TFhirElementDefinitionSlicingDiscriminatorList.IndexOf(value: TFhirElementDefinitionSlicingDiscriminator): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.Insert(index: Integer): TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionSlicingDiscriminatorList.InsertItem(index: Integer; value: TFhirElementDefinitionSlicingDiscriminator);
begin
  assert(value is TFhirElementDefinitionSlicingDiscriminator);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.Item(index: Integer): TFhirElementDefinitionSlicingDiscriminator;
begin
  result := TFhirElementDefinitionSlicingDiscriminator(ObjectByIndex[index]);
end;

function TFhirElementDefinitionSlicingDiscriminatorList.Link: TFhirElementDefinitionSlicingDiscriminatorList;
begin
  result := TFhirElementDefinitionSlicingDiscriminatorList(inherited Link);
end;

procedure TFhirElementDefinitionSlicingDiscriminatorList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionSlicingDiscriminatorList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionSlicingDiscriminator);
begin
  assert(value is TFhirElementDefinitionSlicingDiscriminator);
  FhirElementDefinitionSlicingDiscriminators[index] := value;
end;

procedure TFhirElementDefinitionSlicingDiscriminatorList.SetItemN(index: Integer; value: TFhirElementDefinitionSlicingDiscriminator);
begin
  assert(value is TFhirElementDefinitionSlicingDiscriminator);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionBase }

constructor TFhirElementDefinitionBase.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionBase.Destroy;
begin
  FPath.free;
  FMin.free;
  FMax.free;
  inherited;
end;

procedure TFhirElementDefinitionBase.Assign(oSource : TFslObject);
begin
  inherited;
  pathElement := TFhirElementDefinitionBase(oSource).pathElement.Clone;
  minElement := TFhirElementDefinitionBase(oSource).minElement.Clone;
  maxElement := TFhirElementDefinitionBase(oSource).maxElement.Clone;
end;

procedure TFhirElementDefinitionBase.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'path') Then
     list.add(self.link, 'path', FPath.Link);
  if (child_name = 'min') Then
     list.add(self.link, 'min', FMin.Link);
  if (child_name = 'max') Then
     list.add(self.link, 'max', FMax.Link);
end;

procedure TFhirElementDefinitionBase.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'path', 'string', false, TFhirString, FPath.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'min', 'unsignedInt', false, TFhirUnsignedInt, FMin.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'max', 'string', false, TFhirString, FMax.Link)); {L1172}
end;

function TFhirElementDefinitionBase.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'path') then
  begin
    PathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'min') then
  begin
    MinElement := asUnsignedInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'max') then
  begin
    MaxElement := asString(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionBase.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirElementDefinitionBase.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'path') then result := TFhirString.create() {L1223}
  else if (propName = 'min') then result := TFhirUnsignedInt.create() {L1223}
  else if (propName = 'max') then result := TFhirString.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionBase.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'path') then result := 'string'
  else if (propName = 'min') then result := 'unsignedInt'
  else if (propName = 'max') then result := 'string'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionBase.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'path') then PathElement := nil
  else if (propName = 'min') then MinElement := nil
  else if (propName = 'max') then MaxElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionBase.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'path') then PathElement := asString(new) {L1222}
  else if (propName = 'min') then MinElement := asUnsignedInt(new) {L1222}
  else if (propName = 'max') then MaxElement := asString(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionBase.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionBase.fhirType : string;
begin
  result := 'ElementDefinition.base';
end;

function TFhirElementDefinitionBase.Link : TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase(inherited Link);
end;

function TFhirElementDefinitionBase.Clone : TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase(inherited Clone);
end;

function TFhirElementDefinitionBase.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionBase;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionBase)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionBase(other);
    result := compareDeep(pathElement, o.pathElement, true) and compareDeep(minElement, o.minElement, true) and 
      compareDeep(maxElement, o.maxElement, true);
  end;
end;

function TFhirElementDefinitionBase.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FPath) and isEmptyProp(FMin) and isEmptyProp(FMax);
end;

procedure TFhirElementDefinitionBase.SetPath(value : TFhirString);
begin
  FPath.free;
  FPath := value; {L1134}
end;

function TFhirElementDefinitionBase.GetPathST : String;
begin
  if FPath = nil then
    result := ''
  else
    result := FPath.value;
end;

procedure TFhirElementDefinitionBase.SetPathST(value : String);
begin
  if value <> '' then
  begin
    if FPath = nil then
      FPath := TFhirString.create;
    FPath.value := value
  end
  else if FPath <> nil then
    FPath.value := '';
end;

procedure TFhirElementDefinitionBase.SetMin(value : TFhirUnsignedInt);
begin
  FMin.free;
  FMin := value; {L1134}
end;

function TFhirElementDefinitionBase.GetMinST : String;
begin
  if FMin = nil then
    result := ''
  else
    result := FMin.value;
end;

procedure TFhirElementDefinitionBase.SetMinST(value : String);
begin
  if value <> '' then
  begin
    if FMin = nil then
      FMin := TFhirUnsignedInt.create;
    FMin.value := value
  end
  else if FMin <> nil then
    FMin.value := '';
end;

procedure TFhirElementDefinitionBase.SetMax(value : TFhirString);
begin
  FMax.free;
  FMax := value; {L1134}
end;

function TFhirElementDefinitionBase.GetMaxST : String;
begin
  if FMax = nil then
    result := ''
  else
    result := FMax.value;
end;

procedure TFhirElementDefinitionBase.SetMaxST(value : String);
begin
  if value <> '' then
  begin
    if FMax = nil then
      FMax := TFhirString.create;
    FMax.value := value
  end
  else if FMax <> nil then
    FMax.value := '';
end;

procedure TFhirElementDefinitionBase.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('path');
  fields.add('min');
  fields.add('max');
end;

function TFhirElementDefinitionBase.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FPath.sizeInBytes);
  inc(result, FMin.sizeInBytes);
  inc(result, FMax.sizeInBytes);
end;

{ TFhirElementDefinitionBaseListEnumerator }

constructor TFhirElementDefinitionBaseListEnumerator.Create(list : TFhirElementDefinitionBaseList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionBaseListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionBaseListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionBaseListEnumerator.GetCurrent : TFhirElementDefinitionBase;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionBaseListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionBaseList }

procedure TFhirElementDefinitionBaseList.AddItem(value: TFhirElementDefinitionBase);
begin
  assert(value.ClassName = 'TFhirElementDefinitionBase', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionBase');
  add(value);
end;

function TFhirElementDefinitionBaseList.Append: TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionBaseList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionBaseList.GetEnumerator : TFhirElementDefinitionBaseListEnumerator;
begin
  result := TFhirElementDefinitionBaseListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionBaseList.Clone: TFhirElementDefinitionBaseList;
begin
  result := TFhirElementDefinitionBaseList(inherited Clone);
end;

function TFhirElementDefinitionBaseList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionBaseList.GetItemN(index: Integer): TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase(ObjectByIndex[index]);
end;

function TFhirElementDefinitionBaseList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionBase;
end;
function TFhirElementDefinitionBaseList.IndexOf(value: TFhirElementDefinitionBase): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionBaseList.Insert(index: Integer): TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionBaseList.InsertItem(index: Integer; value: TFhirElementDefinitionBase);
begin
  assert(value is TFhirElementDefinitionBase);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionBaseList.Item(index: Integer): TFhirElementDefinitionBase;
begin
  result := TFhirElementDefinitionBase(ObjectByIndex[index]);
end;

function TFhirElementDefinitionBaseList.Link: TFhirElementDefinitionBaseList;
begin
  result := TFhirElementDefinitionBaseList(inherited Link);
end;

procedure TFhirElementDefinitionBaseList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionBaseList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionBase);
begin
  assert(value is TFhirElementDefinitionBase);
  FhirElementDefinitionBases[index] := value;
end;

procedure TFhirElementDefinitionBaseList.SetItemN(index: Integer; value: TFhirElementDefinitionBase);
begin
  assert(value is TFhirElementDefinitionBase);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionType }

constructor TFhirElementDefinitionType.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionType.Destroy;
begin
  FCode.free;
  FProfileList.Free;
  FTargetProfileList.Free;
  FAggregation.Free;
  FVersioning.free;
  inherited;
end;

procedure TFhirElementDefinitionType.Assign(oSource : TFslObject);
begin
  inherited;
  codeElement := TFhirElementDefinitionType(oSource).codeElement.Clone;
  if (TFhirElementDefinitionType(oSource).FProfileList = nil) then
  begin
    FProfileList.free;
    FProfileList := nil;
  end
  else
  begin
    if FProfileList = nil then
      FProfileList := TFhirCanonicalList.Create;
    FProfileList.Assign(TFhirElementDefinitionType(oSource).FProfileList);
  end;
  if (TFhirElementDefinitionType(oSource).FTargetProfileList = nil) then
  begin
    FTargetProfileList.free;
    FTargetProfileList := nil;
  end
  else
  begin
    if FTargetProfileList = nil then
      FTargetProfileList := TFhirCanonicalList.Create;
    FTargetProfileList.Assign(TFhirElementDefinitionType(oSource).FTargetProfileList);
  end;
  if (TFhirElementDefinitionType(oSource).FAggregation = nil) then
  begin
    FAggregation.free;
    FAggregation := nil;
  end
  else
  begin
    FAggregation := TFhirEnumList.Create(SYSTEMS_TFhirAggregationModeEnum, CODES_TFhirAggregationModeEnum);
    FAggregation.Assign(TFhirElementDefinitionType(oSource).FAggregation);
  end;
  versioningElement := TFhirElementDefinitionType(oSource).versioningElement.Clone;
end;

procedure TFhirElementDefinitionType.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'code') Then
     list.add(self.link, 'code', FCode.Link);
  if (child_name = 'profile') Then
    list.addAll(self, 'profile', FProfileList);
  if (child_name = 'targetProfile') Then
    list.addAll(self, 'targetProfile', FTargetProfileList);
  if (child_name = 'aggregation') Then
     list.addAll(self, 'aggregation', FAggregation);
  if (child_name = 'versioning') Then
     list.add(self.link, 'versioning', FVersioning.Link);
end;

procedure TFhirElementDefinitionType.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'code', 'uri', false, TFhirUri, FCode.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'profile', 'canonical', true, TFhirCanonical, FProfileList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'targetProfile', 'canonical', true, TFhirCanonical, FTargetProfileList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'aggregation', 'code', true, TFhirEnum, FAggregation.Link)) {L990};
  oList.add(TFHIRProperty.create(self, 'versioning', 'code', false, TFhirEnum, FVersioning.Link)); {L1170}
end;

function TFhirElementDefinitionType.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'code') then
  begin
    CodeElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'profile') then
  begin
    ProfileList.add(asCanonical(propValue)){2};     result := propValue;

  end
  else if (propName = 'targetProfile') then
  begin
    TargetProfileList.add(asCanonical(propValue)){2};     result := propValue;

  end
  else if (propName = 'aggregation') then
  begin
    AggregationList.add(asEnum(SYSTEMS_TFhirAggregationModeEnum, CODES_TFhirAggregationModeEnum, propValue)); {L994}
    result := propValue;
  end
  else if (propName = 'versioning') then
  begin
    VersioningElement := asEnum(SYSTEMS_TFhirReferenceVersionRulesEnum, CODES_TFhirReferenceVersionRulesEnum, propValue) {L1209};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionType.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'profile') then ProfileList.insertItem(index, asCanonical(propValue)) {L1045}
  else if (propName = 'targetProfile') then TargetProfileList.insertItem(index, asCanonical(propValue)) {L1045}
  else if (propName = 'aggregation') then FAggregation.insertItem(index, asEnum(SYSTEMS_TFhirAggregationModeEnum, CODES_TFhirAggregationModeEnum, propValue)) {L995}
  else inherited;
end;

function TFhirElementDefinitionType.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'code') then result := TFhirUri.create() {L1223}
  else if (propName = 'profile') then result := ProfileList.new() {L1053}
  else if (propName = 'targetProfile') then result := TargetProfileList.new() {L1053}
  else if (propName = 'versioning') then result := TFhirEnum.create(SYSTEMS_TFhirReferenceVersionRulesEnum[ReferenceVersionRulesNull], CODES_TFhirReferenceVersionRulesEnum[ReferenceVersionRulesNull])  {L1211}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionType.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'code') then result := 'uri'
  else if (propName = 'profile') then result := 'canonical'
  else if (propName = 'targetProfile') then result := 'canonical'
  else if (propName = 'aggregation') then result := 'code'
  else if (propName = 'versioning') then result := 'code'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionType.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'code') then CodeElement := nil
  else if (propName = 'profile') then deletePropertyValue('profile', ProfileList, value) {L1054}
  else if (propName = 'targetProfile') then deletePropertyValue('targetProfile', TargetProfileList, value) {L1054}
  else if (propName = 'versioning') then VersioningElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionType.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'code') then CodeElement := asUri(new) {L1222}
  else if (propName = 'profile') then replacePropertyValue('profile', ProfileList, existing, new) {L1055}
  else if (propName = 'targetProfile') then replacePropertyValue('targetProfile', TargetProfileList, existing, new) {L1055}
  else if (propName = 'versioning') then VersioningElement := asEnum(SYSTEMS_TFhirReferenceVersionRulesEnum, CODES_TFhirReferenceVersionRulesEnum, new) {L1210}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionType.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'profile') then ProfileList.move(source, destination) {L1046}
  else if (propName = 'targetProfile') then TargetProfileList.move(source, destination) {L1046}
  else if (propName = 'aggregation') then FAggregation.move(source, destination) {L996}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionType.fhirType : string;
begin
  result := 'ElementDefinition.type';
end;

function TFhirElementDefinitionType.Link : TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType(inherited Link);
end;

function TFhirElementDefinitionType.Clone : TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType(inherited Clone);
end;

function TFhirElementDefinitionType.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionType;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionType)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionType(other);
    result := compareDeep(codeElement, o.codeElement, true) and compareDeep(profileList, o.profileList, true) and 
      compareDeep(targetProfileList, o.targetProfileList, true) and compareDeep(aggregationList, o.aggregationList, true) and 
      compareDeep(versioningElement, o.versioningElement, true);
  end;
end;

function TFhirElementDefinitionType.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FCode) and isEmptyProp(FprofileList) and isEmptyProp(FtargetProfileList) and isEmptyProp(FAggregation) and isEmptyProp(FVersioning);
end;

procedure TFhirElementDefinitionType.SetCode(value : TFhirUri);
begin
  FCode.free;
  FCode := value; {L1134}
end;

function TFhirElementDefinitionType.GetCodeST : String;
begin
  if FCode = nil then
    result := ''
  else
    result := FCode.value;
end;

procedure TFhirElementDefinitionType.SetCodeST(value : String);
begin
  if value <> '' then
  begin
    if FCode = nil then
      FCode := TFhirUri.create;
    FCode.value := value
  end
  else if FCode <> nil then
    FCode.value := '';
end;

function TFhirElementDefinitionType.GetProfileList : TFhirCanonicalList;
begin
  if FProfileList = nil then
    FProfileList := TFhirCanonicalList.Create;
  result := FProfileList;
end;

function TFhirElementDefinitionType.GetHasProfileList : boolean;
begin
  result := (FProfileList <> nil) and (FProfileList.count > 0);
end;

function TFhirElementDefinitionType.GetTargetProfileList : TFhirCanonicalList;
begin
  if FTargetProfileList = nil then
    FTargetProfileList := TFhirCanonicalList.Create;
  result := FTargetProfileList;
end;

function TFhirElementDefinitionType.GetHasTargetProfileList : boolean;
begin
  result := (FTargetProfileList <> nil) and (FTargetProfileList.count > 0);
end;

function TFhirElementDefinitionType.GetAggregation : TFhirEnumList;
begin
  if FAggregation = nil then
    FAggregation := TFhirEnumList.Create(SYSTEMS_TFhirAggregationModeEnum, CODES_TFhirAggregationModeEnum);
  result := FAggregation;
end;

function TFhirElementDefinitionType.GetHasAggregation : boolean;
begin
  result := (FAggregation <> nil) and (FAggregation.count > 0);
end;

function TFhirElementDefinitionType.GetAggregationST : TFhirAggregationModeEnumList;
  var i : integer;
begin
  result := [];
  if Faggregation <> nil then
    for i := 0 to Faggregation.count - 1 do
      result := result + [TFhirAggregationModeEnum(StringArrayIndexOfSensitive(CODES_TFhirAggregationModeEnum, Faggregation[i].value))];
end;

procedure TFhirElementDefinitionType.SetAggregationST(value : TFhirAggregationModeEnumList);
var a : TFhirAggregationModeEnum;
begin
  if Faggregation = nil then
    Faggregation := TFhirEnumList.create(SYSTEMS_TFhirAggregationModeEnum, CODES_TFhirAggregationModeEnum);
  Faggregation.clear;
  for a := low(TFhirAggregationModeEnum) to high(TFhirAggregationModeEnum) do
    if a in value then
      begin
         if Faggregation = nil then
           Faggregation := TFhirEnumList.create(SYSTEMS_TFhirAggregationModeEnum, CODES_TFhirAggregationModeEnum);
         Faggregation.add(TFhirEnum.create(SYSTEMS_TFhirAggregationModeEnum[a], CODES_TFhirAggregationModeEnum[a]));
      end;
end;

procedure TFhirElementDefinitionType.SetVersioning(value : TFhirEnum);
begin
  FVersioning.free;
  FVersioning := value;
end;

function TFhirElementDefinitionType.GetVersioningST : TFhirReferenceVersionRulesEnum;
begin
  if FVersioning = nil then
    result := TFhirReferenceVersionRulesEnum(0)
  else
    result := TFhirReferenceVersionRulesEnum(StringArrayIndexOfSensitive(CODES_TFhirReferenceVersionRulesEnum, FVersioning.value));
end;

procedure TFhirElementDefinitionType.SetVersioningST(value : TFhirReferenceVersionRulesEnum);
begin
  if ord(value) = 0 then
    VersioningElement := nil
  else
    VersioningElement := TFhirEnum.create(SYSTEMS_TFhirReferenceVersionRulesEnum[value], CODES_TFhirReferenceVersionRulesEnum[value]);
end;

procedure TFhirElementDefinitionType.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('code');
  fields.add('profile');
  fields.add('targetProfile');
  fields.add('aggregation');
  fields.add('versioning');
end;

function TFhirElementDefinitionType.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FCode.sizeInBytes);
  inc(result, FprofileList.sizeInBytes);
  inc(result, FtargetProfileList.sizeInBytes);
  inc(result, FAggregation.sizeInBytes);
  inc(result, FVersioning.sizeInBytes);
end;

{ TFhirElementDefinitionTypeListEnumerator }

constructor TFhirElementDefinitionTypeListEnumerator.Create(list : TFhirElementDefinitionTypeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionTypeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionTypeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionTypeListEnumerator.GetCurrent : TFhirElementDefinitionType;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionTypeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionTypeList }

procedure TFhirElementDefinitionTypeList.AddItem(value: TFhirElementDefinitionType);
begin
  assert(value.ClassName = 'TFhirElementDefinitionType', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionType');
  add(value);
end;

function TFhirElementDefinitionTypeList.Append: TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionTypeList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionTypeList.GetEnumerator : TFhirElementDefinitionTypeListEnumerator;
begin
  result := TFhirElementDefinitionTypeListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionTypeList.Clone: TFhirElementDefinitionTypeList;
begin
  result := TFhirElementDefinitionTypeList(inherited Clone);
end;

function TFhirElementDefinitionTypeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionTypeList.GetItemN(index: Integer): TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType(ObjectByIndex[index]);
end;

function TFhirElementDefinitionTypeList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionType;
end;
function TFhirElementDefinitionTypeList.IndexOf(value: TFhirElementDefinitionType): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionTypeList.Insert(index: Integer): TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionTypeList.InsertItem(index: Integer; value: TFhirElementDefinitionType);
begin
  assert(value is TFhirElementDefinitionType);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionTypeList.Item(index: Integer): TFhirElementDefinitionType;
begin
  result := TFhirElementDefinitionType(ObjectByIndex[index]);
end;

function TFhirElementDefinitionTypeList.Link: TFhirElementDefinitionTypeList;
begin
  result := TFhirElementDefinitionTypeList(inherited Link);
end;

procedure TFhirElementDefinitionTypeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionTypeList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionType);
begin
  assert(value is TFhirElementDefinitionType);
  FhirElementDefinitionTypes[index] := value;
end;

procedure TFhirElementDefinitionTypeList.SetItemN(index: Integer; value: TFhirElementDefinitionType);
begin
  assert(value is TFhirElementDefinitionType);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionExample }

constructor TFhirElementDefinitionExample.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionExample.Destroy;
begin
  FLabel_.free;
  FValue.free;
  inherited;
end;

procedure TFhirElementDefinitionExample.Assign(oSource : TFslObject);
begin
  inherited;
  label_Element := TFhirElementDefinitionExample(oSource).label_Element.Clone;
  value := TFhirElementDefinitionExample(oSource).value.Clone;
end;

procedure TFhirElementDefinitionExample.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'label') Then
     list.add(self.link, 'label', FLabel_.Link);
  if (child_name = 'value[x]') or (child_name = 'value') Then
     list.add(self.link, 'value[x]', FValue.Link);
end;

procedure TFhirElementDefinitionExample.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'label', 'string', false, TFhirString, FLabel_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'value[x]', 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta', false, TFhirDataType, FValue.Link)); {L1172}
end;

function TFhirElementDefinitionExample.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'label') then
  begin
    Label_Element := asString(propValue) {L1221};
    result := propValue;
  end
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then
  begin
    Value := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionExample.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirElementDefinitionExample.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'label') then result := TFhirString.create() {L1223}
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then raise EFHIRException.create('Cannot make property Value') {L1191}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionExample.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'label') then result := 'string'
  else if (propName = 'value[x]') then result := 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionExample.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'label') then Label_Element := nil
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then ValueElement := nil {L1189}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionExample.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'label') then Label_Element := asString(new) {L1222}
  else if (isMatchingName(propName, 'value', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then ValueElement := new as TFhirDataType {L1190}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionExample.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionExample.fhirType : string;
begin
  result := 'ElementDefinition.example';
end;

function TFhirElementDefinitionExample.Link : TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample(inherited Link);
end;

function TFhirElementDefinitionExample.Clone : TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample(inherited Clone);
end;

function TFhirElementDefinitionExample.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionExample;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionExample)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionExample(other);
    result := compareDeep(label_Element, o.label_Element, true) and compareDeep(valueElement, o.valueElement, true);
  end;
end;

function TFhirElementDefinitionExample.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FLabel_) and isEmptyProp(FValue);
end;

procedure TFhirElementDefinitionExample.SetLabel_(value : TFhirString);
begin
  FLabel_.free;
  FLabel_ := value; {L1134}
end;

function TFhirElementDefinitionExample.GetLabel_ST : String;
begin
  if FLabel_ = nil then
    result := ''
  else
    result := FLabel_.value;
end;

procedure TFhirElementDefinitionExample.SetLabel_ST(value : String);
begin
  if value <> '' then
  begin
    if FLabel_ = nil then
      FLabel_ := TFhirString.create;
    FLabel_.value := value
  end
  else if FLabel_ <> nil then
    FLabel_.value := '';
end;

procedure TFhirElementDefinitionExample.SetValue(value : TFhirDataType);
begin
  FValue.free;
  FValue := value; {L1134}
end;

procedure TFhirElementDefinitionExample.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('label');
  fields.add('value[x]');
end;

function TFhirElementDefinitionExample.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FLabel_.sizeInBytes);
  inc(result, FValue.sizeInBytes);
end;

{ TFhirElementDefinitionExampleListEnumerator }

constructor TFhirElementDefinitionExampleListEnumerator.Create(list : TFhirElementDefinitionExampleList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionExampleListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionExampleListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionExampleListEnumerator.GetCurrent : TFhirElementDefinitionExample;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionExampleListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionExampleList }

procedure TFhirElementDefinitionExampleList.AddItem(value: TFhirElementDefinitionExample);
begin
  assert(value.ClassName = 'TFhirElementDefinitionExample', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionExample');
  add(value);
end;

function TFhirElementDefinitionExampleList.Append: TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionExampleList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionExampleList.GetEnumerator : TFhirElementDefinitionExampleListEnumerator;
begin
  result := TFhirElementDefinitionExampleListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionExampleList.Clone: TFhirElementDefinitionExampleList;
begin
  result := TFhirElementDefinitionExampleList(inherited Clone);
end;

function TFhirElementDefinitionExampleList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionExampleList.GetItemN(index: Integer): TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample(ObjectByIndex[index]);
end;

function TFhirElementDefinitionExampleList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionExample;
end;
function TFhirElementDefinitionExampleList.IndexOf(value: TFhirElementDefinitionExample): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionExampleList.Insert(index: Integer): TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionExampleList.InsertItem(index: Integer; value: TFhirElementDefinitionExample);
begin
  assert(value is TFhirElementDefinitionExample);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionExampleList.Item(index: Integer): TFhirElementDefinitionExample;
begin
  result := TFhirElementDefinitionExample(ObjectByIndex[index]);
end;

function TFhirElementDefinitionExampleList.Link: TFhirElementDefinitionExampleList;
begin
  result := TFhirElementDefinitionExampleList(inherited Link);
end;

procedure TFhirElementDefinitionExampleList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionExampleList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionExample);
begin
  assert(value is TFhirElementDefinitionExample);
  FhirElementDefinitionExamples[index] := value;
end;

procedure TFhirElementDefinitionExampleList.SetItemN(index: Integer; value: TFhirElementDefinitionExample);
begin
  assert(value is TFhirElementDefinitionExample);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionConstraint }

constructor TFhirElementDefinitionConstraint.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionConstraint.Destroy;
begin
  FKey.free;
  FRequirements.free;
  FSeverity.free;
  FHuman.free;
  FExpression.free;
  FXpath.free;
  FSource.free;
  inherited;
end;

procedure TFhirElementDefinitionConstraint.Assign(oSource : TFslObject);
begin
  inherited;
  keyElement := TFhirElementDefinitionConstraint(oSource).keyElement.Clone;
  requirementsElement := TFhirElementDefinitionConstraint(oSource).requirementsElement.Clone;
  severityElement := TFhirElementDefinitionConstraint(oSource).severityElement.Clone;
  humanElement := TFhirElementDefinitionConstraint(oSource).humanElement.Clone;
  expressionElement := TFhirElementDefinitionConstraint(oSource).expressionElement.Clone;
  xpathElement := TFhirElementDefinitionConstraint(oSource).xpathElement.Clone;
  sourceElement := TFhirElementDefinitionConstraint(oSource).sourceElement.Clone;
end;

procedure TFhirElementDefinitionConstraint.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'key') Then
     list.add(self.link, 'key', FKey.Link);
  if (child_name = 'requirements') Then
     list.add(self.link, 'requirements', FRequirements.Link);
  if (child_name = 'severity') Then
     list.add(self.link, 'severity', FSeverity.Link);
  if (child_name = 'human') Then
     list.add(self.link, 'human', FHuman.Link);
  if (child_name = 'expression') Then
     list.add(self.link, 'expression', FExpression.Link);
  if (child_name = 'xpath') Then
     list.add(self.link, 'xpath', FXpath.Link);
  if (child_name = 'source') Then
     list.add(self.link, 'source', FSource.Link);
end;

procedure TFhirElementDefinitionConstraint.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'key', 'id', false, TFhirId, FKey.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'requirements', 'string', false, TFhirString, FRequirements.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'severity', 'code', false, TFhirEnum, FSeverity.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'human', 'string', false, TFhirString, FHuman.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'expression', 'string', false, TFhirString, FExpression.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'xpath', 'string', false, TFhirString, FXpath.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'source', 'canonical', false, TFhirCanonical, FSource.Link)); {L1172}
end;

function TFhirElementDefinitionConstraint.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'key') then
  begin
    KeyElement := asId(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'requirements') then
  begin
    RequirementsElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'severity') then
  begin
    SeverityElement := asEnum(SYSTEMS_TFhirConstraintSeverityEnum, CODES_TFhirConstraintSeverityEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'human') then
  begin
    HumanElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'expression') then
  begin
    ExpressionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'xpath') then
  begin
    XpathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'source') then
  begin
    SourceElement := asCanonical(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionConstraint.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirElementDefinitionConstraint.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'key') then result := TFhirId.create() {L1223}
  else if (propName = 'requirements') then result := TFhirString.create() {L1223}
  else if (propName = 'severity') then result := TFhirEnum.create(SYSTEMS_TFhirConstraintSeverityEnum[ConstraintSeverityNull], CODES_TFhirConstraintSeverityEnum[ConstraintSeverityNull])  {L1211}
  else if (propName = 'human') then result := TFhirString.create() {L1223}
  else if (propName = 'expression') then result := TFhirString.create() {L1223}
  else if (propName = 'xpath') then result := TFhirString.create() {L1223}
  else if (propName = 'source') then result := TFhirCanonical.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionConstraint.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'key') then result := 'id'
  else if (propName = 'requirements') then result := 'string'
  else if (propName = 'severity') then result := 'code'
  else if (propName = 'human') then result := 'string'
  else if (propName = 'expression') then result := 'string'
  else if (propName = 'xpath') then result := 'string'
  else if (propName = 'source') then result := 'canonical'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionConstraint.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'key') then KeyElement := nil
  else if (propName = 'requirements') then RequirementsElement := nil
  else if (propName = 'severity') then SeverityElement := nil
  else if (propName = 'human') then HumanElement := nil
  else if (propName = 'expression') then ExpressionElement := nil
  else if (propName = 'xpath') then XpathElement := nil
  else if (propName = 'source') then SourceElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionConstraint.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'key') then KeyElement := asId(new) {L1222}
  else if (propName = 'requirements') then RequirementsElement := asString(new) {L1222}
  else if (propName = 'severity') then SeverityElement := asEnum(SYSTEMS_TFhirConstraintSeverityEnum, CODES_TFhirConstraintSeverityEnum, new) {L1210}
  else if (propName = 'human') then HumanElement := asString(new) {L1222}
  else if (propName = 'expression') then ExpressionElement := asString(new) {L1222}
  else if (propName = 'xpath') then XpathElement := asString(new) {L1222}
  else if (propName = 'source') then SourceElement := asCanonical(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionConstraint.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionConstraint.fhirType : string;
begin
  result := 'ElementDefinition.constraint';
end;

function TFhirElementDefinitionConstraint.Link : TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint(inherited Link);
end;

function TFhirElementDefinitionConstraint.Clone : TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint(inherited Clone);
end;

function TFhirElementDefinitionConstraint.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionConstraint;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionConstraint)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionConstraint(other);
    result := compareDeep(keyElement, o.keyElement, true) and compareDeep(requirementsElement, o.requirementsElement, true) and 
      compareDeep(severityElement, o.severityElement, true) and compareDeep(humanElement, o.humanElement, true) and 
      compareDeep(expressionElement, o.expressionElement, true) and compareDeep(xpathElement, o.xpathElement, true) and 
      compareDeep(sourceElement, o.sourceElement, true);
  end;
end;

function TFhirElementDefinitionConstraint.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FKey) and isEmptyProp(FRequirements) and isEmptyProp(FSeverity) and isEmptyProp(FHuman) and isEmptyProp(FExpression) and isEmptyProp(FXpath) and isEmptyProp(FSource);
end;

procedure TFhirElementDefinitionConstraint.SetKey(value : TFhirId);
begin
  FKey.free;
  FKey := value; {L1134}
end;

function TFhirElementDefinitionConstraint.GetKeyST : String;
begin
  if FKey = nil then
    result := ''
  else
    result := FKey.value;
end;

procedure TFhirElementDefinitionConstraint.SetKeyST(value : String);
begin
  if value <> '' then
  begin
    if FKey = nil then
      FKey := TFhirId.create;
    FKey.value := value
  end
  else if FKey <> nil then
    FKey.value := '';
end;

procedure TFhirElementDefinitionConstraint.SetRequirements(value : TFhirString);
begin
  FRequirements.free;
  FRequirements := value; {L1134}
end;

function TFhirElementDefinitionConstraint.GetRequirementsST : String;
begin
  if FRequirements = nil then
    result := ''
  else
    result := FRequirements.value;
end;

procedure TFhirElementDefinitionConstraint.SetRequirementsST(value : String);
begin
  if value <> '' then
  begin
    if FRequirements = nil then
      FRequirements := TFhirString.create;
    FRequirements.value := value
  end
  else if FRequirements <> nil then
    FRequirements.value := '';
end;

procedure TFhirElementDefinitionConstraint.SetSeverity(value : TFhirEnum);
begin
  FSeverity.free;
  FSeverity := value;
end;

function TFhirElementDefinitionConstraint.GetSeverityST : TFhirConstraintSeverityEnum;
begin
  if FSeverity = nil then
    result := TFhirConstraintSeverityEnum(0)
  else
    result := TFhirConstraintSeverityEnum(StringArrayIndexOfSensitive(CODES_TFhirConstraintSeverityEnum, FSeverity.value));
end;

procedure TFhirElementDefinitionConstraint.SetSeverityST(value : TFhirConstraintSeverityEnum);
begin
  if ord(value) = 0 then
    SeverityElement := nil
  else
    SeverityElement := TFhirEnum.create(SYSTEMS_TFhirConstraintSeverityEnum[value], CODES_TFhirConstraintSeverityEnum[value]);
end;

procedure TFhirElementDefinitionConstraint.SetHuman(value : TFhirString);
begin
  FHuman.free;
  FHuman := value; {L1134}
end;

function TFhirElementDefinitionConstraint.GetHumanST : String;
begin
  if FHuman = nil then
    result := ''
  else
    result := FHuman.value;
end;

procedure TFhirElementDefinitionConstraint.SetHumanST(value : String);
begin
  if value <> '' then
  begin
    if FHuman = nil then
      FHuman := TFhirString.create;
    FHuman.value := value
  end
  else if FHuman <> nil then
    FHuman.value := '';
end;

procedure TFhirElementDefinitionConstraint.SetExpression(value : TFhirString);
begin
  FExpression.free;
  FExpression := value; {L1134}
end;

function TFhirElementDefinitionConstraint.GetExpressionST : String;
begin
  if FExpression = nil then
    result := ''
  else
    result := FExpression.value;
end;

procedure TFhirElementDefinitionConstraint.SetExpressionST(value : String);
begin
  if value <> '' then
  begin
    if FExpression = nil then
      FExpression := TFhirString.create;
    FExpression.value := value
  end
  else if FExpression <> nil then
    FExpression.value := '';
end;

procedure TFhirElementDefinitionConstraint.SetXpath(value : TFhirString);
begin
  FXpath.free;
  FXpath := value; {L1134}
end;

function TFhirElementDefinitionConstraint.GetXpathST : String;
begin
  if FXpath = nil then
    result := ''
  else
    result := FXpath.value;
end;

procedure TFhirElementDefinitionConstraint.SetXpathST(value : String);
begin
  if value <> '' then
  begin
    if FXpath = nil then
      FXpath := TFhirString.create;
    FXpath.value := value
  end
  else if FXpath <> nil then
    FXpath.value := '';
end;

procedure TFhirElementDefinitionConstraint.SetSource(value : TFhirCanonical);
begin
  FSource.free;
  FSource := value; {L1134}
end;

function TFhirElementDefinitionConstraint.GetSourceST : String;
begin
  if FSource = nil then
    result := ''
  else
    result := FSource.value;
end;

procedure TFhirElementDefinitionConstraint.SetSourceST(value : String);
begin
  if value <> '' then
  begin
    if FSource = nil then
      FSource := TFhirCanonical.create;
    FSource.value := value
  end
  else if FSource <> nil then
    FSource.value := '';
end;

procedure TFhirElementDefinitionConstraint.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('key');
  fields.add('requirements');
  fields.add('severity');
  fields.add('human');
  fields.add('expression');
  fields.add('xpath');
  fields.add('source');
end;

function TFhirElementDefinitionConstraint.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FKey.sizeInBytes);
  inc(result, FRequirements.sizeInBytes);
  inc(result, FSeverity.sizeInBytes);
  inc(result, FHuman.sizeInBytes);
  inc(result, FExpression.sizeInBytes);
  inc(result, FXpath.sizeInBytes);
  inc(result, FSource.sizeInBytes);
end;

{ TFhirElementDefinitionConstraintListEnumerator }

constructor TFhirElementDefinitionConstraintListEnumerator.Create(list : TFhirElementDefinitionConstraintList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionConstraintListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionConstraintListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionConstraintListEnumerator.GetCurrent : TFhirElementDefinitionConstraint;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionConstraintListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionConstraintList }

procedure TFhirElementDefinitionConstraintList.AddItem(value: TFhirElementDefinitionConstraint);
begin
  assert(value.ClassName = 'TFhirElementDefinitionConstraint', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionConstraint');
  add(value);
end;

function TFhirElementDefinitionConstraintList.Append: TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionConstraintList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionConstraintList.GetEnumerator : TFhirElementDefinitionConstraintListEnumerator;
begin
  result := TFhirElementDefinitionConstraintListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionConstraintList.Clone: TFhirElementDefinitionConstraintList;
begin
  result := TFhirElementDefinitionConstraintList(inherited Clone);
end;

function TFhirElementDefinitionConstraintList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionConstraintList.GetItemN(index: Integer): TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint(ObjectByIndex[index]);
end;

function TFhirElementDefinitionConstraintList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionConstraint;
end;
function TFhirElementDefinitionConstraintList.IndexOf(value: TFhirElementDefinitionConstraint): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionConstraintList.Insert(index: Integer): TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionConstraintList.InsertItem(index: Integer; value: TFhirElementDefinitionConstraint);
begin
  assert(value is TFhirElementDefinitionConstraint);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionConstraintList.Item(index: Integer): TFhirElementDefinitionConstraint;
begin
  result := TFhirElementDefinitionConstraint(ObjectByIndex[index]);
end;

function TFhirElementDefinitionConstraintList.Link: TFhirElementDefinitionConstraintList;
begin
  result := TFhirElementDefinitionConstraintList(inherited Link);
end;

procedure TFhirElementDefinitionConstraintList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionConstraintList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionConstraint);
begin
  assert(value is TFhirElementDefinitionConstraint);
  FhirElementDefinitionConstraints[index] := value;
end;

procedure TFhirElementDefinitionConstraintList.SetItemN(index: Integer; value: TFhirElementDefinitionConstraint);
begin
  assert(value is TFhirElementDefinitionConstraint);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionBinding }

constructor TFhirElementDefinitionBinding.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionBinding.Destroy;
begin
  FStrength.free;
  FDescription.free;
  FValueSet.free;
  inherited;
end;

procedure TFhirElementDefinitionBinding.Assign(oSource : TFslObject);
begin
  inherited;
  strengthElement := TFhirElementDefinitionBinding(oSource).strengthElement.Clone;
  descriptionElement := TFhirElementDefinitionBinding(oSource).descriptionElement.Clone;
  valueSetElement := TFhirElementDefinitionBinding(oSource).valueSetElement.Clone;
end;

procedure TFhirElementDefinitionBinding.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'strength') Then
     list.add(self.link, 'strength', FStrength.Link);
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'valueSet') Then
     list.add(self.link, 'valueSet', FValueSet.Link);
end;

procedure TFhirElementDefinitionBinding.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'strength', 'code', false, TFhirEnum, FStrength.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'valueSet', 'canonical', false, TFhirCanonical, FValueSet.Link)); {L1172}
end;

function TFhirElementDefinitionBinding.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'strength') then
  begin
    StrengthElement := asEnum(SYSTEMS_TFhirBindingStrengthEnum, CODES_TFhirBindingStrengthEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'valueSet') then
  begin
    ValueSetElement := asCanonical(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionBinding.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirElementDefinitionBinding.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'strength') then result := TFhirEnum.create(SYSTEMS_TFhirBindingStrengthEnum[BindingStrengthNull], CODES_TFhirBindingStrengthEnum[BindingStrengthNull])  {L1211}
  else if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'valueSet') then result := TFhirCanonical.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionBinding.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'strength') then result := 'code'
  else if (propName = 'description') then result := 'string'
  else if (propName = 'valueSet') then result := 'canonical'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionBinding.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'strength') then StrengthElement := nil
  else if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'valueSet') then ValueSetElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionBinding.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'strength') then StrengthElement := asEnum(SYSTEMS_TFhirBindingStrengthEnum, CODES_TFhirBindingStrengthEnum, new) {L1210}
  else if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'valueSet') then ValueSetElement := asCanonical(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionBinding.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionBinding.fhirType : string;
begin
  result := 'ElementDefinition.binding';
end;

function TFhirElementDefinitionBinding.Link : TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding(inherited Link);
end;

function TFhirElementDefinitionBinding.Clone : TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding(inherited Clone);
end;

function TFhirElementDefinitionBinding.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionBinding;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionBinding)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionBinding(other);
    result := compareDeep(strengthElement, o.strengthElement, true) and compareDeep(descriptionElement, o.descriptionElement, true) and 
      compareDeep(valueSetElement, o.valueSetElement, true);
  end;
end;

function TFhirElementDefinitionBinding.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FStrength) and isEmptyProp(FDescription) and isEmptyProp(FValueSet);
end;

procedure TFhirElementDefinitionBinding.SetStrength(value : TFhirEnum);
begin
  FStrength.free;
  FStrength := value;
end;

function TFhirElementDefinitionBinding.GetStrengthST : TFhirBindingStrengthEnum;
begin
  if FStrength = nil then
    result := TFhirBindingStrengthEnum(0)
  else
    result := TFhirBindingStrengthEnum(StringArrayIndexOfSensitive(CODES_TFhirBindingStrengthEnum, FStrength.value));
end;

procedure TFhirElementDefinitionBinding.SetStrengthST(value : TFhirBindingStrengthEnum);
begin
  if ord(value) = 0 then
    StrengthElement := nil
  else
    StrengthElement := TFhirEnum.create(SYSTEMS_TFhirBindingStrengthEnum[value], CODES_TFhirBindingStrengthEnum[value]);
end;

procedure TFhirElementDefinitionBinding.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirElementDefinitionBinding.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirElementDefinitionBinding.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

procedure TFhirElementDefinitionBinding.SetValueSet(value : TFhirCanonical);
begin
  FValueSet.free;
  FValueSet := value; {L1134}
end;

function TFhirElementDefinitionBinding.GetValueSetST : String;
begin
  if FValueSet = nil then
    result := ''
  else
    result := FValueSet.value;
end;

procedure TFhirElementDefinitionBinding.SetValueSetST(value : String);
begin
  if value <> '' then
  begin
    if FValueSet = nil then
      FValueSet := TFhirCanonical.create;
    FValueSet.value := value
  end
  else if FValueSet <> nil then
    FValueSet.value := '';
end;

procedure TFhirElementDefinitionBinding.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('strength');
  fields.add('description');
  fields.add('valueSet');
end;

function TFhirElementDefinitionBinding.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FStrength.sizeInBytes);
  inc(result, FDescription.sizeInBytes);
  inc(result, FValueSet.sizeInBytes);
end;

{ TFhirElementDefinitionBindingListEnumerator }

constructor TFhirElementDefinitionBindingListEnumerator.Create(list : TFhirElementDefinitionBindingList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionBindingListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionBindingListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionBindingListEnumerator.GetCurrent : TFhirElementDefinitionBinding;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionBindingListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionBindingList }

procedure TFhirElementDefinitionBindingList.AddItem(value: TFhirElementDefinitionBinding);
begin
  assert(value.ClassName = 'TFhirElementDefinitionBinding', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionBinding');
  add(value);
end;

function TFhirElementDefinitionBindingList.Append: TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionBindingList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionBindingList.GetEnumerator : TFhirElementDefinitionBindingListEnumerator;
begin
  result := TFhirElementDefinitionBindingListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionBindingList.Clone: TFhirElementDefinitionBindingList;
begin
  result := TFhirElementDefinitionBindingList(inherited Clone);
end;

function TFhirElementDefinitionBindingList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionBindingList.GetItemN(index: Integer): TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding(ObjectByIndex[index]);
end;

function TFhirElementDefinitionBindingList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionBinding;
end;
function TFhirElementDefinitionBindingList.IndexOf(value: TFhirElementDefinitionBinding): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionBindingList.Insert(index: Integer): TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionBindingList.InsertItem(index: Integer; value: TFhirElementDefinitionBinding);
begin
  assert(value is TFhirElementDefinitionBinding);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionBindingList.Item(index: Integer): TFhirElementDefinitionBinding;
begin
  result := TFhirElementDefinitionBinding(ObjectByIndex[index]);
end;

function TFhirElementDefinitionBindingList.Link: TFhirElementDefinitionBindingList;
begin
  result := TFhirElementDefinitionBindingList(inherited Link);
end;

procedure TFhirElementDefinitionBindingList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionBindingList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionBinding);
begin
  assert(value is TFhirElementDefinitionBinding);
  FhirElementDefinitionBindings[index] := value;
end;

procedure TFhirElementDefinitionBindingList.SetItemN(index: Integer; value: TFhirElementDefinitionBinding);
begin
  assert(value is TFhirElementDefinitionBinding);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinitionMapping }

constructor TFhirElementDefinitionMapping.Create;
begin
  inherited;
end;

destructor TFhirElementDefinitionMapping.Destroy;
begin
  FIdentity.free;
  FLanguage.free;
  FMap.free;
  FComment.free;
  inherited;
end;

procedure TFhirElementDefinitionMapping.Assign(oSource : TFslObject);
begin
  inherited;
  identityElement := TFhirElementDefinitionMapping(oSource).identityElement.Clone;
  languageElement := TFhirElementDefinitionMapping(oSource).languageElement.Clone;
  mapElement := TFhirElementDefinitionMapping(oSource).mapElement.Clone;
  commentElement := TFhirElementDefinitionMapping(oSource).commentElement.Clone;
end;

procedure TFhirElementDefinitionMapping.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'identity') Then
     list.add(self.link, 'identity', FIdentity.Link);
  if (child_name = 'language') Then
     list.add(self.link, 'language', FLanguage.Link);
  if (child_name = 'map') Then
     list.add(self.link, 'map', FMap.Link);
  if (child_name = 'comment') Then
     list.add(self.link, 'comment', FComment.Link);
end;

procedure TFhirElementDefinitionMapping.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'identity', 'id', false, TFhirId, FIdentity.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'language', 'code', false, TFhirCode, FLanguage.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'map', 'string', false, TFhirString, FMap.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'comment', 'string', false, TFhirString, FComment.Link)); {L1172}
end;

function TFhirElementDefinitionMapping.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'identity') then
  begin
    IdentityElement := asId(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'language') then
  begin
    LanguageElement := asCode(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'map') then
  begin
    MapElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'comment') then
  begin
    CommentElement := asString(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinitionMapping.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirElementDefinitionMapping.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'identity') then result := TFhirId.create() {L1223}
  else if (propName = 'language') then result := TFhirCode.create() {L1223}
  else if (propName = 'map') then result := TFhirString.create() {L1223}
  else if (propName = 'comment') then result := TFhirString.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinitionMapping.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'identity') then result := 'id'
  else if (propName = 'language') then result := 'code'
  else if (propName = 'map') then result := 'string'
  else if (propName = 'comment') then result := 'string'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinitionMapping.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'identity') then IdentityElement := nil
  else if (propName = 'language') then LanguageElement := nil
  else if (propName = 'map') then MapElement := nil
  else if (propName = 'comment') then CommentElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinitionMapping.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'identity') then IdentityElement := asId(new) {L1222}
  else if (propName = 'language') then LanguageElement := asCode(new) {L1222}
  else if (propName = 'map') then MapElement := asString(new) {L1222}
  else if (propName = 'comment') then CommentElement := asString(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinitionMapping.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinitionMapping.fhirType : string;
begin
  result := 'ElementDefinition.mapping';
end;

function TFhirElementDefinitionMapping.Link : TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping(inherited Link);
end;

function TFhirElementDefinitionMapping.Clone : TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping(inherited Clone);
end;

function TFhirElementDefinitionMapping.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinitionMapping;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinitionMapping)) then
    result := false
  else
  begin
    o := TFhirElementDefinitionMapping(other);
    result := compareDeep(identityElement, o.identityElement, true) and compareDeep(languageElement, o.languageElement, true) and 
      compareDeep(mapElement, o.mapElement, true) and compareDeep(commentElement, o.commentElement, true);
  end;
end;

function TFhirElementDefinitionMapping.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FIdentity) and isEmptyProp(FLanguage) and isEmptyProp(FMap) and isEmptyProp(FComment);
end;

procedure TFhirElementDefinitionMapping.SetIdentity(value : TFhirId);
begin
  FIdentity.free;
  FIdentity := value; {L1134}
end;

function TFhirElementDefinitionMapping.GetIdentityST : String;
begin
  if FIdentity = nil then
    result := ''
  else
    result := FIdentity.value;
end;

procedure TFhirElementDefinitionMapping.SetIdentityST(value : String);
begin
  if value <> '' then
  begin
    if FIdentity = nil then
      FIdentity := TFhirId.create;
    FIdentity.value := value
  end
  else if FIdentity <> nil then
    FIdentity.value := '';
end;

procedure TFhirElementDefinitionMapping.SetLanguage(value : TFhirCode);
begin
  FLanguage.free;
  FLanguage := value; {L1134}
end;

function TFhirElementDefinitionMapping.GetLanguageST : String;
begin
  if FLanguage = nil then
    result := ''
  else
    result := FLanguage.value;
end;

procedure TFhirElementDefinitionMapping.SetLanguageST(value : String);
begin
  if value <> '' then
  begin
    if FLanguage = nil then
      FLanguage := TFhirCode.create;
    FLanguage.value := value
  end
  else if FLanguage <> nil then
    FLanguage.value := '';
end;

procedure TFhirElementDefinitionMapping.SetMap(value : TFhirString);
begin
  FMap.free;
  FMap := value; {L1134}
end;

function TFhirElementDefinitionMapping.GetMapST : String;
begin
  if FMap = nil then
    result := ''
  else
    result := FMap.value;
end;

procedure TFhirElementDefinitionMapping.SetMapST(value : String);
begin
  if value <> '' then
  begin
    if FMap = nil then
      FMap := TFhirString.create;
    FMap.value := value
  end
  else if FMap <> nil then
    FMap.value := '';
end;

procedure TFhirElementDefinitionMapping.SetComment(value : TFhirString);
begin
  FComment.free;
  FComment := value; {L1134}
end;

function TFhirElementDefinitionMapping.GetCommentST : String;
begin
  if FComment = nil then
    result := ''
  else
    result := FComment.value;
end;

procedure TFhirElementDefinitionMapping.SetCommentST(value : String);
begin
  if value <> '' then
  begin
    if FComment = nil then
      FComment := TFhirString.create;
    FComment.value := value
  end
  else if FComment <> nil then
    FComment.value := '';
end;

procedure TFhirElementDefinitionMapping.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('identity');
  fields.add('language');
  fields.add('map');
  fields.add('comment');
end;

function TFhirElementDefinitionMapping.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FIdentity.sizeInBytes);
  inc(result, FLanguage.sizeInBytes);
  inc(result, FMap.sizeInBytes);
  inc(result, FComment.sizeInBytes);
end;

{ TFhirElementDefinitionMappingListEnumerator }

constructor TFhirElementDefinitionMappingListEnumerator.Create(list : TFhirElementDefinitionMappingList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionMappingListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionMappingListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionMappingListEnumerator.GetCurrent : TFhirElementDefinitionMapping;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionMappingListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionMappingList }

procedure TFhirElementDefinitionMappingList.AddItem(value: TFhirElementDefinitionMapping);
begin
  assert(value.ClassName = 'TFhirElementDefinitionMapping', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinitionMapping');
  add(value);
end;

function TFhirElementDefinitionMappingList.Append: TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionMappingList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionMappingList.GetEnumerator : TFhirElementDefinitionMappingListEnumerator;
begin
  result := TFhirElementDefinitionMappingListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionMappingList.Clone: TFhirElementDefinitionMappingList;
begin
  result := TFhirElementDefinitionMappingList(inherited Clone);
end;

function TFhirElementDefinitionMappingList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionMappingList.GetItemN(index: Integer): TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping(ObjectByIndex[index]);
end;

function TFhirElementDefinitionMappingList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinitionMapping;
end;
function TFhirElementDefinitionMappingList.IndexOf(value: TFhirElementDefinitionMapping): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionMappingList.Insert(index: Integer): TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionMappingList.InsertItem(index: Integer; value: TFhirElementDefinitionMapping);
begin
  assert(value is TFhirElementDefinitionMapping);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionMappingList.Item(index: Integer): TFhirElementDefinitionMapping;
begin
  result := TFhirElementDefinitionMapping(ObjectByIndex[index]);
end;

function TFhirElementDefinitionMappingList.Link: TFhirElementDefinitionMappingList;
begin
  result := TFhirElementDefinitionMappingList(inherited Link);
end;

procedure TFhirElementDefinitionMappingList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionMappingList.SetItemByIndex(index: Integer; value: TFhirElementDefinitionMapping);
begin
  assert(value is TFhirElementDefinitionMapping);
  FhirElementDefinitionMappings[index] := value;
end;

procedure TFhirElementDefinitionMappingList.SetItemN(index: Integer; value: TFhirElementDefinitionMapping);
begin
  assert(value is TFhirElementDefinitionMapping);
  ObjectByIndex[index] := value;
end;

{ TFhirElementDefinition }

constructor TFhirElementDefinition.Create;
begin
  inherited;
end;

destructor TFhirElementDefinition.Destroy;
begin
  FPath.free;
  FRepresentation.Free;
  FSliceName.free;
  FSliceIsConstraining.free;
  FLabel_.free;
  FCodeList.Free;
  FSlicing.free;
  FShort.free;
  FDefinition.free;
  FComment.free;
  FRequirements.free;
  FAliasList.Free;
  FMin.free;
  FMax.free;
  FBase.free;
  FContentReference.free;
  FType_List.Free;
  FDefaultValue.free;
  FMeaningWhenMissing.free;
  FOrderMeaning.free;
  FFixed.free;
  FPattern.free;
  FExampleList.Free;
  FMinValue.free;
  FMaxValue.free;
  FMaxLength.free;
  FConditionList.Free;
  FConstraintList.Free;
  FMustSupport.free;
  FIsModifier.free;
  FIsModifierReason.free;
  FIsSummary.free;
  FBinding.free;
  FMappingList.Free;
  inherited;
end;

procedure TFhirElementDefinition.Assign(oSource : TFslObject);
begin
  inherited;
  pathElement := TFhirElementDefinition(oSource).pathElement.Clone;
  if (TFhirElementDefinition(oSource).FRepresentation = nil) then
  begin
    FRepresentation.free;
    FRepresentation := nil;
  end
  else
  begin
    FRepresentation := TFhirEnumList.Create(SYSTEMS_TFhirPropertyRepresentationEnum, CODES_TFhirPropertyRepresentationEnum);
    FRepresentation.Assign(TFhirElementDefinition(oSource).FRepresentation);
  end;
  sliceNameElement := TFhirElementDefinition(oSource).sliceNameElement.Clone;
  sliceIsConstrainingElement := TFhirElementDefinition(oSource).sliceIsConstrainingElement.Clone;
  label_Element := TFhirElementDefinition(oSource).label_Element.Clone;
  if (TFhirElementDefinition(oSource).FCodeList = nil) then
  begin
    FCodeList.free;
    FCodeList := nil;
  end
  else
  begin
    if FCodeList = nil then
      FCodeList := TFhirCodingList.Create;
    FCodeList.Assign(TFhirElementDefinition(oSource).FCodeList);
  end;
  slicing := TFhirElementDefinition(oSource).slicing.Clone;
  shortElement := TFhirElementDefinition(oSource).shortElement.Clone;
  definitionElement := TFhirElementDefinition(oSource).definitionElement.Clone;
  commentElement := TFhirElementDefinition(oSource).commentElement.Clone;
  requirementsElement := TFhirElementDefinition(oSource).requirementsElement.Clone;
  if (TFhirElementDefinition(oSource).FAliasList = nil) then
  begin
    FAliasList.free;
    FAliasList := nil;
  end
  else
  begin
    if FAliasList = nil then
      FAliasList := TFhirStringList.Create;
    FAliasList.Assign(TFhirElementDefinition(oSource).FAliasList);
  end;
  minElement := TFhirElementDefinition(oSource).minElement.Clone;
  maxElement := TFhirElementDefinition(oSource).maxElement.Clone;
  base := TFhirElementDefinition(oSource).base.Clone;
  contentReferenceElement := TFhirElementDefinition(oSource).contentReferenceElement.Clone;
  if (TFhirElementDefinition(oSource).FType_List = nil) then
  begin
    FType_List.free;
    FType_List := nil;
  end
  else
  begin
    if FType_List = nil then
      FType_List := TFhirElementDefinitionTypeList.Create;
    FType_List.Assign(TFhirElementDefinition(oSource).FType_List);
  end;
  defaultValue := TFhirElementDefinition(oSource).defaultValue.Clone;
  meaningWhenMissingElement := TFhirElementDefinition(oSource).meaningWhenMissingElement.Clone;
  orderMeaningElement := TFhirElementDefinition(oSource).orderMeaningElement.Clone;
  fixed := TFhirElementDefinition(oSource).fixed.Clone;
  pattern := TFhirElementDefinition(oSource).pattern.Clone;
  if (TFhirElementDefinition(oSource).FExampleList = nil) then
  begin
    FExampleList.free;
    FExampleList := nil;
  end
  else
  begin
    if FExampleList = nil then
      FExampleList := TFhirElementDefinitionExampleList.Create;
    FExampleList.Assign(TFhirElementDefinition(oSource).FExampleList);
  end;
  minValue := TFhirElementDefinition(oSource).minValue.Clone;
  maxValue := TFhirElementDefinition(oSource).maxValue.Clone;
  maxLengthElement := TFhirElementDefinition(oSource).maxLengthElement.Clone;
  if (TFhirElementDefinition(oSource).FConditionList = nil) then
  begin
    FConditionList.free;
    FConditionList := nil;
  end
  else
  begin
    if FConditionList = nil then
      FConditionList := TFhirIdList.Create;
    FConditionList.Assign(TFhirElementDefinition(oSource).FConditionList);
  end;
  if (TFhirElementDefinition(oSource).FConstraintList = nil) then
  begin
    FConstraintList.free;
    FConstraintList := nil;
  end
  else
  begin
    if FConstraintList = nil then
      FConstraintList := TFhirElementDefinitionConstraintList.Create;
    FConstraintList.Assign(TFhirElementDefinition(oSource).FConstraintList);
  end;
  mustSupportElement := TFhirElementDefinition(oSource).mustSupportElement.Clone;
  isModifierElement := TFhirElementDefinition(oSource).isModifierElement.Clone;
  isModifierReasonElement := TFhirElementDefinition(oSource).isModifierReasonElement.Clone;
  isSummaryElement := TFhirElementDefinition(oSource).isSummaryElement.Clone;
  binding := TFhirElementDefinition(oSource).binding.Clone;
  if (TFhirElementDefinition(oSource).FMappingList = nil) then
  begin
    FMappingList.free;
    FMappingList := nil;
  end
  else
  begin
    if FMappingList = nil then
      FMappingList := TFhirElementDefinitionMappingList.Create;
    FMappingList.Assign(TFhirElementDefinition(oSource).FMappingList);
  end;
end;

procedure TFhirElementDefinition.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'path') Then
     list.add(self.link, 'path', FPath.Link);
  if (child_name = 'representation') Then
     list.addAll(self, 'representation', FRepresentation);
  if (child_name = 'sliceName') Then
     list.add(self.link, 'sliceName', FSliceName.Link);
  if (child_name = 'sliceIsConstraining') Then
     list.add(self.link, 'sliceIsConstraining', FSliceIsConstraining.Link);
  if (child_name = 'label') Then
     list.add(self.link, 'label', FLabel_.Link);
  if (child_name = 'code') Then
    list.addAll(self, 'code', FCodeList);
  if (child_name = 'slicing') Then
     list.add(self.link, 'slicing', FSlicing.Link);
  if (child_name = 'short') Then
     list.add(self.link, 'short', FShort.Link);
  if (child_name = 'definition') Then
     list.add(self.link, 'definition', FDefinition.Link);
  if (child_name = 'comment') Then
     list.add(self.link, 'comment', FComment.Link);
  if (child_name = 'requirements') Then
     list.add(self.link, 'requirements', FRequirements.Link);
  if (child_name = 'alias') Then
    list.addAll(self, 'alias', FAliasList);
  if (child_name = 'min') Then
     list.add(self.link, 'min', FMin.Link);
  if (child_name = 'max') Then
     list.add(self.link, 'max', FMax.Link);
  if (child_name = 'base') Then
     list.add(self.link, 'base', FBase.Link);
  if (child_name = 'contentReference') Then
     list.add(self.link, 'contentReference', FContentReference.Link);
  if (child_name = 'type') Then
    list.addAll(self, 'type', FType_List);
  if (child_name = 'defaultValue[x]') or (child_name = 'defaultValue') Then
     list.add(self.link, 'defaultValue[x]', FDefaultValue.Link);
  if (child_name = 'meaningWhenMissing') Then
     list.add(self.link, 'meaningWhenMissing', FMeaningWhenMissing.Link);
  if (child_name = 'orderMeaning') Then
     list.add(self.link, 'orderMeaning', FOrderMeaning.Link);
  if (child_name = 'fixed[x]') or (child_name = 'fixed') Then
     list.add(self.link, 'fixed[x]', FFixed.Link);
  if (child_name = 'pattern[x]') or (child_name = 'pattern') Then
     list.add(self.link, 'pattern[x]', FPattern.Link);
  if (child_name = 'example') Then
    list.addAll(self, 'example', FExampleList);
  if (child_name = 'minValue[x]') or (child_name = 'minValue') Then
     list.add(self.link, 'minValue[x]', FMinValue.Link);
  if (child_name = 'maxValue[x]') or (child_name = 'maxValue') Then
     list.add(self.link, 'maxValue[x]', FMaxValue.Link);
  if (child_name = 'maxLength') Then
     list.add(self.link, 'maxLength', FMaxLength.Link);
  if (child_name = 'condition') Then
    list.addAll(self, 'condition', FConditionList);
  if (child_name = 'constraint') Then
    list.addAll(self, 'constraint', FConstraintList);
  if (child_name = 'mustSupport') Then
     list.add(self.link, 'mustSupport', FMustSupport.Link);
  if (child_name = 'isModifier') Then
     list.add(self.link, 'isModifier', FIsModifier.Link);
  if (child_name = 'isModifierReason') Then
     list.add(self.link, 'isModifierReason', FIsModifierReason.Link);
  if (child_name = 'isSummary') Then
     list.add(self.link, 'isSummary', FIsSummary.Link);
  if (child_name = 'binding') Then
     list.add(self.link, 'binding', FBinding.Link);
  if (child_name = 'mapping') Then
    list.addAll(self, 'mapping', FMappingList);
end;

procedure TFhirElementDefinition.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'path', 'string', false, TFhirString, FPath.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'representation', 'code', true, TFhirEnum, FRepresentation.Link)) {L990};
  oList.add(TFHIRProperty.create(self, 'sliceName', 'string', false, TFhirString, FSliceName.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'sliceIsConstraining', 'boolean', false, TFhirBoolean, FSliceIsConstraining.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'label', 'string', false, TFhirString, FLabel_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'code', 'Coding', true, TFhirCoding, FCodeList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'slicing', 'Element', false, TFhirElementDefinitionSlicing, FSlicing.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'short', 'string', false, TFhirString, FShort.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'definition', 'markdown', false, TFhirMarkdown, FDefinition.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'comment', 'markdown', false, TFhirMarkdown, FComment.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'requirements', 'markdown', false, TFhirMarkdown, FRequirements.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'alias', 'string', true, TFhirString, FAliasList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'min', 'unsignedInt', false, TFhirUnsignedInt, FMin.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'max', 'string', false, TFhirString, FMax.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'base', 'Element', false, TFhirElementDefinitionBase, FBase.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'contentReference', 'uri', false, TFhirUri, FContentReference.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'type', 'Element', true, TFhirElementDefinitionType, FType_List.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'defaultValue[x]', 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta', false, TFhirDataType, FDefaultValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'meaningWhenMissing', 'markdown', false, TFhirMarkdown, FMeaningWhenMissing.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'orderMeaning', 'string', false, TFhirString, FOrderMeaning.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'fixed[x]', 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta', false, TFhirDataType, FFixed.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'pattern[x]', 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta', false, TFhirDataType, FPattern.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'example', 'Element', true, TFhirElementDefinitionExample, FExampleList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'minValue[x]', 'date|dateTime|instant|time|decimal|integer|integer64|positiveInt|unsignedInt|Quantity', false, TFhirDataType, FMinValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'maxValue[x]', 'date|dateTime|instant|time|decimal|integer|integer64|positiveInt|unsignedInt|Quantity', false, TFhirDataType, FMaxValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'maxLength', 'integer', false, TFhirInteger, FMaxLength.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'condition', 'id', true, TFhirId, FConditionList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'constraint', 'Element', true, TFhirElementDefinitionConstraint, FConstraintList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'mustSupport', 'boolean', false, TFhirBoolean, FMustSupport.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'isModifier', 'boolean', false, TFhirBoolean, FIsModifier.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'isModifierReason', 'string', false, TFhirString, FIsModifierReason.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'isSummary', 'boolean', false, TFhirBoolean, FIsSummary.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'binding', 'Element', false, TFhirElementDefinitionBinding, FBinding.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'mapping', 'Element', true, TFhirElementDefinitionMapping, FMappingList.Link)) {L1039};
end;

function TFhirElementDefinition.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'path') then
  begin
    PathElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'representation') then
  begin
    RepresentationList.add(asEnum(SYSTEMS_TFhirPropertyRepresentationEnum, CODES_TFhirPropertyRepresentationEnum, propValue)); {L994}
    result := propValue;
  end
  else if (propName = 'sliceName') then
  begin
    SliceNameElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'sliceIsConstraining') then
  begin
    SliceIsConstrainingElement := asBoolean(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'label') then
  begin
    Label_Element := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'code') then
  begin
    CodeList.add(propValue as TFhirCoding) {L1048};
    result := propValue;
  end
  else if (propName = 'slicing') then
  begin
    Slicing := propValue as TFhirElementDefinitionSlicing {L1199};
    result := propValue;
  end
  else if (propName = 'short') then
  begin
    ShortElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'definition') then
  begin
    DefinitionElement := asMarkdown(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'comment') then
  begin
    CommentElement := asMarkdown(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'requirements') then
  begin
    RequirementsElement := asMarkdown(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'alias') then
  begin
    AliasList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'min') then
  begin
    MinElement := asUnsignedInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'max') then
  begin
    MaxElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'base') then
  begin
    Base := propValue as TFhirElementDefinitionBase {L1199};
    result := propValue;
  end
  else if (propName = 'contentReference') then
  begin
    ContentReferenceElement := asUri(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_List.add(propValue as TFhirElementDefinitionType) {L1048};
    result := propValue;
  end
  else if (isMatchingName(propName, 'defaultValue', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then
  begin
    DefaultValue := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'meaningWhenMissing') then
  begin
    MeaningWhenMissingElement := asMarkdown(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'orderMeaning') then
  begin
    OrderMeaningElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (isMatchingName(propName, 'fixed', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then
  begin
    Fixed := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (isMatchingName(propName, 'pattern', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then
  begin
    Pattern := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'example') then
  begin
    ExampleList.add(propValue as TFhirElementDefinitionExample) {L1048};
    result := propValue;
  end
  else if (isMatchingName(propName, 'minValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then
  begin
    MinValue := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (isMatchingName(propName, 'maxValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then
  begin
    MaxValue := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'maxLength') then
  begin
    MaxLengthElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'condition') then
  begin
    ConditionList.add(asId(propValue)){2};     result := propValue;

  end
  else if (propName = 'constraint') then
  begin
    ConstraintList.add(propValue as TFhirElementDefinitionConstraint) {L1048};
    result := propValue;
  end
  else if (propName = 'mustSupport') then
  begin
    MustSupportElement := asBoolean(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'isModifier') then
  begin
    IsModifierElement := asBoolean(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'isModifierReason') then
  begin
    IsModifierReasonElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'isSummary') then
  begin
    IsSummaryElement := asBoolean(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'binding') then
  begin
    Binding := propValue as TFhirElementDefinitionBinding {L1199};
    result := propValue;
  end
  else if (propName = 'mapping') then
  begin
    MappingList.add(propValue as TFhirElementDefinitionMapping) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirElementDefinition.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'representation') then FRepresentation.insertItem(index, asEnum(SYSTEMS_TFhirPropertyRepresentationEnum, CODES_TFhirPropertyRepresentationEnum, propValue)) {L995}
  else if (propName = 'code') then CodeList.insertItem(index, propValue as TFhirCoding) {L1049}
  else if (propName = 'alias') then AliasList.insertItem(index, asString(propValue)) {L1045}
  else if (propName = 'type') then Type_List.insertItem(index, propValue as TFhirElementDefinitionType) {L1049}
  else if (propName = 'example') then ExampleList.insertItem(index, propValue as TFhirElementDefinitionExample) {L1049}
  else if (propName = 'condition') then ConditionList.insertItem(index, asId(propValue)) {L1045}
  else if (propName = 'constraint') then ConstraintList.insertItem(index, propValue as TFhirElementDefinitionConstraint) {L1049}
  else if (propName = 'mapping') then MappingList.insertItem(index, propValue as TFhirElementDefinitionMapping) {L1049}
  else inherited;
end;

function TFhirElementDefinition.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'path') then result := TFhirString.create() {L1223}
  else if (propName = 'sliceName') then result := TFhirString.create() {L1223}
  else if (propName = 'sliceIsConstraining') then result := TFhirBoolean.create() {L1223}
  else if (propName = 'label') then result := TFhirString.create() {L1223}
  else if (propName = 'code') then result := CodeList.new() {L1053}
  else if (propName = 'slicing') then result := TFhirElementDefinitionSlicing.create() {L1203}
  else if (propName = 'short') then result := TFhirString.create() {L1223}
  else if (propName = 'definition') then result := TFhirMarkdown.create() {L1223}
  else if (propName = 'comment') then result := TFhirMarkdown.create() {L1223}
  else if (propName = 'requirements') then result := TFhirMarkdown.create() {L1223}
  else if (propName = 'alias') then result := AliasList.new() {L1053}
  else if (propName = 'min') then result := TFhirUnsignedInt.create() {L1223}
  else if (propName = 'max') then result := TFhirString.create() {L1223}
  else if (propName = 'base') then result := TFhirElementDefinitionBase.create() {L1203}
  else if (propName = 'contentReference') then result := TFhirUri.create() {L1223}
  else if (propName = 'type') then result := Type_List.new() {L1053}
  else if (isMatchingName(propName, 'defaultValue', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then raise EFHIRException.create('Cannot make property DefaultValue') {L1191}
  else if (propName = 'meaningWhenMissing') then result := TFhirMarkdown.create() {L1223}
  else if (propName = 'orderMeaning') then result := TFhirString.create() {L1223}
  else if (isMatchingName(propName, 'fixed', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then raise EFHIRException.create('Cannot make property Fixed') {L1191}
  else if (isMatchingName(propName, 'pattern', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then raise EFHIRException.create('Cannot make property Pattern') {L1191}
  else if (propName = 'example') then result := ExampleList.new() {L1053}
  else if (isMatchingName(propName, 'minValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then raise EFHIRException.create('Cannot make property MinValue') {L1191}
  else if (isMatchingName(propName, 'maxValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then raise EFHIRException.create('Cannot make property MaxValue') {L1191}
  else if (propName = 'maxLength') then result := TFhirInteger.create() {L1223}
  else if (propName = 'condition') then result := ConditionList.new() {L1053}
  else if (propName = 'constraint') then result := ConstraintList.new() {L1053}
  else if (propName = 'mustSupport') then result := TFhirBoolean.create() {L1223}
  else if (propName = 'isModifier') then result := TFhirBoolean.create() {L1223}
  else if (propName = 'isModifierReason') then result := TFhirString.create() {L1223}
  else if (propName = 'isSummary') then result := TFhirBoolean.create() {L1223}
  else if (propName = 'binding') then result := TFhirElementDefinitionBinding.create() {L1203}
  else if (propName = 'mapping') then result := MappingList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirElementDefinition.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'path') then result := 'string'
  else if (propName = 'representation') then result := 'code'
  else if (propName = 'sliceName') then result := 'string'
  else if (propName = 'sliceIsConstraining') then result := 'boolean'
  else if (propName = 'label') then result := 'string'
  else if (propName = 'code') then result := 'Coding'
  else if (propName = 'slicing') then result := 'Element'
  else if (propName = 'short') then result := 'string'
  else if (propName = 'definition') then result := 'markdown'
  else if (propName = 'comment') then result := 'markdown'
  else if (propName = 'requirements') then result := 'markdown'
  else if (propName = 'alias') then result := 'string'
  else if (propName = 'min') then result := 'unsignedInt'
  else if (propName = 'max') then result := 'string'
  else if (propName = 'base') then result := 'Element'
  else if (propName = 'contentReference') then result := 'uri'
  else if (propName = 'type') then result := 'Element'
  else if (propName = 'defaultValue[x]') then result := 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta'
  else if (propName = 'meaningWhenMissing') then result := 'markdown'
  else if (propName = 'orderMeaning') then result := 'string'
  else if (propName = 'fixed[x]') then result := 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta'
  else if (propName = 'pattern[x]') then result := 'base64Binary|boolean|canonical|code|date|dateTime|decimal|id|instant|integer|integer64|markdown|oid|positiveInt|string|time|unsignedInt|uri|url|uuid|Address|Age|Annotation|Attachment|CodeableConcept|Coding|ContactPoint|Count|Distance|Duration|HumanNa'+'me|Identifier|Money|Period|Quantity|Range|Ratio|Reference|SampledData|Signature|Timing|ContactDetail|Contributor|DataRequirement|Expression|ParameterDefinition|RelatedArtifact|TriggerDefinition|UsageContext|Dosage|Meta'
  else if (propName = 'example') then result := 'Element'
  else if (propName = 'minValue[x]') then result := 'date|dateTime|instant|time|decimal|integer|integer64|positiveInt|unsignedInt|Quantity'
  else if (propName = 'maxValue[x]') then result := 'date|dateTime|instant|time|decimal|integer|integer64|positiveInt|unsignedInt|Quantity'
  else if (propName = 'maxLength') then result := 'integer'
  else if (propName = 'condition') then result := 'id'
  else if (propName = 'constraint') then result := 'Element'
  else if (propName = 'mustSupport') then result := 'boolean'
  else if (propName = 'isModifier') then result := 'boolean'
  else if (propName = 'isModifierReason') then result := 'string'
  else if (propName = 'isSummary') then result := 'boolean'
  else if (propName = 'binding') then result := 'Element'
  else if (propName = 'mapping') then result := 'Element'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirElementDefinition.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'path') then PathElement := nil
  else if (propName = 'sliceName') then SliceNameElement := nil
  else if (propName = 'sliceIsConstraining') then SliceIsConstrainingElement := nil
  else if (propName = 'label') then Label_Element := nil
  else if (propName = 'code') then deletePropertyValue('code', CodeList, value) {L1054}
  else if (propName = 'slicing') then SlicingElement := nil
  else if (propName = 'short') then ShortElement := nil
  else if (propName = 'definition') then DefinitionElement := nil
  else if (propName = 'comment') then CommentElement := nil
  else if (propName = 'requirements') then RequirementsElement := nil
  else if (propName = 'alias') then deletePropertyValue('alias', AliasList, value) {L1054}
  else if (propName = 'min') then MinElement := nil
  else if (propName = 'max') then MaxElement := nil
  else if (propName = 'base') then BaseElement := nil
  else if (propName = 'contentReference') then ContentReferenceElement := nil
  else if (propName = 'type') then deletePropertyValue('type', Type_List, value) {L1054}
  else if (isMatchingName(propName, 'defaultValue', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then DefaultValueElement := nil {L1189}
  else if (propName = 'meaningWhenMissing') then MeaningWhenMissingElement := nil
  else if (propName = 'orderMeaning') then OrderMeaningElement := nil
  else if (isMatchingName(propName, 'fixed', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then FixedElement := nil {L1189}
  else if (isMatchingName(propName, 'pattern', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then PatternElement := nil {L1189}
  else if (propName = 'example') then deletePropertyValue('example', ExampleList, value) {L1054}
  else if (isMatchingName(propName, 'minValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then MinValueElement := nil {L1189}
  else if (isMatchingName(propName, 'maxValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then MaxValueElement := nil {L1189}
  else if (propName = 'maxLength') then MaxLengthElement := nil
  else if (propName = 'condition') then deletePropertyValue('condition', ConditionList, value) {L1054}
  else if (propName = 'constraint') then deletePropertyValue('constraint', ConstraintList, value) {L1054}
  else if (propName = 'mustSupport') then MustSupportElement := nil
  else if (propName = 'isModifier') then IsModifierElement := nil
  else if (propName = 'isModifierReason') then IsModifierReasonElement := nil
  else if (propName = 'isSummary') then IsSummaryElement := nil
  else if (propName = 'binding') then BindingElement := nil
  else if (propName = 'mapping') then deletePropertyValue('mapping', MappingList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirElementDefinition.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'path') then PathElement := asString(new) {L1222}
  else if (propName = 'sliceName') then SliceNameElement := asString(new) {L1222}
  else if (propName = 'sliceIsConstraining') then SliceIsConstrainingElement := asBoolean(new) {L1222}
  else if (propName = 'label') then Label_Element := asString(new) {L1222}
  else if (propName = 'code') then replacePropertyValue('code', CodeList, existing, new) {L1055}
  else if (propName = 'slicing') then SlicingElement := new as TFhirElementDefinitionSlicing {L1195}
  else if (propName = 'short') then ShortElement := asString(new) {L1222}
  else if (propName = 'definition') then DefinitionElement := asMarkdown(new) {L1222}
  else if (propName = 'comment') then CommentElement := asMarkdown(new) {L1222}
  else if (propName = 'requirements') then RequirementsElement := asMarkdown(new) {L1222}
  else if (propName = 'alias') then replacePropertyValue('alias', AliasList, existing, new) {L1055}
  else if (propName = 'min') then MinElement := asUnsignedInt(new) {L1222}
  else if (propName = 'max') then MaxElement := asString(new) {L1222}
  else if (propName = 'base') then BaseElement := new as TFhirElementDefinitionBase {L1195}
  else if (propName = 'contentReference') then ContentReferenceElement := asUri(new) {L1222}
  else if (propName = 'type') then replacePropertyValue('type', Type_List, existing, new) {L1055}
  else if (isMatchingName(propName, 'defaultValue', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then DefaultValueElement := new as TFhirDataType {L1190}
  else if (propName = 'meaningWhenMissing') then MeaningWhenMissingElement := asMarkdown(new) {L1222}
  else if (propName = 'orderMeaning') then OrderMeaningElement := asString(new) {L1222}
  else if (isMatchingName(propName, 'fixed', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then FixedElement := new as TFhirDataType {L1190}
  else if (isMatchingName(propName, 'pattern', ['Base64Binary', 'Boolean', 'Canonical', 'Code', 'Date', 'DateTime', 'Decimal', 'Id', 'Instant', 'Integer', 'Integer64', 'Markdown', 'Oid', 'PositiveInt', 'String', 'Time', 'UnsignedInt', 'Uri', 'Url', 'Uuid', 'Address', 'Age', 'Annotation', 'Attachment', 'CodeableConcept', 'Coding', 'ContactPoint', 'Count', 'Distance', 'Duration', 'HumanName', 'Identifier', 'Money', 'Period', 'Quantity', 'Range', 'Ratio', 'Reference', 'SampledData', 'Signature', 'Timing', 'ContactDetail', 'Contributor', 'DataRequirement', 'Expression', 'ParameterDefinition', 'RelatedArtifact', 'TriggerDefinition', 'UsageContext', 'Dosage', 'Meta'])) then PatternElement := new as TFhirDataType {L1190}
  else if (propName = 'example') then replacePropertyValue('example', ExampleList, existing, new) {L1055}
  else if (isMatchingName(propName, 'minValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then MinValueElement := new as TFhirDataType {L1190}
  else if (isMatchingName(propName, 'maxValue', ['Date', 'DateTime', 'Instant', 'Time', 'Decimal', 'Integer', 'Integer64', 'PositiveInt', 'UnsignedInt', 'Quantity'])) then MaxValueElement := new as TFhirDataType {L1190}
  else if (propName = 'maxLength') then MaxLengthElement := asInteger(new) {L1222}
  else if (propName = 'condition') then replacePropertyValue('condition', ConditionList, existing, new) {L1055}
  else if (propName = 'constraint') then replacePropertyValue('constraint', ConstraintList, existing, new) {L1055}
  else if (propName = 'mustSupport') then MustSupportElement := asBoolean(new) {L1222}
  else if (propName = 'isModifier') then IsModifierElement := asBoolean(new) {L1222}
  else if (propName = 'isModifierReason') then IsModifierReasonElement := asString(new) {L1222}
  else if (propName = 'isSummary') then IsSummaryElement := asBoolean(new) {L1222}
  else if (propName = 'binding') then BindingElement := new as TFhirElementDefinitionBinding {L1195}
  else if (propName = 'mapping') then replacePropertyValue('mapping', MappingList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirElementDefinition.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'representation') then FRepresentation.move(source, destination) {L996}
  else if (propName = 'code') then CodeList.move(source, destination) {L1050}
  else if (propName = 'alias') then AliasList.move(source, destination) {L1046}
  else if (propName = 'type') then Type_List.move(source, destination) {L1050}
  else if (propName = 'example') then ExampleList.move(source, destination) {L1050}
  else if (propName = 'condition') then ConditionList.move(source, destination) {L1046}
  else if (propName = 'constraint') then ConstraintList.move(source, destination) {L1050}
  else if (propName = 'mapping') then MappingList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirElementDefinition.fhirType : string;
begin
  result := 'ElementDefinition';
end;

function TFhirElementDefinition.Link : TFhirElementDefinition;
begin
  result := TFhirElementDefinition(inherited Link);
end;

function TFhirElementDefinition.Clone : TFhirElementDefinition;
begin
  result := TFhirElementDefinition(inherited Clone);
end;

function TFhirElementDefinition.equals(other : TObject) : boolean; 
var
  o : TFhirElementDefinition;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirElementDefinition)) then
    result := false
  else
  begin
    o := TFhirElementDefinition(other);
    result := compareDeep(pathElement, o.pathElement, true) and compareDeep(representationList, o.representationList, true) and 
      compareDeep(sliceNameElement, o.sliceNameElement, true) and compareDeep(sliceIsConstrainingElement, o.sliceIsConstrainingElement, true) and 
      compareDeep(label_Element, o.label_Element, true) and compareDeep(codeList, o.codeList, true) and 
      compareDeep(slicingElement, o.slicingElement, true) and compareDeep(shortElement, o.shortElement, true) and 
      compareDeep(definitionElement, o.definitionElement, true) and compareDeep(commentElement, o.commentElement, true) and 
      compareDeep(requirementsElement, o.requirementsElement, true) and compareDeep(aliasList, o.aliasList, true) and 
      compareDeep(minElement, o.minElement, true) and compareDeep(maxElement, o.maxElement, true) and 
      compareDeep(baseElement, o.baseElement, true) and compareDeep(contentReferenceElement, o.contentReferenceElement, true) and 
      compareDeep(type_List, o.type_List, true) and compareDeep(defaultValueElement, o.defaultValueElement, true) and 
      compareDeep(meaningWhenMissingElement, o.meaningWhenMissingElement, true) and 
      compareDeep(orderMeaningElement, o.orderMeaningElement, true) and compareDeep(fixedElement, o.fixedElement, true) and 
      compareDeep(patternElement, o.patternElement, true) and compareDeep(exampleList, o.exampleList, true) and 
      compareDeep(minValueElement, o.minValueElement, true) and compareDeep(maxValueElement, o.maxValueElement, true) and 
      compareDeep(maxLengthElement, o.maxLengthElement, true) and compareDeep(conditionList, o.conditionList, true) and 
      compareDeep(constraintList, o.constraintList, true) and compareDeep(mustSupportElement, o.mustSupportElement, true) and 
      compareDeep(isModifierElement, o.isModifierElement, true) and compareDeep(isModifierReasonElement, o.isModifierReasonElement, true) and 
      compareDeep(isSummaryElement, o.isSummaryElement, true) and compareDeep(bindingElement, o.bindingElement, true) and 
      compareDeep(mappingList, o.mappingList, true);
  end;
end;

function TFhirElementDefinition.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FPath) and isEmptyProp(FRepresentation) and isEmptyProp(FSliceName) and isEmptyProp(FSliceIsConstraining) and isEmptyProp(FLabel_) and isEmptyProp(FcodeList) and isEmptyProp(FSlicing) and isEmptyProp(FShort) and isEmptyProp(FDefinition) and isEmptyProp(FComment) and isEmptyProp(FRequirements) and isEmptyProp(FaliasList) and isEmptyProp(FMin) and isEmptyProp(FMax) and isEmptyProp(FBase) and isEmptyProp(FContentReference) and isEmptyProp(Ftype_List) and isEmptyProp(FDefaultValue) and isEmptyProp(FMeaningWhenMissing) and isEmptyProp(FOrderMeaning) and isEmptyProp(FFixed) and isEmptyProp(FPattern) and isEmptyProp(FexampleList) and isEmptyProp(FMinValue) and isEmptyProp(FMaxValue) and isEmptyProp(FMaxLength) and isEmptyProp(FconditionList) and isEmptyProp(FconstraintList) and isEmptyProp(FMustSupport) and isEmptyProp(FIsModifier) and isEmptyProp(FIsModifierReason) and isEmptyProp(FIsSummary) and isEmptyProp(FBinding) and isEmptyProp(FmappingList);
end;

procedure TFhirElementDefinition.SetPath(value : TFhirString);
begin
  FPath.free;
  FPath := value; {L1134}
end;

function TFhirElementDefinition.GetPathST : String;
begin
  if FPath = nil then
    result := ''
  else
    result := FPath.value;
end;

procedure TFhirElementDefinition.SetPathST(value : String);
begin
  if value <> '' then
  begin
    if FPath = nil then
      FPath := TFhirString.create;
    FPath.value := value
  end
  else if FPath <> nil then
    FPath.value := '';
end;

function TFhirElementDefinition.GetRepresentation : TFhirEnumList;
begin
  if FRepresentation = nil then
    FRepresentation := TFhirEnumList.Create(SYSTEMS_TFhirPropertyRepresentationEnum, CODES_TFhirPropertyRepresentationEnum);
  result := FRepresentation;
end;

function TFhirElementDefinition.GetHasRepresentation : boolean;
begin
  result := (FRepresentation <> nil) and (FRepresentation.count > 0);
end;

function TFhirElementDefinition.GetRepresentationST : TFhirPropertyRepresentationEnumList;
  var i : integer;
begin
  result := [];
  if Frepresentation <> nil then
    for i := 0 to Frepresentation.count - 1 do
      result := result + [TFhirPropertyRepresentationEnum(StringArrayIndexOfSensitive(CODES_TFhirPropertyRepresentationEnum, Frepresentation[i].value))];
end;

procedure TFhirElementDefinition.SetRepresentationST(value : TFhirPropertyRepresentationEnumList);
var a : TFhirPropertyRepresentationEnum;
begin
  if Frepresentation = nil then
    Frepresentation := TFhirEnumList.create(SYSTEMS_TFhirPropertyRepresentationEnum, CODES_TFhirPropertyRepresentationEnum);
  Frepresentation.clear;
  for a := low(TFhirPropertyRepresentationEnum) to high(TFhirPropertyRepresentationEnum) do
    if a in value then
      begin
         if Frepresentation = nil then
           Frepresentation := TFhirEnumList.create(SYSTEMS_TFhirPropertyRepresentationEnum, CODES_TFhirPropertyRepresentationEnum);
         Frepresentation.add(TFhirEnum.create(SYSTEMS_TFhirPropertyRepresentationEnum[a], CODES_TFhirPropertyRepresentationEnum[a]));
      end;
end;

procedure TFhirElementDefinition.SetSliceName(value : TFhirString);
begin
  FSliceName.free;
  FSliceName := value; {L1134}
end;

function TFhirElementDefinition.GetSliceNameST : String;
begin
  if FSliceName = nil then
    result := ''
  else
    result := FSliceName.value;
end;

procedure TFhirElementDefinition.SetSliceNameST(value : String);
begin
  if value <> '' then
  begin
    if FSliceName = nil then
      FSliceName := TFhirString.create;
    FSliceName.value := value
  end
  else if FSliceName <> nil then
    FSliceName.value := '';
end;

procedure TFhirElementDefinition.SetSliceIsConstraining(value : TFhirBoolean);
begin
  FSliceIsConstraining.free;
  FSliceIsConstraining := value; {L1134}
end;

function TFhirElementDefinition.GetSliceIsConstrainingST : Boolean;
begin
  if FSliceIsConstraining = nil then
    result := false
  else
    result := FSliceIsConstraining.value;
end;

procedure TFhirElementDefinition.SetSliceIsConstrainingST(value : Boolean);
begin
  if FSliceIsConstraining = nil then
    FSliceIsConstraining := TFhirBoolean.create;
  FSliceIsConstraining.value := value
end;

procedure TFhirElementDefinition.SetLabel_(value : TFhirString);
begin
  FLabel_.free;
  FLabel_ := value; {L1134}
end;

function TFhirElementDefinition.GetLabel_ST : String;
begin
  if FLabel_ = nil then
    result := ''
  else
    result := FLabel_.value;
end;

procedure TFhirElementDefinition.SetLabel_ST(value : String);
begin
  if value <> '' then
  begin
    if FLabel_ = nil then
      FLabel_ := TFhirString.create;
    FLabel_.value := value
  end
  else if FLabel_ <> nil then
    FLabel_.value := '';
end;

function TFhirElementDefinition.GetCodeList : TFhirCodingList;
begin
  if FCodeList = nil then
    FCodeList := TFhirCodingList.Create;
  result := FCodeList;
end;

function TFhirElementDefinition.GetHasCodeList : boolean;
begin
  result := (FCodeList <> nil) and (FCodeList.count > 0);
end;

procedure TFhirElementDefinition.SetSlicing(value : TFhirElementDefinitionSlicing);
begin
  FSlicing.free;
  FSlicing := value; {L1134}
end;

procedure TFhirElementDefinition.SetShort(value : TFhirString);
begin
  FShort.free;
  FShort := value; {L1134}
end;

function TFhirElementDefinition.GetShortST : String;
begin
  if FShort = nil then
    result := ''
  else
    result := FShort.value;
end;

procedure TFhirElementDefinition.SetShortST(value : String);
begin
  if value <> '' then
  begin
    if FShort = nil then
      FShort := TFhirString.create;
    FShort.value := value
  end
  else if FShort <> nil then
    FShort.value := '';
end;

procedure TFhirElementDefinition.SetDefinition(value : TFhirMarkdown);
begin
  FDefinition.free;
  FDefinition := value; {L1134}
end;

function TFhirElementDefinition.GetDefinitionST : String;
begin
  if FDefinition = nil then
    result := ''
  else
    result := FDefinition.value;
end;

procedure TFhirElementDefinition.SetDefinitionST(value : String);
begin
  if value <> '' then
  begin
    if FDefinition = nil then
      FDefinition := TFhirMarkdown.create;
    FDefinition.value := value
  end
  else if FDefinition <> nil then
    FDefinition.value := '';
end;

procedure TFhirElementDefinition.SetComment(value : TFhirMarkdown);
begin
  FComment.free;
  FComment := value; {L1134}
end;

function TFhirElementDefinition.GetCommentST : String;
begin
  if FComment = nil then
    result := ''
  else
    result := FComment.value;
end;

procedure TFhirElementDefinition.SetCommentST(value : String);
begin
  if value <> '' then
  begin
    if FComment = nil then
      FComment := TFhirMarkdown.create;
    FComment.value := value
  end
  else if FComment <> nil then
    FComment.value := '';
end;

procedure TFhirElementDefinition.SetRequirements(value : TFhirMarkdown);
begin
  FRequirements.free;
  FRequirements := value; {L1134}
end;

function TFhirElementDefinition.GetRequirementsST : String;
begin
  if FRequirements = nil then
    result := ''
  else
    result := FRequirements.value;
end;

procedure TFhirElementDefinition.SetRequirementsST(value : String);
begin
  if value <> '' then
  begin
    if FRequirements = nil then
      FRequirements := TFhirMarkdown.create;
    FRequirements.value := value
  end
  else if FRequirements <> nil then
    FRequirements.value := '';
end;

function TFhirElementDefinition.GetAliasList : TFhirStringList;
begin
  if FAliasList = nil then
    FAliasList := TFhirStringList.Create;
  result := FAliasList;
end;

function TFhirElementDefinition.GetHasAliasList : boolean;
begin
  result := (FAliasList <> nil) and (FAliasList.count > 0);
end;

procedure TFhirElementDefinition.SetMin(value : TFhirUnsignedInt);
begin
  FMin.free;
  FMin := value; {L1134}
end;

function TFhirElementDefinition.GetMinST : String;
begin
  if FMin = nil then
    result := ''
  else
    result := FMin.value;
end;

procedure TFhirElementDefinition.SetMinST(value : String);
begin
  if value <> '' then
  begin
    if FMin = nil then
      FMin := TFhirUnsignedInt.create;
    FMin.value := value
  end
  else if FMin <> nil then
    FMin.value := '';
end;

procedure TFhirElementDefinition.SetMax(value : TFhirString);
begin
  FMax.free;
  FMax := value; {L1134}
end;

function TFhirElementDefinition.GetMaxST : String;
begin
  if FMax = nil then
    result := ''
  else
    result := FMax.value;
end;

procedure TFhirElementDefinition.SetMaxST(value : String);
begin
  if value <> '' then
  begin
    if FMax = nil then
      FMax := TFhirString.create;
    FMax.value := value
  end
  else if FMax <> nil then
    FMax.value := '';
end;

procedure TFhirElementDefinition.SetBase(value : TFhirElementDefinitionBase);
begin
  FBase.free;
  FBase := value; {L1134}
end;

procedure TFhirElementDefinition.SetContentReference(value : TFhirUri);
begin
  FContentReference.free;
  FContentReference := value; {L1134}
end;

function TFhirElementDefinition.GetContentReferenceST : String;
begin
  if FContentReference = nil then
    result := ''
  else
    result := FContentReference.value;
end;

procedure TFhirElementDefinition.SetContentReferenceST(value : String);
begin
  if value <> '' then
  begin
    if FContentReference = nil then
      FContentReference := TFhirUri.create;
    FContentReference.value := value
  end
  else if FContentReference <> nil then
    FContentReference.value := '';
end;

function TFhirElementDefinition.GetType_List : TFhirElementDefinitionTypeList;
begin
  if FType_List = nil then
    FType_List := TFhirElementDefinitionTypeList.Create;
  result := FType_List;
end;

function TFhirElementDefinition.GetHasType_List : boolean;
begin
  result := (FType_List <> nil) and (FType_List.count > 0);
end;

procedure TFhirElementDefinition.SetDefaultValue(value : TFhirDataType);
begin
  FDefaultValue.free;
  FDefaultValue := value; {L1134}
end;

procedure TFhirElementDefinition.SetMeaningWhenMissing(value : TFhirMarkdown);
begin
  FMeaningWhenMissing.free;
  FMeaningWhenMissing := value; {L1134}
end;

function TFhirElementDefinition.GetMeaningWhenMissingST : String;
begin
  if FMeaningWhenMissing = nil then
    result := ''
  else
    result := FMeaningWhenMissing.value;
end;

procedure TFhirElementDefinition.SetMeaningWhenMissingST(value : String);
begin
  if value <> '' then
  begin
    if FMeaningWhenMissing = nil then
      FMeaningWhenMissing := TFhirMarkdown.create;
    FMeaningWhenMissing.value := value
  end
  else if FMeaningWhenMissing <> nil then
    FMeaningWhenMissing.value := '';
end;

procedure TFhirElementDefinition.SetOrderMeaning(value : TFhirString);
begin
  FOrderMeaning.free;
  FOrderMeaning := value; {L1134}
end;

function TFhirElementDefinition.GetOrderMeaningST : String;
begin
  if FOrderMeaning = nil then
    result := ''
  else
    result := FOrderMeaning.value;
end;

procedure TFhirElementDefinition.SetOrderMeaningST(value : String);
begin
  if value <> '' then
  begin
    if FOrderMeaning = nil then
      FOrderMeaning := TFhirString.create;
    FOrderMeaning.value := value
  end
  else if FOrderMeaning <> nil then
    FOrderMeaning.value := '';
end;

procedure TFhirElementDefinition.SetFixed(value : TFhirDataType);
begin
  FFixed.free;
  FFixed := value; {L1134}
end;

procedure TFhirElementDefinition.SetPattern(value : TFhirDataType);
begin
  FPattern.free;
  FPattern := value; {L1134}
end;

function TFhirElementDefinition.GetExampleList : TFhirElementDefinitionExampleList;
begin
  if FExampleList = nil then
    FExampleList := TFhirElementDefinitionExampleList.Create;
  result := FExampleList;
end;

function TFhirElementDefinition.GetHasExampleList : boolean;
begin
  result := (FExampleList <> nil) and (FExampleList.count > 0);
end;

procedure TFhirElementDefinition.SetMinValue(value : TFhirDataType);
begin
  FMinValue.free;
  FMinValue := value; {L1134}
end;

procedure TFhirElementDefinition.SetMaxValue(value : TFhirDataType);
begin
  FMaxValue.free;
  FMaxValue := value; {L1134}
end;

procedure TFhirElementDefinition.SetMaxLength(value : TFhirInteger);
begin
  FMaxLength.free;
  FMaxLength := value; {L1134}
end;

function TFhirElementDefinition.GetMaxLengthST : String;
begin
  if FMaxLength = nil then
    result := ''
  else
    result := FMaxLength.value;
end;

procedure TFhirElementDefinition.SetMaxLengthST(value : String);
begin
  if value <> '' then
  begin
    if FMaxLength = nil then
      FMaxLength := TFhirInteger.create;
    FMaxLength.value := value
  end
  else if FMaxLength <> nil then
    FMaxLength.value := '';
end;

function TFhirElementDefinition.GetConditionList : TFhirIdList;
begin
  if FConditionList = nil then
    FConditionList := TFhirIdList.Create;
  result := FConditionList;
end;

function TFhirElementDefinition.GetHasConditionList : boolean;
begin
  result := (FConditionList <> nil) and (FConditionList.count > 0);
end;

function TFhirElementDefinition.GetConstraintList : TFhirElementDefinitionConstraintList;
begin
  if FConstraintList = nil then
    FConstraintList := TFhirElementDefinitionConstraintList.Create;
  result := FConstraintList;
end;

function TFhirElementDefinition.GetHasConstraintList : boolean;
begin
  result := (FConstraintList <> nil) and (FConstraintList.count > 0);
end;

procedure TFhirElementDefinition.SetMustSupport(value : TFhirBoolean);
begin
  FMustSupport.free;
  FMustSupport := value; {L1134}
end;

function TFhirElementDefinition.GetMustSupportST : Boolean;
begin
  if FMustSupport = nil then
    result := false
  else
    result := FMustSupport.value;
end;

procedure TFhirElementDefinition.SetMustSupportST(value : Boolean);
begin
  if FMustSupport = nil then
    FMustSupport := TFhirBoolean.create;
  FMustSupport.value := value
end;

procedure TFhirElementDefinition.SetIsModifier(value : TFhirBoolean);
begin
  FIsModifier.free;
  FIsModifier := value; {L1134}
end;

function TFhirElementDefinition.GetIsModifierST : Boolean;
begin
  if FIsModifier = nil then
    result := false
  else
    result := FIsModifier.value;
end;

procedure TFhirElementDefinition.SetIsModifierST(value : Boolean);
begin
  if FIsModifier = nil then
    FIsModifier := TFhirBoolean.create;
  FIsModifier.value := value
end;

procedure TFhirElementDefinition.SetIsModifierReason(value : TFhirString);
begin
  FIsModifierReason.free;
  FIsModifierReason := value; {L1134}
end;

function TFhirElementDefinition.GetIsModifierReasonST : String;
begin
  if FIsModifierReason = nil then
    result := ''
  else
    result := FIsModifierReason.value;
end;

procedure TFhirElementDefinition.SetIsModifierReasonST(value : String);
begin
  if value <> '' then
  begin
    if FIsModifierReason = nil then
      FIsModifierReason := TFhirString.create;
    FIsModifierReason.value := value
  end
  else if FIsModifierReason <> nil then
    FIsModifierReason.value := '';
end;

procedure TFhirElementDefinition.SetIsSummary(value : TFhirBoolean);
begin
  FIsSummary.free;
  FIsSummary := value; {L1134}
end;

function TFhirElementDefinition.GetIsSummaryST : Boolean;
begin
  if FIsSummary = nil then
    result := false
  else
    result := FIsSummary.value;
end;

procedure TFhirElementDefinition.SetIsSummaryST(value : Boolean);
begin
  if FIsSummary = nil then
    FIsSummary := TFhirBoolean.create;
  FIsSummary.value := value
end;

procedure TFhirElementDefinition.SetBinding(value : TFhirElementDefinitionBinding);
begin
  FBinding.free;
  FBinding := value; {L1134}
end;

function TFhirElementDefinition.GetMappingList : TFhirElementDefinitionMappingList;
begin
  if FMappingList = nil then
    FMappingList := TFhirElementDefinitionMappingList.Create;
  result := FMappingList;
end;

function TFhirElementDefinition.GetHasMappingList : boolean;
begin
  result := (FMappingList <> nil) and (FMappingList.count > 0);
end;

procedure TFhirElementDefinition.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('path');
  fields.add('representation');
  fields.add('sliceName');
  fields.add('sliceIsConstraining');
  fields.add('label');
  fields.add('code');
  fields.add('slicing');
  fields.add('short');
  fields.add('definition');
  fields.add('comment');
  fields.add('requirements');
  fields.add('alias');
  fields.add('min');
  fields.add('max');
  fields.add('base');
  fields.add('contentReference');
  fields.add('type');
  fields.add('defaultValue[x]');
  fields.add('meaningWhenMissing');
  fields.add('orderMeaning');
  fields.add('fixed[x]');
  fields.add('pattern[x]');
  fields.add('example');
  fields.add('minValue[x]');
  fields.add('maxValue[x]');
  fields.add('maxLength');
  fields.add('condition');
  fields.add('constraint');
  fields.add('mustSupport');
  fields.add('isModifier');
  fields.add('isModifierReason');
  fields.add('isSummary');
  fields.add('binding');
  fields.add('mapping');
end;

function TFhirElementDefinition.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FPath.sizeInBytes);
  inc(result, FRepresentation.sizeInBytes);
  inc(result, FSliceName.sizeInBytes);
  inc(result, FSliceIsConstraining.sizeInBytes);
  inc(result, FLabel_.sizeInBytes);
  inc(result, FcodeList.sizeInBytes);
  inc(result, FSlicing.sizeInBytes);
  inc(result, FShort.sizeInBytes);
  inc(result, FDefinition.sizeInBytes);
  inc(result, FComment.sizeInBytes);
  inc(result, FRequirements.sizeInBytes);
  inc(result, FaliasList.sizeInBytes);
  inc(result, FMin.sizeInBytes);
  inc(result, FMax.sizeInBytes);
  inc(result, FBase.sizeInBytes);
  inc(result, FContentReference.sizeInBytes);
  inc(result, Ftype_List.sizeInBytes);
  inc(result, FDefaultValue.sizeInBytes);
  inc(result, FMeaningWhenMissing.sizeInBytes);
  inc(result, FOrderMeaning.sizeInBytes);
  inc(result, FFixed.sizeInBytes);
  inc(result, FPattern.sizeInBytes);
  inc(result, FexampleList.sizeInBytes);
  inc(result, FMinValue.sizeInBytes);
  inc(result, FMaxValue.sizeInBytes);
  inc(result, FMaxLength.sizeInBytes);
  inc(result, FconditionList.sizeInBytes);
  inc(result, FconstraintList.sizeInBytes);
  inc(result, FMustSupport.sizeInBytes);
  inc(result, FIsModifier.sizeInBytes);
  inc(result, FIsModifierReason.sizeInBytes);
  inc(result, FIsSummary.sizeInBytes);
  inc(result, FBinding.sizeInBytes);
  inc(result, FmappingList.sizeInBytes);
end;

{ TFhirElementDefinitionListEnumerator }

constructor TFhirElementDefinitionListEnumerator.Create(list : TFhirElementDefinitionList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirElementDefinitionListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirElementDefinitionListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirElementDefinitionListEnumerator.GetCurrent : TFhirElementDefinition;
begin
  Result := FList[FIndex];
end;

function TFhirElementDefinitionListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirElementDefinitionList }

procedure TFhirElementDefinitionList.AddItem(value: TFhirElementDefinition);
begin
  assert(value.ClassName = 'TFhirElementDefinition', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirElementDefinition');
  add(value);
end;

function TFhirElementDefinitionList.Append: TFhirElementDefinition;
begin
  result := TFhirElementDefinition.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionList.ClearItems;
begin
  Clear;
end;

function TFhirElementDefinitionList.GetEnumerator : TFhirElementDefinitionListEnumerator;
begin
  result := TFhirElementDefinitionListEnumerator.Create(self.link);
end;

function TFhirElementDefinitionList.Clone: TFhirElementDefinitionList;
begin
  result := TFhirElementDefinitionList(inherited Clone);
end;

function TFhirElementDefinitionList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirElementDefinitionList.GetItemN(index: Integer): TFhirElementDefinition;
begin
  result := TFhirElementDefinition(ObjectByIndex[index]);
end;

function TFhirElementDefinitionList.ItemClass: TFslObjectClass;
begin
  result := TFhirElementDefinition;
end;
function TFhirElementDefinitionList.IndexOf(value: TFhirElementDefinition): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirElementDefinitionList.Insert(index: Integer): TFhirElementDefinition;
begin
  result := TFhirElementDefinition.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirElementDefinitionList.InsertItem(index: Integer; value: TFhirElementDefinition);
begin
  assert(value is TFhirElementDefinition);
  Inherited Insert(index, value);
end;

function TFhirElementDefinitionList.Item(index: Integer): TFhirElementDefinition;
begin
  result := TFhirElementDefinition(ObjectByIndex[index]);
end;

function TFhirElementDefinitionList.Link: TFhirElementDefinitionList;
begin
  result := TFhirElementDefinitionList(inherited Link);
end;

procedure TFhirElementDefinitionList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirElementDefinitionList.SetItemByIndex(index: Integer; value: TFhirElementDefinition);
begin
  assert(value is TFhirElementDefinition);
  FhirElementDefinitions[index] := value;
end;

procedure TFhirElementDefinitionList.SetItemN(index: Integer; value: TFhirElementDefinition);
begin
  assert(value is TFhirElementDefinition);
  ObjectByIndex[index] := value;
end;

{ TFhirMarketingStatus }

constructor TFhirMarketingStatus.Create;
begin
  inherited;
end;

destructor TFhirMarketingStatus.Destroy;
begin
  FCountry.free;
  FJurisdiction.free;
  FStatus.free;
  FDateRange.free;
  FRestoreDate.free;
  inherited;
end;

procedure TFhirMarketingStatus.Assign(oSource : TFslObject);
begin
  inherited;
  country := TFhirMarketingStatus(oSource).country.Clone;
  jurisdiction := TFhirMarketingStatus(oSource).jurisdiction.Clone;
  status := TFhirMarketingStatus(oSource).status.Clone;
  dateRange := TFhirMarketingStatus(oSource).dateRange.Clone;
  restoreDateElement := TFhirMarketingStatus(oSource).restoreDateElement.Clone;
end;

procedure TFhirMarketingStatus.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'country') Then
     list.add(self.link, 'country', FCountry.Link);
  if (child_name = 'jurisdiction') Then
     list.add(self.link, 'jurisdiction', FJurisdiction.Link);
  if (child_name = 'status') Then
     list.add(self.link, 'status', FStatus.Link);
  if (child_name = 'dateRange') Then
     list.add(self.link, 'dateRange', FDateRange.Link);
  if (child_name = 'restoreDate') Then
     list.add(self.link, 'restoreDate', FRestoreDate.Link);
end;

procedure TFhirMarketingStatus.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'country', 'CodeableConcept', false, TFhirCodeableConcept, FCountry.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'jurisdiction', 'CodeableConcept', false, TFhirCodeableConcept, FJurisdiction.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'status', 'CodeableConcept', false, TFhirCodeableConcept, FStatus.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'dateRange', 'Period', false, TFhirPeriod, FDateRange.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'restoreDate', 'dateTime', false, TFhirDateTime, FRestoreDate.Link)); {L1172}
end;

function TFhirMarketingStatus.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'country') then
  begin
    Country := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'jurisdiction') then
  begin
    Jurisdiction := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'status') then
  begin
    Status := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'dateRange') then
  begin
    DateRange := propValue as TFhirPeriod {L1199};
    result := propValue;
  end
  else if (propName = 'restoreDate') then
  begin
    RestoreDateElement := asDateTime(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirMarketingStatus.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirMarketingStatus.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'country') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'jurisdiction') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'status') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'dateRange') then result := TFhirPeriod.create() {L1203}
  else if (propName = 'restoreDate') then result := TFhirDateTime.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirMarketingStatus.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'country') then result := 'CodeableConcept'
  else if (propName = 'jurisdiction') then result := 'CodeableConcept'
  else if (propName = 'status') then result := 'CodeableConcept'
  else if (propName = 'dateRange') then result := 'Period'
  else if (propName = 'restoreDate') then result := 'dateTime'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirMarketingStatus.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'country') then CountryElement := nil
  else if (propName = 'jurisdiction') then JurisdictionElement := nil
  else if (propName = 'status') then StatusElement := nil
  else if (propName = 'dateRange') then DateRangeElement := nil
  else if (propName = 'restoreDate') then RestoreDateElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirMarketingStatus.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'country') then CountryElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'jurisdiction') then JurisdictionElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'status') then StatusElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'dateRange') then DateRangeElement := new as TFhirPeriod {L1195}
  else if (propName = 'restoreDate') then RestoreDateElement := asDateTime(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirMarketingStatus.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirMarketingStatus.fhirType : string;
begin
  result := 'MarketingStatus';
end;

function TFhirMarketingStatus.Link : TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus(inherited Link);
end;

function TFhirMarketingStatus.Clone : TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus(inherited Clone);
end;

function TFhirMarketingStatus.equals(other : TObject) : boolean; 
var
  o : TFhirMarketingStatus;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirMarketingStatus)) then
    result := false
  else
  begin
    o := TFhirMarketingStatus(other);
    result := compareDeep(countryElement, o.countryElement, true) and compareDeep(jurisdictionElement, o.jurisdictionElement, true) and 
      compareDeep(statusElement, o.statusElement, true) and compareDeep(dateRangeElement, o.dateRangeElement, true) and 
      compareDeep(restoreDateElement, o.restoreDateElement, true);
  end;
end;

function TFhirMarketingStatus.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FCountry) and isEmptyProp(FJurisdiction) and isEmptyProp(FStatus) and isEmptyProp(FDateRange) and isEmptyProp(FRestoreDate);
end;

procedure TFhirMarketingStatus.SetCountry(value : TFhirCodeableConcept);
begin
  FCountry.free;
  FCountry := value; {L1134}
end;

procedure TFhirMarketingStatus.SetJurisdiction(value : TFhirCodeableConcept);
begin
  FJurisdiction.free;
  FJurisdiction := value; {L1134}
end;

procedure TFhirMarketingStatus.SetStatus(value : TFhirCodeableConcept);
begin
  FStatus.free;
  FStatus := value; {L1134}
end;

procedure TFhirMarketingStatus.SetDateRange(value : TFhirPeriod);
begin
  FDateRange.free;
  FDateRange := value; {L1134}
end;

procedure TFhirMarketingStatus.SetRestoreDate(value : TFhirDateTime);
begin
  FRestoreDate.free;
  FRestoreDate := value; {L1134}
end;

function TFhirMarketingStatus.GetRestoreDateST : TFslDateTime;
begin
  if FRestoreDate = nil then
    result := TFslDateTime.makeNull
  else
    result := FRestoreDate.value;
end;

procedure TFhirMarketingStatus.SetRestoreDateST(value : TFslDateTime);
begin
  if FRestoreDate = nil then
    FRestoreDate := TFhirDateTime.create;
  FRestoreDate.value := value
end;

procedure TFhirMarketingStatus.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('country');
  fields.add('jurisdiction');
  fields.add('status');
  fields.add('dateRange');
  fields.add('restoreDate');
end;

function TFhirMarketingStatus.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FCountry.sizeInBytes);
  inc(result, FJurisdiction.sizeInBytes);
  inc(result, FStatus.sizeInBytes);
  inc(result, FDateRange.sizeInBytes);
  inc(result, FRestoreDate.sizeInBytes);
end;

{ TFhirMarketingStatusListEnumerator }

constructor TFhirMarketingStatusListEnumerator.Create(list : TFhirMarketingStatusList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirMarketingStatusListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirMarketingStatusListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirMarketingStatusListEnumerator.GetCurrent : TFhirMarketingStatus;
begin
  Result := FList[FIndex];
end;

function TFhirMarketingStatusListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirMarketingStatusList }

procedure TFhirMarketingStatusList.AddItem(value: TFhirMarketingStatus);
begin
  assert(value.ClassName = 'TFhirMarketingStatus', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirMarketingStatus');
  add(value);
end;

function TFhirMarketingStatusList.Append: TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMarketingStatusList.ClearItems;
begin
  Clear;
end;

function TFhirMarketingStatusList.GetEnumerator : TFhirMarketingStatusListEnumerator;
begin
  result := TFhirMarketingStatusListEnumerator.Create(self.link);
end;

function TFhirMarketingStatusList.Clone: TFhirMarketingStatusList;
begin
  result := TFhirMarketingStatusList(inherited Clone);
end;

function TFhirMarketingStatusList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirMarketingStatusList.GetItemN(index: Integer): TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus(ObjectByIndex[index]);
end;

function TFhirMarketingStatusList.ItemClass: TFslObjectClass;
begin
  result := TFhirMarketingStatus;
end;
function TFhirMarketingStatusList.IndexOf(value: TFhirMarketingStatus): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirMarketingStatusList.Insert(index: Integer): TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirMarketingStatusList.InsertItem(index: Integer; value: TFhirMarketingStatus);
begin
  assert(value is TFhirMarketingStatus);
  Inherited Insert(index, value);
end;

function TFhirMarketingStatusList.Item(index: Integer): TFhirMarketingStatus;
begin
  result := TFhirMarketingStatus(ObjectByIndex[index]);
end;

function TFhirMarketingStatusList.Link: TFhirMarketingStatusList;
begin
  result := TFhirMarketingStatusList(inherited Link);
end;

procedure TFhirMarketingStatusList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirMarketingStatusList.SetItemByIndex(index: Integer; value: TFhirMarketingStatus);
begin
  assert(value is TFhirMarketingStatus);
  FhirMarketingStatuses[index] := value;
end;

procedure TFhirMarketingStatusList.SetItemN(index: Integer; value: TFhirMarketingStatus);
begin
  assert(value is TFhirMarketingStatus);
  ObjectByIndex[index] := value;
end;

{ TFhirOrderedDistributionInterval }

constructor TFhirOrderedDistributionInterval.Create;
begin
  inherited;
end;

destructor TFhirOrderedDistributionInterval.Destroy;
begin
  FRankOrder.free;
  FIntervalStatisticList.Free;
  inherited;
end;

procedure TFhirOrderedDistributionInterval.Assign(oSource : TFslObject);
begin
  inherited;
  rankOrderElement := TFhirOrderedDistributionInterval(oSource).rankOrderElement.Clone;
  if (TFhirOrderedDistributionInterval(oSource).FIntervalStatisticList = nil) then
  begin
    FIntervalStatisticList.free;
    FIntervalStatisticList := nil;
  end
  else
  begin
    if FIntervalStatisticList = nil then
      FIntervalStatisticList := TFhirStatisticList.Create;
    FIntervalStatisticList.Assign(TFhirOrderedDistributionInterval(oSource).FIntervalStatisticList);
  end;
end;

procedure TFhirOrderedDistributionInterval.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'rankOrder') Then
     list.add(self.link, 'rankOrder', FRankOrder.Link);
  if (child_name = 'intervalStatistic') Then
    list.addAll(self, 'intervalStatistic', FIntervalStatisticList);
end;

procedure TFhirOrderedDistributionInterval.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'rankOrder', 'integer', false, TFhirInteger, FRankOrder.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'intervalStatistic', 'Statistic', true, TFhirStatistic, FIntervalStatisticList.Link)) {L1039};
end;

function TFhirOrderedDistributionInterval.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'rankOrder') then
  begin
    RankOrderElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'intervalStatistic') then
  begin
    IntervalStatisticList.add(propValue as TFhirStatistic) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirOrderedDistributionInterval.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'intervalStatistic') then IntervalStatisticList.insertItem(index, propValue as TFhirStatistic) {L1049}
  else inherited;
end;

function TFhirOrderedDistributionInterval.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'rankOrder') then result := TFhirInteger.create() {L1223}
  else if (propName = 'intervalStatistic') then result := IntervalStatisticList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirOrderedDistributionInterval.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'rankOrder') then result := 'integer'
  else if (propName = 'intervalStatistic') then result := 'Statistic'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirOrderedDistributionInterval.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'rankOrder') then RankOrderElement := nil
  else if (propName = 'intervalStatistic') then deletePropertyValue('intervalStatistic', IntervalStatisticList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirOrderedDistributionInterval.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'rankOrder') then RankOrderElement := asInteger(new) {L1222}
  else if (propName = 'intervalStatistic') then replacePropertyValue('intervalStatistic', IntervalStatisticList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirOrderedDistributionInterval.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'intervalStatistic') then IntervalStatisticList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirOrderedDistributionInterval.fhirType : string;
begin
  result := 'OrderedDistribution.interval';
end;

function TFhirOrderedDistributionInterval.Link : TFhirOrderedDistributionInterval;
begin
  result := TFhirOrderedDistributionInterval(inherited Link);
end;

function TFhirOrderedDistributionInterval.Clone : TFhirOrderedDistributionInterval;
begin
  result := TFhirOrderedDistributionInterval(inherited Clone);
end;

function TFhirOrderedDistributionInterval.equals(other : TObject) : boolean; 
var
  o : TFhirOrderedDistributionInterval;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirOrderedDistributionInterval)) then
    result := false
  else
  begin
    o := TFhirOrderedDistributionInterval(other);
    result := compareDeep(rankOrderElement, o.rankOrderElement, true) and compareDeep(intervalStatisticList, o.intervalStatisticList, true);
  end;
end;

function TFhirOrderedDistributionInterval.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FRankOrder) and isEmptyProp(FintervalStatisticList);
end;

procedure TFhirOrderedDistributionInterval.SetRankOrder(value : TFhirInteger);
begin
  FRankOrder.free;
  FRankOrder := value; {L1134}
end;

function TFhirOrderedDistributionInterval.GetRankOrderST : String;
begin
  if FRankOrder = nil then
    result := ''
  else
    result := FRankOrder.value;
end;

procedure TFhirOrderedDistributionInterval.SetRankOrderST(value : String);
begin
  if value <> '' then
  begin
    if FRankOrder = nil then
      FRankOrder := TFhirInteger.create;
    FRankOrder.value := value
  end
  else if FRankOrder <> nil then
    FRankOrder.value := '';
end;

function TFhirOrderedDistributionInterval.GetIntervalStatisticList : TFhirStatisticList;
begin
  if FIntervalStatisticList = nil then
    FIntervalStatisticList := TFhirStatisticList.Create;
  result := FIntervalStatisticList;
end;

function TFhirOrderedDistributionInterval.GetHasIntervalStatisticList : boolean;
begin
  result := (FIntervalStatisticList <> nil) and (FIntervalStatisticList.count > 0);
end;

procedure TFhirOrderedDistributionInterval.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('rankOrder');
  fields.add('intervalStatistic');
end;

function TFhirOrderedDistributionInterval.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FRankOrder.sizeInBytes);
  inc(result, FintervalStatisticList.sizeInBytes);
end;

{ TFhirOrderedDistributionIntervalListEnumerator }

constructor TFhirOrderedDistributionIntervalListEnumerator.Create(list : TFhirOrderedDistributionIntervalList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirOrderedDistributionIntervalListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirOrderedDistributionIntervalListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirOrderedDistributionIntervalListEnumerator.GetCurrent : TFhirOrderedDistributionInterval;
begin
  Result := FList[FIndex];
end;

function TFhirOrderedDistributionIntervalListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirOrderedDistributionIntervalList }

procedure TFhirOrderedDistributionIntervalList.AddItem(value: TFhirOrderedDistributionInterval);
begin
  assert(value.ClassName = 'TFhirOrderedDistributionInterval', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirOrderedDistributionInterval');
  add(value);
end;

function TFhirOrderedDistributionIntervalList.Append: TFhirOrderedDistributionInterval;
begin
  result := TFhirOrderedDistributionInterval.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirOrderedDistributionIntervalList.ClearItems;
begin
  Clear;
end;

function TFhirOrderedDistributionIntervalList.GetEnumerator : TFhirOrderedDistributionIntervalListEnumerator;
begin
  result := TFhirOrderedDistributionIntervalListEnumerator.Create(self.link);
end;

function TFhirOrderedDistributionIntervalList.Clone: TFhirOrderedDistributionIntervalList;
begin
  result := TFhirOrderedDistributionIntervalList(inherited Clone);
end;

function TFhirOrderedDistributionIntervalList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirOrderedDistributionIntervalList.GetItemN(index: Integer): TFhirOrderedDistributionInterval;
begin
  result := TFhirOrderedDistributionInterval(ObjectByIndex[index]);
end;

function TFhirOrderedDistributionIntervalList.ItemClass: TFslObjectClass;
begin
  result := TFhirOrderedDistributionInterval;
end;
function TFhirOrderedDistributionIntervalList.IndexOf(value: TFhirOrderedDistributionInterval): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirOrderedDistributionIntervalList.Insert(index: Integer): TFhirOrderedDistributionInterval;
begin
  result := TFhirOrderedDistributionInterval.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirOrderedDistributionIntervalList.InsertItem(index: Integer; value: TFhirOrderedDistributionInterval);
begin
  assert(value is TFhirOrderedDistributionInterval);
  Inherited Insert(index, value);
end;

function TFhirOrderedDistributionIntervalList.Item(index: Integer): TFhirOrderedDistributionInterval;
begin
  result := TFhirOrderedDistributionInterval(ObjectByIndex[index]);
end;

function TFhirOrderedDistributionIntervalList.Link: TFhirOrderedDistributionIntervalList;
begin
  result := TFhirOrderedDistributionIntervalList(inherited Link);
end;

procedure TFhirOrderedDistributionIntervalList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirOrderedDistributionIntervalList.SetItemByIndex(index: Integer; value: TFhirOrderedDistributionInterval);
begin
  assert(value is TFhirOrderedDistributionInterval);
  FhirOrderedDistributionIntervals[index] := value;
end;

procedure TFhirOrderedDistributionIntervalList.SetItemN(index: Integer; value: TFhirOrderedDistributionInterval);
begin
  assert(value is TFhirOrderedDistributionInterval);
  ObjectByIndex[index] := value;
end;

{ TFhirOrderedDistribution }

constructor TFhirOrderedDistribution.Create;
begin
  inherited;
end;

destructor TFhirOrderedDistribution.Destroy;
begin
  FDescription.free;
  FNoteList.Free;
  FNumberOfIntervals.free;
  FBottomOfFirstInterval.free;
  FIntervalList.Free;
  FTopOfInterval.free;
  inherited;
end;

procedure TFhirOrderedDistribution.Assign(oSource : TFslObject);
begin
  inherited;
  descriptionElement := TFhirOrderedDistribution(oSource).descriptionElement.Clone;
  if (TFhirOrderedDistribution(oSource).FNoteList = nil) then
  begin
    FNoteList.free;
    FNoteList := nil;
  end
  else
  begin
    if FNoteList = nil then
      FNoteList := TFhirAnnotationList.Create;
    FNoteList.Assign(TFhirOrderedDistribution(oSource).FNoteList);
  end;
  numberOfIntervalsElement := TFhirOrderedDistribution(oSource).numberOfIntervalsElement.Clone;
  bottomOfFirstInterval := TFhirOrderedDistribution(oSource).bottomOfFirstInterval.Clone;
  if (TFhirOrderedDistribution(oSource).FIntervalList = nil) then
  begin
    FIntervalList.free;
    FIntervalList := nil;
  end
  else
  begin
    if FIntervalList = nil then
      FIntervalList := TFhirOrderedDistributionIntervalList.Create;
    FIntervalList.Assign(TFhirOrderedDistribution(oSource).FIntervalList);
  end;
  topOfInterval := TFhirOrderedDistribution(oSource).topOfInterval.Clone;
end;

procedure TFhirOrderedDistribution.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'note') Then
    list.addAll(self, 'note', FNoteList);
  if (child_name = 'numberOfIntervals') Then
     list.add(self.link, 'numberOfIntervals', FNumberOfIntervals.Link);
  if (child_name = 'bottomOfFirstInterval') Then
     list.add(self.link, 'bottomOfFirstInterval', FBottomOfFirstInterval.Link);
  if (child_name = 'interval') Then
    list.addAll(self, 'interval', FIntervalList);
  if (child_name = 'topOfInterval') Then
     list.add(self.link, 'topOfInterval', FTopOfInterval.Link);
end;

procedure TFhirOrderedDistribution.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'note', 'Annotation', true, TFhirAnnotation, FNoteList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'numberOfIntervals', 'integer', false, TFhirInteger, FNumberOfIntervals.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'bottomOfFirstInterval', 'Quantity', false, TFhirQuantity, FBottomOfFirstInterval.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'interval', 'Element', true, TFhirOrderedDistributionInterval, FIntervalList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'topOfInterval', 'Quantity', false, TFhirQuantity, FTopOfInterval.Link)); {L1172}
end;

function TFhirOrderedDistribution.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'note') then
  begin
    NoteList.add(propValue as TFhirAnnotation) {L1048};
    result := propValue;
  end
  else if (propName = 'numberOfIntervals') then
  begin
    NumberOfIntervalsElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'bottomOfFirstInterval') then
  begin
    BottomOfFirstInterval := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'interval') then
  begin
    IntervalList.add(propValue as TFhirOrderedDistributionInterval) {L1048};
    result := propValue;
  end
  else if (propName = 'topOfInterval') then
  begin
    TopOfInterval := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirOrderedDistribution.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'note') then NoteList.insertItem(index, propValue as TFhirAnnotation) {L1049}
  else if (propName = 'interval') then IntervalList.insertItem(index, propValue as TFhirOrderedDistributionInterval) {L1049}
  else inherited;
end;

function TFhirOrderedDistribution.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'note') then result := NoteList.new() {L1053}
  else if (propName = 'numberOfIntervals') then result := TFhirInteger.create() {L1223}
  else if (propName = 'bottomOfFirstInterval') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'interval') then result := IntervalList.new() {L1053}
  else if (propName = 'topOfInterval') then result := TFhirQuantity.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirOrderedDistribution.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'description') then result := 'string'
  else if (propName = 'note') then result := 'Annotation'
  else if (propName = 'numberOfIntervals') then result := 'integer'
  else if (propName = 'bottomOfFirstInterval') then result := 'Quantity'
  else if (propName = 'interval') then result := 'Element'
  else if (propName = 'topOfInterval') then result := 'Quantity'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirOrderedDistribution.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'note') then deletePropertyValue('note', NoteList, value) {L1054}
  else if (propName = 'numberOfIntervals') then NumberOfIntervalsElement := nil
  else if (propName = 'bottomOfFirstInterval') then BottomOfFirstIntervalElement := nil
  else if (propName = 'interval') then deletePropertyValue('interval', IntervalList, value) {L1054}
  else if (propName = 'topOfInterval') then TopOfIntervalElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirOrderedDistribution.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'note') then replacePropertyValue('note', NoteList, existing, new) {L1055}
  else if (propName = 'numberOfIntervals') then NumberOfIntervalsElement := asInteger(new) {L1222}
  else if (propName = 'bottomOfFirstInterval') then BottomOfFirstIntervalElement := new as TFhirQuantity {L1195}
  else if (propName = 'interval') then replacePropertyValue('interval', IntervalList, existing, new) {L1055}
  else if (propName = 'topOfInterval') then TopOfIntervalElement := new as TFhirQuantity {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirOrderedDistribution.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'note') then NoteList.move(source, destination) {L1050}
  else if (propName = 'interval') then IntervalList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirOrderedDistribution.fhirType : string;
begin
  result := 'OrderedDistribution';
end;

function TFhirOrderedDistribution.Link : TFhirOrderedDistribution;
begin
  result := TFhirOrderedDistribution(inherited Link);
end;

function TFhirOrderedDistribution.Clone : TFhirOrderedDistribution;
begin
  result := TFhirOrderedDistribution(inherited Clone);
end;

function TFhirOrderedDistribution.equals(other : TObject) : boolean; 
var
  o : TFhirOrderedDistribution;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirOrderedDistribution)) then
    result := false
  else
  begin
    o := TFhirOrderedDistribution(other);
    result := compareDeep(descriptionElement, o.descriptionElement, true) and compareDeep(noteList, o.noteList, true) and 
      compareDeep(numberOfIntervalsElement, o.numberOfIntervalsElement, true) and compareDeep(bottomOfFirstIntervalElement, o.bottomOfFirstIntervalElement, true) and 
      compareDeep(intervalList, o.intervalList, true) and compareDeep(topOfIntervalElement, o.topOfIntervalElement, true);
  end;
end;

function TFhirOrderedDistribution.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FDescription) and isEmptyProp(FnoteList) and isEmptyProp(FNumberOfIntervals) and isEmptyProp(FBottomOfFirstInterval) and isEmptyProp(FintervalList) and isEmptyProp(FTopOfInterval);
end;

procedure TFhirOrderedDistribution.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirOrderedDistribution.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirOrderedDistribution.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

function TFhirOrderedDistribution.GetNoteList : TFhirAnnotationList;
begin
  if FNoteList = nil then
    FNoteList := TFhirAnnotationList.Create;
  result := FNoteList;
end;

function TFhirOrderedDistribution.GetHasNoteList : boolean;
begin
  result := (FNoteList <> nil) and (FNoteList.count > 0);
end;

procedure TFhirOrderedDistribution.SetNumberOfIntervals(value : TFhirInteger);
begin
  FNumberOfIntervals.free;
  FNumberOfIntervals := value; {L1134}
end;

function TFhirOrderedDistribution.GetNumberOfIntervalsST : String;
begin
  if FNumberOfIntervals = nil then
    result := ''
  else
    result := FNumberOfIntervals.value;
end;

procedure TFhirOrderedDistribution.SetNumberOfIntervalsST(value : String);
begin
  if value <> '' then
  begin
    if FNumberOfIntervals = nil then
      FNumberOfIntervals := TFhirInteger.create;
    FNumberOfIntervals.value := value
  end
  else if FNumberOfIntervals <> nil then
    FNumberOfIntervals.value := '';
end;

procedure TFhirOrderedDistribution.SetBottomOfFirstInterval(value : TFhirQuantity);
begin
  FBottomOfFirstInterval.free;
  FBottomOfFirstInterval := value; {L1134}
end;

function TFhirOrderedDistribution.GetIntervalList : TFhirOrderedDistributionIntervalList;
begin
  if FIntervalList = nil then
    FIntervalList := TFhirOrderedDistributionIntervalList.Create;
  result := FIntervalList;
end;

function TFhirOrderedDistribution.GetHasIntervalList : boolean;
begin
  result := (FIntervalList <> nil) and (FIntervalList.count > 0);
end;

procedure TFhirOrderedDistribution.SetTopOfInterval(value : TFhirQuantity);
begin
  FTopOfInterval.free;
  FTopOfInterval := value; {L1134}
end;

procedure TFhirOrderedDistribution.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('description');
  fields.add('note');
  fields.add('numberOfIntervals');
  fields.add('bottomOfFirstInterval');
  fields.add('interval');
  fields.add('topOfInterval');
end;

function TFhirOrderedDistribution.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FDescription.sizeInBytes);
  inc(result, FnoteList.sizeInBytes);
  inc(result, FNumberOfIntervals.sizeInBytes);
  inc(result, FBottomOfFirstInterval.sizeInBytes);
  inc(result, FintervalList.sizeInBytes);
  inc(result, FTopOfInterval.sizeInBytes);
end;

{ TFhirOrderedDistributionListEnumerator }

constructor TFhirOrderedDistributionListEnumerator.Create(list : TFhirOrderedDistributionList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirOrderedDistributionListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirOrderedDistributionListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirOrderedDistributionListEnumerator.GetCurrent : TFhirOrderedDistribution;
begin
  Result := FList[FIndex];
end;

function TFhirOrderedDistributionListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirOrderedDistributionList }

procedure TFhirOrderedDistributionList.AddItem(value: TFhirOrderedDistribution);
begin
  assert(value.ClassName = 'TFhirOrderedDistribution', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirOrderedDistribution');
  add(value);
end;

function TFhirOrderedDistributionList.Append: TFhirOrderedDistribution;
begin
  result := TFhirOrderedDistribution.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirOrderedDistributionList.ClearItems;
begin
  Clear;
end;

function TFhirOrderedDistributionList.GetEnumerator : TFhirOrderedDistributionListEnumerator;
begin
  result := TFhirOrderedDistributionListEnumerator.Create(self.link);
end;

function TFhirOrderedDistributionList.Clone: TFhirOrderedDistributionList;
begin
  result := TFhirOrderedDistributionList(inherited Clone);
end;

function TFhirOrderedDistributionList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirOrderedDistributionList.GetItemN(index: Integer): TFhirOrderedDistribution;
begin
  result := TFhirOrderedDistribution(ObjectByIndex[index]);
end;

function TFhirOrderedDistributionList.ItemClass: TFslObjectClass;
begin
  result := TFhirOrderedDistribution;
end;
function TFhirOrderedDistributionList.IndexOf(value: TFhirOrderedDistribution): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirOrderedDistributionList.Insert(index: Integer): TFhirOrderedDistribution;
begin
  result := TFhirOrderedDistribution.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirOrderedDistributionList.InsertItem(index: Integer; value: TFhirOrderedDistribution);
begin
  assert(value is TFhirOrderedDistribution);
  Inherited Insert(index, value);
end;

function TFhirOrderedDistributionList.Item(index: Integer): TFhirOrderedDistribution;
begin
  result := TFhirOrderedDistribution(ObjectByIndex[index]);
end;

function TFhirOrderedDistributionList.Link: TFhirOrderedDistributionList;
begin
  result := TFhirOrderedDistributionList(inherited Link);
end;

procedure TFhirOrderedDistributionList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirOrderedDistributionList.SetItemByIndex(index: Integer; value: TFhirOrderedDistribution);
begin
  assert(value is TFhirOrderedDistribution);
  FhirOrderedDistributions[index] := value;
end;

procedure TFhirOrderedDistributionList.SetItemN(index: Integer; value: TFhirOrderedDistribution);
begin
  assert(value is TFhirOrderedDistribution);
  ObjectByIndex[index] := value;
end;

{ TFhirPopulation }

constructor TFhirPopulation.Create;
begin
  inherited;
end;

destructor TFhirPopulation.Destroy;
begin
  FAge.free;
  FGender.free;
  FRace.free;
  FPhysiologicalCondition.free;
  inherited;
end;

procedure TFhirPopulation.Assign(oSource : TFslObject);
begin
  inherited;
  age := TFhirPopulation(oSource).age.Clone;
  gender := TFhirPopulation(oSource).gender.Clone;
  race := TFhirPopulation(oSource).race.Clone;
  physiologicalCondition := TFhirPopulation(oSource).physiologicalCondition.Clone;
end;

procedure TFhirPopulation.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'age[x]') or (child_name = 'age') Then
     list.add(self.link, 'age[x]', FAge.Link);
  if (child_name = 'gender') Then
     list.add(self.link, 'gender', FGender.Link);
  if (child_name = 'race') Then
     list.add(self.link, 'race', FRace.Link);
  if (child_name = 'physiologicalCondition') Then
     list.add(self.link, 'physiologicalCondition', FPhysiologicalCondition.Link);
end;

procedure TFhirPopulation.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'age[x]', 'Range|CodeableConcept', false, TFhirDataType, FAge.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'gender', 'CodeableConcept', false, TFhirCodeableConcept, FGender.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'race', 'CodeableConcept', false, TFhirCodeableConcept, FRace.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'physiologicalCondition', 'CodeableConcept', false, TFhirCodeableConcept, FPhysiologicalCondition.Link)); {L1172}
end;

function TFhirPopulation.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (isMatchingName(propName, 'age', ['Range', 'CodeableConcept'])) then
  begin
    Age := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'gender') then
  begin
    Gender := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'race') then
  begin
    Race := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'physiologicalCondition') then
  begin
    PhysiologicalCondition := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirPopulation.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  inherited;
end;

function TFhirPopulation.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (isMatchingName(propName, 'age', ['Range', 'CodeableConcept'])) then raise EFHIRException.create('Cannot make property Age') {L1191}
  else if (propName = 'gender') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'race') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'physiologicalCondition') then result := TFhirCodeableConcept.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirPopulation.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'age[x]') then result := 'Range|CodeableConcept'
  else if (propName = 'gender') then result := 'CodeableConcept'
  else if (propName = 'race') then result := 'CodeableConcept'
  else if (propName = 'physiologicalCondition') then result := 'CodeableConcept'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirPopulation.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (isMatchingName(propName, 'age', ['Range', 'CodeableConcept'])) then AgeElement := nil {L1189}
  else if (propName = 'gender') then GenderElement := nil
  else if (propName = 'race') then RaceElement := nil
  else if (propName = 'physiologicalCondition') then PhysiologicalConditionElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirPopulation.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (isMatchingName(propName, 'age', ['Range', 'CodeableConcept'])) then AgeElement := new as TFhirDataType {L1190}
  else if (propName = 'gender') then GenderElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'race') then RaceElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'physiologicalCondition') then PhysiologicalConditionElement := new as TFhirCodeableConcept {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirPopulation.reorderProperty(propName : string; source, destination : integer);
begin
  inherited reorderProperty(propName, source, destination);
end;

function TFhirPopulation.fhirType : string;
begin
  result := 'Population';
end;

function TFhirPopulation.Link : TFhirPopulation;
begin
  result := TFhirPopulation(inherited Link);
end;

function TFhirPopulation.Clone : TFhirPopulation;
begin
  result := TFhirPopulation(inherited Clone);
end;

function TFhirPopulation.equals(other : TObject) : boolean; 
var
  o : TFhirPopulation;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirPopulation)) then
    result := false
  else
  begin
    o := TFhirPopulation(other);
    result := compareDeep(ageElement, o.ageElement, true) and compareDeep(genderElement, o.genderElement, true) and 
      compareDeep(raceElement, o.raceElement, true) and compareDeep(physiologicalConditionElement, o.physiologicalConditionElement, true);
  end;
end;

function TFhirPopulation.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FAge) and isEmptyProp(FGender) and isEmptyProp(FRace) and isEmptyProp(FPhysiologicalCondition);
end;

procedure TFhirPopulation.SetAge(value : TFhirDataType);
begin
  FAge.free;
  FAge := value; {L1134}
end;

procedure TFhirPopulation.SetGender(value : TFhirCodeableConcept);
begin
  FGender.free;
  FGender := value; {L1134}
end;

procedure TFhirPopulation.SetRace(value : TFhirCodeableConcept);
begin
  FRace.free;
  FRace := value; {L1134}
end;

procedure TFhirPopulation.SetPhysiologicalCondition(value : TFhirCodeableConcept);
begin
  FPhysiologicalCondition.free;
  FPhysiologicalCondition := value; {L1134}
end;

procedure TFhirPopulation.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('age[x]');
  fields.add('gender');
  fields.add('race');
  fields.add('physiologicalCondition');
end;

function TFhirPopulation.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FAge.sizeInBytes);
  inc(result, FGender.sizeInBytes);
  inc(result, FRace.sizeInBytes);
  inc(result, FPhysiologicalCondition.sizeInBytes);
end;

{ TFhirPopulationListEnumerator }

constructor TFhirPopulationListEnumerator.Create(list : TFhirPopulationList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirPopulationListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirPopulationListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirPopulationListEnumerator.GetCurrent : TFhirPopulation;
begin
  Result := FList[FIndex];
end;

function TFhirPopulationListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirPopulationList }

procedure TFhirPopulationList.AddItem(value: TFhirPopulation);
begin
  assert(value.ClassName = 'TFhirPopulation', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirPopulation');
  add(value);
end;

function TFhirPopulationList.Append: TFhirPopulation;
begin
  result := TFhirPopulation.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirPopulationList.ClearItems;
begin
  Clear;
end;

function TFhirPopulationList.GetEnumerator : TFhirPopulationListEnumerator;
begin
  result := TFhirPopulationListEnumerator.Create(self.link);
end;

function TFhirPopulationList.Clone: TFhirPopulationList;
begin
  result := TFhirPopulationList(inherited Clone);
end;

function TFhirPopulationList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirPopulationList.GetItemN(index: Integer): TFhirPopulation;
begin
  result := TFhirPopulation(ObjectByIndex[index]);
end;

function TFhirPopulationList.ItemClass: TFslObjectClass;
begin
  result := TFhirPopulation;
end;
function TFhirPopulationList.IndexOf(value: TFhirPopulation): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirPopulationList.Insert(index: Integer): TFhirPopulation;
begin
  result := TFhirPopulation.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirPopulationList.InsertItem(index: Integer; value: TFhirPopulation);
begin
  assert(value is TFhirPopulation);
  Inherited Insert(index, value);
end;

function TFhirPopulationList.Item(index: Integer): TFhirPopulation;
begin
  result := TFhirPopulation(ObjectByIndex[index]);
end;

function TFhirPopulationList.Link: TFhirPopulationList;
begin
  result := TFhirPopulationList(inherited Link);
end;

procedure TFhirPopulationList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirPopulationList.SetItemByIndex(index: Integer; value: TFhirPopulation);
begin
  assert(value is TFhirPopulation);
  FhirPopulations[index] := value;
end;

procedure TFhirPopulationList.SetItemN(index: Integer; value: TFhirPopulation);
begin
  assert(value is TFhirPopulation);
  ObjectByIndex[index] := value;
end;

{ TFhirProdCharacteristic }

constructor TFhirProdCharacteristic.Create;
begin
  inherited;
end;

destructor TFhirProdCharacteristic.Destroy;
begin
  FHeight.free;
  FWidth.free;
  FDepth.free;
  FWeight.free;
  FNominalVolume.free;
  FExternalDiameter.free;
  FShape.free;
  FColorList.Free;
  FImprintList.Free;
  FImageList.Free;
  FScoring.free;
  inherited;
end;

procedure TFhirProdCharacteristic.Assign(oSource : TFslObject);
begin
  inherited;
  height := TFhirProdCharacteristic(oSource).height.Clone;
  width := TFhirProdCharacteristic(oSource).width.Clone;
  depth := TFhirProdCharacteristic(oSource).depth.Clone;
  weight := TFhirProdCharacteristic(oSource).weight.Clone;
  nominalVolume := TFhirProdCharacteristic(oSource).nominalVolume.Clone;
  externalDiameter := TFhirProdCharacteristic(oSource).externalDiameter.Clone;
  shapeElement := TFhirProdCharacteristic(oSource).shapeElement.Clone;
  if (TFhirProdCharacteristic(oSource).FColorList = nil) then
  begin
    FColorList.free;
    FColorList := nil;
  end
  else
  begin
    if FColorList = nil then
      FColorList := TFhirStringList.Create;
    FColorList.Assign(TFhirProdCharacteristic(oSource).FColorList);
  end;
  if (TFhirProdCharacteristic(oSource).FImprintList = nil) then
  begin
    FImprintList.free;
    FImprintList := nil;
  end
  else
  begin
    if FImprintList = nil then
      FImprintList := TFhirStringList.Create;
    FImprintList.Assign(TFhirProdCharacteristic(oSource).FImprintList);
  end;
  if (TFhirProdCharacteristic(oSource).FImageList = nil) then
  begin
    FImageList.free;
    FImageList := nil;
  end
  else
  begin
    if FImageList = nil then
      FImageList := TFhirAttachmentList.Create;
    FImageList.Assign(TFhirProdCharacteristic(oSource).FImageList);
  end;
  scoring := TFhirProdCharacteristic(oSource).scoring.Clone;
end;

procedure TFhirProdCharacteristic.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'height') Then
     list.add(self.link, 'height', FHeight.Link);
  if (child_name = 'width') Then
     list.add(self.link, 'width', FWidth.Link);
  if (child_name = 'depth') Then
     list.add(self.link, 'depth', FDepth.Link);
  if (child_name = 'weight') Then
     list.add(self.link, 'weight', FWeight.Link);
  if (child_name = 'nominalVolume') Then
     list.add(self.link, 'nominalVolume', FNominalVolume.Link);
  if (child_name = 'externalDiameter') Then
     list.add(self.link, 'externalDiameter', FExternalDiameter.Link);
  if (child_name = 'shape') Then
     list.add(self.link, 'shape', FShape.Link);
  if (child_name = 'color') Then
    list.addAll(self, 'color', FColorList);
  if (child_name = 'imprint') Then
    list.addAll(self, 'imprint', FImprintList);
  if (child_name = 'image') Then
    list.addAll(self, 'image', FImageList);
  if (child_name = 'scoring') Then
     list.add(self.link, 'scoring', FScoring.Link);
end;

procedure TFhirProdCharacteristic.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'height', 'Quantity', false, TFhirQuantity, FHeight.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'width', 'Quantity', false, TFhirQuantity, FWidth.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'depth', 'Quantity', false, TFhirQuantity, FDepth.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'weight', 'Quantity', false, TFhirQuantity, FWeight.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'nominalVolume', 'Quantity', false, TFhirQuantity, FNominalVolume.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'externalDiameter', 'Quantity', false, TFhirQuantity, FExternalDiameter.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'shape', 'string', false, TFhirString, FShape.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'color', 'string', true, TFhirString, FColorList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'imprint', 'string', true, TFhirString, FImprintList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'image', 'Attachment', true, TFhirAttachment, FImageList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'scoring', 'CodeableConcept', false, TFhirCodeableConcept, FScoring.Link)); {L1172}
end;

function TFhirProdCharacteristic.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'height') then
  begin
    Height := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'width') then
  begin
    Width := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'depth') then
  begin
    Depth := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'weight') then
  begin
    Weight := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'nominalVolume') then
  begin
    NominalVolume := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'externalDiameter') then
  begin
    ExternalDiameter := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'shape') then
  begin
    ShapeElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'color') then
  begin
    ColorList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'imprint') then
  begin
    ImprintList.add(asString(propValue)){2};     result := propValue;

  end
  else if (propName = 'image') then
  begin
    ImageList.add(propValue as TFhirAttachment) {L1048};
    result := propValue;
  end
  else if (propName = 'scoring') then
  begin
    Scoring := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirProdCharacteristic.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'color') then ColorList.insertItem(index, asString(propValue)) {L1045}
  else if (propName = 'imprint') then ImprintList.insertItem(index, asString(propValue)) {L1045}
  else if (propName = 'image') then ImageList.insertItem(index, propValue as TFhirAttachment) {L1049}
  else inherited;
end;

function TFhirProdCharacteristic.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'height') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'width') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'depth') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'weight') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'nominalVolume') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'externalDiameter') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'shape') then result := TFhirString.create() {L1223}
  else if (propName = 'color') then result := ColorList.new() {L1053}
  else if (propName = 'imprint') then result := ImprintList.new() {L1053}
  else if (propName = 'image') then result := ImageList.new() {L1053}
  else if (propName = 'scoring') then result := TFhirCodeableConcept.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirProdCharacteristic.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'height') then result := 'Quantity'
  else if (propName = 'width') then result := 'Quantity'
  else if (propName = 'depth') then result := 'Quantity'
  else if (propName = 'weight') then result := 'Quantity'
  else if (propName = 'nominalVolume') then result := 'Quantity'
  else if (propName = 'externalDiameter') then result := 'Quantity'
  else if (propName = 'shape') then result := 'string'
  else if (propName = 'color') then result := 'string'
  else if (propName = 'imprint') then result := 'string'
  else if (propName = 'image') then result := 'Attachment'
  else if (propName = 'scoring') then result := 'CodeableConcept'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirProdCharacteristic.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'height') then HeightElement := nil
  else if (propName = 'width') then WidthElement := nil
  else if (propName = 'depth') then DepthElement := nil
  else if (propName = 'weight') then WeightElement := nil
  else if (propName = 'nominalVolume') then NominalVolumeElement := nil
  else if (propName = 'externalDiameter') then ExternalDiameterElement := nil
  else if (propName = 'shape') then ShapeElement := nil
  else if (propName = 'color') then deletePropertyValue('color', ColorList, value) {L1054}
  else if (propName = 'imprint') then deletePropertyValue('imprint', ImprintList, value) {L1054}
  else if (propName = 'image') then deletePropertyValue('image', ImageList, value) {L1054}
  else if (propName = 'scoring') then ScoringElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirProdCharacteristic.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'height') then HeightElement := new as TFhirQuantity {L1195}
  else if (propName = 'width') then WidthElement := new as TFhirQuantity {L1195}
  else if (propName = 'depth') then DepthElement := new as TFhirQuantity {L1195}
  else if (propName = 'weight') then WeightElement := new as TFhirQuantity {L1195}
  else if (propName = 'nominalVolume') then NominalVolumeElement := new as TFhirQuantity {L1195}
  else if (propName = 'externalDiameter') then ExternalDiameterElement := new as TFhirQuantity {L1195}
  else if (propName = 'shape') then ShapeElement := asString(new) {L1222}
  else if (propName = 'color') then replacePropertyValue('color', ColorList, existing, new) {L1055}
  else if (propName = 'imprint') then replacePropertyValue('imprint', ImprintList, existing, new) {L1055}
  else if (propName = 'image') then replacePropertyValue('image', ImageList, existing, new) {L1055}
  else if (propName = 'scoring') then ScoringElement := new as TFhirCodeableConcept {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirProdCharacteristic.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'color') then ColorList.move(source, destination) {L1046}
  else if (propName = 'imprint') then ImprintList.move(source, destination) {L1046}
  else if (propName = 'image') then ImageList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirProdCharacteristic.fhirType : string;
begin
  result := 'ProdCharacteristic';
end;

function TFhirProdCharacteristic.Link : TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic(inherited Link);
end;

function TFhirProdCharacteristic.Clone : TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic(inherited Clone);
end;

function TFhirProdCharacteristic.equals(other : TObject) : boolean; 
var
  o : TFhirProdCharacteristic;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirProdCharacteristic)) then
    result := false
  else
  begin
    o := TFhirProdCharacteristic(other);
    result := compareDeep(heightElement, o.heightElement, true) and compareDeep(widthElement, o.widthElement, true) and 
      compareDeep(depthElement, o.depthElement, true) and compareDeep(weightElement, o.weightElement, true) and 
      compareDeep(nominalVolumeElement, o.nominalVolumeElement, true) and compareDeep(externalDiameterElement, o.externalDiameterElement, true) and 
      compareDeep(shapeElement, o.shapeElement, true) and compareDeep(colorList, o.colorList, true) and 
      compareDeep(imprintList, o.imprintList, true) and compareDeep(imageList, o.imageList, true) and 
      compareDeep(scoringElement, o.scoringElement, true);
  end;
end;

function TFhirProdCharacteristic.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FHeight) and isEmptyProp(FWidth) and isEmptyProp(FDepth) and isEmptyProp(FWeight) and isEmptyProp(FNominalVolume) and isEmptyProp(FExternalDiameter) and isEmptyProp(FShape) and isEmptyProp(FcolorList) and isEmptyProp(FimprintList) and isEmptyProp(FimageList) and isEmptyProp(FScoring);
end;

procedure TFhirProdCharacteristic.SetHeight(value : TFhirQuantity);
begin
  FHeight.free;
  FHeight := value; {L1134}
end;

procedure TFhirProdCharacteristic.SetWidth(value : TFhirQuantity);
begin
  FWidth.free;
  FWidth := value; {L1134}
end;

procedure TFhirProdCharacteristic.SetDepth(value : TFhirQuantity);
begin
  FDepth.free;
  FDepth := value; {L1134}
end;

procedure TFhirProdCharacteristic.SetWeight(value : TFhirQuantity);
begin
  FWeight.free;
  FWeight := value; {L1134}
end;

procedure TFhirProdCharacteristic.SetNominalVolume(value : TFhirQuantity);
begin
  FNominalVolume.free;
  FNominalVolume := value; {L1134}
end;

procedure TFhirProdCharacteristic.SetExternalDiameter(value : TFhirQuantity);
begin
  FExternalDiameter.free;
  FExternalDiameter := value; {L1134}
end;

procedure TFhirProdCharacteristic.SetShape(value : TFhirString);
begin
  FShape.free;
  FShape := value; {L1134}
end;

function TFhirProdCharacteristic.GetShapeST : String;
begin
  if FShape = nil then
    result := ''
  else
    result := FShape.value;
end;

procedure TFhirProdCharacteristic.SetShapeST(value : String);
begin
  if value <> '' then
  begin
    if FShape = nil then
      FShape := TFhirString.create;
    FShape.value := value
  end
  else if FShape <> nil then
    FShape.value := '';
end;

function TFhirProdCharacteristic.GetColorList : TFhirStringList;
begin
  if FColorList = nil then
    FColorList := TFhirStringList.Create;
  result := FColorList;
end;

function TFhirProdCharacteristic.GetHasColorList : boolean;
begin
  result := (FColorList <> nil) and (FColorList.count > 0);
end;

function TFhirProdCharacteristic.GetImprintList : TFhirStringList;
begin
  if FImprintList = nil then
    FImprintList := TFhirStringList.Create;
  result := FImprintList;
end;

function TFhirProdCharacteristic.GetHasImprintList : boolean;
begin
  result := (FImprintList <> nil) and (FImprintList.count > 0);
end;

function TFhirProdCharacteristic.GetImageList : TFhirAttachmentList;
begin
  if FImageList = nil then
    FImageList := TFhirAttachmentList.Create;
  result := FImageList;
end;

function TFhirProdCharacteristic.GetHasImageList : boolean;
begin
  result := (FImageList <> nil) and (FImageList.count > 0);
end;

procedure TFhirProdCharacteristic.SetScoring(value : TFhirCodeableConcept);
begin
  FScoring.free;
  FScoring := value; {L1134}
end;

procedure TFhirProdCharacteristic.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('height');
  fields.add('width');
  fields.add('depth');
  fields.add('weight');
  fields.add('nominalVolume');
  fields.add('externalDiameter');
  fields.add('shape');
  fields.add('color');
  fields.add('imprint');
  fields.add('image');
  fields.add('scoring');
end;

function TFhirProdCharacteristic.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FHeight.sizeInBytes);
  inc(result, FWidth.sizeInBytes);
  inc(result, FDepth.sizeInBytes);
  inc(result, FWeight.sizeInBytes);
  inc(result, FNominalVolume.sizeInBytes);
  inc(result, FExternalDiameter.sizeInBytes);
  inc(result, FShape.sizeInBytes);
  inc(result, FcolorList.sizeInBytes);
  inc(result, FimprintList.sizeInBytes);
  inc(result, FimageList.sizeInBytes);
  inc(result, FScoring.sizeInBytes);
end;

{ TFhirProdCharacteristicListEnumerator }

constructor TFhirProdCharacteristicListEnumerator.Create(list : TFhirProdCharacteristicList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirProdCharacteristicListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirProdCharacteristicListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirProdCharacteristicListEnumerator.GetCurrent : TFhirProdCharacteristic;
begin
  Result := FList[FIndex];
end;

function TFhirProdCharacteristicListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirProdCharacteristicList }

procedure TFhirProdCharacteristicList.AddItem(value: TFhirProdCharacteristic);
begin
  assert(value.ClassName = 'TFhirProdCharacteristic', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirProdCharacteristic');
  add(value);
end;

function TFhirProdCharacteristicList.Append: TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirProdCharacteristicList.ClearItems;
begin
  Clear;
end;

function TFhirProdCharacteristicList.GetEnumerator : TFhirProdCharacteristicListEnumerator;
begin
  result := TFhirProdCharacteristicListEnumerator.Create(self.link);
end;

function TFhirProdCharacteristicList.Clone: TFhirProdCharacteristicList;
begin
  result := TFhirProdCharacteristicList(inherited Clone);
end;

function TFhirProdCharacteristicList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirProdCharacteristicList.GetItemN(index: Integer): TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic(ObjectByIndex[index]);
end;

function TFhirProdCharacteristicList.ItemClass: TFslObjectClass;
begin
  result := TFhirProdCharacteristic;
end;
function TFhirProdCharacteristicList.IndexOf(value: TFhirProdCharacteristic): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirProdCharacteristicList.Insert(index: Integer): TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirProdCharacteristicList.InsertItem(index: Integer; value: TFhirProdCharacteristic);
begin
  assert(value is TFhirProdCharacteristic);
  Inherited Insert(index, value);
end;

function TFhirProdCharacteristicList.Item(index: Integer): TFhirProdCharacteristic;
begin
  result := TFhirProdCharacteristic(ObjectByIndex[index]);
end;

function TFhirProdCharacteristicList.Link: TFhirProdCharacteristicList;
begin
  result := TFhirProdCharacteristicList(inherited Link);
end;

procedure TFhirProdCharacteristicList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirProdCharacteristicList.SetItemByIndex(index: Integer; value: TFhirProdCharacteristic);
begin
  assert(value is TFhirProdCharacteristic);
  FhirProdCharacteristics[index] := value;
end;

procedure TFhirProdCharacteristicList.SetItemN(index: Integer; value: TFhirProdCharacteristic);
begin
  assert(value is TFhirProdCharacteristic);
  ObjectByIndex[index] := value;
end;

{ TFhirProductShelfLife }

constructor TFhirProductShelfLife.Create;
begin
  inherited;
end;

destructor TFhirProductShelfLife.Destroy;
begin
  FType_.free;
  FPeriod.free;
  FSpecialPrecautionsForStorageList.Free;
  inherited;
end;

procedure TFhirProductShelfLife.Assign(oSource : TFslObject);
begin
  inherited;
  type_ := TFhirProductShelfLife(oSource).type_.Clone;
  period := TFhirProductShelfLife(oSource).period.Clone;
  if (TFhirProductShelfLife(oSource).FSpecialPrecautionsForStorageList = nil) then
  begin
    FSpecialPrecautionsForStorageList.free;
    FSpecialPrecautionsForStorageList := nil;
  end
  else
  begin
    if FSpecialPrecautionsForStorageList = nil then
      FSpecialPrecautionsForStorageList := TFhirCodeableConceptList.Create;
    FSpecialPrecautionsForStorageList.Assign(TFhirProductShelfLife(oSource).FSpecialPrecautionsForStorageList);
  end;
end;

procedure TFhirProductShelfLife.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'period[x]') or (child_name = 'period') Then
     list.add(self.link, 'period[x]', FPeriod.Link);
  if (child_name = 'specialPrecautionsForStorage') Then
    list.addAll(self, 'specialPrecautionsForStorage', FSpecialPrecautionsForStorageList);
end;

procedure TFhirProductShelfLife.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'type', 'CodeableConcept', false, TFhirCodeableConcept, FType_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'period[x]', 'Quantity|string', false, TFhirDataType, FPeriod.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'specialPrecautionsForStorage', 'CodeableConcept', true, TFhirCodeableConcept, FSpecialPrecautionsForStorageList.Link)) {L1039};
end;

function TFhirProductShelfLife.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'type') then
  begin
    Type_ := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (isMatchingName(propName, 'period', ['Quantity', 'String'])) then
  begin
    Period := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'specialPrecautionsForStorage') then
  begin
    SpecialPrecautionsForStorageList.add(propValue as TFhirCodeableConcept) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirProductShelfLife.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'specialPrecautionsForStorage') then SpecialPrecautionsForStorageList.insertItem(index, propValue as TFhirCodeableConcept) {L1049}
  else inherited;
end;

function TFhirProductShelfLife.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'type') then result := TFhirCodeableConcept.create() {L1203}
  else if (isMatchingName(propName, 'period', ['Quantity', 'String'])) then raise EFHIRException.create('Cannot make property Period') {L1191}
  else if (propName = 'specialPrecautionsForStorage') then result := SpecialPrecautionsForStorageList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirProductShelfLife.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'type') then result := 'CodeableConcept'
  else if (propName = 'period[x]') then result := 'Quantity|string'
  else if (propName = 'specialPrecautionsForStorage') then result := 'CodeableConcept'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirProductShelfLife.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := nil
  else if (isMatchingName(propName, 'period', ['Quantity', 'String'])) then PeriodElement := nil {L1189}
  else if (propName = 'specialPrecautionsForStorage') then deletePropertyValue('specialPrecautionsForStorage', SpecialPrecautionsForStorageList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirProductShelfLife.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'type') then Type_Element := new as TFhirCodeableConcept {L1195}
  else if (isMatchingName(propName, 'period', ['Quantity', 'String'])) then PeriodElement := new as TFhirDataType {L1190}
  else if (propName = 'specialPrecautionsForStorage') then replacePropertyValue('specialPrecautionsForStorage', SpecialPrecautionsForStorageList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirProductShelfLife.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'specialPrecautionsForStorage') then SpecialPrecautionsForStorageList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirProductShelfLife.fhirType : string;
begin
  result := 'ProductShelfLife';
end;

function TFhirProductShelfLife.Link : TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife(inherited Link);
end;

function TFhirProductShelfLife.Clone : TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife(inherited Clone);
end;

function TFhirProductShelfLife.equals(other : TObject) : boolean; 
var
  o : TFhirProductShelfLife;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirProductShelfLife)) then
    result := false
  else
  begin
    o := TFhirProductShelfLife(other);
    result := compareDeep(type_Element, o.type_Element, true) and compareDeep(periodElement, o.periodElement, true) and 
      compareDeep(specialPrecautionsForStorageList, o.specialPrecautionsForStorageList, true);
  end;
end;

function TFhirProductShelfLife.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FType_) and isEmptyProp(FPeriod) and isEmptyProp(FspecialPrecautionsForStorageList);
end;

procedure TFhirProductShelfLife.SetType_(value : TFhirCodeableConcept);
begin
  FType_.free;
  FType_ := value; {L1134}
end;

procedure TFhirProductShelfLife.SetPeriod(value : TFhirDataType);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

function TFhirProductShelfLife.GetSpecialPrecautionsForStorageList : TFhirCodeableConceptList;
begin
  if FSpecialPrecautionsForStorageList = nil then
    FSpecialPrecautionsForStorageList := TFhirCodeableConceptList.Create;
  result := FSpecialPrecautionsForStorageList;
end;

function TFhirProductShelfLife.GetHasSpecialPrecautionsForStorageList : boolean;
begin
  result := (FSpecialPrecautionsForStorageList <> nil) and (FSpecialPrecautionsForStorageList.count > 0);
end;

procedure TFhirProductShelfLife.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('type');
  fields.add('period[x]');
  fields.add('specialPrecautionsForStorage');
end;

function TFhirProductShelfLife.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FType_.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
  inc(result, FspecialPrecautionsForStorageList.sizeInBytes);
end;

{ TFhirProductShelfLifeListEnumerator }

constructor TFhirProductShelfLifeListEnumerator.Create(list : TFhirProductShelfLifeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirProductShelfLifeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirProductShelfLifeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirProductShelfLifeListEnumerator.GetCurrent : TFhirProductShelfLife;
begin
  Result := FList[FIndex];
end;

function TFhirProductShelfLifeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirProductShelfLifeList }

procedure TFhirProductShelfLifeList.AddItem(value: TFhirProductShelfLife);
begin
  assert(value.ClassName = 'TFhirProductShelfLife', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirProductShelfLife');
  add(value);
end;

function TFhirProductShelfLifeList.Append: TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirProductShelfLifeList.ClearItems;
begin
  Clear;
end;

function TFhirProductShelfLifeList.GetEnumerator : TFhirProductShelfLifeListEnumerator;
begin
  result := TFhirProductShelfLifeListEnumerator.Create(self.link);
end;

function TFhirProductShelfLifeList.Clone: TFhirProductShelfLifeList;
begin
  result := TFhirProductShelfLifeList(inherited Clone);
end;

function TFhirProductShelfLifeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirProductShelfLifeList.GetItemN(index: Integer): TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife(ObjectByIndex[index]);
end;

function TFhirProductShelfLifeList.ItemClass: TFslObjectClass;
begin
  result := TFhirProductShelfLife;
end;
function TFhirProductShelfLifeList.IndexOf(value: TFhirProductShelfLife): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirProductShelfLifeList.Insert(index: Integer): TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirProductShelfLifeList.InsertItem(index: Integer; value: TFhirProductShelfLife);
begin
  assert(value is TFhirProductShelfLife);
  Inherited Insert(index, value);
end;

function TFhirProductShelfLifeList.Item(index: Integer): TFhirProductShelfLife;
begin
  result := TFhirProductShelfLife(ObjectByIndex[index]);
end;

function TFhirProductShelfLifeList.Link: TFhirProductShelfLifeList;
begin
  result := TFhirProductShelfLifeList(inherited Link);
end;

procedure TFhirProductShelfLifeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirProductShelfLifeList.SetItemByIndex(index: Integer; value: TFhirProductShelfLife);
begin
  assert(value is TFhirProductShelfLife);
  FhirProductShelfLives[index] := value;
end;

procedure TFhirProductShelfLifeList.SetItemN(index: Integer; value: TFhirProductShelfLife);
begin
  assert(value is TFhirProductShelfLife);
  ObjectByIndex[index] := value;
end;

{ TFhirStatisticSampleSize }

constructor TFhirStatisticSampleSize.Create;
begin
  inherited;
end;

destructor TFhirStatisticSampleSize.Destroy;
begin
  FDescription.free;
  FNoteList.Free;
  FNumberOfStudies.free;
  FNumberOfParticipants.free;
  FKnownDataCount.free;
  inherited;
end;

procedure TFhirStatisticSampleSize.Assign(oSource : TFslObject);
begin
  inherited;
  descriptionElement := TFhirStatisticSampleSize(oSource).descriptionElement.Clone;
  if (TFhirStatisticSampleSize(oSource).FNoteList = nil) then
  begin
    FNoteList.free;
    FNoteList := nil;
  end
  else
  begin
    if FNoteList = nil then
      FNoteList := TFhirAnnotationList.Create;
    FNoteList.Assign(TFhirStatisticSampleSize(oSource).FNoteList);
  end;
  numberOfStudiesElement := TFhirStatisticSampleSize(oSource).numberOfStudiesElement.Clone;
  numberOfParticipantsElement := TFhirStatisticSampleSize(oSource).numberOfParticipantsElement.Clone;
  knownDataCountElement := TFhirStatisticSampleSize(oSource).knownDataCountElement.Clone;
end;

procedure TFhirStatisticSampleSize.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'note') Then
    list.addAll(self, 'note', FNoteList);
  if (child_name = 'numberOfStudies') Then
     list.add(self.link, 'numberOfStudies', FNumberOfStudies.Link);
  if (child_name = 'numberOfParticipants') Then
     list.add(self.link, 'numberOfParticipants', FNumberOfParticipants.Link);
  if (child_name = 'knownDataCount') Then
     list.add(self.link, 'knownDataCount', FKnownDataCount.Link);
end;

procedure TFhirStatisticSampleSize.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'note', 'Annotation', true, TFhirAnnotation, FNoteList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'numberOfStudies', 'integer', false, TFhirInteger, FNumberOfStudies.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'numberOfParticipants', 'integer', false, TFhirInteger, FNumberOfParticipants.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'knownDataCount', 'integer', false, TFhirInteger, FKnownDataCount.Link)); {L1172}
end;

function TFhirStatisticSampleSize.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'note') then
  begin
    NoteList.add(propValue as TFhirAnnotation) {L1048};
    result := propValue;
  end
  else if (propName = 'numberOfStudies') then
  begin
    NumberOfStudiesElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'numberOfParticipants') then
  begin
    NumberOfParticipantsElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'knownDataCount') then
  begin
    KnownDataCountElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirStatisticSampleSize.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'note') then NoteList.insertItem(index, propValue as TFhirAnnotation) {L1049}
  else inherited;
end;

function TFhirStatisticSampleSize.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'note') then result := NoteList.new() {L1053}
  else if (propName = 'numberOfStudies') then result := TFhirInteger.create() {L1223}
  else if (propName = 'numberOfParticipants') then result := TFhirInteger.create() {L1223}
  else if (propName = 'knownDataCount') then result := TFhirInteger.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirStatisticSampleSize.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'description') then result := 'string'
  else if (propName = 'note') then result := 'Annotation'
  else if (propName = 'numberOfStudies') then result := 'integer'
  else if (propName = 'numberOfParticipants') then result := 'integer'
  else if (propName = 'knownDataCount') then result := 'integer'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirStatisticSampleSize.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'note') then deletePropertyValue('note', NoteList, value) {L1054}
  else if (propName = 'numberOfStudies') then NumberOfStudiesElement := nil
  else if (propName = 'numberOfParticipants') then NumberOfParticipantsElement := nil
  else if (propName = 'knownDataCount') then KnownDataCountElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirStatisticSampleSize.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'note') then replacePropertyValue('note', NoteList, existing, new) {L1055}
  else if (propName = 'numberOfStudies') then NumberOfStudiesElement := asInteger(new) {L1222}
  else if (propName = 'numberOfParticipants') then NumberOfParticipantsElement := asInteger(new) {L1222}
  else if (propName = 'knownDataCount') then KnownDataCountElement := asInteger(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirStatisticSampleSize.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'note') then NoteList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirStatisticSampleSize.fhirType : string;
begin
  result := 'Statistic.sampleSize';
end;

function TFhirStatisticSampleSize.Link : TFhirStatisticSampleSize;
begin
  result := TFhirStatisticSampleSize(inherited Link);
end;

function TFhirStatisticSampleSize.Clone : TFhirStatisticSampleSize;
begin
  result := TFhirStatisticSampleSize(inherited Clone);
end;

function TFhirStatisticSampleSize.equals(other : TObject) : boolean; 
var
  o : TFhirStatisticSampleSize;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirStatisticSampleSize)) then
    result := false
  else
  begin
    o := TFhirStatisticSampleSize(other);
    result := compareDeep(descriptionElement, o.descriptionElement, true) and compareDeep(noteList, o.noteList, true) and 
      compareDeep(numberOfStudiesElement, o.numberOfStudiesElement, true) and compareDeep(numberOfParticipantsElement, o.numberOfParticipantsElement, true) and 
      compareDeep(knownDataCountElement, o.knownDataCountElement, true);
  end;
end;

function TFhirStatisticSampleSize.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FDescription) and isEmptyProp(FnoteList) and isEmptyProp(FNumberOfStudies) and isEmptyProp(FNumberOfParticipants) and isEmptyProp(FKnownDataCount);
end;

procedure TFhirStatisticSampleSize.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirStatisticSampleSize.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirStatisticSampleSize.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

function TFhirStatisticSampleSize.GetNoteList : TFhirAnnotationList;
begin
  if FNoteList = nil then
    FNoteList := TFhirAnnotationList.Create;
  result := FNoteList;
end;

function TFhirStatisticSampleSize.GetHasNoteList : boolean;
begin
  result := (FNoteList <> nil) and (FNoteList.count > 0);
end;

procedure TFhirStatisticSampleSize.SetNumberOfStudies(value : TFhirInteger);
begin
  FNumberOfStudies.free;
  FNumberOfStudies := value; {L1134}
end;

function TFhirStatisticSampleSize.GetNumberOfStudiesST : String;
begin
  if FNumberOfStudies = nil then
    result := ''
  else
    result := FNumberOfStudies.value;
end;

procedure TFhirStatisticSampleSize.SetNumberOfStudiesST(value : String);
begin
  if value <> '' then
  begin
    if FNumberOfStudies = nil then
      FNumberOfStudies := TFhirInteger.create;
    FNumberOfStudies.value := value
  end
  else if FNumberOfStudies <> nil then
    FNumberOfStudies.value := '';
end;

procedure TFhirStatisticSampleSize.SetNumberOfParticipants(value : TFhirInteger);
begin
  FNumberOfParticipants.free;
  FNumberOfParticipants := value; {L1134}
end;

function TFhirStatisticSampleSize.GetNumberOfParticipantsST : String;
begin
  if FNumberOfParticipants = nil then
    result := ''
  else
    result := FNumberOfParticipants.value;
end;

procedure TFhirStatisticSampleSize.SetNumberOfParticipantsST(value : String);
begin
  if value <> '' then
  begin
    if FNumberOfParticipants = nil then
      FNumberOfParticipants := TFhirInteger.create;
    FNumberOfParticipants.value := value
  end
  else if FNumberOfParticipants <> nil then
    FNumberOfParticipants.value := '';
end;

procedure TFhirStatisticSampleSize.SetKnownDataCount(value : TFhirInteger);
begin
  FKnownDataCount.free;
  FKnownDataCount := value; {L1134}
end;

function TFhirStatisticSampleSize.GetKnownDataCountST : String;
begin
  if FKnownDataCount = nil then
    result := ''
  else
    result := FKnownDataCount.value;
end;

procedure TFhirStatisticSampleSize.SetKnownDataCountST(value : String);
begin
  if value <> '' then
  begin
    if FKnownDataCount = nil then
      FKnownDataCount := TFhirInteger.create;
    FKnownDataCount.value := value
  end
  else if FKnownDataCount <> nil then
    FKnownDataCount.value := '';
end;

procedure TFhirStatisticSampleSize.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('description');
  fields.add('note');
  fields.add('numberOfStudies');
  fields.add('numberOfParticipants');
  fields.add('knownDataCount');
end;

function TFhirStatisticSampleSize.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FDescription.sizeInBytes);
  inc(result, FnoteList.sizeInBytes);
  inc(result, FNumberOfStudies.sizeInBytes);
  inc(result, FNumberOfParticipants.sizeInBytes);
  inc(result, FKnownDataCount.sizeInBytes);
end;

{ TFhirStatisticSampleSizeListEnumerator }

constructor TFhirStatisticSampleSizeListEnumerator.Create(list : TFhirStatisticSampleSizeList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStatisticSampleSizeListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStatisticSampleSizeListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStatisticSampleSizeListEnumerator.GetCurrent : TFhirStatisticSampleSize;
begin
  Result := FList[FIndex];
end;

function TFhirStatisticSampleSizeListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStatisticSampleSizeList }

procedure TFhirStatisticSampleSizeList.AddItem(value: TFhirStatisticSampleSize);
begin
  assert(value.ClassName = 'TFhirStatisticSampleSize', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirStatisticSampleSize');
  add(value);
end;

function TFhirStatisticSampleSizeList.Append: TFhirStatisticSampleSize;
begin
  result := TFhirStatisticSampleSize.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticSampleSizeList.ClearItems;
begin
  Clear;
end;

function TFhirStatisticSampleSizeList.GetEnumerator : TFhirStatisticSampleSizeListEnumerator;
begin
  result := TFhirStatisticSampleSizeListEnumerator.Create(self.link);
end;

function TFhirStatisticSampleSizeList.Clone: TFhirStatisticSampleSizeList;
begin
  result := TFhirStatisticSampleSizeList(inherited Clone);
end;

function TFhirStatisticSampleSizeList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStatisticSampleSizeList.GetItemN(index: Integer): TFhirStatisticSampleSize;
begin
  result := TFhirStatisticSampleSize(ObjectByIndex[index]);
end;

function TFhirStatisticSampleSizeList.ItemClass: TFslObjectClass;
begin
  result := TFhirStatisticSampleSize;
end;
function TFhirStatisticSampleSizeList.IndexOf(value: TFhirStatisticSampleSize): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStatisticSampleSizeList.Insert(index: Integer): TFhirStatisticSampleSize;
begin
  result := TFhirStatisticSampleSize.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticSampleSizeList.InsertItem(index: Integer; value: TFhirStatisticSampleSize);
begin
  assert(value is TFhirStatisticSampleSize);
  Inherited Insert(index, value);
end;

function TFhirStatisticSampleSizeList.Item(index: Integer): TFhirStatisticSampleSize;
begin
  result := TFhirStatisticSampleSize(ObjectByIndex[index]);
end;

function TFhirStatisticSampleSizeList.Link: TFhirStatisticSampleSizeList;
begin
  result := TFhirStatisticSampleSizeList(inherited Link);
end;

procedure TFhirStatisticSampleSizeList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStatisticSampleSizeList.SetItemByIndex(index: Integer; value: TFhirStatisticSampleSize);
begin
  assert(value is TFhirStatisticSampleSize);
  FhirStatisticSampleSizes[index] := value;
end;

procedure TFhirStatisticSampleSizeList.SetItemN(index: Integer; value: TFhirStatisticSampleSize);
begin
  assert(value is TFhirStatisticSampleSize);
  ObjectByIndex[index] := value;
end;

{ TFhirStatisticAttributeEstimate }

constructor TFhirStatisticAttributeEstimate.Create;
begin
  inherited;
end;

destructor TFhirStatisticAttributeEstimate.Destroy;
begin
  FDescription.free;
  FNoteList.Free;
  FType_.free;
  FQuantity.free;
  FLevel.free;
  FRange.free;
  FAttributeEstimateList.Free;
  inherited;
end;

procedure TFhirStatisticAttributeEstimate.Assign(oSource : TFslObject);
begin
  inherited;
  descriptionElement := TFhirStatisticAttributeEstimate(oSource).descriptionElement.Clone;
  if (TFhirStatisticAttributeEstimate(oSource).FNoteList = nil) then
  begin
    FNoteList.free;
    FNoteList := nil;
  end
  else
  begin
    if FNoteList = nil then
      FNoteList := TFhirAnnotationList.Create;
    FNoteList.Assign(TFhirStatisticAttributeEstimate(oSource).FNoteList);
  end;
  type_ := TFhirStatisticAttributeEstimate(oSource).type_.Clone;
  quantity := TFhirStatisticAttributeEstimate(oSource).quantity.Clone;
  levelElement := TFhirStatisticAttributeEstimate(oSource).levelElement.Clone;
  range := TFhirStatisticAttributeEstimate(oSource).range.Clone;
  if (TFhirStatisticAttributeEstimate(oSource).FAttributeEstimateList = nil) then
  begin
    FAttributeEstimateList.free;
    FAttributeEstimateList := nil;
  end
  else
  begin
    if FAttributeEstimateList = nil then
      FAttributeEstimateList := TFhirStatisticAttributeEstimateAttributeEstimateList.Create;
    FAttributeEstimateList.Assign(TFhirStatisticAttributeEstimate(oSource).FAttributeEstimateList);
  end;
end;

procedure TFhirStatisticAttributeEstimate.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'note') Then
    list.addAll(self, 'note', FNoteList);
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'quantity') Then
     list.add(self.link, 'quantity', FQuantity.Link);
  if (child_name = 'level') Then
     list.add(self.link, 'level', FLevel.Link);
  if (child_name = 'range') Then
     list.add(self.link, 'range', FRange.Link);
  if (child_name = 'attributeEstimate') Then
    list.addAll(self, 'attributeEstimate', FAttributeEstimateList);
end;

procedure TFhirStatisticAttributeEstimate.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'note', 'Annotation', true, TFhirAnnotation, FNoteList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'type', 'CodeableConcept', false, TFhirCodeableConcept, FType_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'quantity', 'Quantity', false, TFhirQuantity, FQuantity.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'level', 'decimal', false, TFhirDecimal, FLevel.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'range', 'Range', false, TFhirRange, FRange.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'attributeEstimate', 'Element', true, TFhirStatisticAttributeEstimateAttributeEstimate, FAttributeEstimateList.Link)) {L1039};
end;

function TFhirStatisticAttributeEstimate.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'note') then
  begin
    NoteList.add(propValue as TFhirAnnotation) {L1048};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_ := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'quantity') then
  begin
    Quantity := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'level') then
  begin
    LevelElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'range') then
  begin
    Range := propValue as TFhirRange {L1199};
    result := propValue;
  end
  else if (propName = 'attributeEstimate') then
  begin
    AttributeEstimateList.add(propValue as TFhirStatisticAttributeEstimateAttributeEstimate) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirStatisticAttributeEstimate.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'note') then NoteList.insertItem(index, propValue as TFhirAnnotation) {L1049}
  else if (propName = 'attributeEstimate') then AttributeEstimateList.insertItem(index, propValue as TFhirStatisticAttributeEstimateAttributeEstimate) {L1049}
  else inherited;
end;

function TFhirStatisticAttributeEstimate.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'note') then result := NoteList.new() {L1053}
  else if (propName = 'type') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'quantity') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'level') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'range') then result := TFhirRange.create() {L1203}
  else if (propName = 'attributeEstimate') then result := AttributeEstimateList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirStatisticAttributeEstimate.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'description') then result := 'string'
  else if (propName = 'note') then result := 'Annotation'
  else if (propName = 'type') then result := 'CodeableConcept'
  else if (propName = 'quantity') then result := 'Quantity'
  else if (propName = 'level') then result := 'decimal'
  else if (propName = 'range') then result := 'Range'
  else if (propName = 'attributeEstimate') then result := 'Element'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirStatisticAttributeEstimate.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'note') then deletePropertyValue('note', NoteList, value) {L1054}
  else if (propName = 'type') then Type_Element := nil
  else if (propName = 'quantity') then QuantityElement := nil
  else if (propName = 'level') then LevelElement := nil
  else if (propName = 'range') then RangeElement := nil
  else if (propName = 'attributeEstimate') then deletePropertyValue('attributeEstimate', AttributeEstimateList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirStatisticAttributeEstimate.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'note') then replacePropertyValue('note', NoteList, existing, new) {L1055}
  else if (propName = 'type') then Type_Element := new as TFhirCodeableConcept {L1195}
  else if (propName = 'quantity') then QuantityElement := new as TFhirQuantity {L1195}
  else if (propName = 'level') then LevelElement := asDecimal(new) {L1222}
  else if (propName = 'range') then RangeElement := new as TFhirRange {L1195}
  else if (propName = 'attributeEstimate') then replacePropertyValue('attributeEstimate', AttributeEstimateList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirStatisticAttributeEstimate.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'note') then NoteList.move(source, destination) {L1050}
  else if (propName = 'attributeEstimate') then AttributeEstimateList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirStatisticAttributeEstimate.fhirType : string;
begin
  result := 'Statistic.attributeEstimate';
end;

function TFhirStatisticAttributeEstimate.Link : TFhirStatisticAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimate(inherited Link);
end;

function TFhirStatisticAttributeEstimate.Clone : TFhirStatisticAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimate(inherited Clone);
end;

function TFhirStatisticAttributeEstimate.equals(other : TObject) : boolean; 
var
  o : TFhirStatisticAttributeEstimate;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirStatisticAttributeEstimate)) then
    result := false
  else
  begin
    o := TFhirStatisticAttributeEstimate(other);
    result := compareDeep(descriptionElement, o.descriptionElement, true) and compareDeep(noteList, o.noteList, true) and 
      compareDeep(type_Element, o.type_Element, true) and compareDeep(quantityElement, o.quantityElement, true) and 
      compareDeep(levelElement, o.levelElement, true) and compareDeep(rangeElement, o.rangeElement, true) and 
      compareDeep(attributeEstimateList, o.attributeEstimateList, true);
  end;
end;

function TFhirStatisticAttributeEstimate.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FDescription) and isEmptyProp(FnoteList) and isEmptyProp(FType_) and isEmptyProp(FQuantity) and isEmptyProp(FLevel) and isEmptyProp(FRange) and isEmptyProp(FattributeEstimateList);
end;

procedure TFhirStatisticAttributeEstimate.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirStatisticAttributeEstimate.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirStatisticAttributeEstimate.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

function TFhirStatisticAttributeEstimate.GetNoteList : TFhirAnnotationList;
begin
  if FNoteList = nil then
    FNoteList := TFhirAnnotationList.Create;
  result := FNoteList;
end;

function TFhirStatisticAttributeEstimate.GetHasNoteList : boolean;
begin
  result := (FNoteList <> nil) and (FNoteList.count > 0);
end;

procedure TFhirStatisticAttributeEstimate.SetType_(value : TFhirCodeableConcept);
begin
  FType_.free;
  FType_ := value; {L1134}
end;

procedure TFhirStatisticAttributeEstimate.SetQuantity(value : TFhirQuantity);
begin
  FQuantity.free;
  FQuantity := value; {L1134}
end;

procedure TFhirStatisticAttributeEstimate.SetLevel(value : TFhirDecimal);
begin
  FLevel.free;
  FLevel := value; {L1134}
end;

function TFhirStatisticAttributeEstimate.GetLevelST : String;
begin
  if FLevel = nil then
    result := ''
  else
    result := FLevel.value;
end;

procedure TFhirStatisticAttributeEstimate.SetLevelST(value : String);
begin
  if value <> '' then
  begin
    if FLevel = nil then
      FLevel := TFhirDecimal.create;
    FLevel.value := value
  end
  else if FLevel <> nil then
    FLevel.value := '';
end;

procedure TFhirStatisticAttributeEstimate.SetRange(value : TFhirRange);
begin
  FRange.free;
  FRange := value; {L1134}
end;

function TFhirStatisticAttributeEstimate.GetAttributeEstimateList : TFhirStatisticAttributeEstimateAttributeEstimateList;
begin
  if FAttributeEstimateList = nil then
    FAttributeEstimateList := TFhirStatisticAttributeEstimateAttributeEstimateList.Create;
  result := FAttributeEstimateList;
end;

function TFhirStatisticAttributeEstimate.GetHasAttributeEstimateList : boolean;
begin
  result := (FAttributeEstimateList <> nil) and (FAttributeEstimateList.count > 0);
end;

procedure TFhirStatisticAttributeEstimate.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('description');
  fields.add('note');
  fields.add('type');
  fields.add('quantity');
  fields.add('level');
  fields.add('range');
  fields.add('attributeEstimate');
end;

function TFhirStatisticAttributeEstimate.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FDescription.sizeInBytes);
  inc(result, FnoteList.sizeInBytes);
  inc(result, FType_.sizeInBytes);
  inc(result, FQuantity.sizeInBytes);
  inc(result, FLevel.sizeInBytes);
  inc(result, FRange.sizeInBytes);
  inc(result, FattributeEstimateList.sizeInBytes);
end;

{ TFhirStatisticAttributeEstimateListEnumerator }

constructor TFhirStatisticAttributeEstimateListEnumerator.Create(list : TFhirStatisticAttributeEstimateList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStatisticAttributeEstimateListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStatisticAttributeEstimateListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStatisticAttributeEstimateListEnumerator.GetCurrent : TFhirStatisticAttributeEstimate;
begin
  Result := FList[FIndex];
end;

function TFhirStatisticAttributeEstimateListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStatisticAttributeEstimateList }

procedure TFhirStatisticAttributeEstimateList.AddItem(value: TFhirStatisticAttributeEstimate);
begin
  assert(value.ClassName = 'TFhirStatisticAttributeEstimate', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirStatisticAttributeEstimate');
  add(value);
end;

function TFhirStatisticAttributeEstimateList.Append: TFhirStatisticAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimate.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticAttributeEstimateList.ClearItems;
begin
  Clear;
end;

function TFhirStatisticAttributeEstimateList.GetEnumerator : TFhirStatisticAttributeEstimateListEnumerator;
begin
  result := TFhirStatisticAttributeEstimateListEnumerator.Create(self.link);
end;

function TFhirStatisticAttributeEstimateList.Clone: TFhirStatisticAttributeEstimateList;
begin
  result := TFhirStatisticAttributeEstimateList(inherited Clone);
end;

function TFhirStatisticAttributeEstimateList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStatisticAttributeEstimateList.GetItemN(index: Integer): TFhirStatisticAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimate(ObjectByIndex[index]);
end;

function TFhirStatisticAttributeEstimateList.ItemClass: TFslObjectClass;
begin
  result := TFhirStatisticAttributeEstimate;
end;
function TFhirStatisticAttributeEstimateList.IndexOf(value: TFhirStatisticAttributeEstimate): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStatisticAttributeEstimateList.Insert(index: Integer): TFhirStatisticAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimate.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticAttributeEstimateList.InsertItem(index: Integer; value: TFhirStatisticAttributeEstimate);
begin
  assert(value is TFhirStatisticAttributeEstimate);
  Inherited Insert(index, value);
end;

function TFhirStatisticAttributeEstimateList.Item(index: Integer): TFhirStatisticAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimate(ObjectByIndex[index]);
end;

function TFhirStatisticAttributeEstimateList.Link: TFhirStatisticAttributeEstimateList;
begin
  result := TFhirStatisticAttributeEstimateList(inherited Link);
end;

procedure TFhirStatisticAttributeEstimateList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStatisticAttributeEstimateList.SetItemByIndex(index: Integer; value: TFhirStatisticAttributeEstimate);
begin
  assert(value is TFhirStatisticAttributeEstimate);
  FhirStatisticAttributeEstimates[index] := value;
end;

procedure TFhirStatisticAttributeEstimateList.SetItemN(index: Integer; value: TFhirStatisticAttributeEstimate);
begin
  assert(value is TFhirStatisticAttributeEstimate);
  ObjectByIndex[index] := value;
end;

{ TFhirStatisticAttributeEstimateAttributeEstimate }

constructor TFhirStatisticAttributeEstimateAttributeEstimate.Create;
begin
  inherited;
end;

destructor TFhirStatisticAttributeEstimateAttributeEstimate.Destroy;
begin
  FDescription.free;
  FNoteList.Free;
  FType_.free;
  FQuantity.free;
  FLevel.free;
  FRange.free;
  inherited;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.Assign(oSource : TFslObject);
begin
  inherited;
  descriptionElement := TFhirStatisticAttributeEstimateAttributeEstimate(oSource).descriptionElement.Clone;
  if (TFhirStatisticAttributeEstimateAttributeEstimate(oSource).FNoteList = nil) then
  begin
    FNoteList.free;
    FNoteList := nil;
  end
  else
  begin
    if FNoteList = nil then
      FNoteList := TFhirAnnotationList.Create;
    FNoteList.Assign(TFhirStatisticAttributeEstimateAttributeEstimate(oSource).FNoteList);
  end;
  type_ := TFhirStatisticAttributeEstimateAttributeEstimate(oSource).type_.Clone;
  quantity := TFhirStatisticAttributeEstimateAttributeEstimate(oSource).quantity.Clone;
  levelElement := TFhirStatisticAttributeEstimateAttributeEstimate(oSource).levelElement.Clone;
  range := TFhirStatisticAttributeEstimateAttributeEstimate(oSource).range.Clone;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'note') Then
    list.addAll(self, 'note', FNoteList);
  if (child_name = 'type') Then
     list.add(self.link, 'type', FType_.Link);
  if (child_name = 'quantity') Then
     list.add(self.link, 'quantity', FQuantity.Link);
  if (child_name = 'level') Then
     list.add(self.link, 'level', FLevel.Link);
  if (child_name = 'range') Then
     list.add(self.link, 'range', FRange.Link);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'note', 'Annotation', true, TFhirAnnotation, FNoteList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'type', 'CodeableConcept', false, TFhirCodeableConcept, FType_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'quantity', 'Quantity', false, TFhirQuantity, FQuantity.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'level', 'decimal', false, TFhirDecimal, FLevel.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'range', 'Range', false, TFhirRange, FRange.Link)); {L1172}
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'note') then
  begin
    NoteList.add(propValue as TFhirAnnotation) {L1048};
    result := propValue;
  end
  else if (propName = 'type') then
  begin
    Type_ := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'quantity') then
  begin
    Quantity := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'level') then
  begin
    LevelElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'range') then
  begin
    Range := propValue as TFhirRange {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'note') then NoteList.insertItem(index, propValue as TFhirAnnotation) {L1049}
  else inherited;
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'note') then result := NoteList.new() {L1053}
  else if (propName = 'type') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'quantity') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'level') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'range') then result := TFhirRange.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'description') then result := 'string'
  else if (propName = 'note') then result := 'Annotation'
  else if (propName = 'type') then result := 'CodeableConcept'
  else if (propName = 'quantity') then result := 'Quantity'
  else if (propName = 'level') then result := 'decimal'
  else if (propName = 'range') then result := 'Range'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'note') then deletePropertyValue('note', NoteList, value) {L1054}
  else if (propName = 'type') then Type_Element := nil
  else if (propName = 'quantity') then QuantityElement := nil
  else if (propName = 'level') then LevelElement := nil
  else if (propName = 'range') then RangeElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'note') then replacePropertyValue('note', NoteList, existing, new) {L1055}
  else if (propName = 'type') then Type_Element := new as TFhirCodeableConcept {L1195}
  else if (propName = 'quantity') then QuantityElement := new as TFhirQuantity {L1195}
  else if (propName = 'level') then LevelElement := asDecimal(new) {L1222}
  else if (propName = 'range') then RangeElement := new as TFhirRange {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'note') then NoteList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.fhirType : string;
begin
  result := 'Statistic.attributeEstimate.attributeEstimate';
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.Link : TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate(inherited Link);
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.Clone : TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate(inherited Clone);
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.equals(other : TObject) : boolean; 
var
  o : TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirStatisticAttributeEstimateAttributeEstimate)) then
    result := false
  else
  begin
    o := TFhirStatisticAttributeEstimateAttributeEstimate(other);
    result := compareDeep(descriptionElement, o.descriptionElement, true) and compareDeep(noteList, o.noteList, true) and 
      compareDeep(type_Element, o.type_Element, true) and compareDeep(quantityElement, o.quantityElement, true) and 
      compareDeep(levelElement, o.levelElement, true) and compareDeep(rangeElement, o.rangeElement, true);
  end;
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FDescription) and isEmptyProp(FnoteList) and isEmptyProp(FType_) and isEmptyProp(FQuantity) and isEmptyProp(FLevel) and isEmptyProp(FRange);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.GetNoteList : TFhirAnnotationList;
begin
  if FNoteList = nil then
    FNoteList := TFhirAnnotationList.Create;
  result := FNoteList;
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.GetHasNoteList : boolean;
begin
  result := (FNoteList <> nil) and (FNoteList.count > 0);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetType_(value : TFhirCodeableConcept);
begin
  FType_.free;
  FType_ := value; {L1134}
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetQuantity(value : TFhirQuantity);
begin
  FQuantity.free;
  FQuantity := value; {L1134}
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetLevel(value : TFhirDecimal);
begin
  FLevel.free;
  FLevel := value; {L1134}
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.GetLevelST : String;
begin
  if FLevel = nil then
    result := ''
  else
    result := FLevel.value;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetLevelST(value : String);
begin
  if value <> '' then
  begin
    if FLevel = nil then
      FLevel := TFhirDecimal.create;
    FLevel.value := value
  end
  else if FLevel <> nil then
    FLevel.value := '';
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.SetRange(value : TFhirRange);
begin
  FRange.free;
  FRange := value; {L1134}
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimate.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('description');
  fields.add('note');
  fields.add('type');
  fields.add('quantity');
  fields.add('level');
  fields.add('range');
end;

function TFhirStatisticAttributeEstimateAttributeEstimate.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FDescription.sizeInBytes);
  inc(result, FnoteList.sizeInBytes);
  inc(result, FType_.sizeInBytes);
  inc(result, FQuantity.sizeInBytes);
  inc(result, FLevel.sizeInBytes);
  inc(result, FRange.sizeInBytes);
end;

{ TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator }

constructor TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator.Create(list : TFhirStatisticAttributeEstimateAttributeEstimateList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator.GetCurrent : TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  Result := FList[FIndex];
end;

function TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStatisticAttributeEstimateAttributeEstimateList }

procedure TFhirStatisticAttributeEstimateAttributeEstimateList.AddItem(value: TFhirStatisticAttributeEstimateAttributeEstimate);
begin
  assert(value.ClassName = 'TFhirStatisticAttributeEstimateAttributeEstimate', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirStatisticAttributeEstimateAttributeEstimate');
  add(value);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.Append: TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimateList.ClearItems;
begin
  Clear;
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.GetEnumerator : TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimateListEnumerator.Create(self.link);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.Clone: TFhirStatisticAttributeEstimateAttributeEstimateList;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimateList(inherited Clone);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.GetItemN(index: Integer): TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate(ObjectByIndex[index]);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.ItemClass: TFslObjectClass;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate;
end;
function TFhirStatisticAttributeEstimateAttributeEstimateList.IndexOf(value: TFhirStatisticAttributeEstimateAttributeEstimate): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.Insert(index: Integer): TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimateList.InsertItem(index: Integer; value: TFhirStatisticAttributeEstimateAttributeEstimate);
begin
  assert(value is TFhirStatisticAttributeEstimateAttributeEstimate);
  Inherited Insert(index, value);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.Item(index: Integer): TFhirStatisticAttributeEstimateAttributeEstimate;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate(ObjectByIndex[index]);
end;

function TFhirStatisticAttributeEstimateAttributeEstimateList.Link: TFhirStatisticAttributeEstimateAttributeEstimateList;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimateList(inherited Link);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimateList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimateList.SetItemByIndex(index: Integer; value: TFhirStatisticAttributeEstimateAttributeEstimate);
begin
  assert(value is TFhirStatisticAttributeEstimateAttributeEstimate);
  FhirStatisticAttributeEstimateAttributeEstimates[index] := value;
end;

procedure TFhirStatisticAttributeEstimateAttributeEstimateList.SetItemN(index: Integer; value: TFhirStatisticAttributeEstimateAttributeEstimate);
begin
  assert(value is TFhirStatisticAttributeEstimateAttributeEstimate);
  ObjectByIndex[index] := value;
end;

{ TFhirStatisticModelCharacteristic }

constructor TFhirStatisticModelCharacteristic.Create;
begin
  inherited;
end;

destructor TFhirStatisticModelCharacteristic.Destroy;
begin
  FCode.free;
  FValue.free;
  FVariableList.Free;
  inherited;
end;

procedure TFhirStatisticModelCharacteristic.Assign(oSource : TFslObject);
begin
  inherited;
  code := TFhirStatisticModelCharacteristic(oSource).code.Clone;
  value := TFhirStatisticModelCharacteristic(oSource).value.Clone;
  if (TFhirStatisticModelCharacteristic(oSource).FVariableList = nil) then
  begin
    FVariableList.free;
    FVariableList := nil;
  end
  else
  begin
    if FVariableList = nil then
      FVariableList := TFhirStatisticModelCharacteristicVariableList.Create;
    FVariableList.Assign(TFhirStatisticModelCharacteristic(oSource).FVariableList);
  end;
end;

procedure TFhirStatisticModelCharacteristic.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'code') Then
     list.add(self.link, 'code', FCode.Link);
  if (child_name = 'value[x]') or (child_name = 'value') Then
     list.add(self.link, 'value[x]', FValue.Link);
  if (child_name = 'variable') Then
    list.addAll(self, 'variable', FVariableList);
end;

procedure TFhirStatisticModelCharacteristic.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'code', 'CodeableConcept', false, TFhirCodeableConcept, FCode.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'value[x]', 'CodeableConcept|boolean|Quantity|Range', false, TFhirDataType, FValue.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'variable', 'Element', true, TFhirStatisticModelCharacteristicVariable, FVariableList.Link)) {L1039};
end;

function TFhirStatisticModelCharacteristic.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'code') then
  begin
    Code := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Boolean', 'Quantity', 'Range'])) then
  begin
    Value := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'variable') then
  begin
    VariableList.add(propValue as TFhirStatisticModelCharacteristicVariable) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirStatisticModelCharacteristic.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'variable') then VariableList.insertItem(index, propValue as TFhirStatisticModelCharacteristicVariable) {L1049}
  else inherited;
end;

function TFhirStatisticModelCharacteristic.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'code') then result := TFhirCodeableConcept.create() {L1203}
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Boolean', 'Quantity', 'Range'])) then raise EFHIRException.create('Cannot make property Value') {L1191}
  else if (propName = 'variable') then result := VariableList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirStatisticModelCharacteristic.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'code') then result := 'CodeableConcept'
  else if (propName = 'value[x]') then result := 'CodeableConcept|boolean|Quantity|Range'
  else if (propName = 'variable') then result := 'Element'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirStatisticModelCharacteristic.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'code') then CodeElement := nil
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Boolean', 'Quantity', 'Range'])) then ValueElement := nil {L1189}
  else if (propName = 'variable') then deletePropertyValue('variable', VariableList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirStatisticModelCharacteristic.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'code') then CodeElement := new as TFhirCodeableConcept {L1195}
  else if (isMatchingName(propName, 'value', ['CodeableConcept', 'Boolean', 'Quantity', 'Range'])) then ValueElement := new as TFhirDataType {L1190}
  else if (propName = 'variable') then replacePropertyValue('variable', VariableList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirStatisticModelCharacteristic.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'variable') then VariableList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirStatisticModelCharacteristic.fhirType : string;
begin
  result := 'Statistic.modelCharacteristic';
end;

function TFhirStatisticModelCharacteristic.Link : TFhirStatisticModelCharacteristic;
begin
  result := TFhirStatisticModelCharacteristic(inherited Link);
end;

function TFhirStatisticModelCharacteristic.Clone : TFhirStatisticModelCharacteristic;
begin
  result := TFhirStatisticModelCharacteristic(inherited Clone);
end;

function TFhirStatisticModelCharacteristic.equals(other : TObject) : boolean; 
var
  o : TFhirStatisticModelCharacteristic;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirStatisticModelCharacteristic)) then
    result := false
  else
  begin
    o := TFhirStatisticModelCharacteristic(other);
    result := compareDeep(codeElement, o.codeElement, true) and compareDeep(valueElement, o.valueElement, true) and 
      compareDeep(variableList, o.variableList, true);
  end;
end;

function TFhirStatisticModelCharacteristic.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FCode) and isEmptyProp(FValue) and isEmptyProp(FvariableList);
end;

procedure TFhirStatisticModelCharacteristic.SetCode(value : TFhirCodeableConcept);
begin
  FCode.free;
  FCode := value; {L1134}
end;

procedure TFhirStatisticModelCharacteristic.SetValue(value : TFhirDataType);
begin
  FValue.free;
  FValue := value; {L1134}
end;

function TFhirStatisticModelCharacteristic.GetVariableList : TFhirStatisticModelCharacteristicVariableList;
begin
  if FVariableList = nil then
    FVariableList := TFhirStatisticModelCharacteristicVariableList.Create;
  result := FVariableList;
end;

function TFhirStatisticModelCharacteristic.GetHasVariableList : boolean;
begin
  result := (FVariableList <> nil) and (FVariableList.count > 0);
end;

procedure TFhirStatisticModelCharacteristic.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('code');
  fields.add('value[x]');
  fields.add('variable');
end;

function TFhirStatisticModelCharacteristic.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FCode.sizeInBytes);
  inc(result, FValue.sizeInBytes);
  inc(result, FvariableList.sizeInBytes);
end;

{ TFhirStatisticModelCharacteristicListEnumerator }

constructor TFhirStatisticModelCharacteristicListEnumerator.Create(list : TFhirStatisticModelCharacteristicList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStatisticModelCharacteristicListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStatisticModelCharacteristicListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStatisticModelCharacteristicListEnumerator.GetCurrent : TFhirStatisticModelCharacteristic;
begin
  Result := FList[FIndex];
end;

function TFhirStatisticModelCharacteristicListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStatisticModelCharacteristicList }

procedure TFhirStatisticModelCharacteristicList.AddItem(value: TFhirStatisticModelCharacteristic);
begin
  assert(value.ClassName = 'TFhirStatisticModelCharacteristic', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirStatisticModelCharacteristic');
  add(value);
end;

function TFhirStatisticModelCharacteristicList.Append: TFhirStatisticModelCharacteristic;
begin
  result := TFhirStatisticModelCharacteristic.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticModelCharacteristicList.ClearItems;
begin
  Clear;
end;

function TFhirStatisticModelCharacteristicList.GetEnumerator : TFhirStatisticModelCharacteristicListEnumerator;
begin
  result := TFhirStatisticModelCharacteristicListEnumerator.Create(self.link);
end;

function TFhirStatisticModelCharacteristicList.Clone: TFhirStatisticModelCharacteristicList;
begin
  result := TFhirStatisticModelCharacteristicList(inherited Clone);
end;

function TFhirStatisticModelCharacteristicList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStatisticModelCharacteristicList.GetItemN(index: Integer): TFhirStatisticModelCharacteristic;
begin
  result := TFhirStatisticModelCharacteristic(ObjectByIndex[index]);
end;

function TFhirStatisticModelCharacteristicList.ItemClass: TFslObjectClass;
begin
  result := TFhirStatisticModelCharacteristic;
end;
function TFhirStatisticModelCharacteristicList.IndexOf(value: TFhirStatisticModelCharacteristic): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStatisticModelCharacteristicList.Insert(index: Integer): TFhirStatisticModelCharacteristic;
begin
  result := TFhirStatisticModelCharacteristic.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticModelCharacteristicList.InsertItem(index: Integer; value: TFhirStatisticModelCharacteristic);
begin
  assert(value is TFhirStatisticModelCharacteristic);
  Inherited Insert(index, value);
end;

function TFhirStatisticModelCharacteristicList.Item(index: Integer): TFhirStatisticModelCharacteristic;
begin
  result := TFhirStatisticModelCharacteristic(ObjectByIndex[index]);
end;

function TFhirStatisticModelCharacteristicList.Link: TFhirStatisticModelCharacteristicList;
begin
  result := TFhirStatisticModelCharacteristicList(inherited Link);
end;

procedure TFhirStatisticModelCharacteristicList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStatisticModelCharacteristicList.SetItemByIndex(index: Integer; value: TFhirStatisticModelCharacteristic);
begin
  assert(value is TFhirStatisticModelCharacteristic);
  FhirStatisticModelCharacteristics[index] := value;
end;

procedure TFhirStatisticModelCharacteristicList.SetItemN(index: Integer; value: TFhirStatisticModelCharacteristic);
begin
  assert(value is TFhirStatisticModelCharacteristic);
  ObjectByIndex[index] := value;
end;

{ TFhirStatisticModelCharacteristicVariable }

constructor TFhirStatisticModelCharacteristicVariable.Create;
begin
  inherited;
end;

destructor TFhirStatisticModelCharacteristicVariable.Destroy;
begin
  FVariableDefinition.free;
  FHandling.free;
  FValueCategoryList.Free;
  FValueQuantityList.Free;
  FValueRangeList.Free;
  inherited;
end;

procedure TFhirStatisticModelCharacteristicVariable.Assign(oSource : TFslObject);
begin
  inherited;
  variableDefinition := TFhirStatisticModelCharacteristicVariable(oSource).variableDefinition.Clone;
  handlingElement := TFhirStatisticModelCharacteristicVariable(oSource).handlingElement.Clone;
  if (TFhirStatisticModelCharacteristicVariable(oSource).FValueCategoryList = nil) then
  begin
    FValueCategoryList.free;
    FValueCategoryList := nil;
  end
  else
  begin
    if FValueCategoryList = nil then
      FValueCategoryList := TFhirCodeableConceptList.Create;
    FValueCategoryList.Assign(TFhirStatisticModelCharacteristicVariable(oSource).FValueCategoryList);
  end;
  if (TFhirStatisticModelCharacteristicVariable(oSource).FValueQuantityList = nil) then
  begin
    FValueQuantityList.free;
    FValueQuantityList := nil;
  end
  else
  begin
    if FValueQuantityList = nil then
      FValueQuantityList := TFhirQuantityList.Create;
    FValueQuantityList.Assign(TFhirStatisticModelCharacteristicVariable(oSource).FValueQuantityList);
  end;
  if (TFhirStatisticModelCharacteristicVariable(oSource).FValueRangeList = nil) then
  begin
    FValueRangeList.free;
    FValueRangeList := nil;
  end
  else
  begin
    if FValueRangeList = nil then
      FValueRangeList := TFhirRangeList.Create;
    FValueRangeList.Assign(TFhirStatisticModelCharacteristicVariable(oSource).FValueRangeList);
  end;
end;

procedure TFhirStatisticModelCharacteristicVariable.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'variableDefinition') Then
     list.add(self.link, 'variableDefinition', FVariableDefinition.Link);
  if (child_name = 'handling') Then
     list.add(self.link, 'handling', FHandling.Link);
  if (child_name = 'valueCategory') Then
    list.addAll(self, 'valueCategory', FValueCategoryList);
  if (child_name = 'valueQuantity') Then
    list.addAll(self, 'valueQuantity', FValueQuantityList);
  if (child_name = 'valueRange') Then
    list.addAll(self, 'valueRange', FValueRangeList);
end;

procedure TFhirStatisticModelCharacteristicVariable.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'variableDefinition', 'Reference', false, TFhirReference, FVariableDefinition.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'handling', 'code', false, TFhirEnum, FHandling.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'valueCategory', 'CodeableConcept', true, TFhirCodeableConcept, FValueCategoryList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'valueQuantity', 'Quantity', true, TFhirQuantity, FValueQuantityList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'valueRange', 'Range', true, TFhirRange, FValueRangeList.Link)) {L1039};
end;

function TFhirStatisticModelCharacteristicVariable.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'variableDefinition') then
  begin
    VariableDefinition := propValue as TFhirReference {L1199};
    result := propValue;
  end
  else if (propName = 'handling') then
  begin
    HandlingElement := asEnum(SYSTEMS_TFhirEvidenceVariableHandlingEnum, CODES_TFhirEvidenceVariableHandlingEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'valueCategory') then
  begin
    ValueCategoryList.add(propValue as TFhirCodeableConcept) {L1048};
    result := propValue;
  end
  else if (propName = 'valueQuantity') then
  begin
    ValueQuantityList.add(propValue as TFhirQuantity) {L1048};
    result := propValue;
  end
  else if (propName = 'valueRange') then
  begin
    ValueRangeList.add(propValue as TFhirRange) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirStatisticModelCharacteristicVariable.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'valueCategory') then ValueCategoryList.insertItem(index, propValue as TFhirCodeableConcept) {L1049}
  else if (propName = 'valueQuantity') then ValueQuantityList.insertItem(index, propValue as TFhirQuantity) {L1049}
  else if (propName = 'valueRange') then ValueRangeList.insertItem(index, propValue as TFhirRange) {L1049}
  else inherited;
end;

function TFhirStatisticModelCharacteristicVariable.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'variableDefinition') then result := TFhirReference.create() {L1203}
  else if (propName = 'handling') then result := TFhirEnum.create(SYSTEMS_TFhirEvidenceVariableHandlingEnum[EvidenceVariableHandlingNull], CODES_TFhirEvidenceVariableHandlingEnum[EvidenceVariableHandlingNull])  {L1211}
  else if (propName = 'valueCategory') then result := ValueCategoryList.new() {L1053}
  else if (propName = 'valueQuantity') then result := ValueQuantityList.new() {L1053}
  else if (propName = 'valueRange') then result := ValueRangeList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirStatisticModelCharacteristicVariable.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'variableDefinition') then result := 'Reference'
  else if (propName = 'handling') then result := 'code'
  else if (propName = 'valueCategory') then result := 'CodeableConcept'
  else if (propName = 'valueQuantity') then result := 'Quantity'
  else if (propName = 'valueRange') then result := 'Range'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirStatisticModelCharacteristicVariable.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'variableDefinition') then VariableDefinitionElement := nil
  else if (propName = 'handling') then HandlingElement := nil
  else if (propName = 'valueCategory') then deletePropertyValue('valueCategory', ValueCategoryList, value) {L1054}
  else if (propName = 'valueQuantity') then deletePropertyValue('valueQuantity', ValueQuantityList, value) {L1054}
  else if (propName = 'valueRange') then deletePropertyValue('valueRange', ValueRangeList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirStatisticModelCharacteristicVariable.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'variableDefinition') then VariableDefinitionElement := new as TFhirReference {L1195}
  else if (propName = 'handling') then HandlingElement := asEnum(SYSTEMS_TFhirEvidenceVariableHandlingEnum, CODES_TFhirEvidenceVariableHandlingEnum, new) {L1210}
  else if (propName = 'valueCategory') then replacePropertyValue('valueCategory', ValueCategoryList, existing, new) {L1055}
  else if (propName = 'valueQuantity') then replacePropertyValue('valueQuantity', ValueQuantityList, existing, new) {L1055}
  else if (propName = 'valueRange') then replacePropertyValue('valueRange', ValueRangeList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirStatisticModelCharacteristicVariable.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'valueCategory') then ValueCategoryList.move(source, destination) {L1050}
  else if (propName = 'valueQuantity') then ValueQuantityList.move(source, destination) {L1050}
  else if (propName = 'valueRange') then ValueRangeList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirStatisticModelCharacteristicVariable.fhirType : string;
begin
  result := 'Statistic.modelCharacteristic.variable';
end;

function TFhirStatisticModelCharacteristicVariable.Link : TFhirStatisticModelCharacteristicVariable;
begin
  result := TFhirStatisticModelCharacteristicVariable(inherited Link);
end;

function TFhirStatisticModelCharacteristicVariable.Clone : TFhirStatisticModelCharacteristicVariable;
begin
  result := TFhirStatisticModelCharacteristicVariable(inherited Clone);
end;

function TFhirStatisticModelCharacteristicVariable.equals(other : TObject) : boolean; 
var
  o : TFhirStatisticModelCharacteristicVariable;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirStatisticModelCharacteristicVariable)) then
    result := false
  else
  begin
    o := TFhirStatisticModelCharacteristicVariable(other);
    result := compareDeep(variableDefinitionElement, o.variableDefinitionElement, true) and 
      compareDeep(handlingElement, o.handlingElement, true) and compareDeep(valueCategoryList, o.valueCategoryList, true) and 
      compareDeep(valueQuantityList, o.valueQuantityList, true) and compareDeep(valueRangeList, o.valueRangeList, true);
  end;
end;

function TFhirStatisticModelCharacteristicVariable.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FVariableDefinition) and isEmptyProp(FHandling) and isEmptyProp(FvalueCategoryList) and isEmptyProp(FvalueQuantityList) and isEmptyProp(FvalueRangeList);
end;

procedure TFhirStatisticModelCharacteristicVariable.SetVariableDefinition(value : TFhirReference);
begin
  FVariableDefinition.free;
  FVariableDefinition := value; {L1134}
end;

procedure TFhirStatisticModelCharacteristicVariable.SetHandling(value : TFhirEnum);
begin
  FHandling.free;
  FHandling := value;
end;

function TFhirStatisticModelCharacteristicVariable.GetHandlingST : TFhirEvidenceVariableHandlingEnum;
begin
  if FHandling = nil then
    result := TFhirEvidenceVariableHandlingEnum(0)
  else
    result := TFhirEvidenceVariableHandlingEnum(StringArrayIndexOfSensitive(CODES_TFhirEvidenceVariableHandlingEnum, FHandling.value));
end;

procedure TFhirStatisticModelCharacteristicVariable.SetHandlingST(value : TFhirEvidenceVariableHandlingEnum);
begin
  if ord(value) = 0 then
    HandlingElement := nil
  else
    HandlingElement := TFhirEnum.create(SYSTEMS_TFhirEvidenceVariableHandlingEnum[value], CODES_TFhirEvidenceVariableHandlingEnum[value]);
end;

function TFhirStatisticModelCharacteristicVariable.GetValueCategoryList : TFhirCodeableConceptList;
begin
  if FValueCategoryList = nil then
    FValueCategoryList := TFhirCodeableConceptList.Create;
  result := FValueCategoryList;
end;

function TFhirStatisticModelCharacteristicVariable.GetHasValueCategoryList : boolean;
begin
  result := (FValueCategoryList <> nil) and (FValueCategoryList.count > 0);
end;

function TFhirStatisticModelCharacteristicVariable.GetValueQuantityList : TFhirQuantityList;
begin
  if FValueQuantityList = nil then
    FValueQuantityList := TFhirQuantityList.Create;
  result := FValueQuantityList;
end;

function TFhirStatisticModelCharacteristicVariable.GetHasValueQuantityList : boolean;
begin
  result := (FValueQuantityList <> nil) and (FValueQuantityList.count > 0);
end;

function TFhirStatisticModelCharacteristicVariable.GetValueRangeList : TFhirRangeList;
begin
  if FValueRangeList = nil then
    FValueRangeList := TFhirRangeList.Create;
  result := FValueRangeList;
end;

function TFhirStatisticModelCharacteristicVariable.GetHasValueRangeList : boolean;
begin
  result := (FValueRangeList <> nil) and (FValueRangeList.count > 0);
end;

procedure TFhirStatisticModelCharacteristicVariable.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('variableDefinition');
  fields.add('handling');
  fields.add('valueCategory');
  fields.add('valueQuantity');
  fields.add('valueRange');
end;

function TFhirStatisticModelCharacteristicVariable.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FVariableDefinition.sizeInBytes);
  inc(result, FHandling.sizeInBytes);
  inc(result, FvalueCategoryList.sizeInBytes);
  inc(result, FvalueQuantityList.sizeInBytes);
  inc(result, FvalueRangeList.sizeInBytes);
end;

{ TFhirStatisticModelCharacteristicVariableListEnumerator }

constructor TFhirStatisticModelCharacteristicVariableListEnumerator.Create(list : TFhirStatisticModelCharacteristicVariableList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStatisticModelCharacteristicVariableListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStatisticModelCharacteristicVariableListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStatisticModelCharacteristicVariableListEnumerator.GetCurrent : TFhirStatisticModelCharacteristicVariable;
begin
  Result := FList[FIndex];
end;

function TFhirStatisticModelCharacteristicVariableListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStatisticModelCharacteristicVariableList }

procedure TFhirStatisticModelCharacteristicVariableList.AddItem(value: TFhirStatisticModelCharacteristicVariable);
begin
  assert(value.ClassName = 'TFhirStatisticModelCharacteristicVariable', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirStatisticModelCharacteristicVariable');
  add(value);
end;

function TFhirStatisticModelCharacteristicVariableList.Append: TFhirStatisticModelCharacteristicVariable;
begin
  result := TFhirStatisticModelCharacteristicVariable.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticModelCharacteristicVariableList.ClearItems;
begin
  Clear;
end;

function TFhirStatisticModelCharacteristicVariableList.GetEnumerator : TFhirStatisticModelCharacteristicVariableListEnumerator;
begin
  result := TFhirStatisticModelCharacteristicVariableListEnumerator.Create(self.link);
end;

function TFhirStatisticModelCharacteristicVariableList.Clone: TFhirStatisticModelCharacteristicVariableList;
begin
  result := TFhirStatisticModelCharacteristicVariableList(inherited Clone);
end;

function TFhirStatisticModelCharacteristicVariableList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStatisticModelCharacteristicVariableList.GetItemN(index: Integer): TFhirStatisticModelCharacteristicVariable;
begin
  result := TFhirStatisticModelCharacteristicVariable(ObjectByIndex[index]);
end;

function TFhirStatisticModelCharacteristicVariableList.ItemClass: TFslObjectClass;
begin
  result := TFhirStatisticModelCharacteristicVariable;
end;
function TFhirStatisticModelCharacteristicVariableList.IndexOf(value: TFhirStatisticModelCharacteristicVariable): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStatisticModelCharacteristicVariableList.Insert(index: Integer): TFhirStatisticModelCharacteristicVariable;
begin
  result := TFhirStatisticModelCharacteristicVariable.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticModelCharacteristicVariableList.InsertItem(index: Integer; value: TFhirStatisticModelCharacteristicVariable);
begin
  assert(value is TFhirStatisticModelCharacteristicVariable);
  Inherited Insert(index, value);
end;

function TFhirStatisticModelCharacteristicVariableList.Item(index: Integer): TFhirStatisticModelCharacteristicVariable;
begin
  result := TFhirStatisticModelCharacteristicVariable(ObjectByIndex[index]);
end;

function TFhirStatisticModelCharacteristicVariableList.Link: TFhirStatisticModelCharacteristicVariableList;
begin
  result := TFhirStatisticModelCharacteristicVariableList(inherited Link);
end;

procedure TFhirStatisticModelCharacteristicVariableList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStatisticModelCharacteristicVariableList.SetItemByIndex(index: Integer; value: TFhirStatisticModelCharacteristicVariable);
begin
  assert(value is TFhirStatisticModelCharacteristicVariable);
  FhirStatisticModelCharacteristicVariables[index] := value;
end;

procedure TFhirStatisticModelCharacteristicVariableList.SetItemN(index: Integer; value: TFhirStatisticModelCharacteristicVariable);
begin
  assert(value is TFhirStatisticModelCharacteristicVariable);
  ObjectByIndex[index] := value;
end;

{ TFhirStatistic }

constructor TFhirStatistic.Create;
begin
  inherited;
end;

destructor TFhirStatistic.Destroy;
begin
  FDescription.free;
  FNoteList.Free;
  FStatisticType.free;
  FQuantity.free;
  FNumberOfEvents.free;
  FSampleSize.free;
  FAttributeEstimateList.Free;
  FModelCharacteristicList.Free;
  inherited;
end;

procedure TFhirStatistic.Assign(oSource : TFslObject);
begin
  inherited;
  descriptionElement := TFhirStatistic(oSource).descriptionElement.Clone;
  if (TFhirStatistic(oSource).FNoteList = nil) then
  begin
    FNoteList.free;
    FNoteList := nil;
  end
  else
  begin
    if FNoteList = nil then
      FNoteList := TFhirAnnotationList.Create;
    FNoteList.Assign(TFhirStatistic(oSource).FNoteList);
  end;
  statisticType := TFhirStatistic(oSource).statisticType.Clone;
  quantity := TFhirStatistic(oSource).quantity.Clone;
  numberOfEventsElement := TFhirStatistic(oSource).numberOfEventsElement.Clone;
  sampleSize := TFhirStatistic(oSource).sampleSize.Clone;
  if (TFhirStatistic(oSource).FAttributeEstimateList = nil) then
  begin
    FAttributeEstimateList.free;
    FAttributeEstimateList := nil;
  end
  else
  begin
    if FAttributeEstimateList = nil then
      FAttributeEstimateList := TFhirStatisticAttributeEstimateList.Create;
    FAttributeEstimateList.Assign(TFhirStatistic(oSource).FAttributeEstimateList);
  end;
  if (TFhirStatistic(oSource).FModelCharacteristicList = nil) then
  begin
    FModelCharacteristicList.free;
    FModelCharacteristicList := nil;
  end
  else
  begin
    if FModelCharacteristicList = nil then
      FModelCharacteristicList := TFhirStatisticModelCharacteristicList.Create;
    FModelCharacteristicList.Assign(TFhirStatistic(oSource).FModelCharacteristicList);
  end;
end;

procedure TFhirStatistic.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'description') Then
     list.add(self.link, 'description', FDescription.Link);
  if (child_name = 'note') Then
    list.addAll(self, 'note', FNoteList);
  if (child_name = 'statisticType') Then
     list.add(self.link, 'statisticType', FStatisticType.Link);
  if (child_name = 'quantity') Then
     list.add(self.link, 'quantity', FQuantity.Link);
  if (child_name = 'numberOfEvents') Then
     list.add(self.link, 'numberOfEvents', FNumberOfEvents.Link);
  if (child_name = 'sampleSize') Then
     list.add(self.link, 'sampleSize', FSampleSize.Link);
  if (child_name = 'attributeEstimate') Then
    list.addAll(self, 'attributeEstimate', FAttributeEstimateList);
  if (child_name = 'modelCharacteristic') Then
    list.addAll(self, 'modelCharacteristic', FModelCharacteristicList);
end;

procedure TFhirStatistic.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'description', 'string', false, TFhirString, FDescription.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'note', 'Annotation', true, TFhirAnnotation, FNoteList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'statisticType', 'CodeableConcept', false, TFhirCodeableConcept, FStatisticType.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'quantity', 'Quantity', false, TFhirQuantity, FQuantity.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'numberOfEvents', 'integer', false, TFhirInteger, FNumberOfEvents.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'sampleSize', 'Element', false, TFhirStatisticSampleSize, FSampleSize.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'attributeEstimate', 'Element', true, TFhirStatisticAttributeEstimate, FAttributeEstimateList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'modelCharacteristic', 'Element', true, TFhirStatisticModelCharacteristic, FModelCharacteristicList.Link)) {L1039};
end;

function TFhirStatistic.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'description') then
  begin
    DescriptionElement := asString(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'note') then
  begin
    NoteList.add(propValue as TFhirAnnotation) {L1048};
    result := propValue;
  end
  else if (propName = 'statisticType') then
  begin
    StatisticType := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else if (propName = 'quantity') then
  begin
    Quantity := propValue as TFhirQuantity {L1199};
    result := propValue;
  end
  else if (propName = 'numberOfEvents') then
  begin
    NumberOfEventsElement := asInteger(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'sampleSize') then
  begin
    SampleSize := propValue as TFhirStatisticSampleSize {L1199};
    result := propValue;
  end
  else if (propName = 'attributeEstimate') then
  begin
    AttributeEstimateList.add(propValue as TFhirStatisticAttributeEstimate) {L1048};
    result := propValue;
  end
  else if (propName = 'modelCharacteristic') then
  begin
    ModelCharacteristicList.add(propValue as TFhirStatisticModelCharacteristic) {L1048};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirStatistic.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'note') then NoteList.insertItem(index, propValue as TFhirAnnotation) {L1049}
  else if (propName = 'attributeEstimate') then AttributeEstimateList.insertItem(index, propValue as TFhirStatisticAttributeEstimate) {L1049}
  else if (propName = 'modelCharacteristic') then ModelCharacteristicList.insertItem(index, propValue as TFhirStatisticModelCharacteristic) {L1049}
  else inherited;
end;

function TFhirStatistic.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'description') then result := TFhirString.create() {L1223}
  else if (propName = 'note') then result := NoteList.new() {L1053}
  else if (propName = 'statisticType') then result := TFhirCodeableConcept.create() {L1203}
  else if (propName = 'quantity') then result := TFhirQuantity.create() {L1203}
  else if (propName = 'numberOfEvents') then result := TFhirInteger.create() {L1223}
  else if (propName = 'sampleSize') then result := TFhirStatisticSampleSize.create() {L1203}
  else if (propName = 'attributeEstimate') then result := AttributeEstimateList.new() {L1053}
  else if (propName = 'modelCharacteristic') then result := ModelCharacteristicList.new() {L1053}
  else result := inherited createPropertyValue(propName);
end;

function TFhirStatistic.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'description') then result := 'string'
  else if (propName = 'note') then result := 'Annotation'
  else if (propName = 'statisticType') then result := 'CodeableConcept'
  else if (propName = 'quantity') then result := 'Quantity'
  else if (propName = 'numberOfEvents') then result := 'integer'
  else if (propName = 'sampleSize') then result := 'Element'
  else if (propName = 'attributeEstimate') then result := 'Element'
  else if (propName = 'modelCharacteristic') then result := 'Element'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirStatistic.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := nil
  else if (propName = 'note') then deletePropertyValue('note', NoteList, value) {L1054}
  else if (propName = 'statisticType') then StatisticTypeElement := nil
  else if (propName = 'quantity') then QuantityElement := nil
  else if (propName = 'numberOfEvents') then NumberOfEventsElement := nil
  else if (propName = 'sampleSize') then SampleSizeElement := nil
  else if (propName = 'attributeEstimate') then deletePropertyValue('attributeEstimate', AttributeEstimateList, value) {L1054}
  else if (propName = 'modelCharacteristic') then deletePropertyValue('modelCharacteristic', ModelCharacteristicList, value) {L1054}
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirStatistic.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'description') then DescriptionElement := asString(new) {L1222}
  else if (propName = 'note') then replacePropertyValue('note', NoteList, existing, new) {L1055}
  else if (propName = 'statisticType') then StatisticTypeElement := new as TFhirCodeableConcept {L1195}
  else if (propName = 'quantity') then QuantityElement := new as TFhirQuantity {L1195}
  else if (propName = 'numberOfEvents') then NumberOfEventsElement := asInteger(new) {L1222}
  else if (propName = 'sampleSize') then SampleSizeElement := new as TFhirStatisticSampleSize {L1195}
  else if (propName = 'attributeEstimate') then replacePropertyValue('attributeEstimate', AttributeEstimateList, existing, new) {L1055}
  else if (propName = 'modelCharacteristic') then replacePropertyValue('modelCharacteristic', ModelCharacteristicList, existing, new) {L1055}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirStatistic.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'note') then NoteList.move(source, destination) {L1050}
  else if (propName = 'attributeEstimate') then AttributeEstimateList.move(source, destination) {L1050}
  else if (propName = 'modelCharacteristic') then ModelCharacteristicList.move(source, destination) {L1050}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirStatistic.fhirType : string;
begin
  result := 'Statistic';
end;

function TFhirStatistic.Link : TFhirStatistic;
begin
  result := TFhirStatistic(inherited Link);
end;

function TFhirStatistic.Clone : TFhirStatistic;
begin
  result := TFhirStatistic(inherited Clone);
end;

function TFhirStatistic.equals(other : TObject) : boolean; 
var
  o : TFhirStatistic;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirStatistic)) then
    result := false
  else
  begin
    o := TFhirStatistic(other);
    result := compareDeep(descriptionElement, o.descriptionElement, true) and compareDeep(noteList, o.noteList, true) and 
      compareDeep(statisticTypeElement, o.statisticTypeElement, true) and compareDeep(quantityElement, o.quantityElement, true) and 
      compareDeep(numberOfEventsElement, o.numberOfEventsElement, true) and compareDeep(sampleSizeElement, o.sampleSizeElement, true) and 
      compareDeep(attributeEstimateList, o.attributeEstimateList, true) and compareDeep(modelCharacteristicList, o.modelCharacteristicList, true);
  end;
end;

function TFhirStatistic.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FDescription) and isEmptyProp(FnoteList) and isEmptyProp(FStatisticType) and isEmptyProp(FQuantity) and isEmptyProp(FNumberOfEvents) and isEmptyProp(FSampleSize) and isEmptyProp(FattributeEstimateList) and isEmptyProp(FmodelCharacteristicList);
end;

procedure TFhirStatistic.SetDescription(value : TFhirString);
begin
  FDescription.free;
  FDescription := value; {L1134}
end;

function TFhirStatistic.GetDescriptionST : String;
begin
  if FDescription = nil then
    result := ''
  else
    result := FDescription.value;
end;

procedure TFhirStatistic.SetDescriptionST(value : String);
begin
  if value <> '' then
  begin
    if FDescription = nil then
      FDescription := TFhirString.create;
    FDescription.value := value
  end
  else if FDescription <> nil then
    FDescription.value := '';
end;

function TFhirStatistic.GetNoteList : TFhirAnnotationList;
begin
  if FNoteList = nil then
    FNoteList := TFhirAnnotationList.Create;
  result := FNoteList;
end;

function TFhirStatistic.GetHasNoteList : boolean;
begin
  result := (FNoteList <> nil) and (FNoteList.count > 0);
end;

procedure TFhirStatistic.SetStatisticType(value : TFhirCodeableConcept);
begin
  FStatisticType.free;
  FStatisticType := value; {L1134}
end;

procedure TFhirStatistic.SetQuantity(value : TFhirQuantity);
begin
  FQuantity.free;
  FQuantity := value; {L1134}
end;

procedure TFhirStatistic.SetNumberOfEvents(value : TFhirInteger);
begin
  FNumberOfEvents.free;
  FNumberOfEvents := value; {L1134}
end;

function TFhirStatistic.GetNumberOfEventsST : String;
begin
  if FNumberOfEvents = nil then
    result := ''
  else
    result := FNumberOfEvents.value;
end;

procedure TFhirStatistic.SetNumberOfEventsST(value : String);
begin
  if value <> '' then
  begin
    if FNumberOfEvents = nil then
      FNumberOfEvents := TFhirInteger.create;
    FNumberOfEvents.value := value
  end
  else if FNumberOfEvents <> nil then
    FNumberOfEvents.value := '';
end;

procedure TFhirStatistic.SetSampleSize(value : TFhirStatisticSampleSize);
begin
  FSampleSize.free;
  FSampleSize := value; {L1134}
end;

function TFhirStatistic.GetAttributeEstimateList : TFhirStatisticAttributeEstimateList;
begin
  if FAttributeEstimateList = nil then
    FAttributeEstimateList := TFhirStatisticAttributeEstimateList.Create;
  result := FAttributeEstimateList;
end;

function TFhirStatistic.GetHasAttributeEstimateList : boolean;
begin
  result := (FAttributeEstimateList <> nil) and (FAttributeEstimateList.count > 0);
end;

function TFhirStatistic.GetModelCharacteristicList : TFhirStatisticModelCharacteristicList;
begin
  if FModelCharacteristicList = nil then
    FModelCharacteristicList := TFhirStatisticModelCharacteristicList.Create;
  result := FModelCharacteristicList;
end;

function TFhirStatistic.GetHasModelCharacteristicList : boolean;
begin
  result := (FModelCharacteristicList <> nil) and (FModelCharacteristicList.count > 0);
end;

procedure TFhirStatistic.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('description');
  fields.add('note');
  fields.add('statisticType');
  fields.add('quantity');
  fields.add('numberOfEvents');
  fields.add('sampleSize');
  fields.add('attributeEstimate');
  fields.add('modelCharacteristic');
end;

function TFhirStatistic.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FDescription.sizeInBytes);
  inc(result, FnoteList.sizeInBytes);
  inc(result, FStatisticType.sizeInBytes);
  inc(result, FQuantity.sizeInBytes);
  inc(result, FNumberOfEvents.sizeInBytes);
  inc(result, FSampleSize.sizeInBytes);
  inc(result, FattributeEstimateList.sizeInBytes);
  inc(result, FmodelCharacteristicList.sizeInBytes);
end;

{ TFhirStatisticListEnumerator }

constructor TFhirStatisticListEnumerator.Create(list : TFhirStatisticList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirStatisticListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirStatisticListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirStatisticListEnumerator.GetCurrent : TFhirStatistic;
begin
  Result := FList[FIndex];
end;

function TFhirStatisticListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirStatisticList }

procedure TFhirStatisticList.AddItem(value: TFhirStatistic);
begin
  assert(value.ClassName = 'TFhirStatistic', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirStatistic');
  add(value);
end;

function TFhirStatisticList.Append: TFhirStatistic;
begin
  result := TFhirStatistic.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticList.ClearItems;
begin
  Clear;
end;

function TFhirStatisticList.GetEnumerator : TFhirStatisticListEnumerator;
begin
  result := TFhirStatisticListEnumerator.Create(self.link);
end;

function TFhirStatisticList.Clone: TFhirStatisticList;
begin
  result := TFhirStatisticList(inherited Clone);
end;

function TFhirStatisticList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirStatisticList.GetItemN(index: Integer): TFhirStatistic;
begin
  result := TFhirStatistic(ObjectByIndex[index]);
end;

function TFhirStatisticList.ItemClass: TFslObjectClass;
begin
  result := TFhirStatistic;
end;
function TFhirStatisticList.IndexOf(value: TFhirStatistic): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirStatisticList.Insert(index: Integer): TFhirStatistic;
begin
  result := TFhirStatistic.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirStatisticList.InsertItem(index: Integer; value: TFhirStatistic);
begin
  assert(value is TFhirStatistic);
  Inherited Insert(index, value);
end;

function TFhirStatisticList.Item(index: Integer): TFhirStatistic;
begin
  result := TFhirStatistic(ObjectByIndex[index]);
end;

function TFhirStatisticList.Link: TFhirStatisticList;
begin
  result := TFhirStatisticList(inherited Link);
end;

procedure TFhirStatisticList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirStatisticList.SetItemByIndex(index: Integer; value: TFhirStatistic);
begin
  assert(value is TFhirStatistic);
  FhirStatistics[index] := value;
end;

procedure TFhirStatisticList.SetItemN(index: Integer; value: TFhirStatistic);
begin
  assert(value is TFhirStatistic);
  ObjectByIndex[index] := value;
end;

{ TFhirTimingRepeat }

constructor TFhirTimingRepeat.Create;
begin
  inherited;
end;

destructor TFhirTimingRepeat.Destroy;
begin
  FBounds.free;
  FCount.free;
  FCountMax.free;
  FDuration.free;
  FDurationMax.free;
  FDurationUnit.free;
  FFrequency.free;
  FFrequencyMax.free;
  FPeriod.free;
  FPeriodMax.free;
  FPeriodUnit.free;
  FDayOfWeek.Free;
  FTimeOfDayList.Free;
  FWhen.Free;
  FOffset.free;
  inherited;
end;

procedure TFhirTimingRepeat.Assign(oSource : TFslObject);
begin
  inherited;
  bounds := TFhirTimingRepeat(oSource).bounds.Clone;
  countElement := TFhirTimingRepeat(oSource).countElement.Clone;
  countMaxElement := TFhirTimingRepeat(oSource).countMaxElement.Clone;
  durationElement := TFhirTimingRepeat(oSource).durationElement.Clone;
  durationMaxElement := TFhirTimingRepeat(oSource).durationMaxElement.Clone;
  durationUnitElement := TFhirTimingRepeat(oSource).durationUnitElement.Clone;
  frequencyElement := TFhirTimingRepeat(oSource).frequencyElement.Clone;
  frequencyMaxElement := TFhirTimingRepeat(oSource).frequencyMaxElement.Clone;
  periodElement := TFhirTimingRepeat(oSource).periodElement.Clone;
  periodMaxElement := TFhirTimingRepeat(oSource).periodMaxElement.Clone;
  periodUnitElement := TFhirTimingRepeat(oSource).periodUnitElement.Clone;
  if (TFhirTimingRepeat(oSource).FDayOfWeek = nil) then
  begin
    FDayOfWeek.free;
    FDayOfWeek := nil;
  end
  else
  begin
    FDayOfWeek := TFhirEnumList.Create(SYSTEMS_TFhirDaysOfWeekEnum, CODES_TFhirDaysOfWeekEnum);
    FDayOfWeek.Assign(TFhirTimingRepeat(oSource).FDayOfWeek);
  end;
  if (TFhirTimingRepeat(oSource).FTimeOfDayList = nil) then
  begin
    FTimeOfDayList.free;
    FTimeOfDayList := nil;
  end
  else
  begin
    if FTimeOfDayList = nil then
      FTimeOfDayList := TFhirTimeList.Create;
    FTimeOfDayList.Assign(TFhirTimingRepeat(oSource).FTimeOfDayList);
  end;
  if (TFhirTimingRepeat(oSource).FWhen = nil) then
  begin
    FWhen.free;
    FWhen := nil;
  end
  else
  begin
    FWhen := TFhirEnumList.Create(SYSTEMS_TFhirEventTimingEnum, CODES_TFhirEventTimingEnum);
    FWhen.Assign(TFhirTimingRepeat(oSource).FWhen);
  end;
  offsetElement := TFhirTimingRepeat(oSource).offsetElement.Clone;
end;

procedure TFhirTimingRepeat.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'bounds[x]') or (child_name = 'bounds') Then
     list.add(self.link, 'bounds[x]', FBounds.Link);
  if (child_name = 'count') Then
     list.add(self.link, 'count', FCount.Link);
  if (child_name = 'countMax') Then
     list.add(self.link, 'countMax', FCountMax.Link);
  if (child_name = 'duration') Then
     list.add(self.link, 'duration', FDuration.Link);
  if (child_name = 'durationMax') Then
     list.add(self.link, 'durationMax', FDurationMax.Link);
  if (child_name = 'durationUnit') Then
     list.add(self.link, 'durationUnit', FDurationUnit.Link);
  if (child_name = 'frequency') Then
     list.add(self.link, 'frequency', FFrequency.Link);
  if (child_name = 'frequencyMax') Then
     list.add(self.link, 'frequencyMax', FFrequencyMax.Link);
  if (child_name = 'period') Then
     list.add(self.link, 'period', FPeriod.Link);
  if (child_name = 'periodMax') Then
     list.add(self.link, 'periodMax', FPeriodMax.Link);
  if (child_name = 'periodUnit') Then
     list.add(self.link, 'periodUnit', FPeriodUnit.Link);
  if (child_name = 'dayOfWeek') Then
     list.addAll(self, 'dayOfWeek', FDayOfWeek);
  if (child_name = 'timeOfDay') Then
    list.addAll(self, 'timeOfDay', FTimeOfDayList);
  if (child_name = 'when') Then
     list.addAll(self, 'when', FWhen);
  if (child_name = 'offset') Then
     list.add(self.link, 'offset', FOffset.Link);
end;

procedure TFhirTimingRepeat.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'bounds[x]', 'Duration|Range|Period', false, TFhirDataType, FBounds.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'count', 'positiveInt', false, TFhirPositiveInt, FCount.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'countMax', 'positiveInt', false, TFhirPositiveInt, FCountMax.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'duration', 'decimal', false, TFhirDecimal, FDuration.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'durationMax', 'decimal', false, TFhirDecimal, FDurationMax.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'durationUnit', 'code', false, TFhirEnum, FDurationUnit.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'frequency', 'positiveInt', false, TFhirPositiveInt, FFrequency.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'frequencyMax', 'positiveInt', false, TFhirPositiveInt, FFrequencyMax.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'period', 'decimal', false, TFhirDecimal, FPeriod.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'periodMax', 'decimal', false, TFhirDecimal, FPeriodMax.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'periodUnit', 'code', false, TFhirEnum, FPeriodUnit.Link)); {L1170}
  oList.add(TFHIRProperty.create(self, 'dayOfWeek', 'code', true, TFhirEnum, FDayOfWeek.Link)) {L990};
  oList.add(TFHIRProperty.create(self, 'timeOfDay', 'time', true, TFhirTime, FTimeOfDayList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'when', 'code', true, TFhirEnum, FWhen.Link)) {L990};
  oList.add(TFHIRProperty.create(self, 'offset', 'unsignedInt', false, TFhirUnsignedInt, FOffset.Link)); {L1172}
end;

function TFhirTimingRepeat.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (isMatchingName(propName, 'bounds', ['Duration', 'Range', 'Period'])) then
  begin
    Bounds := propValue as TFhirDataType {L1185};
    result := propValue;
  end
  else if (propName = 'count') then
  begin
    CountElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'countMax') then
  begin
    CountMaxElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'duration') then
  begin
    DurationElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'durationMax') then
  begin
    DurationMaxElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'durationUnit') then
  begin
    DurationUnitElement := asEnum(SYSTEMS_TFhirUnitsOfTimeEnum, CODES_TFhirUnitsOfTimeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'frequency') then
  begin
    FrequencyElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'frequencyMax') then
  begin
    FrequencyMaxElement := asPositiveInt(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'period') then
  begin
    PeriodElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'periodMax') then
  begin
    PeriodMaxElement := asDecimal(propValue) {L1221};
    result := propValue;
  end
  else if (propName = 'periodUnit') then
  begin
    PeriodUnitElement := asEnum(SYSTEMS_TFhirUnitsOfTimeEnum, CODES_TFhirUnitsOfTimeEnum, propValue) {L1209};
    result := propValue;
  end
  else if (propName = 'dayOfWeek') then
  begin
    DayOfWeekList.add(asEnum(SYSTEMS_TFhirDaysOfWeekEnum, CODES_TFhirDaysOfWeekEnum, propValue)); {L994}
    result := propValue;
  end
  else if (propName = 'timeOfDay') then
  begin
    TimeOfDayList.add(asTime(propValue)){2};     result := propValue;

  end
  else if (propName = 'when') then
  begin
    WhenList.add(asEnum(SYSTEMS_TFhirEventTimingEnum, CODES_TFhirEventTimingEnum, propValue)); {L994}
    result := propValue;
  end
  else if (propName = 'offset') then
  begin
    OffsetElement := asUnsignedInt(propValue) {L1221};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirTimingRepeat.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'dayOfWeek') then FDayOfWeek.insertItem(index, asEnum(SYSTEMS_TFhirDaysOfWeekEnum, CODES_TFhirDaysOfWeekEnum, propValue)) {L995}
  else if (propName = 'timeOfDay') then TimeOfDayList.insertItem(index, asTime(propValue)) {L1045}
  else if (propName = 'when') then FWhen.insertItem(index, asEnum(SYSTEMS_TFhirEventTimingEnum, CODES_TFhirEventTimingEnum, propValue)) {L995}
  else inherited;
end;

function TFhirTimingRepeat.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (isMatchingName(propName, 'bounds', ['Duration', 'Range', 'Period'])) then raise EFHIRException.create('Cannot make property Bounds') {L1191}
  else if (propName = 'count') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'countMax') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'duration') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'durationMax') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'durationUnit') then result := TFhirEnum.create(SYSTEMS_TFhirUnitsOfTimeEnum[UnitsOfTimeNull], CODES_TFhirUnitsOfTimeEnum[UnitsOfTimeNull])  {L1211}
  else if (propName = 'frequency') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'frequencyMax') then result := TFhirPositiveInt.create() {L1223}
  else if (propName = 'period') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'periodMax') then result := TFhirDecimal.create() {L1223}
  else if (propName = 'periodUnit') then result := TFhirEnum.create(SYSTEMS_TFhirUnitsOfTimeEnum[UnitsOfTimeNull], CODES_TFhirUnitsOfTimeEnum[UnitsOfTimeNull])  {L1211}
  else if (propName = 'timeOfDay') then result := TimeOfDayList.new() {L1053}
  else if (propName = 'offset') then result := TFhirUnsignedInt.create() {L1223}
  else result := inherited createPropertyValue(propName);
end;

function TFhirTimingRepeat.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'bounds[x]') then result := 'Duration|Range|Period'
  else if (propName = 'count') then result := 'positiveInt'
  else if (propName = 'countMax') then result := 'positiveInt'
  else if (propName = 'duration') then result := 'decimal'
  else if (propName = 'durationMax') then result := 'decimal'
  else if (propName = 'durationUnit') then result := 'code'
  else if (propName = 'frequency') then result := 'positiveInt'
  else if (propName = 'frequencyMax') then result := 'positiveInt'
  else if (propName = 'period') then result := 'decimal'
  else if (propName = 'periodMax') then result := 'decimal'
  else if (propName = 'periodUnit') then result := 'code'
  else if (propName = 'dayOfWeek') then result := 'code'
  else if (propName = 'timeOfDay') then result := 'time'
  else if (propName = 'when') then result := 'code'
  else if (propName = 'offset') then result := 'unsignedInt'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirTimingRepeat.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (isMatchingName(propName, 'bounds', ['Duration', 'Range', 'Period'])) then BoundsElement := nil {L1189}
  else if (propName = 'count') then CountElement := nil
  else if (propName = 'countMax') then CountMaxElement := nil
  else if (propName = 'duration') then DurationElement := nil
  else if (propName = 'durationMax') then DurationMaxElement := nil
  else if (propName = 'durationUnit') then DurationUnitElement := nil
  else if (propName = 'frequency') then FrequencyElement := nil
  else if (propName = 'frequencyMax') then FrequencyMaxElement := nil
  else if (propName = 'period') then PeriodElement := nil
  else if (propName = 'periodMax') then PeriodMaxElement := nil
  else if (propName = 'periodUnit') then PeriodUnitElement := nil
  else if (propName = 'timeOfDay') then deletePropertyValue('timeOfDay', TimeOfDayList, value) {L1054}
  else if (propName = 'offset') then OffsetElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirTimingRepeat.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (isMatchingName(propName, 'bounds', ['Duration', 'Range', 'Period'])) then BoundsElement := new as TFhirDataType {L1190}
  else if (propName = 'count') then CountElement := asPositiveInt(new) {L1222}
  else if (propName = 'countMax') then CountMaxElement := asPositiveInt(new) {L1222}
  else if (propName = 'duration') then DurationElement := asDecimal(new) {L1222}
  else if (propName = 'durationMax') then DurationMaxElement := asDecimal(new) {L1222}
  else if (propName = 'durationUnit') then DurationUnitElement := asEnum(SYSTEMS_TFhirUnitsOfTimeEnum, CODES_TFhirUnitsOfTimeEnum, new) {L1210}
  else if (propName = 'frequency') then FrequencyElement := asPositiveInt(new) {L1222}
  else if (propName = 'frequencyMax') then FrequencyMaxElement := asPositiveInt(new) {L1222}
  else if (propName = 'period') then PeriodElement := asDecimal(new) {L1222}
  else if (propName = 'periodMax') then PeriodMaxElement := asDecimal(new) {L1222}
  else if (propName = 'periodUnit') then PeriodUnitElement := asEnum(SYSTEMS_TFhirUnitsOfTimeEnum, CODES_TFhirUnitsOfTimeEnum, new) {L1210}
  else if (propName = 'timeOfDay') then replacePropertyValue('timeOfDay', TimeOfDayList, existing, new) {L1055}
  else if (propName = 'offset') then OffsetElement := asUnsignedInt(new) {L1222}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirTimingRepeat.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'dayOfWeek') then FDayOfWeek.move(source, destination) {L996}
  else if (propName = 'timeOfDay') then TimeOfDayList.move(source, destination) {L1046}
  else if (propName = 'when') then FWhen.move(source, destination) {L996}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirTimingRepeat.fhirType : string;
begin
  result := 'Timing.repeat';
end;

function TFhirTimingRepeat.Link : TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat(inherited Link);
end;

function TFhirTimingRepeat.Clone : TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat(inherited Clone);
end;

function TFhirTimingRepeat.equals(other : TObject) : boolean; 
var
  o : TFhirTimingRepeat;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirTimingRepeat)) then
    result := false
  else
  begin
    o := TFhirTimingRepeat(other);
    result := compareDeep(boundsElement, o.boundsElement, true) and compareDeep(countElement, o.countElement, true) and 
      compareDeep(countMaxElement, o.countMaxElement, true) and compareDeep(durationElement, o.durationElement, true) and 
      compareDeep(durationMaxElement, o.durationMaxElement, true) and compareDeep(durationUnitElement, o.durationUnitElement, true) and 
      compareDeep(frequencyElement, o.frequencyElement, true) and compareDeep(frequencyMaxElement, o.frequencyMaxElement, true) and 
      compareDeep(periodElement, o.periodElement, true) and compareDeep(periodMaxElement, o.periodMaxElement, true) and 
      compareDeep(periodUnitElement, o.periodUnitElement, true) and compareDeep(dayOfWeekList, o.dayOfWeekList, true) and 
      compareDeep(timeOfDayList, o.timeOfDayList, true) and compareDeep(whenList, o.whenList, true) and 
      compareDeep(offsetElement, o.offsetElement, true);
  end;
end;

function TFhirTimingRepeat.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FBounds) and isEmptyProp(FCount) and isEmptyProp(FCountMax) and isEmptyProp(FDuration) and isEmptyProp(FDurationMax) and isEmptyProp(FDurationUnit) and isEmptyProp(FFrequency) and isEmptyProp(FFrequencyMax) and isEmptyProp(FPeriod) and isEmptyProp(FPeriodMax) and isEmptyProp(FPeriodUnit) and isEmptyProp(FDayOfWeek) and isEmptyProp(FtimeOfDayList) and isEmptyProp(FWhen) and isEmptyProp(FOffset);
end;

procedure TFhirTimingRepeat.SetBounds(value : TFhirDataType);
begin
  FBounds.free;
  FBounds := value; {L1134}
end;

procedure TFhirTimingRepeat.SetCount(value : TFhirPositiveInt);
begin
  FCount.free;
  FCount := value; {L1134}
end;

function TFhirTimingRepeat.GetCountST : String;
begin
  if FCount = nil then
    result := ''
  else
    result := FCount.value;
end;

procedure TFhirTimingRepeat.SetCountST(value : String);
begin
  if value <> '' then
  begin
    if FCount = nil then
      FCount := TFhirPositiveInt.create;
    FCount.value := value
  end
  else if FCount <> nil then
    FCount.value := '';
end;

procedure TFhirTimingRepeat.SetCountMax(value : TFhirPositiveInt);
begin
  FCountMax.free;
  FCountMax := value; {L1134}
end;

function TFhirTimingRepeat.GetCountMaxST : String;
begin
  if FCountMax = nil then
    result := ''
  else
    result := FCountMax.value;
end;

procedure TFhirTimingRepeat.SetCountMaxST(value : String);
begin
  if value <> '' then
  begin
    if FCountMax = nil then
      FCountMax := TFhirPositiveInt.create;
    FCountMax.value := value
  end
  else if FCountMax <> nil then
    FCountMax.value := '';
end;

procedure TFhirTimingRepeat.SetDuration(value : TFhirDecimal);
begin
  FDuration.free;
  FDuration := value; {L1134}
end;

function TFhirTimingRepeat.GetDurationST : String;
begin
  if FDuration = nil then
    result := ''
  else
    result := FDuration.value;
end;

procedure TFhirTimingRepeat.SetDurationST(value : String);
begin
  if value <> '' then
  begin
    if FDuration = nil then
      FDuration := TFhirDecimal.create;
    FDuration.value := value
  end
  else if FDuration <> nil then
    FDuration.value := '';
end;

procedure TFhirTimingRepeat.SetDurationMax(value : TFhirDecimal);
begin
  FDurationMax.free;
  FDurationMax := value; {L1134}
end;

function TFhirTimingRepeat.GetDurationMaxST : String;
begin
  if FDurationMax = nil then
    result := ''
  else
    result := FDurationMax.value;
end;

procedure TFhirTimingRepeat.SetDurationMaxST(value : String);
begin
  if value <> '' then
  begin
    if FDurationMax = nil then
      FDurationMax := TFhirDecimal.create;
    FDurationMax.value := value
  end
  else if FDurationMax <> nil then
    FDurationMax.value := '';
end;

procedure TFhirTimingRepeat.SetDurationUnit(value : TFhirEnum);
begin
  FDurationUnit.free;
  FDurationUnit := value;
end;

function TFhirTimingRepeat.GetDurationUnitST : TFhirUnitsOfTimeEnum;
begin
  if FDurationUnit = nil then
    result := TFhirUnitsOfTimeEnum(0)
  else
    result := TFhirUnitsOfTimeEnum(StringArrayIndexOfSensitive(CODES_TFhirUnitsOfTimeEnum, FDurationUnit.value));
end;

procedure TFhirTimingRepeat.SetDurationUnitST(value : TFhirUnitsOfTimeEnum);
begin
  if ord(value) = 0 then
    DurationUnitElement := nil
  else
    DurationUnitElement := TFhirEnum.create(SYSTEMS_TFhirUnitsOfTimeEnum[value], CODES_TFhirUnitsOfTimeEnum[value]);
end;

procedure TFhirTimingRepeat.SetFrequency(value : TFhirPositiveInt);
begin
  FFrequency.free;
  FFrequency := value; {L1134}
end;

function TFhirTimingRepeat.GetFrequencyST : String;
begin
  if FFrequency = nil then
    result := ''
  else
    result := FFrequency.value;
end;

procedure TFhirTimingRepeat.SetFrequencyST(value : String);
begin
  if value <> '' then
  begin
    if FFrequency = nil then
      FFrequency := TFhirPositiveInt.create;
    FFrequency.value := value
  end
  else if FFrequency <> nil then
    FFrequency.value := '';
end;

procedure TFhirTimingRepeat.SetFrequencyMax(value : TFhirPositiveInt);
begin
  FFrequencyMax.free;
  FFrequencyMax := value; {L1134}
end;

function TFhirTimingRepeat.GetFrequencyMaxST : String;
begin
  if FFrequencyMax = nil then
    result := ''
  else
    result := FFrequencyMax.value;
end;

procedure TFhirTimingRepeat.SetFrequencyMaxST(value : String);
begin
  if value <> '' then
  begin
    if FFrequencyMax = nil then
      FFrequencyMax := TFhirPositiveInt.create;
    FFrequencyMax.value := value
  end
  else if FFrequencyMax <> nil then
    FFrequencyMax.value := '';
end;

procedure TFhirTimingRepeat.SetPeriod(value : TFhirDecimal);
begin
  FPeriod.free;
  FPeriod := value; {L1134}
end;

function TFhirTimingRepeat.GetPeriodST : String;
begin
  if FPeriod = nil then
    result := ''
  else
    result := FPeriod.value;
end;

procedure TFhirTimingRepeat.SetPeriodST(value : String);
begin
  if value <> '' then
  begin
    if FPeriod = nil then
      FPeriod := TFhirDecimal.create;
    FPeriod.value := value
  end
  else if FPeriod <> nil then
    FPeriod.value := '';
end;

procedure TFhirTimingRepeat.SetPeriodMax(value : TFhirDecimal);
begin
  FPeriodMax.free;
  FPeriodMax := value; {L1134}
end;

function TFhirTimingRepeat.GetPeriodMaxST : String;
begin
  if FPeriodMax = nil then
    result := ''
  else
    result := FPeriodMax.value;
end;

procedure TFhirTimingRepeat.SetPeriodMaxST(value : String);
begin
  if value <> '' then
  begin
    if FPeriodMax = nil then
      FPeriodMax := TFhirDecimal.create;
    FPeriodMax.value := value
  end
  else if FPeriodMax <> nil then
    FPeriodMax.value := '';
end;

procedure TFhirTimingRepeat.SetPeriodUnit(value : TFhirEnum);
begin
  FPeriodUnit.free;
  FPeriodUnit := value;
end;

function TFhirTimingRepeat.GetPeriodUnitST : TFhirUnitsOfTimeEnum;
begin
  if FPeriodUnit = nil then
    result := TFhirUnitsOfTimeEnum(0)
  else
    result := TFhirUnitsOfTimeEnum(StringArrayIndexOfSensitive(CODES_TFhirUnitsOfTimeEnum, FPeriodUnit.value));
end;

procedure TFhirTimingRepeat.SetPeriodUnitST(value : TFhirUnitsOfTimeEnum);
begin
  if ord(value) = 0 then
    PeriodUnitElement := nil
  else
    PeriodUnitElement := TFhirEnum.create(SYSTEMS_TFhirUnitsOfTimeEnum[value], CODES_TFhirUnitsOfTimeEnum[value]);
end;

function TFhirTimingRepeat.GetDayOfWeek : TFhirEnumList;
begin
  if FDayOfWeek = nil then
    FDayOfWeek := TFhirEnumList.Create(SYSTEMS_TFhirDaysOfWeekEnum, CODES_TFhirDaysOfWeekEnum);
  result := FDayOfWeek;
end;

function TFhirTimingRepeat.GetHasDayOfWeek : boolean;
begin
  result := (FDayOfWeek <> nil) and (FDayOfWeek.count > 0);
end;

function TFhirTimingRepeat.GetDayOfWeekST : TFhirDaysOfWeekEnumList;
  var i : integer;
begin
  result := [];
  if FdayOfWeek <> nil then
    for i := 0 to FdayOfWeek.count - 1 do
      result := result + [TFhirDaysOfWeekEnum(StringArrayIndexOfSensitive(CODES_TFhirDaysOfWeekEnum, FdayOfWeek[i].value))];
end;

procedure TFhirTimingRepeat.SetDayOfWeekST(value : TFhirDaysOfWeekEnumList);
var a : TFhirDaysOfWeekEnum;
begin
  if FdayOfWeek = nil then
    FdayOfWeek := TFhirEnumList.create(SYSTEMS_TFhirDaysOfWeekEnum, CODES_TFhirDaysOfWeekEnum);
  FdayOfWeek.clear;
  for a := low(TFhirDaysOfWeekEnum) to high(TFhirDaysOfWeekEnum) do
    if a in value then
      begin
         if FdayOfWeek = nil then
           FdayOfWeek := TFhirEnumList.create(SYSTEMS_TFhirDaysOfWeekEnum, CODES_TFhirDaysOfWeekEnum);
         FdayOfWeek.add(TFhirEnum.create(SYSTEMS_TFhirDaysOfWeekEnum[a], CODES_TFhirDaysOfWeekEnum[a]));
      end;
end;

function TFhirTimingRepeat.GetTimeOfDayList : TFhirTimeList;
begin
  if FTimeOfDayList = nil then
    FTimeOfDayList := TFhirTimeList.Create;
  result := FTimeOfDayList;
end;

function TFhirTimingRepeat.GetHasTimeOfDayList : boolean;
begin
  result := (FTimeOfDayList <> nil) and (FTimeOfDayList.count > 0);
end;

function TFhirTimingRepeat.GetWhen : TFhirEnumList;
begin
  if FWhen = nil then
    FWhen := TFhirEnumList.Create(SYSTEMS_TFhirEventTimingEnum, CODES_TFhirEventTimingEnum);
  result := FWhen;
end;

function TFhirTimingRepeat.GetHasWhen : boolean;
begin
  result := (FWhen <> nil) and (FWhen.count > 0);
end;

function TFhirTimingRepeat.GetWhenST : TFhirEventTimingEnumList;
  var i : integer;
begin
  result := [];
  if Fwhen <> nil then
    for i := 0 to Fwhen.count - 1 do
      result := result + [TFhirEventTimingEnum(StringArrayIndexOfSensitive(CODES_TFhirEventTimingEnum, Fwhen[i].value))];
end;

procedure TFhirTimingRepeat.SetWhenST(value : TFhirEventTimingEnumList);
var a : TFhirEventTimingEnum;
begin
  if Fwhen = nil then
    Fwhen := TFhirEnumList.create(SYSTEMS_TFhirEventTimingEnum, CODES_TFhirEventTimingEnum);
  Fwhen.clear;
  for a := low(TFhirEventTimingEnum) to high(TFhirEventTimingEnum) do
    if a in value then
      begin
         if Fwhen = nil then
           Fwhen := TFhirEnumList.create(SYSTEMS_TFhirEventTimingEnum, CODES_TFhirEventTimingEnum);
         Fwhen.add(TFhirEnum.create(SYSTEMS_TFhirEventTimingEnum[a], CODES_TFhirEventTimingEnum[a]));
      end;
end;

procedure TFhirTimingRepeat.SetOffset(value : TFhirUnsignedInt);
begin
  FOffset.free;
  FOffset := value; {L1134}
end;

function TFhirTimingRepeat.GetOffsetST : String;
begin
  if FOffset = nil then
    result := ''
  else
    result := FOffset.value;
end;

procedure TFhirTimingRepeat.SetOffsetST(value : String);
begin
  if value <> '' then
  begin
    if FOffset = nil then
      FOffset := TFhirUnsignedInt.create;
    FOffset.value := value
  end
  else if FOffset <> nil then
    FOffset.value := '';
end;

procedure TFhirTimingRepeat.listFieldsInOrder(fields : TStringList);
begin
  listElementFieldsInOrder(fields);
  fields.add('bounds[x]');
  fields.add('count');
  fields.add('countMax');
  fields.add('duration');
  fields.add('durationMax');
  fields.add('durationUnit');
  fields.add('frequency');
  fields.add('frequencyMax');
  fields.add('period');
  fields.add('periodMax');
  fields.add('periodUnit');
  fields.add('dayOfWeek');
  fields.add('timeOfDay');
  fields.add('when');
  fields.add('offset');
end;

function TFhirTimingRepeat.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FBounds.sizeInBytes);
  inc(result, FCount.sizeInBytes);
  inc(result, FCountMax.sizeInBytes);
  inc(result, FDuration.sizeInBytes);
  inc(result, FDurationMax.sizeInBytes);
  inc(result, FDurationUnit.sizeInBytes);
  inc(result, FFrequency.sizeInBytes);
  inc(result, FFrequencyMax.sizeInBytes);
  inc(result, FPeriod.sizeInBytes);
  inc(result, FPeriodMax.sizeInBytes);
  inc(result, FPeriodUnit.sizeInBytes);
  inc(result, FDayOfWeek.sizeInBytes);
  inc(result, FtimeOfDayList.sizeInBytes);
  inc(result, FWhen.sizeInBytes);
  inc(result, FOffset.sizeInBytes);
end;

{ TFhirTimingRepeatListEnumerator }

constructor TFhirTimingRepeatListEnumerator.Create(list : TFhirTimingRepeatList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirTimingRepeatListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirTimingRepeatListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirTimingRepeatListEnumerator.GetCurrent : TFhirTimingRepeat;
begin
  Result := FList[FIndex];
end;

function TFhirTimingRepeatListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirTimingRepeatList }

procedure TFhirTimingRepeatList.AddItem(value: TFhirTimingRepeat);
begin
  assert(value.ClassName = 'TFhirTimingRepeat', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirTimingRepeat');
  add(value);
end;

function TFhirTimingRepeatList.Append: TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTimingRepeatList.ClearItems;
begin
  Clear;
end;

function TFhirTimingRepeatList.GetEnumerator : TFhirTimingRepeatListEnumerator;
begin
  result := TFhirTimingRepeatListEnumerator.Create(self.link);
end;

function TFhirTimingRepeatList.Clone: TFhirTimingRepeatList;
begin
  result := TFhirTimingRepeatList(inherited Clone);
end;

function TFhirTimingRepeatList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirTimingRepeatList.GetItemN(index: Integer): TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat(ObjectByIndex[index]);
end;

function TFhirTimingRepeatList.ItemClass: TFslObjectClass;
begin
  result := TFhirTimingRepeat;
end;
function TFhirTimingRepeatList.IndexOf(value: TFhirTimingRepeat): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirTimingRepeatList.Insert(index: Integer): TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTimingRepeatList.InsertItem(index: Integer; value: TFhirTimingRepeat);
begin
  assert(value is TFhirTimingRepeat);
  Inherited Insert(index, value);
end;

function TFhirTimingRepeatList.Item(index: Integer): TFhirTimingRepeat;
begin
  result := TFhirTimingRepeat(ObjectByIndex[index]);
end;

function TFhirTimingRepeatList.Link: TFhirTimingRepeatList;
begin
  result := TFhirTimingRepeatList(inherited Link);
end;

procedure TFhirTimingRepeatList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirTimingRepeatList.SetItemByIndex(index: Integer; value: TFhirTimingRepeat);
begin
  assert(value is TFhirTimingRepeat);
  FhirTimingRepeats[index] := value;
end;

procedure TFhirTimingRepeatList.SetItemN(index: Integer; value: TFhirTimingRepeat);
begin
  assert(value is TFhirTimingRepeat);
  ObjectByIndex[index] := value;
end;

{ TFhirTiming }

constructor TFhirTiming.Create;
begin
  inherited;
end;

destructor TFhirTiming.Destroy;
begin
  FEventList.Free;
  FRepeat_.free;
  FCode.free;
  inherited;
end;

procedure TFhirTiming.Assign(oSource : TFslObject);
begin
  inherited;
  if (TFhirTiming(oSource).FEventList = nil) then
  begin
    FEventList.free;
    FEventList := nil;
  end
  else
  begin
    if FEventList = nil then
      FEventList := TFhirDateTimeList.Create;
    FEventList.Assign(TFhirTiming(oSource).FEventList);
  end;
  repeat_ := TFhirTiming(oSource).repeat_.Clone;
  code := TFhirTiming(oSource).code.Clone;
end;

procedure TFhirTiming.GetChildrenByName(child_name : string; list : TFHIRSelectionList);
begin
  inherited;
  if (child_name = 'event') Then
    list.addAll(self, 'event', FEventList);
  if (child_name = 'repeat') Then
     list.add(self.link, 'repeat', FRepeat_.Link);
  if (child_name = 'code') Then
     list.add(self.link, 'code', FCode.Link);
end;

procedure TFhirTiming.ListProperties(oList: TFHIRPropertyList; bInheritedProperties, bPrimitiveValues: Boolean);
begin
  inherited;
  oList.add(TFHIRProperty.create(self, 'event', 'dateTime', true, TFhirDateTime, FEventList.Link)) {L1039};
  oList.add(TFHIRProperty.create(self, 'repeat', 'Element', false, TFhirTimingRepeat, FRepeat_.Link)); {L1172}
  oList.add(TFHIRProperty.create(self, 'code', 'CodeableConcept', false, TFhirCodeableConcept, FCode.Link)); {L1172}
end;

function TFhirTiming.setProperty(propName : string; propValue: TFHIRObject) : TFHIRObject;
begin
  if (propName = 'event') then
  begin
    EventList.add(asDateTime(propValue)){2};     result := propValue;

  end
  else if (propName = 'repeat') then
  begin
    Repeat_ := propValue as TFhirTimingRepeat {L1199};
    result := propValue;
  end
  else if (propName = 'code') then
  begin
    Code := propValue as TFhirCodeableConcept {L1199};
    result := propValue;
  end
  else result := inherited setProperty(propName, propValue);
end;

procedure TFhirTiming.insertProperty(propName: string; propValue: TFHIRObject; index : integer);
begin
  if (propName = 'event') then EventList.insertItem(index, asDateTime(propValue)) {L1045}
  else inherited;
end;

function TFhirTiming.createPropertyValue(propName : string) : TFHIRObject;
begin
  if (propName = 'event') then result := EventList.new() {L1053}
  else if (propName = 'repeat') then result := TFhirTimingRepeat.create() {L1203}
  else if (propName = 'code') then result := TFhirCodeableConcept.create() {L1203}
  else result := inherited createPropertyValue(propName);
end;

function TFhirTiming.getTypesForProperty(propName: string) : String;
begin
  if (propName = 'event') then result := 'dateTime'
  else if (propName = 'repeat') then result := 'Element'
  else if (propName = 'code') then result := 'CodeableConcept'
  else result := inherited getTypesForProperty(propName);
end;

procedure TFhirTiming.deleteProperty(propName: string; value : TFHIRObject);
begin
  if (propName = 'event') then deletePropertyValue('event', EventList, value) {L1054}
  else if (propName = 'repeat') then Repeat_Element := nil
  else if (propName = 'code') then CodeElement := nil
  else
    inherited deleteProperty(propName, value);
end;

procedure TFhirTiming.replaceProperty(propName : string; existing, new : TFHIRObject);
begin
  if (propName = 'event') then replacePropertyValue('event', EventList, existing, new) {L1055}
  else if (propName = 'repeat') then Repeat_Element := new as TFhirTimingRepeat {L1195}
  else if (propName = 'code') then CodeElement := new as TFhirCodeableConcept {L1195}
  else
    inherited replaceProperty(propName, existing, new);
end;

procedure TFhirTiming.reorderProperty(propName : string; source, destination : integer);
begin
  if (propName = 'event') then EventList.move(source, destination) {L1046}
  else
    inherited reorderProperty(propName, source, destination);
end;

function TFhirTiming.fhirType : string;
begin
  result := 'Timing';
end;

function TFhirTiming.Link : TFhirTiming;
begin
  result := TFhirTiming(inherited Link);
end;

function TFhirTiming.Clone : TFhirTiming;
begin
  result := TFhirTiming(inherited Clone);
end;

function TFhirTiming.equals(other : TObject) : boolean; 
var
  o : TFhirTiming;
begin
  if (not inherited equals(other)) then
    result := false
  else if (not (other is TFhirTiming)) then
    result := false
  else
  begin
    o := TFhirTiming(other);
    result := compareDeep(eventList, o.eventList, true) and compareDeep(repeat_Element, o.repeat_Element, true) and 
      compareDeep(codeElement, o.codeElement, true);
  end;
end;

function TFhirTiming.isEmpty : boolean;
begin
  result := inherited isEmpty  and isEmptyProp(FeventList) and isEmptyProp(FRepeat_) and isEmptyProp(FCode);
end;

function TFhirTiming.GetEventList : TFhirDateTimeList;
begin
  if FEventList = nil then
    FEventList := TFhirDateTimeList.Create;
  result := FEventList;
end;

function TFhirTiming.GetHasEventList : boolean;
begin
  result := (FEventList <> nil) and (FEventList.count > 0);
end;

procedure TFhirTiming.SetRepeat_(value : TFhirTimingRepeat);
begin
  FRepeat_.free;
  FRepeat_ := value; {L1134}
end;

procedure TFhirTiming.SetCode(value : TFhirCodeableConcept);
begin
  FCode.free;
  FCode := value; {L1134}
end;

procedure TFhirTiming.listFieldsInOrder(fields : TStringList);
begin
  listBackboneTypeFieldsInOrder(fields);
  fields.add('event');
  fields.add('repeat');
  fields.add('code');
end;

function TFhirTiming.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FeventList.sizeInBytes);
  inc(result, FRepeat_.sizeInBytes);
  inc(result, FCode.sizeInBytes);
end;

{ TFhirTimingListEnumerator }

constructor TFhirTimingListEnumerator.Create(list : TFhirTimingList);
begin
  inherited Create;
  FIndex := -1;
  FList := list;
end;

destructor TFhirTimingListEnumerator.Destroy;
begin
  FList.Free;
  inherited;
end;

function TFhirTimingListEnumerator.MoveNext : boolean;
begin
  inc(FIndex);
  Result := FIndex < FList.count;
end;

function TFhirTimingListEnumerator.GetCurrent : TFhirTiming;
begin
  Result := FList[FIndex];
end;

function TFhirTimingListEnumerator.sizeInBytesV : cardinal;
begin
  result := inherited sizeInBytesV;
  inc(result, FList.sizeInBytes);
end;

{ TFhirTimingList }

procedure TFhirTimingList.AddItem(value: TFhirTiming);
begin
  assert(value.ClassName = 'TFhirTiming', 'Attempt to add an item of type '+value.ClassName+' to a List of TFhirTiming');
  add(value);
end;

function TFhirTimingList.Append: TFhirTiming;
begin
  result := TFhirTiming.create;
  try
    add(result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTimingList.ClearItems;
begin
  Clear;
end;

function TFhirTimingList.GetEnumerator : TFhirTimingListEnumerator;
begin
  result := TFhirTimingListEnumerator.Create(self.link);
end;

function TFhirTimingList.Clone: TFhirTimingList;
begin
  result := TFhirTimingList(inherited Clone);
end;

function TFhirTimingList.Count: Integer;
begin
  result := Inherited Count;
end;

function TFhirTimingList.GetItemN(index: Integer): TFhirTiming;
begin
  result := TFhirTiming(ObjectByIndex[index]);
end;

function TFhirTimingList.ItemClass: TFslObjectClass;
begin
  result := TFhirTiming;
end;
function TFhirTimingList.IndexOf(value: TFhirTiming): Integer;
begin
  result := IndexByReference(value);
end;

function TFhirTimingList.Insert(index: Integer): TFhirTiming;
begin
  result := TFhirTiming.create;
  try
    inherited insert(index, result.Link);
  finally
    result.free;
  end;
end;

procedure TFhirTimingList.InsertItem(index: Integer; value: TFhirTiming);
begin
  assert(value is TFhirTiming);
  Inherited Insert(index, value);
end;

function TFhirTimingList.Item(index: Integer): TFhirTiming;
begin
  result := TFhirTiming(ObjectByIndex[index]);
end;

function TFhirTimingList.Link: TFhirTimingList;
begin
  result := TFhirTimingList(inherited Link);
end;

procedure TFhirTimingList.Remove(index: Integer);
begin
  DeleteByIndex(index);
end;

procedure TFhirTimingList.SetItemByIndex(index: Integer; value: TFhirTiming);
begin
  assert(value is TFhirTiming);
  FhirTimings[index] := value;
end;

procedure TFhirTimingList.SetItemN(index: Integer; value: TFhirTiming);
begin
  assert(value is TFhirTiming);
  ObjectByIndex[index] := value;
end;

function asEnum(systems, values: array of String; obj : TFHIRObject) : TFHIREnum;
begin
  if obj is TFHIREnum then
    result := obj as TFHIREnum
  else if obj is TFHIRCode then
  begin
    result := TFHIREnum.create(systems[StringArrayIndexOf(values, TFHIRCode(obj).value)], TFHIRCode(obj).value);
    obj.Free;
  end
  else if obj is TFHIRString then
  begin
    result := TFHIREnum.create(systems[StringArrayIndexOf(values, TFHIRString(obj).value)], TFHIRString(obj).value);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRCode"')
  end;
end;

function asDate(obj : TFHIRObject) : TFHIRDate;
begin
  if obj is TFHIRDate then
    result := obj as TFHIRDate
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRDate.create(TFslDateTime.fromXml(TFHIRMMElement(obj).value));
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRDate.create(TFslDateTime.fromXml(TFHIRObject(obj).primitiveValue));
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRDate"')
  end;
end;

function asDateTime(obj : TFHIRObject) : TFHIRDateTime;
begin
  if obj is TFHIRDateTime then
    result := obj as TFHIRDateTime
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRDateTime.create(TFslDateTime.fromXml(TFHIRMMElement(obj).value));
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRDateTime.create(TFslDateTime.fromXml(TFHIRObject(obj).primitiveValue));
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRDateTime"')
  end;
end;

function asString(obj : TFHIRObject) : TFHIRString;
begin
  if obj is TFHIRString then
    result := obj as TFHIRString
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRString.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRString.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRString"')
  end;
end;

function asInteger(obj : TFHIRObject) : TFHIRInteger;
begin
  if obj is TFHIRInteger then
    result := obj as TFHIRInteger
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRInteger.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRInteger.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRInteger"')
  end;
end;

function asUri(obj : TFHIRObject) : TFHIRUri;
begin
  if obj is TFHIRUri then
    result := obj as TFHIRUri
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRUri.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRUri.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRUri"')
  end;
end;

function asInstant(obj : TFHIRObject) : TFHIRInstant;
begin
  if obj is TFHIRInstant then
    result := obj as TFHIRInstant
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRInstant.create(TFslDateTime.fromXml(TFHIRMMElement(obj).value));
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRInstant.create(TFslDateTime.fromXml(TFHIRObject(obj).primitiveValue));
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRInstant"')
  end;
end;

function asXhtml(obj : TFHIRObject) : TFHIRXhtml;
begin
  if obj is TFHIRXhtml then
    result := obj as TFHIRXhtml
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRXhtml.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRXhtml.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRXhtml"')
  end;
end;

function asBoolean(obj : TFHIRObject) : TFHIRBoolean;
begin
  if obj is TFHIRBoolean then
    result := obj as TFHIRBoolean
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRBoolean.create(TFHIRMMElement(obj).value = 'true');
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRBoolean.create(TFHIRObject(obj).primitiveValue = 'true');
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRBoolean"')
  end;
end;

function asBase64Binary(obj : TFHIRObject) : TFHIRBase64Binary;
begin
  if obj is TFHIRBase64Binary then
    result := obj as TFHIRBase64Binary
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRBase64Binary.create(DecodeBase64(TFHIRMMElement(obj).value));
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRBase64Binary.create(DecodeBase64(TFHIRObject(obj).primitiveValue));
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRBase64Binary"')
  end;
end;

function asTime(obj : TFHIRObject) : TFHIRTime;
begin
  if obj is TFHIRTime then
    result := obj as TFHIRTime
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRTime.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRTime.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRTime"')
  end;
end;

function asDecimal(obj : TFHIRObject) : TFHIRDecimal;
begin
  if obj is TFHIRDecimal then
    result := obj as TFHIRDecimal
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRDecimal.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRDecimal.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRDecimal"')
  end;
end;

function asCode(obj : TFHIRObject) : TFHIRCode;
begin
  if obj is TFHIRCode then
    result := obj as TFHIRCode
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRCode.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRCode.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRCode"')
  end;
end;

function asCanonical(obj : TFHIRObject) : TFHIRCanonical;
begin
  if obj is TFHIRCanonical then
    result := obj as TFHIRCanonical
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRCanonical.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRCanonical.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRCanonical"')
  end;
end;

function asOid(obj : TFHIRObject) : TFHIROid;
begin
  if obj is TFHIROid then
    result := obj as TFHIROid
  else if obj is TFHIRMMElement then
  begin
    result := TFHIROid.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIROid.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIROid"')
  end;
end;

function asUuid(obj : TFHIRObject) : TFHIRUuid;
begin
  if obj is TFHIRUuid then
    result := obj as TFHIRUuid
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRUuid.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRUuid.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRUuid"')
  end;
end;

function asUrl(obj : TFHIRObject) : TFHIRUrl;
begin
  if obj is TFHIRUrl then
    result := obj as TFHIRUrl
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRUrl.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRUrl.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRUrl"')
  end;
end;

function asMarkdown(obj : TFHIRObject) : TFHIRMarkdown;
begin
  if obj is TFHIRMarkdown then
    result := obj as TFHIRMarkdown
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRMarkdown.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRMarkdown.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRMarkdown"')
  end;
end;

function asUnsignedInt(obj : TFHIRObject) : TFHIRUnsignedInt;
begin
  if obj is TFHIRUnsignedInt then
    result := obj as TFHIRUnsignedInt
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRUnsignedInt.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRUnsignedInt.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRUnsignedInt"')
  end;
end;

function asId(obj : TFHIRObject) : TFHIRId;
begin
  if obj is TFHIRId then
    result := obj as TFHIRId
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRId.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRId.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRId"')
  end;
end;

function asPositiveInt(obj : TFHIRObject) : TFHIRPositiveInt;
begin
  if obj is TFHIRPositiveInt then
    result := obj as TFHIRPositiveInt
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRPositiveInt.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRPositiveInt.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRPositiveInt"')
  end;
end;

function asInteger64(obj : TFHIRObject) : TFHIRInteger64;
begin
  if obj is TFHIRInteger64 then
    result := obj as TFHIRInteger64
  else if obj is TFHIRMMElement then
  begin
    result := TFHIRInteger64.create(TFHIRMMElement(obj).value);
    obj.Free;
  end
  else if (obj is TFHIRObject) and (TFHIRObject(obj).isPrimitive) then
  begin
    result := TFHIRInteger64.create(TFHIRObject(obj).primitiveValue);
    obj.Free;
  end
  else
  begin
    obj.Free;
    raise EFhirException.Create('Type mismatch: cannot convert from "'+obj.className+'" to "TFHIRInteger64"')
  end;
end;

end.

