unit fhir5_xml;

{
  Copyright (c) 2011+, HL7 and Health Intersections Pty Ltd (http://www.healthintersections.com.au)
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
}

{$I fhir.inc}
{$I fhir5.inc}

interface

// Generated on Fri, Aug 21, 2020 11:27+1000 for FHIR v4.5.0

uses
  SysUtils, Classes, 
  fsl_base, fsl_utilities, fsl_collections, fsl_xml,
  fhir_parser, fhir_objects, 
  fhir5_parserBase, fhir5_resources, fhir5_resources_base, fhir5_constants, fhir5_base, fhir5_enums, fhir5_types;

Type

  TFHIRXmlParser = class (TFHIRXmlParserBase5)
  protected
    Procedure ParseBaseAttributes(value : TFhirBase; path : string; element : TMXmlElement); overload;
    Function ParseBaseChild(value : TFhirBase; path : string; child : TMXmlElement) : boolean;  overload;
    Procedure ParseBaseAttributes(value : TFhirResource; path : string; element : TMXmlElement);  overload;
    Function ParseBaseChild(value : TFhirResource; path : string; child : TMXmlElement) : boolean;  overload;

    Procedure ParseElementAttributes(value : TFhirElement; path : string; element : TMXmlElement);
    Function ParseElementChild(value : TFhirElement; path : string; child : TMXmlElement) : boolean;
    Procedure ParseBackboneElementAttributes(value : TFhirBackboneElement; path : string; element : TMXmlElement);
    Function ParseBackboneElementChild(value : TFhirBackboneElement; path : string; child : TMXmlElement) : boolean;
    Procedure ParseDataTypeAttributes(value : TFhirDataType; path : string; element : TMXmlElement);
    Function ParseDataTypeChild(value : TFhirDataType; path : string; child : TMXmlElement) : boolean;
    Procedure ParseBackboneTypeAttributes(value : TFhirBackboneType; path : string; element : TMXmlElement);
    Function ParseBackboneTypeChild(value : TFhirBackboneType; path : string; child : TMXmlElement) : boolean;
    Procedure ParsePrimitiveTypeAttributes(value : TFhirPrimitiveType; path : string; element : TMXmlElement);
    Function ParsePrimitiveTypeChild(value : TFhirPrimitiveType; path : string; child : TMXmlElement) : boolean;

    function ParseEnum(Const aNames, aSystems : Array Of String; element : TMXmlElement; path : String) : TFhirEnum;
    function ParseDate(element : TMXmlElement; path : string) : TFhirDate;
    function ParseDateTime(element : TMXmlElement; path : string) : TFhirDateTime;
    function ParseString(element : TMXmlElement; path : string) : TFhirString;
    function ParseInteger(element : TMXmlElement; path : string) : TFhirInteger;
    function ParseUri(element : TMXmlElement; path : string) : TFhirUri;
    function ParseInstant(element : TMXmlElement; path : string) : TFhirInstant;
    function ParseXhtml(element : TMXmlElement; path : string) : TFhirXhtml;
    function ParseBoolean(element : TMXmlElement; path : string) : TFhirBoolean;
    function ParseBase64Binary(element : TMXmlElement; path : string) : TFhirBase64Binary;
    function ParseTime(element : TMXmlElement; path : string) : TFhirTime;
    function ParseDecimal(element : TMXmlElement; path : string) : TFhirDecimal;
    function ParseCode(element : TMXmlElement; path : string) : TFhirCode;
    function ParseCanonical(element : TMXmlElement; path : string) : TFhirCanonical;
    function ParseOid(element : TMXmlElement; path : string) : TFhirOid;
    function ParseUuid(element : TMXmlElement; path : string) : TFhirUuid;
    function ParseUrl(element : TMXmlElement; path : string) : TFhirUrl;
    function ParseMarkdown(element : TMXmlElement; path : string) : TFhirMarkdown;
    function ParseUnsignedInt(element : TMXmlElement; path : string) : TFhirUnsignedInt;
    function ParseId(element : TMXmlElement; path : string) : TFhirId;
    function ParsePositiveInt(element : TMXmlElement; path : string) : TFhirPositiveInt;
    function ParseInteger64(element : TMXmlElement; path : string) : TFhirInteger64;

    function ParseAddress(element : TMXmlElement; path : string) : TFhirAddress;
    function ParseAddressChild(value : TFhirAddress; path : string; child : TMXmlElement) : boolean;
    function ParseAnnotation(element : TMXmlElement; path : string) : TFhirAnnotation;
    function ParseAnnotationChild(value : TFhirAnnotation; path : string; child : TMXmlElement) : boolean;
    function ParseAttachment(element : TMXmlElement; path : string) : TFhirAttachment;
    function ParseAttachmentChild(value : TFhirAttachment; path : string; child : TMXmlElement) : boolean;
    function ParseCodeableConcept(element : TMXmlElement; path : string) : TFhirCodeableConcept;
    function ParseCodeableConceptChild(value : TFhirCodeableConcept; path : string; child : TMXmlElement) : boolean;
    function ParseCodeableReference(element : TMXmlElement; path : string) : TFhirCodeableReference;
    function ParseCodeableReferenceChild(value : TFhirCodeableReference; path : string; child : TMXmlElement) : boolean;
    function ParseCoding(element : TMXmlElement; path : string) : TFhirCoding;
    function ParseCodingChild(value : TFhirCoding; path : string; child : TMXmlElement) : boolean;
    function ParseContactDetail(element : TMXmlElement; path : string) : TFhirContactDetail;
    function ParseContactDetailChild(value : TFhirContactDetail; path : string; child : TMXmlElement) : boolean;
    function ParseContactPoint(element : TMXmlElement; path : string) : TFhirContactPoint;
    function ParseContactPointChild(value : TFhirContactPoint; path : string; child : TMXmlElement) : boolean;
    function ParseContributor(element : TMXmlElement; path : string) : TFhirContributor;
    function ParseContributorChild(value : TFhirContributor; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirementCodeFilter(element : TMXmlElement; path : string) : TFhirDataRequirementCodeFilter;
    function ParseDataRequirementCodeFilterChild(value : TFhirDataRequirementCodeFilter; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirementDateFilter(element : TMXmlElement; path : string) : TFhirDataRequirementDateFilter;
    function ParseDataRequirementDateFilterChild(value : TFhirDataRequirementDateFilter; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirementSort(element : TMXmlElement; path : string) : TFhirDataRequirementSort;
    function ParseDataRequirementSortChild(value : TFhirDataRequirementSort; path : string; child : TMXmlElement) : boolean;
    function ParseDataRequirement(element : TMXmlElement; path : string) : TFhirDataRequirement;
    function ParseDataRequirementChild(value : TFhirDataRequirement; path : string; child : TMXmlElement) : boolean;
    function ParseExpression(element : TMXmlElement; path : string) : TFhirExpression;
    function ParseExpressionChild(value : TFhirExpression; path : string; child : TMXmlElement) : boolean;
    function ParseExtension(element : TMXmlElement; path : string) : TFhirExtension;
    function ParseExtensionChild(value : TFhirExtension; path : string; child : TMXmlElement) : boolean;
    function ParseHumanName(element : TMXmlElement; path : string) : TFhirHumanName;
    function ParseHumanNameChild(value : TFhirHumanName; path : string; child : TMXmlElement) : boolean;
    function ParseIdentifier(element : TMXmlElement; path : string) : TFhirIdentifier;
    function ParseIdentifierChild(value : TFhirIdentifier; path : string; child : TMXmlElement) : boolean;
    function ParseMeta(element : TMXmlElement; path : string) : TFhirMeta;
    function ParseMetaChild(value : TFhirMeta; path : string; child : TMXmlElement) : boolean;
    function ParseMoney(element : TMXmlElement; path : string) : TFhirMoney;
    function ParseMoneyChild(value : TFhirMoney; path : string; child : TMXmlElement) : boolean;
    function ParseNarrative(element : TMXmlElement; path : string) : TFhirNarrative;
    function ParseNarrativeChild(value : TFhirNarrative; path : string; child : TMXmlElement) : boolean;
    function ParseParameterDefinition(element : TMXmlElement; path : string) : TFhirParameterDefinition;
    function ParseParameterDefinitionChild(value : TFhirParameterDefinition; path : string; child : TMXmlElement) : boolean;
    function ParsePeriod(element : TMXmlElement; path : string) : TFhirPeriod;
    function ParsePeriodChild(value : TFhirPeriod; path : string; child : TMXmlElement) : boolean;
    function ParseQuantity(element : TMXmlElement; path : string) : TFhirQuantity;
    function ParseQuantityChild(value : TFhirQuantity; path : string; child : TMXmlElement) : boolean;
    function ParseRange(element : TMXmlElement; path : string) : TFhirRange;
    function ParseRangeChild(value : TFhirRange; path : string; child : TMXmlElement) : boolean;
    function ParseRatio(element : TMXmlElement; path : string) : TFhirRatio;
    function ParseRatioChild(value : TFhirRatio; path : string; child : TMXmlElement) : boolean;
    function ParseReference(element : TMXmlElement; path : string) : TFhirReference;
    function ParseReferenceChild(value : TFhirReference; path : string; child : TMXmlElement) : boolean;
    function ParseRelatedArtifact(element : TMXmlElement; path : string) : TFhirRelatedArtifact;
    function ParseRelatedArtifactChild(value : TFhirRelatedArtifact; path : string; child : TMXmlElement) : boolean;
    function ParseSampledData(element : TMXmlElement; path : string) : TFhirSampledData;
    function ParseSampledDataChild(value : TFhirSampledData; path : string; child : TMXmlElement) : boolean;
    function ParseSignature(element : TMXmlElement; path : string) : TFhirSignature;
    function ParseSignatureChild(value : TFhirSignature; path : string; child : TMXmlElement) : boolean;
    function ParseTriggerDefinition(element : TMXmlElement; path : string) : TFhirTriggerDefinition;
    function ParseTriggerDefinitionChild(value : TFhirTriggerDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseUsageContext(element : TMXmlElement; path : string) : TFhirUsageContext;
    function ParseUsageContextChild(value : TFhirUsageContext; path : string; child : TMXmlElement) : boolean;
    function ParseAge(element : TMXmlElement; path : string) : TFhirAge;
    function ParseAgeChild(value : TFhirAge; path : string; child : TMXmlElement) : boolean;
    function ParseCount(element : TMXmlElement; path : string) : TFhirCount;
    function ParseCountChild(value : TFhirCount; path : string; child : TMXmlElement) : boolean;
    function ParseDistance(element : TMXmlElement; path : string) : TFhirDistance;
    function ParseDistanceChild(value : TFhirDistance; path : string; child : TMXmlElement) : boolean;
    function ParseDosageDoseAndRate(element : TMXmlElement; path : string) : TFhirDosageDoseAndRate;
    function ParseDosageDoseAndRateChild(value : TFhirDosageDoseAndRate; path : string; child : TMXmlElement) : boolean;
    function ParseDosage(element : TMXmlElement; path : string) : TFhirDosage;
    function ParseDosageChild(value : TFhirDosage; path : string; child : TMXmlElement) : boolean;
    function ParseDuration(element : TMXmlElement; path : string) : TFhirDuration;
    function ParseDurationChild(value : TFhirDuration; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionSlicing(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicing;
    function ParseElementDefinitionSlicingChild(value : TFhirElementDefinitionSlicing; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionSlicingDiscriminator(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicingDiscriminator;
    function ParseElementDefinitionSlicingDiscriminatorChild(value : TFhirElementDefinitionSlicingDiscriminator; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionBase(element : TMXmlElement; path : string) : TFhirElementDefinitionBase;
    function ParseElementDefinitionBaseChild(value : TFhirElementDefinitionBase; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionType(element : TMXmlElement; path : string) : TFhirElementDefinitionType;
    function ParseElementDefinitionTypeChild(value : TFhirElementDefinitionType; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionExample(element : TMXmlElement; path : string) : TFhirElementDefinitionExample;
    function ParseElementDefinitionExampleChild(value : TFhirElementDefinitionExample; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionConstraint(element : TMXmlElement; path : string) : TFhirElementDefinitionConstraint;
    function ParseElementDefinitionConstraintChild(value : TFhirElementDefinitionConstraint; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionBinding(element : TMXmlElement; path : string) : TFhirElementDefinitionBinding;
    function ParseElementDefinitionBindingChild(value : TFhirElementDefinitionBinding; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinitionMapping(element : TMXmlElement; path : string) : TFhirElementDefinitionMapping;
    function ParseElementDefinitionMappingChild(value : TFhirElementDefinitionMapping; path : string; child : TMXmlElement) : boolean;
    function ParseElementDefinition(element : TMXmlElement; path : string) : TFhirElementDefinition;
    function ParseElementDefinitionChild(value : TFhirElementDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseMarketingStatus(element : TMXmlElement; path : string) : TFhirMarketingStatus;
    function ParseMarketingStatusChild(value : TFhirMarketingStatus; path : string; child : TMXmlElement) : boolean;
    function ParseOrderedDistributionInterval(element : TMXmlElement; path : string) : TFhirOrderedDistributionInterval;
    function ParseOrderedDistributionIntervalChild(value : TFhirOrderedDistributionInterval; path : string; child : TMXmlElement) : boolean;
    function ParseOrderedDistribution(element : TMXmlElement; path : string) : TFhirOrderedDistribution;
    function ParseOrderedDistributionChild(value : TFhirOrderedDistribution; path : string; child : TMXmlElement) : boolean;
    function ParsePopulation(element : TMXmlElement; path : string) : TFhirPopulation;
    function ParsePopulationChild(value : TFhirPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseProdCharacteristic(element : TMXmlElement; path : string) : TFhirProdCharacteristic;
    function ParseProdCharacteristicChild(value : TFhirProdCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseProductShelfLife(element : TMXmlElement; path : string) : TFhirProductShelfLife;
    function ParseProductShelfLifeChild(value : TFhirProductShelfLife; path : string; child : TMXmlElement) : boolean;
    function ParseStatisticSampleSize(element : TMXmlElement; path : string) : TFhirStatisticSampleSize;
    function ParseStatisticSampleSizeChild(value : TFhirStatisticSampleSize; path : string; child : TMXmlElement) : boolean;
    function ParseStatisticAttributeEstimate(element : TMXmlElement; path : string) : TFhirStatisticAttributeEstimate;
    function ParseStatisticAttributeEstimateChild(value : TFhirStatisticAttributeEstimate; path : string; child : TMXmlElement) : boolean;
    function ParseStatisticAttributeEstimateAttributeEstimate(element : TMXmlElement; path : string) : TFhirStatisticAttributeEstimateAttributeEstimate;
    function ParseStatisticAttributeEstimateAttributeEstimateChild(value : TFhirStatisticAttributeEstimateAttributeEstimate; path : string; child : TMXmlElement) : boolean;
    function ParseStatisticModelCharacteristic(element : TMXmlElement; path : string) : TFhirStatisticModelCharacteristic;
    function ParseStatisticModelCharacteristicChild(value : TFhirStatisticModelCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseStatisticModelCharacteristicVariable(element : TMXmlElement; path : string) : TFhirStatisticModelCharacteristicVariable;
    function ParseStatisticModelCharacteristicVariableChild(value : TFhirStatisticModelCharacteristicVariable; path : string; child : TMXmlElement) : boolean;
    function ParseStatistic(element : TMXmlElement; path : string) : TFhirStatistic;
    function ParseStatisticChild(value : TFhirStatistic; path : string; child : TMXmlElement) : boolean;
    function ParseTimingRepeat(element : TMXmlElement; path : string) : TFhirTimingRepeat;
    function ParseTimingRepeatChild(value : TFhirTimingRepeat; path : string; child : TMXmlElement) : boolean;
    function ParseTiming(element : TMXmlElement; path : string) : TFhirTiming;
    function ParseTimingChild(value : TFhirTiming; path : string; child : TMXmlElement) : boolean;

    Procedure ParseResourceAttributes(value : TFhirResource; path : string; element : TMXmlElement);
    Function ParseResourceChild(value : TFhirResource; path : string; child : TMXmlElement) : boolean;
    Procedure ParseDomainResourceAttributes(value : TFhirDomainResource; path : string; element : TMXmlElement);
    Function ParseDomainResourceChild(value : TFhirDomainResource; path : string; child : TMXmlElement) : boolean;
    Procedure ParseCanonicalResourceAttributes(value : TFhirCanonicalResource; path : string; element : TMXmlElement);
    Function ParseCanonicalResourceChild(value : TFhirCanonicalResource; path : string; child : TMXmlElement) : boolean;
    Procedure ParseMetadataResourceAttributes(value : TFhirMetadataResource; path : string; element : TMXmlElement);
    Function ParseMetadataResourceChild(value : TFhirMetadataResource; path : string; child : TMXmlElement) : boolean;

{$IFDEF FHIR_ACCOUNT}
    function ParseAccountCoverage(element : TMXmlElement; path : string) : TFhirAccountCoverage;
    function ParseAccountCoverageChild(value : TFhirAccountCoverage; path : string; child : TMXmlElement) : boolean;
    function ParseAccountGuarantor(element : TMXmlElement; path : string) : TFhirAccountGuarantor;
    function ParseAccountGuarantorChild(value : TFhirAccountGuarantor; path : string; child : TMXmlElement) : boolean;
    function ParseAccount(element : TMXmlElement; path : string) : TFhirAccount;
    function ParseAccountChild(value : TFhirAccount; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    function ParseActivityDefinitionParticipant(element : TMXmlElement; path : string) : TFhirActivityDefinitionParticipant;
    function ParseActivityDefinitionParticipantChild(value : TFhirActivityDefinitionParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseActivityDefinitionDynamicValue(element : TMXmlElement; path : string) : TFhirActivityDefinitionDynamicValue;
    function ParseActivityDefinitionDynamicValueChild(value : TFhirActivityDefinitionDynamicValue; path : string; child : TMXmlElement) : boolean;
    function ParseActivityDefinition(element : TMXmlElement; path : string) : TFhirActivityDefinition;
    function ParseActivityDefinitionChild(value : TFhirActivityDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
    function ParseAdministrableProductDefinitionProperty(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionProperty;
    function ParseAdministrableProductDefinitionPropertyChild(value : TFhirAdministrableProductDefinitionProperty; path : string; child : TMXmlElement) : boolean;
    function ParseAdministrableProductDefinitionRouteOfAdministration(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionRouteOfAdministration;
    function ParseAdministrableProductDefinitionRouteOfAdministrationChild(value : TFhirAdministrableProductDefinitionRouteOfAdministration; path : string; child : TMXmlElement) : boolean;
    function ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies;
    function ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesChild(value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies; path : string; child : TMXmlElement) : boolean;
    function ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod;
    function ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodChild(value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod; path : string; child : TMXmlElement) : boolean;
    function ParseAdministrableProductDefinition(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinition;
    function ParseAdministrableProductDefinitionChild(value : TFhirAdministrableProductDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    function ParseAdverseEventParticipant(element : TMXmlElement; path : string) : TFhirAdverseEventParticipant;
    function ParseAdverseEventParticipantChild(value : TFhirAdverseEventParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventSuspectEntity(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntity;
    function ParseAdverseEventSuspectEntityChild(value : TFhirAdverseEventSuspectEntity; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventSuspectEntityCausality(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntityCausality;
    function ParseAdverseEventSuspectEntityCausalityChild(value : TFhirAdverseEventSuspectEntityCausality; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventContributingFactor(element : TMXmlElement; path : string) : TFhirAdverseEventContributingFactor;
    function ParseAdverseEventContributingFactorChild(value : TFhirAdverseEventContributingFactor; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventPreventiveAction(element : TMXmlElement; path : string) : TFhirAdverseEventPreventiveAction;
    function ParseAdverseEventPreventiveActionChild(value : TFhirAdverseEventPreventiveAction; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventMitigatingAction(element : TMXmlElement; path : string) : TFhirAdverseEventMitigatingAction;
    function ParseAdverseEventMitigatingActionChild(value : TFhirAdverseEventMitigatingAction; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEventSupportingInfo(element : TMXmlElement; path : string) : TFhirAdverseEventSupportingInfo;
    function ParseAdverseEventSupportingInfoChild(value : TFhirAdverseEventSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseAdverseEvent(element : TMXmlElement; path : string) : TFhirAdverseEvent;
    function ParseAdverseEventChild(value : TFhirAdverseEvent; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    function ParseAllergyIntoleranceReaction(element : TMXmlElement; path : string) : TFhirAllergyIntoleranceReaction;
    function ParseAllergyIntoleranceReactionChild(value : TFhirAllergyIntoleranceReaction; path : string; child : TMXmlElement) : boolean;
    function ParseAllergyIntolerance(element : TMXmlElement; path : string) : TFhirAllergyIntolerance;
    function ParseAllergyIntoleranceChild(value : TFhirAllergyIntolerance; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    function ParseAppointmentParticipant(element : TMXmlElement; path : string) : TFhirAppointmentParticipant;
    function ParseAppointmentParticipantChild(value : TFhirAppointmentParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseAppointment(element : TMXmlElement; path : string) : TFhirAppointment;
    function ParseAppointmentChild(value : TFhirAppointment; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    function ParseAppointmentResponse(element : TMXmlElement; path : string) : TFhirAppointmentResponse;
    function ParseAppointmentResponseChild(value : TFhirAppointmentResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    function ParseAuditEventAgent(element : TMXmlElement; path : string) : TFhirAuditEventAgent;
    function ParseAuditEventAgentChild(value : TFhirAuditEventAgent; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventAgentNetwork(element : TMXmlElement; path : string) : TFhirAuditEventAgentNetwork;
    function ParseAuditEventAgentNetworkChild(value : TFhirAuditEventAgentNetwork; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventSource(element : TMXmlElement; path : string) : TFhirAuditEventSource;
    function ParseAuditEventSourceChild(value : TFhirAuditEventSource; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventEntity(element : TMXmlElement; path : string) : TFhirAuditEventEntity;
    function ParseAuditEventEntityChild(value : TFhirAuditEventEntity; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEventEntityDetail(element : TMXmlElement; path : string) : TFhirAuditEventEntityDetail;
    function ParseAuditEventEntityDetailChild(value : TFhirAuditEventEntityDetail; path : string; child : TMXmlElement) : boolean;
    function ParseAuditEvent(element : TMXmlElement; path : string) : TFhirAuditEvent;
    function ParseAuditEventChild(value : TFhirAuditEvent; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    function ParseBasic(element : TMXmlElement; path : string) : TFhirBasic;
    function ParseBasicChild(value : TFhirBasic; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    function ParseBinary(element : TMXmlElement; path : string) : TFhirBinary;
    function ParseBinaryChild(value : TFhirBinary; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    function ParseBiologicallyDerivedProductCollection(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductCollection;
    function ParseBiologicallyDerivedProductCollectionChild(value : TFhirBiologicallyDerivedProductCollection; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProductProcessing(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductProcessing;
    function ParseBiologicallyDerivedProductProcessingChild(value : TFhirBiologicallyDerivedProductProcessing; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProductManipulation(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductManipulation;
    function ParseBiologicallyDerivedProductManipulationChild(value : TFhirBiologicallyDerivedProductManipulation; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProductStorage(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductStorage;
    function ParseBiologicallyDerivedProductStorageChild(value : TFhirBiologicallyDerivedProductStorage; path : string; child : TMXmlElement) : boolean;
    function ParseBiologicallyDerivedProduct(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProduct;
    function ParseBiologicallyDerivedProductChild(value : TFhirBiologicallyDerivedProduct; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    function ParseBodyStructure(element : TMXmlElement; path : string) : TFhirBodyStructure;
    function ParseBodyStructureChild(value : TFhirBodyStructure; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    function ParseBundleLink(element : TMXmlElement; path : string) : TFhirBundleLink;
    function ParseBundleLinkChild(value : TFhirBundleLink; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntry(element : TMXmlElement; path : string) : TFhirBundleEntry;
    function ParseBundleEntryChild(value : TFhirBundleEntry; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntrySearch(element : TMXmlElement; path : string) : TFhirBundleEntrySearch;
    function ParseBundleEntrySearchChild(value : TFhirBundleEntrySearch; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntryRequest(element : TMXmlElement; path : string) : TFhirBundleEntryRequest;
    function ParseBundleEntryRequestChild(value : TFhirBundleEntryRequest; path : string; child : TMXmlElement) : boolean;
    function ParseBundleEntryResponse(element : TMXmlElement; path : string) : TFhirBundleEntryResponse;
    function ParseBundleEntryResponseChild(value : TFhirBundleEntryResponse; path : string; child : TMXmlElement) : boolean;
    function ParseBundle(element : TMXmlElement; path : string) : TFhirBundle;
    function ParseBundleChild(value : TFhirBundle; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    function ParseCapabilityStatementSoftware(element : TMXmlElement; path : string) : TFhirCapabilityStatementSoftware;
    function ParseCapabilityStatementSoftwareChild(value : TFhirCapabilityStatementSoftware; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementImplementation(element : TMXmlElement; path : string) : TFhirCapabilityStatementImplementation;
    function ParseCapabilityStatementImplementationChild(value : TFhirCapabilityStatementImplementation; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRest(element : TMXmlElement; path : string) : TFhirCapabilityStatementRest;
    function ParseCapabilityStatementRestChild(value : TFhirCapabilityStatementRest; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestSecurity(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestSecurity;
    function ParseCapabilityStatementRestSecurityChild(value : TFhirCapabilityStatementRestSecurity; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResource(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResource;
    function ParseCapabilityStatementRestResourceChild(value : TFhirCapabilityStatementRestResource; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResourceInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceInteraction;
    function ParseCapabilityStatementRestResourceInteractionChild(value : TFhirCapabilityStatementRestResourceInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResourceSearchParam(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceSearchParam;
    function ParseCapabilityStatementRestResourceSearchParamChild(value : TFhirCapabilityStatementRestResourceSearchParam; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestResourceOperation(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceOperation;
    function ParseCapabilityStatementRestResourceOperationChild(value : TFhirCapabilityStatementRestResourceOperation; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementRestInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestInteraction;
    function ParseCapabilityStatementRestInteractionChild(value : TFhirCapabilityStatementRestInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementMessaging(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessaging;
    function ParseCapabilityStatementMessagingChild(value : TFhirCapabilityStatementMessaging; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementMessagingEndpoint(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingEndpoint;
    function ParseCapabilityStatementMessagingEndpointChild(value : TFhirCapabilityStatementMessagingEndpoint; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementMessagingSupportedMessage(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingSupportedMessage;
    function ParseCapabilityStatementMessagingSupportedMessageChild(value : TFhirCapabilityStatementMessagingSupportedMessage; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatementDocument(element : TMXmlElement; path : string) : TFhirCapabilityStatementDocument;
    function ParseCapabilityStatementDocumentChild(value : TFhirCapabilityStatementDocument; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement(element : TMXmlElement; path : string) : TFhirCapabilityStatement;
    function ParseCapabilityStatementChild(value : TFhirCapabilityStatement; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAPABILITYSTATEMENT2}
    function ParseCapabilityStatement2Software(element : TMXmlElement; path : string) : TFhirCapabilityStatement2Software;
    function ParseCapabilityStatement2SoftwareChild(value : TFhirCapabilityStatement2Software; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2Implementation(element : TMXmlElement; path : string) : TFhirCapabilityStatement2Implementation;
    function ParseCapabilityStatement2ImplementationChild(value : TFhirCapabilityStatement2Implementation; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2Rest(element : TMXmlElement; path : string) : TFhirCapabilityStatement2Rest;
    function ParseCapabilityStatement2RestChild(value : TFhirCapabilityStatement2Rest; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2RestResource(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResource;
    function ParseCapabilityStatement2RestResourceChild(value : TFhirCapabilityStatement2RestResource; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2RestResourceInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResourceInteraction;
    function ParseCapabilityStatement2RestResourceInteractionChild(value : TFhirCapabilityStatement2RestResourceInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2RestResourceSearchParam(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResourceSearchParam;
    function ParseCapabilityStatement2RestResourceSearchParamChild(value : TFhirCapabilityStatement2RestResourceSearchParam; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2RestResourceOperation(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResourceOperation;
    function ParseCapabilityStatement2RestResourceOperationChild(value : TFhirCapabilityStatement2RestResourceOperation; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2RestInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestInteraction;
    function ParseCapabilityStatement2RestInteractionChild(value : TFhirCapabilityStatement2RestInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseCapabilityStatement2(element : TMXmlElement; path : string) : TFhirCapabilityStatement2;
    function ParseCapabilityStatement2Child(value : TFhirCapabilityStatement2; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CAPABILITYSTATEMENT2}
{$IFDEF FHIR_CAREPLAN}
    function ParseCarePlanActivity(element : TMXmlElement; path : string) : TFhirCarePlanActivity;
    function ParseCarePlanActivityChild(value : TFhirCarePlanActivity; path : string; child : TMXmlElement) : boolean;
    function ParseCarePlanActivityDetail(element : TMXmlElement; path : string) : TFhirCarePlanActivityDetail;
    function ParseCarePlanActivityDetailChild(value : TFhirCarePlanActivityDetail; path : string; child : TMXmlElement) : boolean;
    function ParseCarePlan(element : TMXmlElement; path : string) : TFhirCarePlan;
    function ParseCarePlanChild(value : TFhirCarePlan; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    function ParseCareTeamParticipant(element : TMXmlElement; path : string) : TFhirCareTeamParticipant;
    function ParseCareTeamParticipantChild(value : TFhirCareTeamParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseCareTeam(element : TMXmlElement; path : string) : TFhirCareTeam;
    function ParseCareTeamChild(value : TFhirCareTeam; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    function ParseCatalogEntryRelatedEntry(element : TMXmlElement; path : string) : TFhirCatalogEntryRelatedEntry;
    function ParseCatalogEntryRelatedEntryChild(value : TFhirCatalogEntryRelatedEntry; path : string; child : TMXmlElement) : boolean;
    function ParseCatalogEntry(element : TMXmlElement; path : string) : TFhirCatalogEntry;
    function ParseCatalogEntryChild(value : TFhirCatalogEntry; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    function ParseChargeItemPerformer(element : TMXmlElement; path : string) : TFhirChargeItemPerformer;
    function ParseChargeItemPerformerChild(value : TFhirChargeItemPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItem(element : TMXmlElement; path : string) : TFhirChargeItem;
    function ParseChargeItemChild(value : TFhirChargeItem; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    function ParseChargeItemDefinitionApplicability(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionApplicability;
    function ParseChargeItemDefinitionApplicabilityChild(value : TFhirChargeItemDefinitionApplicability; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItemDefinitionPropertyGroup(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroup;
    function ParseChargeItemDefinitionPropertyGroupChild(value : TFhirChargeItemDefinitionPropertyGroup; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItemDefinitionPropertyGroupPriceComponent(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroupPriceComponent;
    function ParseChargeItemDefinitionPropertyGroupPriceComponentChild(value : TFhirChargeItemDefinitionPropertyGroupPriceComponent; path : string; child : TMXmlElement) : boolean;
    function ParseChargeItemDefinition(element : TMXmlElement; path : string) : TFhirChargeItemDefinition;
    function ParseChargeItemDefinitionChild(value : TFhirChargeItemDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
    function ParseCitationSummary(element : TMXmlElement; path : string) : TFhirCitationSummary;
    function ParseCitationSummaryChild(value : TFhirCitationSummary; path : string; child : TMXmlElement) : boolean;
    function ParseCitationVariantCitation(element : TMXmlElement; path : string) : TFhirCitationVariantCitation;
    function ParseCitationVariantCitationChild(value : TFhirCitationVariantCitation; path : string; child : TMXmlElement) : boolean;
    function ParseCitationJournal(element : TMXmlElement; path : string) : TFhirCitationJournal;
    function ParseCitationJournalChild(value : TFhirCitationJournal; path : string; child : TMXmlElement) : boolean;
    function ParseCitationJournalJournalIssue(element : TMXmlElement; path : string) : TFhirCitationJournalJournalIssue;
    function ParseCitationJournalJournalIssueChild(value : TFhirCitationJournalJournalIssue; path : string; child : TMXmlElement) : boolean;
    function ParseCitationJournalJournalIssuePublicationDate(element : TMXmlElement; path : string) : TFhirCitationJournalJournalIssuePublicationDate;
    function ParseCitationJournalJournalIssuePublicationDateChild(value : TFhirCitationJournalJournalIssuePublicationDate; path : string; child : TMXmlElement) : boolean;
    function ParseCitationPublicationInfo(element : TMXmlElement; path : string) : TFhirCitationPublicationInfo;
    function ParseCitationPublicationInfoChild(value : TFhirCitationPublicationInfo; path : string; child : TMXmlElement) : boolean;
    function ParseCitationPublicationInfoPublishedIn(element : TMXmlElement; path : string) : TFhirCitationPublicationInfoPublishedIn;
    function ParseCitationPublicationInfoPublishedInChild(value : TFhirCitationPublicationInfoPublishedIn; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeTitle(element : TMXmlElement; path : string) : TFhirCitationAlternativeTitle;
    function ParseCitationAlternativeTitleChild(value : TFhirCitationAlternativeTitle; path : string; child : TMXmlElement) : boolean;
    function ParseCitationPagination(element : TMXmlElement; path : string) : TFhirCitationPagination;
    function ParseCitationPaginationChild(value : TFhirCitationPagination; path : string; child : TMXmlElement) : boolean;
    function ParseCitationArticleUrl(element : TMXmlElement; path : string) : TFhirCitationArticleUrl;
    function ParseCitationArticleUrlChild(value : TFhirCitationArticleUrl; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeAbstract(element : TMXmlElement; path : string) : TFhirCitationAlternativeAbstract;
    function ParseCitationAlternativeAbstractChild(value : TFhirCitationAlternativeAbstract; path : string; child : TMXmlElement) : boolean;
    function ParseCitationContributorship(element : TMXmlElement; path : string) : TFhirCitationContributorship;
    function ParseCitationContributorshipChild(value : TFhirCitationContributorship; path : string; child : TMXmlElement) : boolean;
    function ParseCitationContributorshipEntry(element : TMXmlElement; path : string) : TFhirCitationContributorshipEntry;
    function ParseCitationContributorshipEntryChild(value : TFhirCitationContributorshipEntry; path : string; child : TMXmlElement) : boolean;
    function ParseCitationContributorshipEntryAffiliationInfo(element : TMXmlElement; path : string) : TFhirCitationContributorshipEntryAffiliationInfo;
    function ParseCitationContributorshipEntryAffiliationInfoChild(value : TFhirCitationContributorshipEntryAffiliationInfo; path : string; child : TMXmlElement) : boolean;
    function ParseCitationContributorshipSummary(element : TMXmlElement; path : string) : TFhirCitationContributorshipSummary;
    function ParseCitationContributorshipSummaryChild(value : TFhirCitationContributorshipSummary; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeForm(element : TMXmlElement; path : string) : TFhirCitationAlternativeForm;
    function ParseCitationAlternativeFormChild(value : TFhirCitationAlternativeForm; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeFormJournalIssue(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormJournalIssue;
    function ParseCitationAlternativeFormJournalIssueChild(value : TFhirCitationAlternativeFormJournalIssue; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeFormJournalIssuePublicationDate(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormJournalIssuePublicationDate;
    function ParseCitationAlternativeFormJournalIssuePublicationDateChild(value : TFhirCitationAlternativeFormJournalIssuePublicationDate; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeFormPagination(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormPagination;
    function ParseCitationAlternativeFormPaginationChild(value : TFhirCitationAlternativeFormPagination; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeFormPublicationInfo(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormPublicationInfo;
    function ParseCitationAlternativeFormPublicationInfoChild(value : TFhirCitationAlternativeFormPublicationInfo; path : string; child : TMXmlElement) : boolean;
    function ParseCitationAlternativeFormPublicationInfoPublishedIn(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormPublicationInfoPublishedIn;
    function ParseCitationAlternativeFormPublicationInfoPublishedInChild(value : TFhirCitationAlternativeFormPublicationInfoPublishedIn; path : string; child : TMXmlElement) : boolean;
    function ParseCitationKeywordList(element : TMXmlElement; path : string) : TFhirCitationKeywordList;
    function ParseCitationKeywordListChild(value : TFhirCitationKeywordList; path : string; child : TMXmlElement) : boolean;
    function ParseCitationKeywordListKeyword(element : TMXmlElement; path : string) : TFhirCitationKeywordListKeyword;
    function ParseCitationKeywordListKeywordChild(value : TFhirCitationKeywordListKeyword; path : string; child : TMXmlElement) : boolean;
    function ParseCitationMedlinePubMed(element : TMXmlElement; path : string) : TFhirCitationMedlinePubMed;
    function ParseCitationMedlinePubMedChild(value : TFhirCitationMedlinePubMed; path : string; child : TMXmlElement) : boolean;
    function ParseCitationMedlinePubMedPubMedPubDate(element : TMXmlElement; path : string) : TFhirCitationMedlinePubMedPubMedPubDate;
    function ParseCitationMedlinePubMedPubMedPubDateChild(value : TFhirCitationMedlinePubMedPubMedPubDate; path : string; child : TMXmlElement) : boolean;
    function ParseCitationMedlinePubMedRelatedArticle(element : TMXmlElement; path : string) : TFhirCitationMedlinePubMedRelatedArticle;
    function ParseCitationMedlinePubMedRelatedArticleChild(value : TFhirCitationMedlinePubMedRelatedArticle; path : string; child : TMXmlElement) : boolean;
    function ParseCitation(element : TMXmlElement; path : string) : TFhirCitation;
    function ParseCitationChild(value : TFhirCitation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
    function ParseClaimRelated(element : TMXmlElement; path : string) : TFhirClaimRelated;
    function ParseClaimRelatedChild(value : TFhirClaimRelated; path : string; child : TMXmlElement) : boolean;
    function ParseClaimPayee(element : TMXmlElement; path : string) : TFhirClaimPayee;
    function ParseClaimPayeeChild(value : TFhirClaimPayee; path : string; child : TMXmlElement) : boolean;
    function ParseClaimCareTeam(element : TMXmlElement; path : string) : TFhirClaimCareTeam;
    function ParseClaimCareTeamChild(value : TFhirClaimCareTeam; path : string; child : TMXmlElement) : boolean;
    function ParseClaimSupportingInfo(element : TMXmlElement; path : string) : TFhirClaimSupportingInfo;
    function ParseClaimSupportingInfoChild(value : TFhirClaimSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseClaimDiagnosis(element : TMXmlElement; path : string) : TFhirClaimDiagnosis;
    function ParseClaimDiagnosisChild(value : TFhirClaimDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseClaimProcedure(element : TMXmlElement; path : string) : TFhirClaimProcedure;
    function ParseClaimProcedureChild(value : TFhirClaimProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseClaimInsurance(element : TMXmlElement; path : string) : TFhirClaimInsurance;
    function ParseClaimInsuranceChild(value : TFhirClaimInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseClaimAccident(element : TMXmlElement; path : string) : TFhirClaimAccident;
    function ParseClaimAccidentChild(value : TFhirClaimAccident; path : string; child : TMXmlElement) : boolean;
    function ParseClaimItem(element : TMXmlElement; path : string) : TFhirClaimItem;
    function ParseClaimItemChild(value : TFhirClaimItem; path : string; child : TMXmlElement) : boolean;
    function ParseClaimItemDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetail;
    function ParseClaimItemDetailChild(value : TFhirClaimItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetailSubDetail;
    function ParseClaimItemDetailSubDetailChild(value : TFhirClaimItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaim(element : TMXmlElement; path : string) : TFhirClaim;
    function ParseClaimChild(value : TFhirClaim; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    function ParseClaimResponseItem(element : TMXmlElement; path : string) : TFhirClaimResponseItem;
    function ParseClaimResponseItemChild(value : TFhirClaimResponseItem; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseItemAdjudication(element : TMXmlElement; path : string) : TFhirClaimResponseItemAdjudication;
    function ParseClaimResponseItemAdjudicationChild(value : TFhirClaimResponseItemAdjudication; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetail;
    function ParseClaimResponseItemDetailChild(value : TFhirClaimResponseItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetailSubDetail;
    function ParseClaimResponseItemDetailSubDetailChild(value : TFhirClaimResponseItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseAddItem(element : TMXmlElement; path : string) : TFhirClaimResponseAddItem;
    function ParseClaimResponseAddItemChild(value : TFhirClaimResponseAddItem; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseAddItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetail;
    function ParseClaimResponseAddItemDetailChild(value : TFhirClaimResponseAddItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetailSubDetail;
    function ParseClaimResponseAddItemDetailSubDetailChild(value : TFhirClaimResponseAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseTotal(element : TMXmlElement; path : string) : TFhirClaimResponseTotal;
    function ParseClaimResponseTotalChild(value : TFhirClaimResponseTotal; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponsePayment(element : TMXmlElement; path : string) : TFhirClaimResponsePayment;
    function ParseClaimResponsePaymentChild(value : TFhirClaimResponsePayment; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseProcessNote(element : TMXmlElement; path : string) : TFhirClaimResponseProcessNote;
    function ParseClaimResponseProcessNoteChild(value : TFhirClaimResponseProcessNote; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseInsurance(element : TMXmlElement; path : string) : TFhirClaimResponseInsurance;
    function ParseClaimResponseInsuranceChild(value : TFhirClaimResponseInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponseError(element : TMXmlElement; path : string) : TFhirClaimResponseError;
    function ParseClaimResponseErrorChild(value : TFhirClaimResponseError; path : string; child : TMXmlElement) : boolean;
    function ParseClaimResponse(element : TMXmlElement; path : string) : TFhirClaimResponse;
    function ParseClaimResponseChild(value : TFhirClaimResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    function ParseClinicalImpressionFinding(element : TMXmlElement; path : string) : TFhirClinicalImpressionFinding;
    function ParseClinicalImpressionFindingChild(value : TFhirClinicalImpressionFinding; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalImpression(element : TMXmlElement; path : string) : TFhirClinicalImpression;
    function ParseClinicalImpressionChild(value : TFhirClinicalImpression; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEISSUE}
    function ParseClinicalUseIssueContraindication(element : TMXmlElement; path : string) : TFhirClinicalUseIssueContraindication;
    function ParseClinicalUseIssueContraindicationChild(value : TFhirClinicalUseIssueContraindication; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalUseIssueContraindicationOtherTherapy(element : TMXmlElement; path : string) : TFhirClinicalUseIssueContraindicationOtherTherapy;
    function ParseClinicalUseIssueContraindicationOtherTherapyChild(value : TFhirClinicalUseIssueContraindicationOtherTherapy; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalUseIssueIndication(element : TMXmlElement; path : string) : TFhirClinicalUseIssueIndication;
    function ParseClinicalUseIssueIndicationChild(value : TFhirClinicalUseIssueIndication; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalUseIssueInteraction(element : TMXmlElement; path : string) : TFhirClinicalUseIssueInteraction;
    function ParseClinicalUseIssueInteractionChild(value : TFhirClinicalUseIssueInteraction; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalUseIssueInteractionInteractant(element : TMXmlElement; path : string) : TFhirClinicalUseIssueInteractionInteractant;
    function ParseClinicalUseIssueInteractionInteractantChild(value : TFhirClinicalUseIssueInteractionInteractant; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalUseIssueUndesirableEffect(element : TMXmlElement; path : string) : TFhirClinicalUseIssueUndesirableEffect;
    function ParseClinicalUseIssueUndesirableEffectChild(value : TFhirClinicalUseIssueUndesirableEffect; path : string; child : TMXmlElement) : boolean;
    function ParseClinicalUseIssue(element : TMXmlElement; path : string) : TFhirClinicalUseIssue;
    function ParseClinicalUseIssueChild(value : TFhirClinicalUseIssue; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CLINICALUSEISSUE}
{$IFDEF FHIR_CODESYSTEM}
    function ParseCodeSystemFilter(element : TMXmlElement; path : string) : TFhirCodeSystemFilter;
    function ParseCodeSystemFilterChild(value : TFhirCodeSystemFilter; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemProperty(element : TMXmlElement; path : string) : TFhirCodeSystemProperty;
    function ParseCodeSystemPropertyChild(value : TFhirCodeSystemProperty; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemConcept(element : TMXmlElement; path : string) : TFhirCodeSystemConcept;
    function ParseCodeSystemConceptChild(value : TFhirCodeSystemConcept; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemConceptDesignation(element : TMXmlElement; path : string) : TFhirCodeSystemConceptDesignation;
    function ParseCodeSystemConceptDesignationChild(value : TFhirCodeSystemConceptDesignation; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystemConceptProperty(element : TMXmlElement; path : string) : TFhirCodeSystemConceptProperty;
    function ParseCodeSystemConceptPropertyChild(value : TFhirCodeSystemConceptProperty; path : string; child : TMXmlElement) : boolean;
    function ParseCodeSystem(element : TMXmlElement; path : string) : TFhirCodeSystem;
    function ParseCodeSystemChild(value : TFhirCodeSystem; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    function ParseCommunicationPayload(element : TMXmlElement; path : string) : TFhirCommunicationPayload;
    function ParseCommunicationPayloadChild(value : TFhirCommunicationPayload; path : string; child : TMXmlElement) : boolean;
    function ParseCommunication(element : TMXmlElement; path : string) : TFhirCommunication;
    function ParseCommunicationChild(value : TFhirCommunication; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    function ParseCommunicationRequestPayload(element : TMXmlElement; path : string) : TFhirCommunicationRequestPayload;
    function ParseCommunicationRequestPayloadChild(value : TFhirCommunicationRequestPayload; path : string; child : TMXmlElement) : boolean;
    function ParseCommunicationRequest(element : TMXmlElement; path : string) : TFhirCommunicationRequest;
    function ParseCommunicationRequestChild(value : TFhirCommunicationRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    function ParseCompartmentDefinitionResource(element : TMXmlElement; path : string) : TFhirCompartmentDefinitionResource;
    function ParseCompartmentDefinitionResourceChild(value : TFhirCompartmentDefinitionResource; path : string; child : TMXmlElement) : boolean;
    function ParseCompartmentDefinition(element : TMXmlElement; path : string) : TFhirCompartmentDefinition;
    function ParseCompartmentDefinitionChild(value : TFhirCompartmentDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    function ParseCompositionAttester(element : TMXmlElement; path : string) : TFhirCompositionAttester;
    function ParseCompositionAttesterChild(value : TFhirCompositionAttester; path : string; child : TMXmlElement) : boolean;
    function ParseCompositionRelatesTo(element : TMXmlElement; path : string) : TFhirCompositionRelatesTo;
    function ParseCompositionRelatesToChild(value : TFhirCompositionRelatesTo; path : string; child : TMXmlElement) : boolean;
    function ParseCompositionEvent(element : TMXmlElement; path : string) : TFhirCompositionEvent;
    function ParseCompositionEventChild(value : TFhirCompositionEvent; path : string; child : TMXmlElement) : boolean;
    function ParseCompositionSection(element : TMXmlElement; path : string) : TFhirCompositionSection;
    function ParseCompositionSectionChild(value : TFhirCompositionSection; path : string; child : TMXmlElement) : boolean;
    function ParseComposition(element : TMXmlElement; path : string) : TFhirComposition;
    function ParseCompositionChild(value : TFhirComposition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    function ParseConceptMapGroup(element : TMXmlElement; path : string) : TFhirConceptMapGroup;
    function ParseConceptMapGroupChild(value : TFhirConceptMapGroup; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupElement(element : TMXmlElement; path : string) : TFhirConceptMapGroupElement;
    function ParseConceptMapGroupElementChild(value : TFhirConceptMapGroupElement; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupElementTarget(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTarget;
    function ParseConceptMapGroupElementTargetChild(value : TFhirConceptMapGroupElementTarget; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupElementTargetDependsOn(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTargetDependsOn;
    function ParseConceptMapGroupElementTargetDependsOnChild(value : TFhirConceptMapGroupElementTargetDependsOn; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMapGroupUnmapped(element : TMXmlElement; path : string) : TFhirConceptMapGroupUnmapped;
    function ParseConceptMapGroupUnmappedChild(value : TFhirConceptMapGroupUnmapped; path : string; child : TMXmlElement) : boolean;
    function ParseConceptMap(element : TMXmlElement; path : string) : TFhirConceptMap;
    function ParseConceptMapChild(value : TFhirConceptMap; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    function ParseConditionStage(element : TMXmlElement; path : string) : TFhirConditionStage;
    function ParseConditionStageChild(value : TFhirConditionStage; path : string; child : TMXmlElement) : boolean;
    function ParseConditionEvidence(element : TMXmlElement; path : string) : TFhirConditionEvidence;
    function ParseConditionEvidenceChild(value : TFhirConditionEvidence; path : string; child : TMXmlElement) : boolean;
    function ParseCondition(element : TMXmlElement; path : string) : TFhirCondition;
    function ParseConditionChild(value : TFhirCondition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONDITIONDEFINITION}
    function ParseConditionDefinitionObservation(element : TMXmlElement; path : string) : TFhirConditionDefinitionObservation;
    function ParseConditionDefinitionObservationChild(value : TFhirConditionDefinitionObservation; path : string; child : TMXmlElement) : boolean;
    function ParseConditionDefinitionMedication(element : TMXmlElement; path : string) : TFhirConditionDefinitionMedication;
    function ParseConditionDefinitionMedicationChild(value : TFhirConditionDefinitionMedication; path : string; child : TMXmlElement) : boolean;
    function ParseConditionDefinitionPrecondition(element : TMXmlElement; path : string) : TFhirConditionDefinitionPrecondition;
    function ParseConditionDefinitionPreconditionChild(value : TFhirConditionDefinitionPrecondition; path : string; child : TMXmlElement) : boolean;
    function ParseConditionDefinitionQuestionnaire(element : TMXmlElement; path : string) : TFhirConditionDefinitionQuestionnaire;
    function ParseConditionDefinitionQuestionnaireChild(value : TFhirConditionDefinitionQuestionnaire; path : string; child : TMXmlElement) : boolean;
    function ParseConditionDefinitionPlan(element : TMXmlElement; path : string) : TFhirConditionDefinitionPlan;
    function ParseConditionDefinitionPlanChild(value : TFhirConditionDefinitionPlan; path : string; child : TMXmlElement) : boolean;
    function ParseConditionDefinition(element : TMXmlElement; path : string) : TFhirConditionDefinition;
    function ParseConditionDefinitionChild(value : TFhirConditionDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONDITIONDEFINITION}
{$IFDEF FHIR_CONSENT}
    function ParseConsentPolicy(element : TMXmlElement; path : string) : TFhirConsentPolicy;
    function ParseConsentPolicyChild(value : TFhirConsentPolicy; path : string; child : TMXmlElement) : boolean;
    function ParseConsentVerification(element : TMXmlElement; path : string) : TFhirConsentVerification;
    function ParseConsentVerificationChild(value : TFhirConsentVerification; path : string; child : TMXmlElement) : boolean;
    function ParseConsentProvision(element : TMXmlElement; path : string) : TFhirConsentProvision;
    function ParseConsentProvisionChild(value : TFhirConsentProvision; path : string; child : TMXmlElement) : boolean;
    function ParseConsentProvisionActor(element : TMXmlElement; path : string) : TFhirConsentProvisionActor;
    function ParseConsentProvisionActorChild(value : TFhirConsentProvisionActor; path : string; child : TMXmlElement) : boolean;
    function ParseConsentProvisionData(element : TMXmlElement; path : string) : TFhirConsentProvisionData;
    function ParseConsentProvisionDataChild(value : TFhirConsentProvisionData; path : string; child : TMXmlElement) : boolean;
    function ParseConsent(element : TMXmlElement; path : string) : TFhirConsent;
    function ParseConsentChild(value : TFhirConsent; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    function ParseContractContentDefinition(element : TMXmlElement; path : string) : TFhirContractContentDefinition;
    function ParseContractContentDefinitionChild(value : TFhirContractContentDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseContractTerm(element : TMXmlElement; path : string) : TFhirContractTerm;
    function ParseContractTermChild(value : TFhirContractTerm; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermSecurityLabel(element : TMXmlElement; path : string) : TFhirContractTermSecurityLabel;
    function ParseContractTermSecurityLabelChild(value : TFhirContractTermSecurityLabel; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermOffer(element : TMXmlElement; path : string) : TFhirContractTermOffer;
    function ParseContractTermOfferChild(value : TFhirContractTermOffer; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermOfferParty(element : TMXmlElement; path : string) : TFhirContractTermOfferParty;
    function ParseContractTermOfferPartyChild(value : TFhirContractTermOfferParty; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermOfferAnswer(element : TMXmlElement; path : string) : TFhirContractTermOfferAnswer;
    function ParseContractTermOfferAnswerChild(value : TFhirContractTermOfferAnswer; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAsset(element : TMXmlElement; path : string) : TFhirContractTermAsset;
    function ParseContractTermAssetChild(value : TFhirContractTermAsset; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAssetContext(element : TMXmlElement; path : string) : TFhirContractTermAssetContext;
    function ParseContractTermAssetContextChild(value : TFhirContractTermAssetContext; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAssetValuedItem(element : TMXmlElement; path : string) : TFhirContractTermAssetValuedItem;
    function ParseContractTermAssetValuedItemChild(value : TFhirContractTermAssetValuedItem; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermAction(element : TMXmlElement; path : string) : TFhirContractTermAction;
    function ParseContractTermActionChild(value : TFhirContractTermAction; path : string; child : TMXmlElement) : boolean;
    function ParseContractTermActionSubject(element : TMXmlElement; path : string) : TFhirContractTermActionSubject;
    function ParseContractTermActionSubjectChild(value : TFhirContractTermActionSubject; path : string; child : TMXmlElement) : boolean;
    function ParseContractSigner(element : TMXmlElement; path : string) : TFhirContractSigner;
    function ParseContractSignerChild(value : TFhirContractSigner; path : string; child : TMXmlElement) : boolean;
    function ParseContractFriendly(element : TMXmlElement; path : string) : TFhirContractFriendly;
    function ParseContractFriendlyChild(value : TFhirContractFriendly; path : string; child : TMXmlElement) : boolean;
    function ParseContractLegal(element : TMXmlElement; path : string) : TFhirContractLegal;
    function ParseContractLegalChild(value : TFhirContractLegal; path : string; child : TMXmlElement) : boolean;
    function ParseContractRule(element : TMXmlElement; path : string) : TFhirContractRule;
    function ParseContractRuleChild(value : TFhirContractRule; path : string; child : TMXmlElement) : boolean;
    function ParseContract(element : TMXmlElement; path : string) : TFhirContract;
    function ParseContractChild(value : TFhirContract; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    function ParseCoverageClass(element : TMXmlElement; path : string) : TFhirCoverageClass;
    function ParseCoverageClassChild(value : TFhirCoverageClass; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageCostToBeneficiary(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiary;
    function ParseCoverageCostToBeneficiaryChild(value : TFhirCoverageCostToBeneficiary; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageCostToBeneficiaryException(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiaryException;
    function ParseCoverageCostToBeneficiaryExceptionChild(value : TFhirCoverageCostToBeneficiaryException; path : string; child : TMXmlElement) : boolean;
    function ParseCoverage(element : TMXmlElement; path : string) : TFhirCoverage;
    function ParseCoverageChild(value : TFhirCoverage; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    function ParseCoverageEligibilityRequestSupportingInfo(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestSupportingInfo;
    function ParseCoverageEligibilityRequestSupportingInfoChild(value : TFhirCoverageEligibilityRequestSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequestInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestInsurance;
    function ParseCoverageEligibilityRequestInsuranceChild(value : TFhirCoverageEligibilityRequestInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequestItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItem;
    function ParseCoverageEligibilityRequestItemChild(value : TFhirCoverageEligibilityRequestItem; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequestItemDiagnosis(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItemDiagnosis;
    function ParseCoverageEligibilityRequestItemDiagnosisChild(value : TFhirCoverageEligibilityRequestItemDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityRequest(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequest;
    function ParseCoverageEligibilityRequestChild(value : TFhirCoverageEligibilityRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    function ParseCoverageEligibilityResponseInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsurance;
    function ParseCoverageEligibilityResponseInsuranceChild(value : TFhirCoverageEligibilityResponseInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponseInsuranceItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItem;
    function ParseCoverageEligibilityResponseInsuranceItemChild(value : TFhirCoverageEligibilityResponseInsuranceItem; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponseInsuranceItemBenefit(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItemBenefit;
    function ParseCoverageEligibilityResponseInsuranceItemBenefitChild(value : TFhirCoverageEligibilityResponseInsuranceItemBenefit; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponseError(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseError;
    function ParseCoverageEligibilityResponseErrorChild(value : TFhirCoverageEligibilityResponseError; path : string; child : TMXmlElement) : boolean;
    function ParseCoverageEligibilityResponse(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponse;
    function ParseCoverageEligibilityResponseChild(value : TFhirCoverageEligibilityResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    function ParseDetectedIssueEvidence(element : TMXmlElement; path : string) : TFhirDetectedIssueEvidence;
    function ParseDetectedIssueEvidenceChild(value : TFhirDetectedIssueEvidence; path : string; child : TMXmlElement) : boolean;
    function ParseDetectedIssueMitigation(element : TMXmlElement; path : string) : TFhirDetectedIssueMitigation;
    function ParseDetectedIssueMitigationChild(value : TFhirDetectedIssueMitigation; path : string; child : TMXmlElement) : boolean;
    function ParseDetectedIssue(element : TMXmlElement; path : string) : TFhirDetectedIssue;
    function ParseDetectedIssueChild(value : TFhirDetectedIssue; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    function ParseDeviceUdiCarrier(element : TMXmlElement; path : string) : TFhirDeviceUdiCarrier;
    function ParseDeviceUdiCarrierChild(value : TFhirDeviceUdiCarrier; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDeviceName;
    function ParseDeviceDeviceNameChild(value : TFhirDeviceDeviceName; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceSpecialization(element : TMXmlElement; path : string) : TFhirDeviceSpecialization;
    function ParseDeviceSpecializationChild(value : TFhirDeviceSpecialization; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceVersion(element : TMXmlElement; path : string) : TFhirDeviceVersion;
    function ParseDeviceVersionChild(value : TFhirDeviceVersion; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceProperty(element : TMXmlElement; path : string) : TFhirDeviceProperty;
    function ParseDevicePropertyChild(value : TFhirDeviceProperty; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceOperationalStatus(element : TMXmlElement; path : string) : TFhirDeviceOperationalStatus;
    function ParseDeviceOperationalStatusChild(value : TFhirDeviceOperationalStatus; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceAssociationStatus(element : TMXmlElement; path : string) : TFhirDeviceAssociationStatus;
    function ParseDeviceAssociationStatusChild(value : TFhirDeviceAssociationStatus; path : string; child : TMXmlElement) : boolean;
    function ParseDevice(element : TMXmlElement; path : string) : TFhirDevice;
    function ParseDeviceChild(value : TFhirDevice; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    function ParseDeviceDefinitionUdiDeviceIdentifier(element : TMXmlElement; path : string) : TFhirDeviceDefinitionUdiDeviceIdentifier;
    function ParseDeviceDefinitionUdiDeviceIdentifierChild(value : TFhirDeviceDefinitionUdiDeviceIdentifier; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDefinitionDeviceName;
    function ParseDeviceDefinitionDeviceNameChild(value : TFhirDeviceDefinitionDeviceName; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionSpecialization(element : TMXmlElement; path : string) : TFhirDeviceDefinitionSpecialization;
    function ParseDeviceDefinitionSpecializationChild(value : TFhirDeviceDefinitionSpecialization; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionCapability(element : TMXmlElement; path : string) : TFhirDeviceDefinitionCapability;
    function ParseDeviceDefinitionCapabilityChild(value : TFhirDeviceDefinitionCapability; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionProperty(element : TMXmlElement; path : string) : TFhirDeviceDefinitionProperty;
    function ParseDeviceDefinitionPropertyChild(value : TFhirDeviceDefinitionProperty; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinitionMaterial(element : TMXmlElement; path : string) : TFhirDeviceDefinitionMaterial;
    function ParseDeviceDefinitionMaterialChild(value : TFhirDeviceDefinitionMaterial; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceDefinition(element : TMXmlElement; path : string) : TFhirDeviceDefinition;
    function ParseDeviceDefinitionChild(value : TFhirDeviceDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    function ParseDeviceMetricCalibration(element : TMXmlElement; path : string) : TFhirDeviceMetricCalibration;
    function ParseDeviceMetricCalibrationChild(value : TFhirDeviceMetricCalibration; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceMetric(element : TMXmlElement; path : string) : TFhirDeviceMetric;
    function ParseDeviceMetricChild(value : TFhirDeviceMetric; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    function ParseDeviceRequestParameter(element : TMXmlElement; path : string) : TFhirDeviceRequestParameter;
    function ParseDeviceRequestParameterChild(value : TFhirDeviceRequestParameter; path : string; child : TMXmlElement) : boolean;
    function ParseDeviceRequest(element : TMXmlElement; path : string) : TFhirDeviceRequest;
    function ParseDeviceRequestChild(value : TFhirDeviceRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    function ParseDeviceUseStatement(element : TMXmlElement; path : string) : TFhirDeviceUseStatement;
    function ParseDeviceUseStatementChild(value : TFhirDeviceUseStatement; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    function ParseDiagnosticReportMedia(element : TMXmlElement; path : string) : TFhirDiagnosticReportMedia;
    function ParseDiagnosticReportMediaChild(value : TFhirDiagnosticReportMedia; path : string; child : TMXmlElement) : boolean;
    function ParseDiagnosticReport(element : TMXmlElement; path : string) : TFhirDiagnosticReport;
    function ParseDiagnosticReportChild(value : TFhirDiagnosticReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    function ParseDocumentManifestRelated(element : TMXmlElement; path : string) : TFhirDocumentManifestRelated;
    function ParseDocumentManifestRelatedChild(value : TFhirDocumentManifestRelated; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentManifest(element : TMXmlElement; path : string) : TFhirDocumentManifest;
    function ParseDocumentManifestChild(value : TFhirDocumentManifest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    function ParseDocumentReferenceAttester(element : TMXmlElement; path : string) : TFhirDocumentReferenceAttester;
    function ParseDocumentReferenceAttesterChild(value : TFhirDocumentReferenceAttester; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentReferenceRelatesTo(element : TMXmlElement; path : string) : TFhirDocumentReferenceRelatesTo;
    function ParseDocumentReferenceRelatesToChild(value : TFhirDocumentReferenceRelatesTo; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentReferenceContent(element : TMXmlElement; path : string) : TFhirDocumentReferenceContent;
    function ParseDocumentReferenceContentChild(value : TFhirDocumentReferenceContent; path : string; child : TMXmlElement) : boolean;
    function ParseDocumentReference(element : TMXmlElement; path : string) : TFhirDocumentReference;
    function ParseDocumentReferenceChild(value : TFhirDocumentReference; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
    function ParseEncounterStatusHistory(element : TMXmlElement; path : string) : TFhirEncounterStatusHistory;
    function ParseEncounterStatusHistoryChild(value : TFhirEncounterStatusHistory; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterClassHistory(element : TMXmlElement; path : string) : TFhirEncounterClassHistory;
    function ParseEncounterClassHistoryChild(value : TFhirEncounterClassHistory; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterParticipant(element : TMXmlElement; path : string) : TFhirEncounterParticipant;
    function ParseEncounterParticipantChild(value : TFhirEncounterParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterDiagnosis(element : TMXmlElement; path : string) : TFhirEncounterDiagnosis;
    function ParseEncounterDiagnosisChild(value : TFhirEncounterDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterHospitalization(element : TMXmlElement; path : string) : TFhirEncounterHospitalization;
    function ParseEncounterHospitalizationChild(value : TFhirEncounterHospitalization; path : string; child : TMXmlElement) : boolean;
    function ParseEncounterLocation(element : TMXmlElement; path : string) : TFhirEncounterLocation;
    function ParseEncounterLocationChild(value : TFhirEncounterLocation; path : string; child : TMXmlElement) : boolean;
    function ParseEncounter(element : TMXmlElement; path : string) : TFhirEncounter;
    function ParseEncounterChild(value : TFhirEncounter; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    function ParseEndpoint(element : TMXmlElement; path : string) : TFhirEndpoint;
    function ParseEndpointChild(value : TFhirEndpoint; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    function ParseEnrollmentRequest(element : TMXmlElement; path : string) : TFhirEnrollmentRequest;
    function ParseEnrollmentRequestChild(value : TFhirEnrollmentRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    function ParseEnrollmentResponse(element : TMXmlElement; path : string) : TFhirEnrollmentResponse;
    function ParseEnrollmentResponseChild(value : TFhirEnrollmentResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    function ParseEpisodeOfCareStatusHistory(element : TMXmlElement; path : string) : TFhirEpisodeOfCareStatusHistory;
    function ParseEpisodeOfCareStatusHistoryChild(value : TFhirEpisodeOfCareStatusHistory; path : string; child : TMXmlElement) : boolean;
    function ParseEpisodeOfCareDiagnosis(element : TMXmlElement; path : string) : TFhirEpisodeOfCareDiagnosis;
    function ParseEpisodeOfCareDiagnosisChild(value : TFhirEpisodeOfCareDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseEpisodeOfCare(element : TMXmlElement; path : string) : TFhirEpisodeOfCare;
    function ParseEpisodeOfCareChild(value : TFhirEpisodeOfCare; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    function ParseEventDefinition(element : TMXmlElement; path : string) : TFhirEventDefinition;
    function ParseEventDefinitionChild(value : TFhirEventDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    function ParseEvidenceVariableDefinition(element : TMXmlElement; path : string) : TFhirEvidenceVariableDefinition;
    function ParseEvidenceVariableDefinitionChild(value : TFhirEvidenceVariableDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceCertainty(element : TMXmlElement; path : string) : TFhirEvidenceCertainty;
    function ParseEvidenceCertaintyChild(value : TFhirEvidenceCertainty; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceCertaintyCertaintySubcomponent(element : TMXmlElement; path : string) : TFhirEvidenceCertaintyCertaintySubcomponent;
    function ParseEvidenceCertaintyCertaintySubcomponentChild(value : TFhirEvidenceCertaintyCertaintySubcomponent; path : string; child : TMXmlElement) : boolean;
    function ParseEvidence(element : TMXmlElement; path : string) : TFhirEvidence;
    function ParseEvidenceChild(value : TFhirEvidence; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
    function ParseEvidenceReportSubject(element : TMXmlElement; path : string) : TFhirEvidenceReportSubject;
    function ParseEvidenceReportSubjectChild(value : TFhirEvidenceReportSubject; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceReportSubjectCharacteristic(element : TMXmlElement; path : string) : TFhirEvidenceReportSubjectCharacteristic;
    function ParseEvidenceReportSubjectCharacteristicChild(value : TFhirEvidenceReportSubjectCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceReportRelatesTo(element : TMXmlElement; path : string) : TFhirEvidenceReportRelatesTo;
    function ParseEvidenceReportRelatesToChild(value : TFhirEvidenceReportRelatesTo; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceReportSection(element : TMXmlElement; path : string) : TFhirEvidenceReportSection;
    function ParseEvidenceReportSectionChild(value : TFhirEvidenceReportSection; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceReport(element : TMXmlElement; path : string) : TFhirEvidenceReport;
    function ParseEvidenceReportChild(value : TFhirEvidenceReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    function ParseEvidenceVariableCharacteristic(element : TMXmlElement; path : string) : TFhirEvidenceVariableCharacteristic;
    function ParseEvidenceVariableCharacteristicChild(value : TFhirEvidenceVariableCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceVariableCharacteristicTimeFromStart(element : TMXmlElement; path : string) : TFhirEvidenceVariableCharacteristicTimeFromStart;
    function ParseEvidenceVariableCharacteristicTimeFromStartChild(value : TFhirEvidenceVariableCharacteristicTimeFromStart; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceVariableCategory(element : TMXmlElement; path : string) : TFhirEvidenceVariableCategory;
    function ParseEvidenceVariableCategoryChild(value : TFhirEvidenceVariableCategory; path : string; child : TMXmlElement) : boolean;
    function ParseEvidenceVariable(element : TMXmlElement; path : string) : TFhirEvidenceVariable;
    function ParseEvidenceVariableChild(value : TFhirEvidenceVariable; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    function ParseExampleScenarioActor(element : TMXmlElement; path : string) : TFhirExampleScenarioActor;
    function ParseExampleScenarioActorChild(value : TFhirExampleScenarioActor; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstance;
    function ParseExampleScenarioInstanceChild(value : TFhirExampleScenarioInstance; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioInstanceVersion(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceVersion;
    function ParseExampleScenarioInstanceVersionChild(value : TFhirExampleScenarioInstanceVersion; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioInstanceContainedInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceContainedInstance;
    function ParseExampleScenarioInstanceContainedInstanceChild(value : TFhirExampleScenarioInstanceContainedInstance; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcess(element : TMXmlElement; path : string) : TFhirExampleScenarioProcess;
    function ParseExampleScenarioProcessChild(value : TFhirExampleScenarioProcess; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcessStep(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStep;
    function ParseExampleScenarioProcessStepChild(value : TFhirExampleScenarioProcessStep; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcessStepOperation(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepOperation;
    function ParseExampleScenarioProcessStepOperationChild(value : TFhirExampleScenarioProcessStepOperation; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenarioProcessStepAlternative(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepAlternative;
    function ParseExampleScenarioProcessStepAlternativeChild(value : TFhirExampleScenarioProcessStepAlternative; path : string; child : TMXmlElement) : boolean;
    function ParseExampleScenario(element : TMXmlElement; path : string) : TFhirExampleScenario;
    function ParseExampleScenarioChild(value : TFhirExampleScenario; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    function ParseExplanationOfBenefitRelated(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitRelated;
    function ParseExplanationOfBenefitRelatedChild(value : TFhirExplanationOfBenefitRelated; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitPayee(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayee;
    function ParseExplanationOfBenefitPayeeChild(value : TFhirExplanationOfBenefitPayee; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitCareTeam(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitCareTeam;
    function ParseExplanationOfBenefitCareTeamChild(value : TFhirExplanationOfBenefitCareTeam; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitSupportingInfo(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitSupportingInfo;
    function ParseExplanationOfBenefitSupportingInfoChild(value : TFhirExplanationOfBenefitSupportingInfo; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitDiagnosis(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitDiagnosis;
    function ParseExplanationOfBenefitDiagnosisChild(value : TFhirExplanationOfBenefitDiagnosis; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitProcedure(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcedure;
    function ParseExplanationOfBenefitProcedureChild(value : TFhirExplanationOfBenefitProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitInsurance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitInsurance;
    function ParseExplanationOfBenefitInsuranceChild(value : TFhirExplanationOfBenefitInsurance; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAccident(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAccident;
    function ParseExplanationOfBenefitAccidentChild(value : TFhirExplanationOfBenefitAccident; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItem;
    function ParseExplanationOfBenefitItemChild(value : TFhirExplanationOfBenefitItem; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItemAdjudication(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemAdjudication;
    function ParseExplanationOfBenefitItemAdjudicationChild(value : TFhirExplanationOfBenefitItemAdjudication; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetail;
    function ParseExplanationOfBenefitItemDetailChild(value : TFhirExplanationOfBenefitItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetailSubDetail;
    function ParseExplanationOfBenefitItemDetailSubDetailChild(value : TFhirExplanationOfBenefitItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAddItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItem;
    function ParseExplanationOfBenefitAddItemChild(value : TFhirExplanationOfBenefitAddItem; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAddItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetail;
    function ParseExplanationOfBenefitAddItemDetailChild(value : TFhirExplanationOfBenefitAddItemDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetailSubDetail;
    function ParseExplanationOfBenefitAddItemDetailSubDetailChild(value : TFhirExplanationOfBenefitAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitTotal(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitTotal;
    function ParseExplanationOfBenefitTotalChild(value : TFhirExplanationOfBenefitTotal; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitPayment(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayment;
    function ParseExplanationOfBenefitPaymentChild(value : TFhirExplanationOfBenefitPayment; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitProcessNote(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcessNote;
    function ParseExplanationOfBenefitProcessNoteChild(value : TFhirExplanationOfBenefitProcessNote; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitBenefitBalance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalance;
    function ParseExplanationOfBenefitBenefitBalanceChild(value : TFhirExplanationOfBenefitBenefitBalance; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefitBenefitBalanceFinancial(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
    function ParseExplanationOfBenefitBenefitBalanceFinancialChild(value : TFhirExplanationOfBenefitBenefitBalanceFinancial; path : string; child : TMXmlElement) : boolean;
    function ParseExplanationOfBenefit(element : TMXmlElement; path : string) : TFhirExplanationOfBenefit;
    function ParseExplanationOfBenefitChild(value : TFhirExplanationOfBenefit; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    function ParseFamilyMemberHistoryCondition(element : TMXmlElement; path : string) : TFhirFamilyMemberHistoryCondition;
    function ParseFamilyMemberHistoryConditionChild(value : TFhirFamilyMemberHistoryCondition; path : string; child : TMXmlElement) : boolean;
    function ParseFamilyMemberHistoryProcedure(element : TMXmlElement; path : string) : TFhirFamilyMemberHistoryProcedure;
    function ParseFamilyMemberHistoryProcedureChild(value : TFhirFamilyMemberHistoryProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseFamilyMemberHistory(element : TMXmlElement; path : string) : TFhirFamilyMemberHistory;
    function ParseFamilyMemberHistoryChild(value : TFhirFamilyMemberHistory; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    function ParseFlag(element : TMXmlElement; path : string) : TFhirFlag;
    function ParseFlagChild(value : TFhirFlag; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    function ParseGoalTarget(element : TMXmlElement; path : string) : TFhirGoalTarget;
    function ParseGoalTargetChild(value : TFhirGoalTarget; path : string; child : TMXmlElement) : boolean;
    function ParseGoal(element : TMXmlElement; path : string) : TFhirGoal;
    function ParseGoalChild(value : TFhirGoal; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    function ParseGraphDefinitionLink(element : TMXmlElement; path : string) : TFhirGraphDefinitionLink;
    function ParseGraphDefinitionLinkChild(value : TFhirGraphDefinitionLink; path : string; child : TMXmlElement) : boolean;
    function ParseGraphDefinitionLinkTarget(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTarget;
    function ParseGraphDefinitionLinkTargetChild(value : TFhirGraphDefinitionLinkTarget; path : string; child : TMXmlElement) : boolean;
    function ParseGraphDefinitionLinkTargetCompartment(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTargetCompartment;
    function ParseGraphDefinitionLinkTargetCompartmentChild(value : TFhirGraphDefinitionLinkTargetCompartment; path : string; child : TMXmlElement) : boolean;
    function ParseGraphDefinition(element : TMXmlElement; path : string) : TFhirGraphDefinition;
    function ParseGraphDefinitionChild(value : TFhirGraphDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    function ParseGroupCharacteristic(element : TMXmlElement; path : string) : TFhirGroupCharacteristic;
    function ParseGroupCharacteristicChild(value : TFhirGroupCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseGroupMember(element : TMXmlElement; path : string) : TFhirGroupMember;
    function ParseGroupMemberChild(value : TFhirGroupMember; path : string; child : TMXmlElement) : boolean;
    function ParseGroup(element : TMXmlElement; path : string) : TFhirGroup;
    function ParseGroupChild(value : TFhirGroup; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    function ParseGuidanceResponse(element : TMXmlElement; path : string) : TFhirGuidanceResponse;
    function ParseGuidanceResponseChild(value : TFhirGuidanceResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    function ParseHealthcareServiceEligibility(element : TMXmlElement; path : string) : TFhirHealthcareServiceEligibility;
    function ParseHealthcareServiceEligibilityChild(value : TFhirHealthcareServiceEligibility; path : string; child : TMXmlElement) : boolean;
    function ParseHealthcareServiceAvailableTime(element : TMXmlElement; path : string) : TFhirHealthcareServiceAvailableTime;
    function ParseHealthcareServiceAvailableTimeChild(value : TFhirHealthcareServiceAvailableTime; path : string; child : TMXmlElement) : boolean;
    function ParseHealthcareServiceNotAvailable(element : TMXmlElement; path : string) : TFhirHealthcareServiceNotAvailable;
    function ParseHealthcareServiceNotAvailableChild(value : TFhirHealthcareServiceNotAvailable; path : string; child : TMXmlElement) : boolean;
    function ParseHealthcareService(element : TMXmlElement; path : string) : TFhirHealthcareService;
    function ParseHealthcareServiceChild(value : TFhirHealthcareService; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    function ParseImagingStudyProcedure(element : TMXmlElement; path : string) : TFhirImagingStudyProcedure;
    function ParseImagingStudyProcedureChild(value : TFhirImagingStudyProcedure; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudySeries(element : TMXmlElement; path : string) : TFhirImagingStudySeries;
    function ParseImagingStudySeriesChild(value : TFhirImagingStudySeries; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudySeriesPerformer(element : TMXmlElement; path : string) : TFhirImagingStudySeriesPerformer;
    function ParseImagingStudySeriesPerformerChild(value : TFhirImagingStudySeriesPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudySeriesInstance(element : TMXmlElement; path : string) : TFhirImagingStudySeriesInstance;
    function ParseImagingStudySeriesInstanceChild(value : TFhirImagingStudySeriesInstance; path : string; child : TMXmlElement) : boolean;
    function ParseImagingStudy(element : TMXmlElement; path : string) : TFhirImagingStudy;
    function ParseImagingStudyChild(value : TFhirImagingStudy; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    function ParseImmunizationPerformer(element : TMXmlElement; path : string) : TFhirImmunizationPerformer;
    function ParseImmunizationPerformerChild(value : TFhirImmunizationPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationEducation(element : TMXmlElement; path : string) : TFhirImmunizationEducation;
    function ParseImmunizationEducationChild(value : TFhirImmunizationEducation; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationReaction(element : TMXmlElement; path : string) : TFhirImmunizationReaction;
    function ParseImmunizationReactionChild(value : TFhirImmunizationReaction; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationProtocolApplied(element : TMXmlElement; path : string) : TFhirImmunizationProtocolApplied;
    function ParseImmunizationProtocolAppliedChild(value : TFhirImmunizationProtocolApplied; path : string; child : TMXmlElement) : boolean;
    function ParseImmunization(element : TMXmlElement; path : string) : TFhirImmunization;
    function ParseImmunizationChild(value : TFhirImmunization; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    function ParseImmunizationEvaluation(element : TMXmlElement; path : string) : TFhirImmunizationEvaluation;
    function ParseImmunizationEvaluationChild(value : TFhirImmunizationEvaluation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    function ParseImmunizationRecommendationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendation;
    function ParseImmunizationRecommendationRecommendationChild(value : TFhirImmunizationRecommendationRecommendation; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationRecommendationRecommendationDateCriterion(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendationDateCriterion;
    function ParseImmunizationRecommendationRecommendationDateCriterionChild(value : TFhirImmunizationRecommendationRecommendationDateCriterion; path : string; child : TMXmlElement) : boolean;
    function ParseImmunizationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendation;
    function ParseImmunizationRecommendationChild(value : TFhirImmunizationRecommendation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    function ParseImplementationGuideDependsOn(element : TMXmlElement; path : string) : TFhirImplementationGuideDependsOn;
    function ParseImplementationGuideDependsOnChild(value : TFhirImplementationGuideDependsOn; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideGlobal(element : TMXmlElement; path : string) : TFhirImplementationGuideGlobal;
    function ParseImplementationGuideGlobalChild(value : TFhirImplementationGuideGlobal; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinition(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinition;
    function ParseImplementationGuideDefinitionChild(value : TFhirImplementationGuideDefinition; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionGrouping(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionGrouping;
    function ParseImplementationGuideDefinitionGroupingChild(value : TFhirImplementationGuideDefinitionGrouping; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionResource(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionResource;
    function ParseImplementationGuideDefinitionResourceChild(value : TFhirImplementationGuideDefinitionResource; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionPage(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionPage;
    function ParseImplementationGuideDefinitionPageChild(value : TFhirImplementationGuideDefinitionPage; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionParameter(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionParameter;
    function ParseImplementationGuideDefinitionParameterChild(value : TFhirImplementationGuideDefinitionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideDefinitionTemplate(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionTemplate;
    function ParseImplementationGuideDefinitionTemplateChild(value : TFhirImplementationGuideDefinitionTemplate; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideManifest(element : TMXmlElement; path : string) : TFhirImplementationGuideManifest;
    function ParseImplementationGuideManifestChild(value : TFhirImplementationGuideManifest; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideManifestResource(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestResource;
    function ParseImplementationGuideManifestResourceChild(value : TFhirImplementationGuideManifestResource; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuideManifestPage(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestPage;
    function ParseImplementationGuideManifestPageChild(value : TFhirImplementationGuideManifestPage; path : string; child : TMXmlElement) : boolean;
    function ParseImplementationGuide(element : TMXmlElement; path : string) : TFhirImplementationGuide;
    function ParseImplementationGuideChild(value : TFhirImplementationGuide; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
    function ParseIngredientSubstance(element : TMXmlElement; path : string) : TFhirIngredientSubstance;
    function ParseIngredientSubstanceChild(value : TFhirIngredientSubstance; path : string; child : TMXmlElement) : boolean;
    function ParseIngredientSubstanceStrength(element : TMXmlElement; path : string) : TFhirIngredientSubstanceStrength;
    function ParseIngredientSubstanceStrengthChild(value : TFhirIngredientSubstanceStrength; path : string; child : TMXmlElement) : boolean;
    function ParseIngredientSubstanceStrengthReferenceStrength(element : TMXmlElement; path : string) : TFhirIngredientSubstanceStrengthReferenceStrength;
    function ParseIngredientSubstanceStrengthReferenceStrengthChild(value : TFhirIngredientSubstanceStrengthReferenceStrength; path : string; child : TMXmlElement) : boolean;
    function ParseIngredientSpecifiedSubstance(element : TMXmlElement; path : string) : TFhirIngredientSpecifiedSubstance;
    function ParseIngredientSpecifiedSubstanceChild(value : TFhirIngredientSpecifiedSubstance; path : string; child : TMXmlElement) : boolean;
    function ParseIngredient(element : TMXmlElement; path : string) : TFhirIngredient;
    function ParseIngredientChild(value : TFhirIngredient; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
    function ParseInsurancePlanContact(element : TMXmlElement; path : string) : TFhirInsurancePlanContact;
    function ParseInsurancePlanContactChild(value : TFhirInsurancePlanContact; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanCoverage(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverage;
    function ParseInsurancePlanCoverageChild(value : TFhirInsurancePlanCoverage; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanCoverageBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefit;
    function ParseInsurancePlanCoverageBenefitChild(value : TFhirInsurancePlanCoverageBenefit; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanCoverageBenefitLimit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefitLimit;
    function ParseInsurancePlanCoverageBenefitLimitChild(value : TFhirInsurancePlanCoverageBenefitLimit; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlan(element : TMXmlElement; path : string) : TFhirInsurancePlanPlan;
    function ParseInsurancePlanPlanChild(value : TFhirInsurancePlanPlan; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanGeneralCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanGeneralCost;
    function ParseInsurancePlanPlanGeneralCostChild(value : TFhirInsurancePlanPlanGeneralCost; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanSpecificCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCost;
    function ParseInsurancePlanPlanSpecificCostChild(value : TFhirInsurancePlanPlanSpecificCost; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanSpecificCostBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefit;
    function ParseInsurancePlanPlanSpecificCostBenefitChild(value : TFhirInsurancePlanPlanSpecificCostBenefit; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlanPlanSpecificCostBenefitCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefitCost;
    function ParseInsurancePlanPlanSpecificCostBenefitCostChild(value : TFhirInsurancePlanPlanSpecificCostBenefitCost; path : string; child : TMXmlElement) : boolean;
    function ParseInsurancePlan(element : TMXmlElement; path : string) : TFhirInsurancePlan;
    function ParseInsurancePlanChild(value : TFhirInsurancePlan; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    function ParseInvoiceParticipant(element : TMXmlElement; path : string) : TFhirInvoiceParticipant;
    function ParseInvoiceParticipantChild(value : TFhirInvoiceParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseInvoiceLineItem(element : TMXmlElement; path : string) : TFhirInvoiceLineItem;
    function ParseInvoiceLineItemChild(value : TFhirInvoiceLineItem; path : string; child : TMXmlElement) : boolean;
    function ParseInvoiceLineItemPriceComponent(element : TMXmlElement; path : string) : TFhirInvoiceLineItemPriceComponent;
    function ParseInvoiceLineItemPriceComponentChild(value : TFhirInvoiceLineItemPriceComponent; path : string; child : TMXmlElement) : boolean;
    function ParseInvoice(element : TMXmlElement; path : string) : TFhirInvoice;
    function ParseInvoiceChild(value : TFhirInvoice; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    function ParseLibrary(element : TMXmlElement; path : string) : TFhirLibrary;
    function ParseLibraryChild(value : TFhirLibrary; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    function ParseLinkageItem(element : TMXmlElement; path : string) : TFhirLinkageItem;
    function ParseLinkageItemChild(value : TFhirLinkageItem; path : string; child : TMXmlElement) : boolean;
    function ParseLinkage(element : TMXmlElement; path : string) : TFhirLinkage;
    function ParseLinkageChild(value : TFhirLinkage; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    function ParseListEntry(element : TMXmlElement; path : string) : TFhirListEntry;
    function ParseListEntryChild(value : TFhirListEntry; path : string; child : TMXmlElement) : boolean;
    function ParseList(element : TMXmlElement; path : string) : TFhirList;
    function ParseListChild(value : TFhirList; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    function ParseLocationPosition(element : TMXmlElement; path : string) : TFhirLocationPosition;
    function ParseLocationPositionChild(value : TFhirLocationPosition; path : string; child : TMXmlElement) : boolean;
    function ParseLocationHoursOfOperation(element : TMXmlElement; path : string) : TFhirLocationHoursOfOperation;
    function ParseLocationHoursOfOperationChild(value : TFhirLocationHoursOfOperation; path : string; child : TMXmlElement) : boolean;
    function ParseLocation(element : TMXmlElement; path : string) : TFhirLocation;
    function ParseLocationChild(value : TFhirLocation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
    function ParseManufacturedItemDefinitionProperty(element : TMXmlElement; path : string) : TFhirManufacturedItemDefinitionProperty;
    function ParseManufacturedItemDefinitionPropertyChild(value : TFhirManufacturedItemDefinitionProperty; path : string; child : TMXmlElement) : boolean;
    function ParseManufacturedItemDefinition(element : TMXmlElement; path : string) : TFhirManufacturedItemDefinition;
    function ParseManufacturedItemDefinitionChild(value : TFhirManufacturedItemDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
    function ParseMeasureGroup(element : TMXmlElement; path : string) : TFhirMeasureGroup;
    function ParseMeasureGroupChild(value : TFhirMeasureGroup; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureGroupPopulation;
    function ParseMeasureGroupPopulationChild(value : TFhirMeasureGroupPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifier;
    function ParseMeasureGroupStratifierChild(value : TFhirMeasureGroupStratifier; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureGroupStratifierComponent(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifierComponent;
    function ParseMeasureGroupStratifierComponentChild(value : TFhirMeasureGroupStratifierComponent; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureSupplementalData(element : TMXmlElement; path : string) : TFhirMeasureSupplementalData;
    function ParseMeasureSupplementalDataChild(value : TFhirMeasureSupplementalData; path : string; child : TMXmlElement) : boolean;
    function ParseMeasure(element : TMXmlElement; path : string) : TFhirMeasure;
    function ParseMeasureChild(value : TFhirMeasure; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    function ParseMeasureReportGroup(element : TMXmlElement; path : string) : TFhirMeasureReportGroup;
    function ParseMeasureReportGroupChild(value : TFhirMeasureReportGroup; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupPopulation;
    function ParseMeasureReportGroupPopulationChild(value : TFhirMeasureReportGroupPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifier;
    function ParseMeasureReportGroupStratifierChild(value : TFhirMeasureReportGroupStratifier; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifierStratum(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratum;
    function ParseMeasureReportGroupStratifierStratumChild(value : TFhirMeasureReportGroupStratifierStratum; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifierStratumComponent(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumComponent;
    function ParseMeasureReportGroupStratifierStratumComponentChild(value : TFhirMeasureReportGroupStratifierStratumComponent; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReportGroupStratifierStratumPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumPopulation;
    function ParseMeasureReportGroupStratifierStratumPopulationChild(value : TFhirMeasureReportGroupStratifierStratumPopulation; path : string; child : TMXmlElement) : boolean;
    function ParseMeasureReport(element : TMXmlElement; path : string) : TFhirMeasureReport;
    function ParseMeasureReportChild(value : TFhirMeasureReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDICATION}
    function ParseMedicationIngredient(element : TMXmlElement; path : string) : TFhirMedicationIngredient;
    function ParseMedicationIngredientChild(value : TFhirMedicationIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationBatch(element : TMXmlElement; path : string) : TFhirMedicationBatch;
    function ParseMedicationBatchChild(value : TFhirMedicationBatch; path : string; child : TMXmlElement) : boolean;
    function ParseMedication(element : TMXmlElement; path : string) : TFhirMedication;
    function ParseMedicationChild(value : TFhirMedication; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    function ParseMedicationAdministrationPerformer(element : TMXmlElement; path : string) : TFhirMedicationAdministrationPerformer;
    function ParseMedicationAdministrationPerformerChild(value : TFhirMedicationAdministrationPerformer; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationAdministrationDosage(element : TMXmlElement; path : string) : TFhirMedicationAdministrationDosage;
    function ParseMedicationAdministrationDosageChild(value : TFhirMedicationAdministrationDosage; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationAdministration(element : TMXmlElement; path : string) : TFhirMedicationAdministration;
    function ParseMedicationAdministrationChild(value : TFhirMedicationAdministration; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    function ParseMedicationDispensePerformer(element : TMXmlElement; path : string) : TFhirMedicationDispensePerformer;
    function ParseMedicationDispensePerformerChild(value : TFhirMedicationDispensePerformer; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationDispenseSubstitution(element : TMXmlElement; path : string) : TFhirMedicationDispenseSubstitution;
    function ParseMedicationDispenseSubstitutionChild(value : TFhirMedicationDispenseSubstitution; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationDispense(element : TMXmlElement; path : string) : TFhirMedicationDispense;
    function ParseMedicationDispenseChild(value : TFhirMedicationDispense; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    function ParseMedicationKnowledgeRelatedMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRelatedMedicationKnowledge;
    function ParseMedicationKnowledgeRelatedMedicationKnowledgeChild(value : TFhirMedicationKnowledgeRelatedMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeMonograph(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonograph;
    function ParseMedicationKnowledgeMonographChild(value : TFhirMedicationKnowledgeMonograph; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeIngredient(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeIngredient;
    function ParseMedicationKnowledgeIngredientChild(value : TFhirMedicationKnowledgeIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeCost(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeCost;
    function ParseMedicationKnowledgeCostChild(value : TFhirMedicationKnowledgeCost; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeMonitoringProgram(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonitoringProgram;
    function ParseMedicationKnowledgeMonitoringProgramChild(value : TFhirMedicationKnowledgeMonitoringProgram; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeAdministrationGuideline(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuideline;
    function ParseMedicationKnowledgeAdministrationGuidelineChild(value : TFhirMedicationKnowledgeAdministrationGuideline; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeAdministrationGuidelineDosage(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelineDosage;
    function ParseMedicationKnowledgeAdministrationGuidelineDosageChild(value : TFhirMedicationKnowledgeAdministrationGuidelineDosage; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeAdministrationGuidelinePatientCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic;
    function ParseMedicationKnowledgeAdministrationGuidelinePatientCharacteristicChild(value : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeMedicineClassification(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMedicineClassification;
    function ParseMedicationKnowledgeMedicineClassificationChild(value : TFhirMedicationKnowledgeMedicineClassification; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgePackaging(element : TMXmlElement; path : string) : TFhirMedicationKnowledgePackaging;
    function ParseMedicationKnowledgePackagingChild(value : TFhirMedicationKnowledgePackaging; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeDrugCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeDrugCharacteristic;
    function ParseMedicationKnowledgeDrugCharacteristicChild(value : TFhirMedicationKnowledgeDrugCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatory(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatory;
    function ParseMedicationKnowledgeRegulatoryChild(value : TFhirMedicationKnowledgeRegulatory; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatorySubstitution(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatorySubstitution;
    function ParseMedicationKnowledgeRegulatorySubstitutionChild(value : TFhirMedicationKnowledgeRegulatorySubstitution; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeRegulatoryMaxDispense(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatoryMaxDispense;
    function ParseMedicationKnowledgeRegulatoryMaxDispenseChild(value : TFhirMedicationKnowledgeRegulatoryMaxDispense; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledgeKineticCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeKineticCharacteristic;
    function ParseMedicationKnowledgeKineticCharacteristicChild(value : TFhirMedicationKnowledgeKineticCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledge;
    function ParseMedicationKnowledgeChild(value : TFhirMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    function ParseMedicationRequestDispenseRequest(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequest;
    function ParseMedicationRequestDispenseRequestChild(value : TFhirMedicationRequestDispenseRequest; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationRequestDispenseRequestInitialFill(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequestInitialFill;
    function ParseMedicationRequestDispenseRequestInitialFillChild(value : TFhirMedicationRequestDispenseRequestInitialFill; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationRequestSubstitution(element : TMXmlElement; path : string) : TFhirMedicationRequestSubstitution;
    function ParseMedicationRequestSubstitutionChild(value : TFhirMedicationRequestSubstitution; path : string; child : TMXmlElement) : boolean;
    function ParseMedicationRequest(element : TMXmlElement; path : string) : TFhirMedicationRequest;
    function ParseMedicationRequestChild(value : TFhirMedicationRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONUSAGE}
    function ParseMedicationUsage(element : TMXmlElement; path : string) : TFhirMedicationUsage;
    function ParseMedicationUsageChild(value : TFhirMedicationUsage; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICATIONUSAGE}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
    function ParseMedicinalProductDefinitionContact(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionContact;
    function ParseMedicinalProductDefinitionContactChild(value : TFhirMedicinalProductDefinitionContact; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductDefinitionName(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionName;
    function ParseMedicinalProductDefinitionNameChild(value : TFhirMedicinalProductDefinitionName; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductDefinitionNameNamePart(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionNameNamePart;
    function ParseMedicinalProductDefinitionNameNamePartChild(value : TFhirMedicinalProductDefinitionNameNamePart; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductDefinitionNameCountryLanguage(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionNameCountryLanguage;
    function ParseMedicinalProductDefinitionNameCountryLanguageChild(value : TFhirMedicinalProductDefinitionNameCountryLanguage; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductDefinitionCrossReference(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionCrossReference;
    function ParseMedicinalProductDefinitionCrossReferenceChild(value : TFhirMedicinalProductDefinitionCrossReference; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductDefinitionManufacturingBusinessOperation(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionManufacturingBusinessOperation;
    function ParseMedicinalProductDefinitionManufacturingBusinessOperationChild(value : TFhirMedicinalProductDefinitionManufacturingBusinessOperation; path : string; child : TMXmlElement) : boolean;
    function ParseMedicinalProductDefinition(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinition;
    function ParseMedicinalProductDefinitionChild(value : TFhirMedicinalProductDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
    function ParseMessageDefinitionFocus(element : TMXmlElement; path : string) : TFhirMessageDefinitionFocus;
    function ParseMessageDefinitionFocusChild(value : TFhirMessageDefinitionFocus; path : string; child : TMXmlElement) : boolean;
    function ParseMessageDefinitionAllowedResponse(element : TMXmlElement; path : string) : TFhirMessageDefinitionAllowedResponse;
    function ParseMessageDefinitionAllowedResponseChild(value : TFhirMessageDefinitionAllowedResponse; path : string; child : TMXmlElement) : boolean;
    function ParseMessageDefinition(element : TMXmlElement; path : string) : TFhirMessageDefinition;
    function ParseMessageDefinitionChild(value : TFhirMessageDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    function ParseMessageHeaderDestination(element : TMXmlElement; path : string) : TFhirMessageHeaderDestination;
    function ParseMessageHeaderDestinationChild(value : TFhirMessageHeaderDestination; path : string; child : TMXmlElement) : boolean;
    function ParseMessageHeaderSource(element : TMXmlElement; path : string) : TFhirMessageHeaderSource;
    function ParseMessageHeaderSourceChild(value : TFhirMessageHeaderSource; path : string; child : TMXmlElement) : boolean;
    function ParseMessageHeaderResponse(element : TMXmlElement; path : string) : TFhirMessageHeaderResponse;
    function ParseMessageHeaderResponseChild(value : TFhirMessageHeaderResponse; path : string; child : TMXmlElement) : boolean;
    function ParseMessageHeader(element : TMXmlElement; path : string) : TFhirMessageHeader;
    function ParseMessageHeaderChild(value : TFhirMessageHeader; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    function ParseMolecularSequenceReferenceSeq(element : TMXmlElement; path : string) : TFhirMolecularSequenceReferenceSeq;
    function ParseMolecularSequenceReferenceSeqChild(value : TFhirMolecularSequenceReferenceSeq; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceVariant;
    function ParseMolecularSequenceVariantChild(value : TFhirMolecularSequenceVariant; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceQuality(element : TMXmlElement; path : string) : TFhirMolecularSequenceQuality;
    function ParseMolecularSequenceQualityChild(value : TFhirMolecularSequenceQuality; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceQualityRoc(element : TMXmlElement; path : string) : TFhirMolecularSequenceQualityRoc;
    function ParseMolecularSequenceQualityRocChild(value : TFhirMolecularSequenceQualityRoc; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceRepository(element : TMXmlElement; path : string) : TFhirMolecularSequenceRepository;
    function ParseMolecularSequenceRepositoryChild(value : TFhirMolecularSequenceRepository; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceStructureVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariant;
    function ParseMolecularSequenceStructureVariantChild(value : TFhirMolecularSequenceStructureVariant; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceStructureVariantOuter(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantOuter;
    function ParseMolecularSequenceStructureVariantOuterChild(value : TFhirMolecularSequenceStructureVariantOuter; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequenceStructureVariantInner(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantInner;
    function ParseMolecularSequenceStructureVariantInnerChild(value : TFhirMolecularSequenceStructureVariantInner; path : string; child : TMXmlElement) : boolean;
    function ParseMolecularSequence(element : TMXmlElement; path : string) : TFhirMolecularSequence;
    function ParseMolecularSequenceChild(value : TFhirMolecularSequence; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    function ParseNamingSystemUniqueId(element : TMXmlElement; path : string) : TFhirNamingSystemUniqueId;
    function ParseNamingSystemUniqueIdChild(value : TFhirNamingSystemUniqueId; path : string; child : TMXmlElement) : boolean;
    function ParseNamingSystem(element : TMXmlElement; path : string) : TFhirNamingSystem;
    function ParseNamingSystemChild(value : TFhirNamingSystem; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONINTAKE}
    function ParseNutritionIntakeConsumedItem(element : TMXmlElement; path : string) : TFhirNutritionIntakeConsumedItem;
    function ParseNutritionIntakeConsumedItemChild(value : TFhirNutritionIntakeConsumedItem; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionIntakeIngredientLabel(element : TMXmlElement; path : string) : TFhirNutritionIntakeIngredientLabel;
    function ParseNutritionIntakeIngredientLabelChild(value : TFhirNutritionIntakeIngredientLabel; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionIntakePerformer(element : TMXmlElement; path : string) : TFhirNutritionIntakePerformer;
    function ParseNutritionIntakePerformerChild(value : TFhirNutritionIntakePerformer; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionIntake(element : TMXmlElement; path : string) : TFhirNutritionIntake;
    function ParseNutritionIntakeChild(value : TFhirNutritionIntake; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_NUTRITIONINTAKE}
{$IFDEF FHIR_NUTRITIONORDER}
    function ParseNutritionOrderOralDiet(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDiet;
    function ParseNutritionOrderOralDietChild(value : TFhirNutritionOrderOralDiet; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderOralDietNutrient(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietNutrient;
    function ParseNutritionOrderOralDietNutrientChild(value : TFhirNutritionOrderOralDietNutrient; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderOralDietTexture(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietTexture;
    function ParseNutritionOrderOralDietTextureChild(value : TFhirNutritionOrderOralDietTexture; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderSupplement(element : TMXmlElement; path : string) : TFhirNutritionOrderSupplement;
    function ParseNutritionOrderSupplementChild(value : TFhirNutritionOrderSupplement; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderEnteralFormula(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormula;
    function ParseNutritionOrderEnteralFormulaChild(value : TFhirNutritionOrderEnteralFormula; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrderEnteralFormulaAdministration(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormulaAdministration;
    function ParseNutritionOrderEnteralFormulaAdministrationChild(value : TFhirNutritionOrderEnteralFormulaAdministration; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionOrder(element : TMXmlElement; path : string) : TFhirNutritionOrder;
    function ParseNutritionOrderChild(value : TFhirNutritionOrder; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
    function ParseNutritionProductNutrient(element : TMXmlElement; path : string) : TFhirNutritionProductNutrient;
    function ParseNutritionProductNutrientChild(value : TFhirNutritionProductNutrient; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionProductIngredient(element : TMXmlElement; path : string) : TFhirNutritionProductIngredient;
    function ParseNutritionProductIngredientChild(value : TFhirNutritionProductIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionProductProductCharacteristic(element : TMXmlElement; path : string) : TFhirNutritionProductProductCharacteristic;
    function ParseNutritionProductProductCharacteristicChild(value : TFhirNutritionProductProductCharacteristic; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionProductInstance(element : TMXmlElement; path : string) : TFhirNutritionProductInstance;
    function ParseNutritionProductInstanceChild(value : TFhirNutritionProductInstance; path : string; child : TMXmlElement) : boolean;
    function ParseNutritionProduct(element : TMXmlElement; path : string) : TFhirNutritionProduct;
    function ParseNutritionProductChild(value : TFhirNutritionProduct; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
    function ParseObservationReferenceRange(element : TMXmlElement; path : string) : TFhirObservationReferenceRange;
    function ParseObservationReferenceRangeChild(value : TFhirObservationReferenceRange; path : string; child : TMXmlElement) : boolean;
    function ParseObservationComponent(element : TMXmlElement; path : string) : TFhirObservationComponent;
    function ParseObservationComponentChild(value : TFhirObservationComponent; path : string; child : TMXmlElement) : boolean;
    function ParseObservation(element : TMXmlElement; path : string) : TFhirObservation;
    function ParseObservationChild(value : TFhirObservation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    function ParseObservationDefinitionQuantitativeDetails(element : TMXmlElement; path : string) : TFhirObservationDefinitionQuantitativeDetails;
    function ParseObservationDefinitionQuantitativeDetailsChild(value : TFhirObservationDefinitionQuantitativeDetails; path : string; child : TMXmlElement) : boolean;
    function ParseObservationDefinitionQualifiedInterval(element : TMXmlElement; path : string) : TFhirObservationDefinitionQualifiedInterval;
    function ParseObservationDefinitionQualifiedIntervalChild(value : TFhirObservationDefinitionQualifiedInterval; path : string; child : TMXmlElement) : boolean;
    function ParseObservationDefinitionComponent(element : TMXmlElement; path : string) : TFhirObservationDefinitionComponent;
    function ParseObservationDefinitionComponentChild(value : TFhirObservationDefinitionComponent; path : string; child : TMXmlElement) : boolean;
    function ParseObservationDefinition(element : TMXmlElement; path : string) : TFhirObservationDefinition;
    function ParseObservationDefinitionChild(value : TFhirObservationDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    function ParseOperationDefinitionParameter(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameter;
    function ParseOperationDefinitionParameterChild(value : TFhirOperationDefinitionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinitionParameterBinding(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterBinding;
    function ParseOperationDefinitionParameterBindingChild(value : TFhirOperationDefinitionParameterBinding; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinitionParameterReferencedFrom(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterReferencedFrom;
    function ParseOperationDefinitionParameterReferencedFromChild(value : TFhirOperationDefinitionParameterReferencedFrom; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinitionOverload(element : TMXmlElement; path : string) : TFhirOperationDefinitionOverload;
    function ParseOperationDefinitionOverloadChild(value : TFhirOperationDefinitionOverload; path : string; child : TMXmlElement) : boolean;
    function ParseOperationDefinition(element : TMXmlElement; path : string) : TFhirOperationDefinition;
    function ParseOperationDefinitionChild(value : TFhirOperationDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    function ParseOperationOutcomeIssue(element : TMXmlElement; path : string) : TFhirOperationOutcomeIssue;
    function ParseOperationOutcomeIssueChild(value : TFhirOperationOutcomeIssue; path : string; child : TMXmlElement) : boolean;
    function ParseOperationOutcome(element : TMXmlElement; path : string) : TFhirOperationOutcome;
    function ParseOperationOutcomeChild(value : TFhirOperationOutcome; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    function ParseOrganizationContact(element : TMXmlElement; path : string) : TFhirOrganizationContact;
    function ParseOrganizationContactChild(value : TFhirOrganizationContact; path : string; child : TMXmlElement) : boolean;
    function ParseOrganization(element : TMXmlElement; path : string) : TFhirOrganization;
    function ParseOrganizationChild(value : TFhirOrganization; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    function ParseOrganizationAffiliation(element : TMXmlElement; path : string) : TFhirOrganizationAffiliation;
    function ParseOrganizationAffiliationChild(value : TFhirOrganizationAffiliation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
    function ParsePackagedProductDefinitionBatchIdentifier(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionBatchIdentifier;
    function ParsePackagedProductDefinitionBatchIdentifierChild(value : TFhirPackagedProductDefinitionBatchIdentifier; path : string; child : TMXmlElement) : boolean;
    function ParsePackagedProductDefinitionPackage(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionPackage;
    function ParsePackagedProductDefinitionPackageChild(value : TFhirPackagedProductDefinitionPackage; path : string; child : TMXmlElement) : boolean;
    function ParsePackagedProductDefinitionPackageProperty(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionPackageProperty;
    function ParsePackagedProductDefinitionPackagePropertyChild(value : TFhirPackagedProductDefinitionPackageProperty; path : string; child : TMXmlElement) : boolean;
    function ParsePackagedProductDefinitionPackageContainedItem(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionPackageContainedItem;
    function ParsePackagedProductDefinitionPackageContainedItemChild(value : TFhirPackagedProductDefinitionPackageContainedItem; path : string; child : TMXmlElement) : boolean;
    function ParsePackagedProductDefinition(element : TMXmlElement; path : string) : TFhirPackagedProductDefinition;
    function ParsePackagedProductDefinitionChild(value : TFhirPackagedProductDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
    function ParseParametersParameter(element : TMXmlElement; path : string) : TFhirParametersParameter;
    function ParseParametersParameterChild(value : TFhirParametersParameter; path : string; child : TMXmlElement) : boolean;
    function ParseParameters(element : TMXmlElement; path : string) : TFhirParameters;
    function ParseParametersChild(value : TFhirParameters; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
    function ParsePatientContact(element : TMXmlElement; path : string) : TFhirPatientContact;
    function ParsePatientContactChild(value : TFhirPatientContact; path : string; child : TMXmlElement) : boolean;
    function ParsePatientCommunication(element : TMXmlElement; path : string) : TFhirPatientCommunication;
    function ParsePatientCommunicationChild(value : TFhirPatientCommunication; path : string; child : TMXmlElement) : boolean;
    function ParsePatientLink(element : TMXmlElement; path : string) : TFhirPatientLink;
    function ParsePatientLinkChild(value : TFhirPatientLink; path : string; child : TMXmlElement) : boolean;
    function ParsePatient(element : TMXmlElement; path : string) : TFhirPatient;
    function ParsePatientChild(value : TFhirPatient; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    function ParsePaymentNotice(element : TMXmlElement; path : string) : TFhirPaymentNotice;
    function ParsePaymentNoticeChild(value : TFhirPaymentNotice; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    function ParsePaymentReconciliationDetail(element : TMXmlElement; path : string) : TFhirPaymentReconciliationDetail;
    function ParsePaymentReconciliationDetailChild(value : TFhirPaymentReconciliationDetail; path : string; child : TMXmlElement) : boolean;
    function ParsePaymentReconciliationProcessNote(element : TMXmlElement; path : string) : TFhirPaymentReconciliationProcessNote;
    function ParsePaymentReconciliationProcessNoteChild(value : TFhirPaymentReconciliationProcessNote; path : string; child : TMXmlElement) : boolean;
    function ParsePaymentReconciliation(element : TMXmlElement; path : string) : TFhirPaymentReconciliation;
    function ParsePaymentReconciliationChild(value : TFhirPaymentReconciliation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERMISSION}
    function ParsePermissionProcessingActivity(element : TMXmlElement; path : string) : TFhirPermissionProcessingActivity;
    function ParsePermissionProcessingActivityChild(value : TFhirPermissionProcessingActivity; path : string; child : TMXmlElement) : boolean;
    function ParsePermissionJustification(element : TMXmlElement; path : string) : TFhirPermissionJustification;
    function ParsePermissionJustificationChild(value : TFhirPermissionJustification; path : string; child : TMXmlElement) : boolean;
    function ParsePermission(element : TMXmlElement; path : string) : TFhirPermission;
    function ParsePermissionChild(value : TFhirPermission; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PERMISSION}
{$IFDEF FHIR_PERSON}
    function ParsePersonLink(element : TMXmlElement; path : string) : TFhirPersonLink;
    function ParsePersonLinkChild(value : TFhirPersonLink; path : string; child : TMXmlElement) : boolean;
    function ParsePerson(element : TMXmlElement; path : string) : TFhirPerson;
    function ParsePersonChild(value : TFhirPerson; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    function ParsePlanDefinitionGoal(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoal;
    function ParsePlanDefinitionGoalChild(value : TFhirPlanDefinitionGoal; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionGoalTarget(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoalTarget;
    function ParsePlanDefinitionGoalTargetChild(value : TFhirPlanDefinitionGoalTarget; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionAction;
    function ParsePlanDefinitionActionChild(value : TFhirPlanDefinitionAction; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionCondition(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionCondition;
    function ParsePlanDefinitionActionConditionChild(value : TFhirPlanDefinitionActionCondition; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionRelatedAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionRelatedAction;
    function ParsePlanDefinitionActionRelatedActionChild(value : TFhirPlanDefinitionActionRelatedAction; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionParticipant(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionParticipant;
    function ParsePlanDefinitionActionParticipantChild(value : TFhirPlanDefinitionActionParticipant; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinitionActionDynamicValue(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionDynamicValue;
    function ParsePlanDefinitionActionDynamicValueChild(value : TFhirPlanDefinitionActionDynamicValue; path : string; child : TMXmlElement) : boolean;
    function ParsePlanDefinition(element : TMXmlElement; path : string) : TFhirPlanDefinition;
    function ParsePlanDefinitionChild(value : TFhirPlanDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    function ParsePractitionerQualification(element : TMXmlElement; path : string) : TFhirPractitionerQualification;
    function ParsePractitionerQualificationChild(value : TFhirPractitionerQualification; path : string; child : TMXmlElement) : boolean;
    function ParsePractitioner(element : TMXmlElement; path : string) : TFhirPractitioner;
    function ParsePractitionerChild(value : TFhirPractitioner; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    function ParsePractitionerRoleAvailableTime(element : TMXmlElement; path : string) : TFhirPractitionerRoleAvailableTime;
    function ParsePractitionerRoleAvailableTimeChild(value : TFhirPractitionerRoleAvailableTime; path : string; child : TMXmlElement) : boolean;
    function ParsePractitionerRoleNotAvailable(element : TMXmlElement; path : string) : TFhirPractitionerRoleNotAvailable;
    function ParsePractitionerRoleNotAvailableChild(value : TFhirPractitionerRoleNotAvailable; path : string; child : TMXmlElement) : boolean;
    function ParsePractitionerRole(element : TMXmlElement; path : string) : TFhirPractitionerRole;
    function ParsePractitionerRoleChild(value : TFhirPractitionerRole; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    function ParseProcedurePerformer(element : TMXmlElement; path : string) : TFhirProcedurePerformer;
    function ParseProcedurePerformerChild(value : TFhirProcedurePerformer; path : string; child : TMXmlElement) : boolean;
    function ParseProcedureFocalDevice(element : TMXmlElement; path : string) : TFhirProcedureFocalDevice;
    function ParseProcedureFocalDeviceChild(value : TFhirProcedureFocalDevice; path : string; child : TMXmlElement) : boolean;
    function ParseProcedure(element : TMXmlElement; path : string) : TFhirProcedure;
    function ParseProcedureChild(value : TFhirProcedure; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    function ParseProvenanceAgent(element : TMXmlElement; path : string) : TFhirProvenanceAgent;
    function ParseProvenanceAgentChild(value : TFhirProvenanceAgent; path : string; child : TMXmlElement) : boolean;
    function ParseProvenanceEntity(element : TMXmlElement; path : string) : TFhirProvenanceEntity;
    function ParseProvenanceEntityChild(value : TFhirProvenanceEntity; path : string; child : TMXmlElement) : boolean;
    function ParseProvenance(element : TMXmlElement; path : string) : TFhirProvenance;
    function ParseProvenanceChild(value : TFhirProvenance; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    function ParseQuestionnaireItem(element : TMXmlElement; path : string) : TFhirQuestionnaireItem;
    function ParseQuestionnaireItemChild(value : TFhirQuestionnaireItem; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireItemEnableWhen(element : TMXmlElement; path : string) : TFhirQuestionnaireItemEnableWhen;
    function ParseQuestionnaireItemEnableWhenChild(value : TFhirQuestionnaireItemEnableWhen; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireItemAnswerOption(element : TMXmlElement; path : string) : TFhirQuestionnaireItemAnswerOption;
    function ParseQuestionnaireItemAnswerOptionChild(value : TFhirQuestionnaireItemAnswerOption; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireItemInitial(element : TMXmlElement; path : string) : TFhirQuestionnaireItemInitial;
    function ParseQuestionnaireItemInitialChild(value : TFhirQuestionnaireItemInitial; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaire(element : TMXmlElement; path : string) : TFhirQuestionnaire;
    function ParseQuestionnaireChild(value : TFhirQuestionnaire; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    function ParseQuestionnaireResponseItem(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItem;
    function ParseQuestionnaireResponseItemChild(value : TFhirQuestionnaireResponseItem; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireResponseItemAnswer(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItemAnswer;
    function ParseQuestionnaireResponseItemAnswerChild(value : TFhirQuestionnaireResponseItemAnswer; path : string; child : TMXmlElement) : boolean;
    function ParseQuestionnaireResponse(element : TMXmlElement; path : string) : TFhirQuestionnaireResponse;
    function ParseQuestionnaireResponseChild(value : TFhirQuestionnaireResponse; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
    function ParseRegulatedAuthorizationRelatedDate(element : TMXmlElement; path : string) : TFhirRegulatedAuthorizationRelatedDate;
    function ParseRegulatedAuthorizationRelatedDateChild(value : TFhirRegulatedAuthorizationRelatedDate; path : string; child : TMXmlElement) : boolean;
    function ParseRegulatedAuthorizationCase(element : TMXmlElement; path : string) : TFhirRegulatedAuthorizationCase;
    function ParseRegulatedAuthorizationCaseChild(value : TFhirRegulatedAuthorizationCase; path : string; child : TMXmlElement) : boolean;
    function ParseRegulatedAuthorization(element : TMXmlElement; path : string) : TFhirRegulatedAuthorization;
    function ParseRegulatedAuthorizationChild(value : TFhirRegulatedAuthorization; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
    function ParseRelatedPersonCommunication(element : TMXmlElement; path : string) : TFhirRelatedPersonCommunication;
    function ParseRelatedPersonCommunicationChild(value : TFhirRelatedPersonCommunication; path : string; child : TMXmlElement) : boolean;
    function ParseRelatedPerson(element : TMXmlElement; path : string) : TFhirRelatedPerson;
    function ParseRelatedPersonChild(value : TFhirRelatedPerson; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    function ParseRequestGroupAction(element : TMXmlElement; path : string) : TFhirRequestGroupAction;
    function ParseRequestGroupActionChild(value : TFhirRequestGroupAction; path : string; child : TMXmlElement) : boolean;
    function ParseRequestGroupActionCondition(element : TMXmlElement; path : string) : TFhirRequestGroupActionCondition;
    function ParseRequestGroupActionConditionChild(value : TFhirRequestGroupActionCondition; path : string; child : TMXmlElement) : boolean;
    function ParseRequestGroupActionRelatedAction(element : TMXmlElement; path : string) : TFhirRequestGroupActionRelatedAction;
    function ParseRequestGroupActionRelatedActionChild(value : TFhirRequestGroupActionRelatedAction; path : string; child : TMXmlElement) : boolean;
    function ParseRequestGroup(element : TMXmlElement; path : string) : TFhirRequestGroup;
    function ParseRequestGroupChild(value : TFhirRequestGroup; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    function ParseResearchStudyArm(element : TMXmlElement; path : string) : TFhirResearchStudyArm;
    function ParseResearchStudyArmChild(value : TFhirResearchStudyArm; path : string; child : TMXmlElement) : boolean;
    function ParseResearchStudyObjective(element : TMXmlElement; path : string) : TFhirResearchStudyObjective;
    function ParseResearchStudyObjectiveChild(value : TFhirResearchStudyObjective; path : string; child : TMXmlElement) : boolean;
    function ParseResearchStudy(element : TMXmlElement; path : string) : TFhirResearchStudy;
    function ParseResearchStudyChild(value : TFhirResearchStudy; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    function ParseResearchSubjectProgress(element : TMXmlElement; path : string) : TFhirResearchSubjectProgress;
    function ParseResearchSubjectProgressChild(value : TFhirResearchSubjectProgress; path : string; child : TMXmlElement) : boolean;
    function ParseResearchSubject(element : TMXmlElement; path : string) : TFhirResearchSubject;
    function ParseResearchSubjectChild(value : TFhirResearchSubject; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    function ParseRiskAssessmentPrediction(element : TMXmlElement; path : string) : TFhirRiskAssessmentPrediction;
    function ParseRiskAssessmentPredictionChild(value : TFhirRiskAssessmentPrediction; path : string; child : TMXmlElement) : boolean;
    function ParseRiskAssessment(element : TMXmlElement; path : string) : TFhirRiskAssessment;
    function ParseRiskAssessmentChild(value : TFhirRiskAssessment; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    function ParseSchedule(element : TMXmlElement; path : string) : TFhirSchedule;
    function ParseScheduleChild(value : TFhirSchedule; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    function ParseSearchParameterComponent(element : TMXmlElement; path : string) : TFhirSearchParameterComponent;
    function ParseSearchParameterComponentChild(value : TFhirSearchParameterComponent; path : string; child : TMXmlElement) : boolean;
    function ParseSearchParameter(element : TMXmlElement; path : string) : TFhirSearchParameter;
    function ParseSearchParameterChild(value : TFhirSearchParameter; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    function ParseServiceRequest(element : TMXmlElement; path : string) : TFhirServiceRequest;
    function ParseServiceRequestChild(value : TFhirServiceRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    function ParseSlot(element : TMXmlElement; path : string) : TFhirSlot;
    function ParseSlotChild(value : TFhirSlot; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    function ParseSpecimenCollection(element : TMXmlElement; path : string) : TFhirSpecimenCollection;
    function ParseSpecimenCollectionChild(value : TFhirSpecimenCollection; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenProcessing(element : TMXmlElement; path : string) : TFhirSpecimenProcessing;
    function ParseSpecimenProcessingChild(value : TFhirSpecimenProcessing; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenContainer(element : TMXmlElement; path : string) : TFhirSpecimenContainer;
    function ParseSpecimenContainerChild(value : TFhirSpecimenContainer; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimen(element : TMXmlElement; path : string) : TFhirSpecimen;
    function ParseSpecimenChild(value : TFhirSpecimen; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    function ParseSpecimenDefinitionTypeTested(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTested;
    function ParseSpecimenDefinitionTypeTestedChild(value : TFhirSpecimenDefinitionTypeTested; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinitionTypeTestedContainer(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainer;
    function ParseSpecimenDefinitionTypeTestedContainerChild(value : TFhirSpecimenDefinitionTypeTestedContainer; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinitionTypeTestedContainerAdditive(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainerAdditive;
    function ParseSpecimenDefinitionTypeTestedContainerAdditiveChild(value : TFhirSpecimenDefinitionTypeTestedContainerAdditive; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinitionTypeTestedHandling(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedHandling;
    function ParseSpecimenDefinitionTypeTestedHandlingChild(value : TFhirSpecimenDefinitionTypeTestedHandling; path : string; child : TMXmlElement) : boolean;
    function ParseSpecimenDefinition(element : TMXmlElement; path : string) : TFhirSpecimenDefinition;
    function ParseSpecimenDefinitionChild(value : TFhirSpecimenDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    function ParseStructureDefinitionMapping(element : TMXmlElement; path : string) : TFhirStructureDefinitionMapping;
    function ParseStructureDefinitionMappingChild(value : TFhirStructureDefinitionMapping; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinitionContext(element : TMXmlElement; path : string) : TFhirStructureDefinitionContext;
    function ParseStructureDefinitionContextChild(value : TFhirStructureDefinitionContext; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinitionSnapshot(element : TMXmlElement; path : string) : TFhirStructureDefinitionSnapshot;
    function ParseStructureDefinitionSnapshotChild(value : TFhirStructureDefinitionSnapshot; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinitionDifferential(element : TMXmlElement; path : string) : TFhirStructureDefinitionDifferential;
    function ParseStructureDefinitionDifferentialChild(value : TFhirStructureDefinitionDifferential; path : string; child : TMXmlElement) : boolean;
    function ParseStructureDefinition(element : TMXmlElement; path : string) : TFhirStructureDefinition;
    function ParseStructureDefinitionChild(value : TFhirStructureDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    function ParseStructureMapStructure(element : TMXmlElement; path : string) : TFhirStructureMapStructure;
    function ParseStructureMapStructureChild(value : TFhirStructureMapStructure; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroup(element : TMXmlElement; path : string) : TFhirStructureMapGroup;
    function ParseStructureMapGroupChild(value : TFhirStructureMapGroup; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupInput(element : TMXmlElement; path : string) : TFhirStructureMapGroupInput;
    function ParseStructureMapGroupInputChild(value : TFhirStructureMapGroupInput; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRule(element : TMXmlElement; path : string) : TFhirStructureMapGroupRule;
    function ParseStructureMapGroupRuleChild(value : TFhirStructureMapGroupRule; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleSource(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleSource;
    function ParseStructureMapGroupRuleSourceChild(value : TFhirStructureMapGroupRuleSource; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleTarget(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTarget;
    function ParseStructureMapGroupRuleTargetChild(value : TFhirStructureMapGroupRuleTarget; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleTargetParameter(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTargetParameter;
    function ParseStructureMapGroupRuleTargetParameterChild(value : TFhirStructureMapGroupRuleTargetParameter; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMapGroupRuleDependent(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleDependent;
    function ParseStructureMapGroupRuleDependentChild(value : TFhirStructureMapGroupRuleDependent; path : string; child : TMXmlElement) : boolean;
    function ParseStructureMap(element : TMXmlElement; path : string) : TFhirStructureMap;
    function ParseStructureMapChild(value : TFhirStructureMap; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    function ParseSubscriptionFilterBy(element : TMXmlElement; path : string) : TFhirSubscriptionFilterBy;
    function ParseSubscriptionFilterByChild(value : TFhirSubscriptionFilterBy; path : string; child : TMXmlElement) : boolean;
    function ParseSubscription(element : TMXmlElement; path : string) : TFhirSubscription;
    function ParseSubscriptionChild(value : TFhirSubscription; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
    function ParseSubscriptionStatus(element : TMXmlElement; path : string) : TFhirSubscriptionStatus;
    function ParseSubscriptionStatusChild(value : TFhirSubscriptionStatus; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
    function ParseSubscriptionTopicResourceTrigger(element : TMXmlElement; path : string) : TFhirSubscriptionTopicResourceTrigger;
    function ParseSubscriptionTopicResourceTriggerChild(value : TFhirSubscriptionTopicResourceTrigger; path : string; child : TMXmlElement) : boolean;
    function ParseSubscriptionTopicResourceTriggerQueryCriteria(element : TMXmlElement; path : string) : TFhirSubscriptionTopicResourceTriggerQueryCriteria;
    function ParseSubscriptionTopicResourceTriggerQueryCriteriaChild(value : TFhirSubscriptionTopicResourceTriggerQueryCriteria; path : string; child : TMXmlElement) : boolean;
    function ParseSubscriptionTopicCanFilterBy(element : TMXmlElement; path : string) : TFhirSubscriptionTopicCanFilterBy;
    function ParseSubscriptionTopicCanFilterByChild(value : TFhirSubscriptionTopicCanFilterBy; path : string; child : TMXmlElement) : boolean;
    function ParseSubscriptionTopic(element : TMXmlElement; path : string) : TFhirSubscriptionTopic;
    function ParseSubscriptionTopicChild(value : TFhirSubscriptionTopic; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
    function ParseSubstanceInstance(element : TMXmlElement; path : string) : TFhirSubstanceInstance;
    function ParseSubstanceInstanceChild(value : TFhirSubstanceInstance; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceIngredient(element : TMXmlElement; path : string) : TFhirSubstanceIngredient;
    function ParseSubstanceIngredientChild(value : TFhirSubstanceIngredient; path : string; child : TMXmlElement) : boolean;
    function ParseSubstance(element : TMXmlElement; path : string) : TFhirSubstance;
    function ParseSubstanceChild(value : TFhirSubstance; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
    function ParseSubstanceDefinitionMoiety(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionMoiety;
    function ParseSubstanceDefinitionMoietyChild(value : TFhirSubstanceDefinitionMoiety; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionProperty(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionProperty;
    function ParseSubstanceDefinitionPropertyChild(value : TFhirSubstanceDefinitionProperty; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionStructure(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructure;
    function ParseSubstanceDefinitionStructureChild(value : TFhirSubstanceDefinitionStructure; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionStructureIsotope(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructureIsotope;
    function ParseSubstanceDefinitionStructureIsotopeChild(value : TFhirSubstanceDefinitionStructureIsotope; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionStructureIsotopeMolecularWeight(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight;
    function ParseSubstanceDefinitionStructureIsotopeMolecularWeightChild(value : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionStructureRepresentation(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructureRepresentation;
    function ParseSubstanceDefinitionStructureRepresentationChild(value : TFhirSubstanceDefinitionStructureRepresentation; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionCode(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionCode;
    function ParseSubstanceDefinitionCodeChild(value : TFhirSubstanceDefinitionCode; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionName(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionName;
    function ParseSubstanceDefinitionNameChild(value : TFhirSubstanceDefinitionName; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionNameOfficial(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionNameOfficial;
    function ParseSubstanceDefinitionNameOfficialChild(value : TFhirSubstanceDefinitionNameOfficial; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinitionRelationship(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionRelationship;
    function ParseSubstanceDefinitionRelationshipChild(value : TFhirSubstanceDefinitionRelationship; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceDefinition(element : TMXmlElement; path : string) : TFhirSubstanceDefinition;
    function ParseSubstanceDefinitionChild(value : TFhirSubstanceDefinition; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
    function ParseSubstanceNucleicAcidSubunit(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunit;
    function ParseSubstanceNucleicAcidSubunitChild(value : TFhirSubstanceNucleicAcidSubunit; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceNucleicAcidSubunitLinkage(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitLinkage;
    function ParseSubstanceNucleicAcidSubunitLinkageChild(value : TFhirSubstanceNucleicAcidSubunitLinkage; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceNucleicAcidSubunitSugar(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitSugar;
    function ParseSubstanceNucleicAcidSubunitSugarChild(value : TFhirSubstanceNucleicAcidSubunitSugar; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceNucleicAcid(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcid;
    function ParseSubstanceNucleicAcidChild(value : TFhirSubstanceNucleicAcid; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    function ParseSubstancePolymerMonomerSet(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSet;
    function ParseSubstancePolymerMonomerSetChild(value : TFhirSubstancePolymerMonomerSet; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerMonomerSetStartingMaterial(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSetStartingMaterial;
    function ParseSubstancePolymerMonomerSetStartingMaterialChild(value : TFhirSubstancePolymerMonomerSetStartingMaterial; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeat(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeat;
    function ParseSubstancePolymerRepeatChild(value : TFhirSubstancePolymerRepeat; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeatRepeatUnit(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnit;
    function ParseSubstancePolymerRepeatRepeatUnitChild(value : TFhirSubstancePolymerRepeatRepeatUnit; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
    function ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChild(value : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation;
    function ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationChild(value : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; path : string; child : TMXmlElement) : boolean;
    function ParseSubstancePolymer(element : TMXmlElement; path : string) : TFhirSubstancePolymer;
    function ParseSubstancePolymerChild(value : TFhirSubstancePolymer; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
    function ParseSubstanceProteinSubunit(element : TMXmlElement; path : string) : TFhirSubstanceProteinSubunit;
    function ParseSubstanceProteinSubunitChild(value : TFhirSubstanceProteinSubunit; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceProtein(element : TMXmlElement; path : string) : TFhirSubstanceProtein;
    function ParseSubstanceProteinChild(value : TFhirSubstanceProtein; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    function ParseSubstanceReferenceInformationGene(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGene;
    function ParseSubstanceReferenceInformationGeneChild(value : TFhirSubstanceReferenceInformationGene; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformationGeneElement(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGeneElement;
    function ParseSubstanceReferenceInformationGeneElementChild(value : TFhirSubstanceReferenceInformationGeneElement; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformationTarget(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationTarget;
    function ParseSubstanceReferenceInformationTargetChild(value : TFhirSubstanceReferenceInformationTarget; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceReferenceInformation(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformation;
    function ParseSubstanceReferenceInformationChild(value : TFhirSubstanceReferenceInformation; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
    function ParseSubstanceSourceMaterialFractionDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialFractionDescription;
    function ParseSubstanceSourceMaterialFractionDescriptionChild(value : TFhirSubstanceSourceMaterialFractionDescription; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganism(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganism;
    function ParseSubstanceSourceMaterialOrganismChild(value : TFhirSubstanceSourceMaterialOrganism; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganismAuthor(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismAuthor;
    function ParseSubstanceSourceMaterialOrganismAuthorChild(value : TFhirSubstanceSourceMaterialOrganismAuthor; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganismHybrid(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismHybrid;
    function ParseSubstanceSourceMaterialOrganismHybridChild(value : TFhirSubstanceSourceMaterialOrganismHybrid; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialOrganismOrganismGeneral(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismOrganismGeneral;
    function ParseSubstanceSourceMaterialOrganismOrganismGeneralChild(value : TFhirSubstanceSourceMaterialOrganismOrganismGeneral; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterialPartDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialPartDescription;
    function ParseSubstanceSourceMaterialPartDescriptionChild(value : TFhirSubstanceSourceMaterialPartDescription; path : string; child : TMXmlElement) : boolean;
    function ParseSubstanceSourceMaterial(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterial;
    function ParseSubstanceSourceMaterialChild(value : TFhirSubstanceSourceMaterial; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUPPLYDELIVERY}
    function ParseSupplyDeliverySuppliedItem(element : TMXmlElement; path : string) : TFhirSupplyDeliverySuppliedItem;
    function ParseSupplyDeliverySuppliedItemChild(value : TFhirSupplyDeliverySuppliedItem; path : string; child : TMXmlElement) : boolean;
    function ParseSupplyDelivery(element : TMXmlElement; path : string) : TFhirSupplyDelivery;
    function ParseSupplyDeliveryChild(value : TFhirSupplyDelivery; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    function ParseSupplyRequestParameter(element : TMXmlElement; path : string) : TFhirSupplyRequestParameter;
    function ParseSupplyRequestParameterChild(value : TFhirSupplyRequestParameter; path : string; child : TMXmlElement) : boolean;
    function ParseSupplyRequest(element : TMXmlElement; path : string) : TFhirSupplyRequest;
    function ParseSupplyRequestChild(value : TFhirSupplyRequest; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    function ParseTaskRestriction(element : TMXmlElement; path : string) : TFhirTaskRestriction;
    function ParseTaskRestrictionChild(value : TFhirTaskRestriction; path : string; child : TMXmlElement) : boolean;
    function ParseTaskInput(element : TMXmlElement; path : string) : TFhirTaskInput;
    function ParseTaskInputChild(value : TFhirTaskInput; path : string; child : TMXmlElement) : boolean;
    function ParseTaskOutput(element : TMXmlElement; path : string) : TFhirTaskOutput;
    function ParseTaskOutputChild(value : TFhirTaskOutput; path : string; child : TMXmlElement) : boolean;
    function ParseTask(element : TMXmlElement; path : string) : TFhirTask;
    function ParseTaskChild(value : TFhirTask; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    function ParseTerminologyCapabilitiesSoftware(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesSoftware;
    function ParseTerminologyCapabilitiesSoftwareChild(value : TFhirTerminologyCapabilitiesSoftware; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesImplementation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesImplementation;
    function ParseTerminologyCapabilitiesImplementationChild(value : TFhirTerminologyCapabilitiesImplementation; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesCodeSystem(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystem;
    function ParseTerminologyCapabilitiesCodeSystemChild(value : TFhirTerminologyCapabilitiesCodeSystem; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesCodeSystemVersion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersion;
    function ParseTerminologyCapabilitiesCodeSystemVersionChild(value : TFhirTerminologyCapabilitiesCodeSystemVersion; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesCodeSystemVersionFilter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter;
    function ParseTerminologyCapabilitiesCodeSystemVersionFilterChild(value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesExpansion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansion;
    function ParseTerminologyCapabilitiesExpansionChild(value : TFhirTerminologyCapabilitiesExpansion; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesExpansionParameter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansionParameter;
    function ParseTerminologyCapabilitiesExpansionParameterChild(value : TFhirTerminologyCapabilitiesExpansionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesValidateCode(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesValidateCode;
    function ParseTerminologyCapabilitiesValidateCodeChild(value : TFhirTerminologyCapabilitiesValidateCode; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesTranslation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesTranslation;
    function ParseTerminologyCapabilitiesTranslationChild(value : TFhirTerminologyCapabilitiesTranslation; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilitiesClosure(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesClosure;
    function ParseTerminologyCapabilitiesClosureChild(value : TFhirTerminologyCapabilitiesClosure; path : string; child : TMXmlElement) : boolean;
    function ParseTerminologyCapabilities(element : TMXmlElement; path : string) : TFhirTerminologyCapabilities;
    function ParseTerminologyCapabilitiesChild(value : TFhirTerminologyCapabilities; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    function ParseTestReportParticipant(element : TMXmlElement; path : string) : TFhirTestReportParticipant;
    function ParseTestReportParticipantChild(value : TFhirTestReportParticipant; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetup(element : TMXmlElement; path : string) : TFhirTestReportSetup;
    function ParseTestReportSetupChild(value : TFhirTestReportSetup; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetupAction(element : TMXmlElement; path : string) : TFhirTestReportSetupAction;
    function ParseTestReportSetupActionChild(value : TFhirTestReportSetupAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestReportSetupActionOperation;
    function ParseTestReportSetupActionOperationChild(value : TFhirTestReportSetupActionOperation; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestReportSetupActionAssert;
    function ParseTestReportSetupActionAssertChild(value : TFhirTestReportSetupActionAssert; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTest(element : TMXmlElement; path : string) : TFhirTestReportTest;
    function ParseTestReportTestChild(value : TFhirTestReportTest; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTestAction(element : TMXmlElement; path : string) : TFhirTestReportTestAction;
    function ParseTestReportTestActionChild(value : TFhirTestReportTestAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTeardown(element : TMXmlElement; path : string) : TFhirTestReportTeardown;
    function ParseTestReportTeardownChild(value : TFhirTestReportTeardown; path : string; child : TMXmlElement) : boolean;
    function ParseTestReportTeardownAction(element : TMXmlElement; path : string) : TFhirTestReportTeardownAction;
    function ParseTestReportTeardownActionChild(value : TFhirTestReportTeardownAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestReport(element : TMXmlElement; path : string) : TFhirTestReport;
    function ParseTestReportChild(value : TFhirTestReport; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    function ParseTestScriptOrigin(element : TMXmlElement; path : string) : TFhirTestScriptOrigin;
    function ParseTestScriptOriginChild(value : TFhirTestScriptOrigin; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptDestination(element : TMXmlElement; path : string) : TFhirTestScriptDestination;
    function ParseTestScriptDestinationChild(value : TFhirTestScriptDestination; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptMetadata(element : TMXmlElement; path : string) : TFhirTestScriptMetadata;
    function ParseTestScriptMetadataChild(value : TFhirTestScriptMetadata; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptMetadataLink(element : TMXmlElement; path : string) : TFhirTestScriptMetadataLink;
    function ParseTestScriptMetadataLinkChild(value : TFhirTestScriptMetadataLink; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptMetadataCapability(element : TMXmlElement; path : string) : TFhirTestScriptMetadataCapability;
    function ParseTestScriptMetadataCapabilityChild(value : TFhirTestScriptMetadataCapability; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptFixture(element : TMXmlElement; path : string) : TFhirTestScriptFixture;
    function ParseTestScriptFixtureChild(value : TFhirTestScriptFixture; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptVariable(element : TMXmlElement; path : string) : TFhirTestScriptVariable;
    function ParseTestScriptVariableChild(value : TFhirTestScriptVariable; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetup(element : TMXmlElement; path : string) : TFhirTestScriptSetup;
    function ParseTestScriptSetupChild(value : TFhirTestScriptSetup; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupAction(element : TMXmlElement; path : string) : TFhirTestScriptSetupAction;
    function ParseTestScriptSetupActionChild(value : TFhirTestScriptSetupAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperation;
    function ParseTestScriptSetupActionOperationChild(value : TFhirTestScriptSetupActionOperation; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupActionOperationRequestHeader(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperationRequestHeader;
    function ParseTestScriptSetupActionOperationRequestHeaderChild(value : TFhirTestScriptSetupActionOperationRequestHeader; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionAssert;
    function ParseTestScriptSetupActionAssertChild(value : TFhirTestScriptSetupActionAssert; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTest(element : TMXmlElement; path : string) : TFhirTestScriptTest;
    function ParseTestScriptTestChild(value : TFhirTestScriptTest; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTestAction(element : TMXmlElement; path : string) : TFhirTestScriptTestAction;
    function ParseTestScriptTestActionChild(value : TFhirTestScriptTestAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTeardown(element : TMXmlElement; path : string) : TFhirTestScriptTeardown;
    function ParseTestScriptTeardownChild(value : TFhirTestScriptTeardown; path : string; child : TMXmlElement) : boolean;
    function ParseTestScriptTeardownAction(element : TMXmlElement; path : string) : TFhirTestScriptTeardownAction;
    function ParseTestScriptTeardownActionChild(value : TFhirTestScriptTeardownAction; path : string; child : TMXmlElement) : boolean;
    function ParseTestScript(element : TMXmlElement; path : string) : TFhirTestScript;
    function ParseTestScriptChild(value : TFhirTestScript; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    function ParseValueSetCompose(element : TMXmlElement; path : string) : TFhirValueSetCompose;
    function ParseValueSetComposeChild(value : TFhirValueSetCompose; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeInclude(element : TMXmlElement; path : string) : TFhirValueSetComposeInclude;
    function ParseValueSetComposeIncludeChild(value : TFhirValueSetComposeInclude; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeIncludeConcept(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConcept;
    function ParseValueSetComposeIncludeConceptChild(value : TFhirValueSetComposeIncludeConcept; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeIncludeConceptDesignation(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConceptDesignation;
    function ParseValueSetComposeIncludeConceptDesignationChild(value : TFhirValueSetComposeIncludeConceptDesignation; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetComposeIncludeFilter(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeFilter;
    function ParseValueSetComposeIncludeFilterChild(value : TFhirValueSetComposeIncludeFilter; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansion(element : TMXmlElement; path : string) : TFhirValueSetExpansion;
    function ParseValueSetExpansionChild(value : TFhirValueSetExpansion; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansionParameter(element : TMXmlElement; path : string) : TFhirValueSetExpansionParameter;
    function ParseValueSetExpansionParameterChild(value : TFhirValueSetExpansionParameter; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansionProperty(element : TMXmlElement; path : string) : TFhirValueSetExpansionProperty;
    function ParseValueSetExpansionPropertyChild(value : TFhirValueSetExpansionProperty; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansionContains(element : TMXmlElement; path : string) : TFhirValueSetExpansionContains;
    function ParseValueSetExpansionContainsChild(value : TFhirValueSetExpansionContains; path : string; child : TMXmlElement) : boolean;
    function ParseValueSetExpansionContainsProperty(element : TMXmlElement; path : string) : TFhirValueSetExpansionContainsProperty;
    function ParseValueSetExpansionContainsPropertyChild(value : TFhirValueSetExpansionContainsProperty; path : string; child : TMXmlElement) : boolean;
    function ParseValueSet(element : TMXmlElement; path : string) : TFhirValueSet;
    function ParseValueSetChild(value : TFhirValueSet; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    function ParseVerificationResultPrimarySource(element : TMXmlElement; path : string) : TFhirVerificationResultPrimarySource;
    function ParseVerificationResultPrimarySourceChild(value : TFhirVerificationResultPrimarySource; path : string; child : TMXmlElement) : boolean;
    function ParseVerificationResultAttestation(element : TMXmlElement; path : string) : TFhirVerificationResultAttestation;
    function ParseVerificationResultAttestationChild(value : TFhirVerificationResultAttestation; path : string; child : TMXmlElement) : boolean;
    function ParseVerificationResultValidator(element : TMXmlElement; path : string) : TFhirVerificationResultValidator;
    function ParseVerificationResultValidatorChild(value : TFhirVerificationResultValidator; path : string; child : TMXmlElement) : boolean;
    function ParseVerificationResult(element : TMXmlElement; path : string) : TFhirVerificationResult;
    function ParseVerificationResultChild(value : TFhirVerificationResult; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    function ParseVisionPrescriptionLensSpecification(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecification;
    function ParseVisionPrescriptionLensSpecificationChild(value : TFhirVisionPrescriptionLensSpecification; path : string; child : TMXmlElement) : boolean;
    function ParseVisionPrescriptionLensSpecificationPrism(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecificationPrism;
    function ParseVisionPrescriptionLensSpecificationPrismChild(value : TFhirVisionPrescriptionLensSpecificationPrism; path : string; child : TMXmlElement) : boolean;
    function ParseVisionPrescription(element : TMXmlElement; path : string) : TFhirVisionPrescription;
    function ParseVisionPrescriptionChild(value : TFhirVisionPrescription; path : string; child : TMXmlElement) : boolean;
{$ENDIF FHIR_VISIONPRESCRIPTION}

    function ParseResource(element : TMXmlElement; path : String) : TFhirResource; override;
    function ParseDataType(element : TMXmlElement; name : String; type_ : TFHIRDataTypeClass) : TFHIRDataType; override;
  public
    function ParseFragment(element : TMXmlElement) : TFHIRObject; overload;
  end;

  TFHIRXmlComposer = class (TFHIRXmlComposerBase5)
  protected
    Procedure ComposeBaseAttributes(xml : TXmlBuilder; res : TFhirBase); overload;
    Procedure ComposeBaseChildren(xml : TXmlBuilder; value : TFhirBase); overload;
    Procedure ComposeBaseAttributes(xml : TXmlBuilder; res : TFhirResource); overload;
    Procedure ComposeBaseChildren(xml : TXmlBuilder; value : TFhirResource); overload;

    Procedure ComposeElementAttributes(xml : TXmlBuilder; value : TFhirElement);
    Procedure ComposeElementChildren(xml : TXmlBuilder; value : TFhirElement);
    Procedure ComposeBackboneElementAttributes(xml : TXmlBuilder; value : TFhirBackboneElement);
    Procedure ComposeBackboneElementChildren(xml : TXmlBuilder; value : TFhirBackboneElement);
    Procedure ComposeDataTypeAttributes(xml : TXmlBuilder; value : TFhirDataType);
    Procedure ComposeDataTypeChildren(xml : TXmlBuilder; value : TFhirDataType);
    Procedure ComposeBackboneTypeAttributes(xml : TXmlBuilder; value : TFhirBackboneType);
    Procedure ComposeBackboneTypeChildren(xml : TXmlBuilder; value : TFhirBackboneType);
    Procedure ComposePrimitiveTypeAttributes(xml : TXmlBuilder; value : TFhirPrimitiveType);
    Procedure ComposePrimitiveTypeChildren(xml : TXmlBuilder; value : TFhirPrimitiveType);

    Procedure ComposeEnum(xml : TXmlBuilder; name : String; value : TFhirEnum; Const aNames : Array Of String);
    Procedure ComposeDate(xml : TXmlBuilder; name : String; value : TFhirDate);
    Procedure ComposeDateTime(xml : TXmlBuilder; name : String; value : TFhirDateTime);
    Procedure ComposeString(xml : TXmlBuilder; name : String; value : TFhirString);
    Procedure ComposeInteger(xml : TXmlBuilder; name : String; value : TFhirInteger);
    Procedure ComposeUri(xml : TXmlBuilder; name : String; value : TFhirUri);
    Procedure ComposeInstant(xml : TXmlBuilder; name : String; value : TFhirInstant);
    Procedure ComposeXhtml(xml : TXmlBuilder; name : String; value : TFhirXhtml);
    Procedure ComposeBoolean(xml : TXmlBuilder; name : String; value : TFhirBoolean);
    Procedure ComposeBase64Binary(xml : TXmlBuilder; name : String; value : TFhirBase64Binary);
    Procedure ComposeTime(xml : TXmlBuilder; name : String; value : TFhirTime);
    Procedure ComposeDecimal(xml : TXmlBuilder; name : String; value : TFhirDecimal);
    Procedure ComposeCode(xml : TXmlBuilder; name : String; value : TFhirCode);
    Procedure ComposeCanonical(xml : TXmlBuilder; name : String; value : TFhirCanonical);
    Procedure ComposeOid(xml : TXmlBuilder; name : String; value : TFhirOid);
    Procedure ComposeUuid(xml : TXmlBuilder; name : String; value : TFhirUuid);
    Procedure ComposeUrl(xml : TXmlBuilder; name : String; value : TFhirUrl);
    Procedure ComposeMarkdown(xml : TXmlBuilder; name : String; value : TFhirMarkdown);
    Procedure ComposeUnsignedInt(xml : TXmlBuilder; name : String; value : TFhirUnsignedInt);
    Procedure ComposeId(xml : TXmlBuilder; name : String; value : TFhirId);
    Procedure ComposePositiveInt(xml : TXmlBuilder; name : String; value : TFhirPositiveInt);
    Procedure ComposeInteger64(xml : TXmlBuilder; name : String; value : TFhirInteger64);

    procedure ComposeAddress(xml : TXmlBuilder; name : string; value : TFhirAddress);
    procedure ComposeAddressChildren(xml : TXmlBuilder; value : TFhirAddress);
    procedure ComposeAnnotation(xml : TXmlBuilder; name : string; value : TFhirAnnotation);
    procedure ComposeAnnotationChildren(xml : TXmlBuilder; value : TFhirAnnotation);
    procedure ComposeAttachment(xml : TXmlBuilder; name : string; value : TFhirAttachment);
    procedure ComposeAttachmentChildren(xml : TXmlBuilder; value : TFhirAttachment);
    procedure ComposeCodeableConcept(xml : TXmlBuilder; name : string; value : TFhirCodeableConcept);
    procedure ComposeCodeableConceptChildren(xml : TXmlBuilder; value : TFhirCodeableConcept);
    procedure ComposeCodeableReference(xml : TXmlBuilder; name : string; value : TFhirCodeableReference);
    procedure ComposeCodeableReferenceChildren(xml : TXmlBuilder; value : TFhirCodeableReference);
    procedure ComposeCoding(xml : TXmlBuilder; name : string; value : TFhirCoding);
    procedure ComposeCodingChildren(xml : TXmlBuilder; value : TFhirCoding);
    procedure ComposeContactDetail(xml : TXmlBuilder; name : string; value : TFhirContactDetail);
    procedure ComposeContactDetailChildren(xml : TXmlBuilder; value : TFhirContactDetail);
    procedure ComposeContactPoint(xml : TXmlBuilder; name : string; value : TFhirContactPoint);
    procedure ComposeContactPointChildren(xml : TXmlBuilder; value : TFhirContactPoint);
    procedure ComposeContributor(xml : TXmlBuilder; name : string; value : TFhirContributor);
    procedure ComposeContributorChildren(xml : TXmlBuilder; value : TFhirContributor);
    procedure ComposeDataRequirementCodeFilter(xml : TXmlBuilder; name : string; value : TFhirDataRequirementCodeFilter);
    procedure ComposeDataRequirementCodeFilterChildren(xml : TXmlBuilder; value : TFhirDataRequirementCodeFilter);
    procedure ComposeDataRequirementDateFilter(xml : TXmlBuilder; name : string; value : TFhirDataRequirementDateFilter);
    procedure ComposeDataRequirementDateFilterChildren(xml : TXmlBuilder; value : TFhirDataRequirementDateFilter);
    procedure ComposeDataRequirementSort(xml : TXmlBuilder; name : string; value : TFhirDataRequirementSort);
    procedure ComposeDataRequirementSortChildren(xml : TXmlBuilder; value : TFhirDataRequirementSort);
    procedure ComposeDataRequirement(xml : TXmlBuilder; name : string; value : TFhirDataRequirement);
    procedure ComposeDataRequirementChildren(xml : TXmlBuilder; value : TFhirDataRequirement);
    procedure ComposeExpression(xml : TXmlBuilder; name : string; value : TFhirExpression);
    procedure ComposeExpressionChildren(xml : TXmlBuilder; value : TFhirExpression);
    procedure ComposeExtension(xml : TXmlBuilder; name : string; value : TFhirExtension);
    procedure ComposeExtensionChildren(xml : TXmlBuilder; value : TFhirExtension);
    procedure ComposeHumanName(xml : TXmlBuilder; name : string; value : TFhirHumanName);
    procedure ComposeHumanNameChildren(xml : TXmlBuilder; value : TFhirHumanName);
    procedure ComposeIdentifier(xml : TXmlBuilder; name : string; value : TFhirIdentifier);
    procedure ComposeIdentifierChildren(xml : TXmlBuilder; value : TFhirIdentifier);
    procedure ComposeMeta(xml : TXmlBuilder; name : string; value : TFhirMeta);
    procedure ComposeMetaChildren(xml : TXmlBuilder; value : TFhirMeta);
    procedure ComposeMoney(xml : TXmlBuilder; name : string; value : TFhirMoney);
    procedure ComposeMoneyChildren(xml : TXmlBuilder; value : TFhirMoney);
    procedure ComposeNarrative(xml : TXmlBuilder; name : string; value : TFhirNarrative);
    procedure ComposeNarrativeChildren(xml : TXmlBuilder; value : TFhirNarrative);
    procedure ComposeParameterDefinition(xml : TXmlBuilder; name : string; value : TFhirParameterDefinition);
    procedure ComposeParameterDefinitionChildren(xml : TXmlBuilder; value : TFhirParameterDefinition);
    procedure ComposePeriod(xml : TXmlBuilder; name : string; value : TFhirPeriod);
    procedure ComposePeriodChildren(xml : TXmlBuilder; value : TFhirPeriod);
    procedure ComposeQuantity(xml : TXmlBuilder; name : string; value : TFhirQuantity);
    procedure ComposeQuantityChildren(xml : TXmlBuilder; value : TFhirQuantity);
    procedure ComposeRange(xml : TXmlBuilder; name : string; value : TFhirRange);
    procedure ComposeRangeChildren(xml : TXmlBuilder; value : TFhirRange);
    procedure ComposeRatio(xml : TXmlBuilder; name : string; value : TFhirRatio);
    procedure ComposeRatioChildren(xml : TXmlBuilder; value : TFhirRatio);
    procedure ComposeReference(xml : TXmlBuilder; name : string; value : TFhirReference);
    procedure ComposeReferenceChildren(xml : TXmlBuilder; value : TFhirReference);
    procedure ComposeRelatedArtifact(xml : TXmlBuilder; name : string; value : TFhirRelatedArtifact);
    procedure ComposeRelatedArtifactChildren(xml : TXmlBuilder; value : TFhirRelatedArtifact);
    procedure ComposeSampledData(xml : TXmlBuilder; name : string; value : TFhirSampledData);
    procedure ComposeSampledDataChildren(xml : TXmlBuilder; value : TFhirSampledData);
    procedure ComposeSignature(xml : TXmlBuilder; name : string; value : TFhirSignature);
    procedure ComposeSignatureChildren(xml : TXmlBuilder; value : TFhirSignature);
    procedure ComposeTriggerDefinition(xml : TXmlBuilder; name : string; value : TFhirTriggerDefinition);
    procedure ComposeTriggerDefinitionChildren(xml : TXmlBuilder; value : TFhirTriggerDefinition);
    procedure ComposeUsageContext(xml : TXmlBuilder; name : string; value : TFhirUsageContext);
    procedure ComposeUsageContextChildren(xml : TXmlBuilder; value : TFhirUsageContext);
    procedure ComposeAge(xml : TXmlBuilder; name : string; value : TFhirAge);
    procedure ComposeAgeChildren(xml : TXmlBuilder; value : TFhirAge);
    procedure ComposeCount(xml : TXmlBuilder; name : string; value : TFhirCount);
    procedure ComposeCountChildren(xml : TXmlBuilder; value : TFhirCount);
    procedure ComposeDistance(xml : TXmlBuilder; name : string; value : TFhirDistance);
    procedure ComposeDistanceChildren(xml : TXmlBuilder; value : TFhirDistance);
    procedure ComposeDosageDoseAndRate(xml : TXmlBuilder; name : string; value : TFhirDosageDoseAndRate);
    procedure ComposeDosageDoseAndRateChildren(xml : TXmlBuilder; value : TFhirDosageDoseAndRate);
    procedure ComposeDosage(xml : TXmlBuilder; name : string; value : TFhirDosage);
    procedure ComposeDosageChildren(xml : TXmlBuilder; value : TFhirDosage);
    procedure ComposeDuration(xml : TXmlBuilder; name : string; value : TFhirDuration);
    procedure ComposeDurationChildren(xml : TXmlBuilder; value : TFhirDuration);
    procedure ComposeElementDefinitionSlicing(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionSlicing);
    procedure ComposeElementDefinitionSlicingChildren(xml : TXmlBuilder; value : TFhirElementDefinitionSlicing);
    procedure ComposeElementDefinitionSlicingDiscriminator(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionSlicingDiscriminator);
    procedure ComposeElementDefinitionSlicingDiscriminatorChildren(xml : TXmlBuilder; value : TFhirElementDefinitionSlicingDiscriminator);
    procedure ComposeElementDefinitionBase(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionBase);
    procedure ComposeElementDefinitionBaseChildren(xml : TXmlBuilder; value : TFhirElementDefinitionBase);
    procedure ComposeElementDefinitionType(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionType);
    procedure ComposeElementDefinitionTypeChildren(xml : TXmlBuilder; value : TFhirElementDefinitionType);
    procedure ComposeElementDefinitionExample(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionExample);
    procedure ComposeElementDefinitionExampleChildren(xml : TXmlBuilder; value : TFhirElementDefinitionExample);
    procedure ComposeElementDefinitionConstraint(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionConstraint);
    procedure ComposeElementDefinitionConstraintChildren(xml : TXmlBuilder; value : TFhirElementDefinitionConstraint);
    procedure ComposeElementDefinitionBinding(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionBinding);
    procedure ComposeElementDefinitionBindingChildren(xml : TXmlBuilder; value : TFhirElementDefinitionBinding);
    procedure ComposeElementDefinitionMapping(xml : TXmlBuilder; name : string; value : TFhirElementDefinitionMapping);
    procedure ComposeElementDefinitionMappingChildren(xml : TXmlBuilder; value : TFhirElementDefinitionMapping);
    procedure ComposeElementDefinition(xml : TXmlBuilder; name : string; value : TFhirElementDefinition);
    procedure ComposeElementDefinitionChildren(xml : TXmlBuilder; value : TFhirElementDefinition);
    procedure ComposeMarketingStatus(xml : TXmlBuilder; name : string; value : TFhirMarketingStatus);
    procedure ComposeMarketingStatusChildren(xml : TXmlBuilder; value : TFhirMarketingStatus);
    procedure ComposeOrderedDistributionInterval(xml : TXmlBuilder; name : string; value : TFhirOrderedDistributionInterval);
    procedure ComposeOrderedDistributionIntervalChildren(xml : TXmlBuilder; value : TFhirOrderedDistributionInterval);
    procedure ComposeOrderedDistribution(xml : TXmlBuilder; name : string; value : TFhirOrderedDistribution);
    procedure ComposeOrderedDistributionChildren(xml : TXmlBuilder; value : TFhirOrderedDistribution);
    procedure ComposePopulation(xml : TXmlBuilder; name : string; value : TFhirPopulation);
    procedure ComposePopulationChildren(xml : TXmlBuilder; value : TFhirPopulation);
    procedure ComposeProdCharacteristic(xml : TXmlBuilder; name : string; value : TFhirProdCharacteristic);
    procedure ComposeProdCharacteristicChildren(xml : TXmlBuilder; value : TFhirProdCharacteristic);
    procedure ComposeProductShelfLife(xml : TXmlBuilder; name : string; value : TFhirProductShelfLife);
    procedure ComposeProductShelfLifeChildren(xml : TXmlBuilder; value : TFhirProductShelfLife);
    procedure ComposeStatisticSampleSize(xml : TXmlBuilder; name : string; value : TFhirStatisticSampleSize);
    procedure ComposeStatisticSampleSizeChildren(xml : TXmlBuilder; value : TFhirStatisticSampleSize);
    procedure ComposeStatisticAttributeEstimate(xml : TXmlBuilder; name : string; value : TFhirStatisticAttributeEstimate);
    procedure ComposeStatisticAttributeEstimateChildren(xml : TXmlBuilder; value : TFhirStatisticAttributeEstimate);
    procedure ComposeStatisticAttributeEstimateAttributeEstimate(xml : TXmlBuilder; name : string; value : TFhirStatisticAttributeEstimateAttributeEstimate);
    procedure ComposeStatisticAttributeEstimateAttributeEstimateChildren(xml : TXmlBuilder; value : TFhirStatisticAttributeEstimateAttributeEstimate);
    procedure ComposeStatisticModelCharacteristic(xml : TXmlBuilder; name : string; value : TFhirStatisticModelCharacteristic);
    procedure ComposeStatisticModelCharacteristicChildren(xml : TXmlBuilder; value : TFhirStatisticModelCharacteristic);
    procedure ComposeStatisticModelCharacteristicVariable(xml : TXmlBuilder; name : string; value : TFhirStatisticModelCharacteristicVariable);
    procedure ComposeStatisticModelCharacteristicVariableChildren(xml : TXmlBuilder; value : TFhirStatisticModelCharacteristicVariable);
    procedure ComposeStatistic(xml : TXmlBuilder; name : string; value : TFhirStatistic);
    procedure ComposeStatisticChildren(xml : TXmlBuilder; value : TFhirStatistic);
    procedure ComposeTimingRepeat(xml : TXmlBuilder; name : string; value : TFhirTimingRepeat);
    procedure ComposeTimingRepeatChildren(xml : TXmlBuilder; value : TFhirTimingRepeat);
    procedure ComposeTiming(xml : TXmlBuilder; name : string; value : TFhirTiming);
    procedure ComposeTimingChildren(xml : TXmlBuilder; value : TFhirTiming);

    Procedure ComposeResourceAttributes(xml : TXmlBuilder; value : TFhirResource);
    Procedure ComposeResourceChildren(xml : TXmlBuilder; value : TFhirResource);
    Procedure ComposeDomainResourceAttributes(xml : TXmlBuilder; value : TFhirDomainResource);
    Procedure ComposeDomainResourceChildren(xml : TXmlBuilder; value : TFhirDomainResource);
    Procedure ComposeCanonicalResourceAttributes(xml : TXmlBuilder; value : TFhirCanonicalResource);
    Procedure ComposeCanonicalResourceChildren(xml : TXmlBuilder; value : TFhirCanonicalResource);
    Procedure ComposeMetadataResourceAttributes(xml : TXmlBuilder; value : TFhirMetadataResource);
    Procedure ComposeMetadataResourceChildren(xml : TXmlBuilder; value : TFhirMetadataResource);

{$IFDEF FHIR_ACCOUNT}
    procedure ComposeAccountCoverage(xml : TXmlBuilder; name : string; value : TFhirAccountCoverage);
    procedure ComposeAccountCoverageChildren(xml : TXmlBuilder; value : TFhirAccountCoverage);
    procedure ComposeAccountGuarantor(xml : TXmlBuilder; name : string; value : TFhirAccountGuarantor);
    procedure ComposeAccountGuarantorChildren(xml : TXmlBuilder; value : TFhirAccountGuarantor);
    procedure ComposeAccount(xml : TXmlBuilder; name : string; value : TFhirAccount);
    procedure ComposeAccountChildren(xml : TXmlBuilder; value : TFhirAccount);
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    procedure ComposeActivityDefinitionParticipant(xml : TXmlBuilder; name : string; value : TFhirActivityDefinitionParticipant);
    procedure ComposeActivityDefinitionParticipantChildren(xml : TXmlBuilder; value : TFhirActivityDefinitionParticipant);
    procedure ComposeActivityDefinitionDynamicValue(xml : TXmlBuilder; name : string; value : TFhirActivityDefinitionDynamicValue);
    procedure ComposeActivityDefinitionDynamicValueChildren(xml : TXmlBuilder; value : TFhirActivityDefinitionDynamicValue);
    procedure ComposeActivityDefinition(xml : TXmlBuilder; name : string; value : TFhirActivityDefinition);
    procedure ComposeActivityDefinitionChildren(xml : TXmlBuilder; value : TFhirActivityDefinition);
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
    procedure ComposeAdministrableProductDefinitionProperty(xml : TXmlBuilder; name : string; value : TFhirAdministrableProductDefinitionProperty);
    procedure ComposeAdministrableProductDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionProperty);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministration(xml : TXmlBuilder; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministration);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionRouteOfAdministration);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(xml : TXmlBuilder; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml : TXmlBuilder; name : string; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
    procedure ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
    procedure ComposeAdministrableProductDefinition(xml : TXmlBuilder; name : string; value : TFhirAdministrableProductDefinition);
    procedure ComposeAdministrableProductDefinitionChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinition);
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    procedure ComposeAdverseEventParticipant(xml : TXmlBuilder; name : string; value : TFhirAdverseEventParticipant);
    procedure ComposeAdverseEventParticipantChildren(xml : TXmlBuilder; value : TFhirAdverseEventParticipant);
    procedure ComposeAdverseEventSuspectEntity(xml : TXmlBuilder; name : string; value : TFhirAdverseEventSuspectEntity);
    procedure ComposeAdverseEventSuspectEntityChildren(xml : TXmlBuilder; value : TFhirAdverseEventSuspectEntity);
    procedure ComposeAdverseEventSuspectEntityCausality(xml : TXmlBuilder; name : string; value : TFhirAdverseEventSuspectEntityCausality);
    procedure ComposeAdverseEventSuspectEntityCausalityChildren(xml : TXmlBuilder; value : TFhirAdverseEventSuspectEntityCausality);
    procedure ComposeAdverseEventContributingFactor(xml : TXmlBuilder; name : string; value : TFhirAdverseEventContributingFactor);
    procedure ComposeAdverseEventContributingFactorChildren(xml : TXmlBuilder; value : TFhirAdverseEventContributingFactor);
    procedure ComposeAdverseEventPreventiveAction(xml : TXmlBuilder; name : string; value : TFhirAdverseEventPreventiveAction);
    procedure ComposeAdverseEventPreventiveActionChildren(xml : TXmlBuilder; value : TFhirAdverseEventPreventiveAction);
    procedure ComposeAdverseEventMitigatingAction(xml : TXmlBuilder; name : string; value : TFhirAdverseEventMitigatingAction);
    procedure ComposeAdverseEventMitigatingActionChildren(xml : TXmlBuilder; value : TFhirAdverseEventMitigatingAction);
    procedure ComposeAdverseEventSupportingInfo(xml : TXmlBuilder; name : string; value : TFhirAdverseEventSupportingInfo);
    procedure ComposeAdverseEventSupportingInfoChildren(xml : TXmlBuilder; value : TFhirAdverseEventSupportingInfo);
    procedure ComposeAdverseEvent(xml : TXmlBuilder; name : string; value : TFhirAdverseEvent);
    procedure ComposeAdverseEventChildren(xml : TXmlBuilder; value : TFhirAdverseEvent);
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    procedure ComposeAllergyIntoleranceReaction(xml : TXmlBuilder; name : string; value : TFhirAllergyIntoleranceReaction);
    procedure ComposeAllergyIntoleranceReactionChildren(xml : TXmlBuilder; value : TFhirAllergyIntoleranceReaction);
    procedure ComposeAllergyIntolerance(xml : TXmlBuilder; name : string; value : TFhirAllergyIntolerance);
    procedure ComposeAllergyIntoleranceChildren(xml : TXmlBuilder; value : TFhirAllergyIntolerance);
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    procedure ComposeAppointmentParticipant(xml : TXmlBuilder; name : string; value : TFhirAppointmentParticipant);
    procedure ComposeAppointmentParticipantChildren(xml : TXmlBuilder; value : TFhirAppointmentParticipant);
    procedure ComposeAppointment(xml : TXmlBuilder; name : string; value : TFhirAppointment);
    procedure ComposeAppointmentChildren(xml : TXmlBuilder; value : TFhirAppointment);
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    procedure ComposeAppointmentResponse(xml : TXmlBuilder; name : string; value : TFhirAppointmentResponse);
    procedure ComposeAppointmentResponseChildren(xml : TXmlBuilder; value : TFhirAppointmentResponse);
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    procedure ComposeAuditEventAgent(xml : TXmlBuilder; name : string; value : TFhirAuditEventAgent);
    procedure ComposeAuditEventAgentChildren(xml : TXmlBuilder; value : TFhirAuditEventAgent);
    procedure ComposeAuditEventAgentNetwork(xml : TXmlBuilder; name : string; value : TFhirAuditEventAgentNetwork);
    procedure ComposeAuditEventAgentNetworkChildren(xml : TXmlBuilder; value : TFhirAuditEventAgentNetwork);
    procedure ComposeAuditEventSource(xml : TXmlBuilder; name : string; value : TFhirAuditEventSource);
    procedure ComposeAuditEventSourceChildren(xml : TXmlBuilder; value : TFhirAuditEventSource);
    procedure ComposeAuditEventEntity(xml : TXmlBuilder; name : string; value : TFhirAuditEventEntity);
    procedure ComposeAuditEventEntityChildren(xml : TXmlBuilder; value : TFhirAuditEventEntity);
    procedure ComposeAuditEventEntityDetail(xml : TXmlBuilder; name : string; value : TFhirAuditEventEntityDetail);
    procedure ComposeAuditEventEntityDetailChildren(xml : TXmlBuilder; value : TFhirAuditEventEntityDetail);
    procedure ComposeAuditEvent(xml : TXmlBuilder; name : string; value : TFhirAuditEvent);
    procedure ComposeAuditEventChildren(xml : TXmlBuilder; value : TFhirAuditEvent);
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    procedure ComposeBasic(xml : TXmlBuilder; name : string; value : TFhirBasic);
    procedure ComposeBasicChildren(xml : TXmlBuilder; value : TFhirBasic);
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    procedure ComposeBinary(xml : TXmlBuilder; name : string; value : TFhirBinary);
    procedure ComposeBinaryChildren(xml : TXmlBuilder; value : TFhirBinary);
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    procedure ComposeBiologicallyDerivedProductCollection(xml : TXmlBuilder; name : string; value : TFhirBiologicallyDerivedProductCollection);
    procedure ComposeBiologicallyDerivedProductCollectionChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductCollection);
    procedure ComposeBiologicallyDerivedProductProcessing(xml : TXmlBuilder; name : string; value : TFhirBiologicallyDerivedProductProcessing);
    procedure ComposeBiologicallyDerivedProductProcessingChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductProcessing);
    procedure ComposeBiologicallyDerivedProductManipulation(xml : TXmlBuilder; name : string; value : TFhirBiologicallyDerivedProductManipulation);
    procedure ComposeBiologicallyDerivedProductManipulationChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductManipulation);
    procedure ComposeBiologicallyDerivedProductStorage(xml : TXmlBuilder; name : string; value : TFhirBiologicallyDerivedProductStorage);
    procedure ComposeBiologicallyDerivedProductStorageChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductStorage);
    procedure ComposeBiologicallyDerivedProduct(xml : TXmlBuilder; name : string; value : TFhirBiologicallyDerivedProduct);
    procedure ComposeBiologicallyDerivedProductChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProduct);
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    procedure ComposeBodyStructure(xml : TXmlBuilder; name : string; value : TFhirBodyStructure);
    procedure ComposeBodyStructureChildren(xml : TXmlBuilder; value : TFhirBodyStructure);
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    procedure ComposeBundleLink(xml : TXmlBuilder; name : string; value : TFhirBundleLink);
    procedure ComposeBundleLinkChildren(xml : TXmlBuilder; value : TFhirBundleLink);
    procedure ComposeBundleEntry(xml : TXmlBuilder; name : string; value : TFhirBundleEntry);
    procedure ComposeBundleEntryChildren(xml : TXmlBuilder; value : TFhirBundleEntry);
    procedure ComposeBundleEntrySearch(xml : TXmlBuilder; name : string; value : TFhirBundleEntrySearch);
    procedure ComposeBundleEntrySearchChildren(xml : TXmlBuilder; value : TFhirBundleEntrySearch);
    procedure ComposeBundleEntryRequest(xml : TXmlBuilder; name : string; value : TFhirBundleEntryRequest);
    procedure ComposeBundleEntryRequestChildren(xml : TXmlBuilder; value : TFhirBundleEntryRequest);
    procedure ComposeBundleEntryResponse(xml : TXmlBuilder; name : string; value : TFhirBundleEntryResponse);
    procedure ComposeBundleEntryResponseChildren(xml : TXmlBuilder; value : TFhirBundleEntryResponse);
    procedure ComposeBundle(xml : TXmlBuilder; name : string; value : TFhirBundle);
    procedure ComposeBundleChildren(xml : TXmlBuilder; value : TFhirBundle);
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    procedure ComposeCapabilityStatementSoftware(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementSoftware);
    procedure ComposeCapabilityStatementSoftwareChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementSoftware);
    procedure ComposeCapabilityStatementImplementation(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementImplementation);
    procedure ComposeCapabilityStatementImplementationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementImplementation);
    procedure ComposeCapabilityStatementRest(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRest);
    procedure ComposeCapabilityStatementRestChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRest);
    procedure ComposeCapabilityStatementRestSecurity(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRestSecurity);
    procedure ComposeCapabilityStatementRestSecurityChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestSecurity);
    procedure ComposeCapabilityStatementRestResource(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRestResource);
    procedure ComposeCapabilityStatementRestResourceChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResource);
    procedure ComposeCapabilityStatementRestResourceInteraction(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRestResourceInteraction);
    procedure ComposeCapabilityStatementRestResourceInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResourceInteraction);
    procedure ComposeCapabilityStatementRestResourceSearchParam(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRestResourceSearchParam);
    procedure ComposeCapabilityStatementRestResourceSearchParamChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResourceSearchParam);
    procedure ComposeCapabilityStatementRestResourceOperation(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRestResourceOperation);
    procedure ComposeCapabilityStatementRestResourceOperationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResourceOperation);
    procedure ComposeCapabilityStatementRestInteraction(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementRestInteraction);
    procedure ComposeCapabilityStatementRestInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestInteraction);
    procedure ComposeCapabilityStatementMessaging(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementMessaging);
    procedure ComposeCapabilityStatementMessagingChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementMessaging);
    procedure ComposeCapabilityStatementMessagingEndpoint(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementMessagingEndpoint);
    procedure ComposeCapabilityStatementMessagingEndpointChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementMessagingEndpoint);
    procedure ComposeCapabilityStatementMessagingSupportedMessage(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementMessagingSupportedMessage);
    procedure ComposeCapabilityStatementMessagingSupportedMessageChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementMessagingSupportedMessage);
    procedure ComposeCapabilityStatementDocument(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatementDocument);
    procedure ComposeCapabilityStatementDocumentChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementDocument);
    procedure ComposeCapabilityStatement(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement);
    procedure ComposeCapabilityStatementChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement);
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAPABILITYSTATEMENT2}
    procedure ComposeCapabilityStatement2Software(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2Software);
    procedure ComposeCapabilityStatement2SoftwareChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2Software);
    procedure ComposeCapabilityStatement2Implementation(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2Implementation);
    procedure ComposeCapabilityStatement2ImplementationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2Implementation);
    procedure ComposeCapabilityStatement2Rest(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2Rest);
    procedure ComposeCapabilityStatement2RestChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2Rest);
    procedure ComposeCapabilityStatement2RestResource(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2RestResource);
    procedure ComposeCapabilityStatement2RestResourceChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResource);
    procedure ComposeCapabilityStatement2RestResourceInteraction(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2RestResourceInteraction);
    procedure ComposeCapabilityStatement2RestResourceInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResourceInteraction);
    procedure ComposeCapabilityStatement2RestResourceSearchParam(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2RestResourceSearchParam);
    procedure ComposeCapabilityStatement2RestResourceSearchParamChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResourceSearchParam);
    procedure ComposeCapabilityStatement2RestResourceOperation(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2RestResourceOperation);
    procedure ComposeCapabilityStatement2RestResourceOperationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResourceOperation);
    procedure ComposeCapabilityStatement2RestInteraction(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2RestInteraction);
    procedure ComposeCapabilityStatement2RestInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestInteraction);
    procedure ComposeCapabilityStatement2(xml : TXmlBuilder; name : string; value : TFhirCapabilityStatement2);
    procedure ComposeCapabilityStatement2Children(xml : TXmlBuilder; value : TFhirCapabilityStatement2);
{$ENDIF FHIR_CAPABILITYSTATEMENT2}
{$IFDEF FHIR_CAREPLAN}
    procedure ComposeCarePlanActivity(xml : TXmlBuilder; name : string; value : TFhirCarePlanActivity);
    procedure ComposeCarePlanActivityChildren(xml : TXmlBuilder; value : TFhirCarePlanActivity);
    procedure ComposeCarePlanActivityDetail(xml : TXmlBuilder; name : string; value : TFhirCarePlanActivityDetail);
    procedure ComposeCarePlanActivityDetailChildren(xml : TXmlBuilder; value : TFhirCarePlanActivityDetail);
    procedure ComposeCarePlan(xml : TXmlBuilder; name : string; value : TFhirCarePlan);
    procedure ComposeCarePlanChildren(xml : TXmlBuilder; value : TFhirCarePlan);
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    procedure ComposeCareTeamParticipant(xml : TXmlBuilder; name : string; value : TFhirCareTeamParticipant);
    procedure ComposeCareTeamParticipantChildren(xml : TXmlBuilder; value : TFhirCareTeamParticipant);
    procedure ComposeCareTeam(xml : TXmlBuilder; name : string; value : TFhirCareTeam);
    procedure ComposeCareTeamChildren(xml : TXmlBuilder; value : TFhirCareTeam);
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    procedure ComposeCatalogEntryRelatedEntry(xml : TXmlBuilder; name : string; value : TFhirCatalogEntryRelatedEntry);
    procedure ComposeCatalogEntryRelatedEntryChildren(xml : TXmlBuilder; value : TFhirCatalogEntryRelatedEntry);
    procedure ComposeCatalogEntry(xml : TXmlBuilder; name : string; value : TFhirCatalogEntry);
    procedure ComposeCatalogEntryChildren(xml : TXmlBuilder; value : TFhirCatalogEntry);
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    procedure ComposeChargeItemPerformer(xml : TXmlBuilder; name : string; value : TFhirChargeItemPerformer);
    procedure ComposeChargeItemPerformerChildren(xml : TXmlBuilder; value : TFhirChargeItemPerformer);
    procedure ComposeChargeItem(xml : TXmlBuilder; name : string; value : TFhirChargeItem);
    procedure ComposeChargeItemChildren(xml : TXmlBuilder; value : TFhirChargeItem);
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    procedure ComposeChargeItemDefinitionApplicability(xml : TXmlBuilder; name : string; value : TFhirChargeItemDefinitionApplicability);
    procedure ComposeChargeItemDefinitionApplicabilityChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinitionApplicability);
    procedure ComposeChargeItemDefinitionPropertyGroup(xml : TXmlBuilder; name : string; value : TFhirChargeItemDefinitionPropertyGroup);
    procedure ComposeChargeItemDefinitionPropertyGroupChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinitionPropertyGroup);
    procedure ComposeChargeItemDefinitionPropertyGroupPriceComponent(xml : TXmlBuilder; name : string; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
    procedure ComposeChargeItemDefinitionPropertyGroupPriceComponentChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
    procedure ComposeChargeItemDefinition(xml : TXmlBuilder; name : string; value : TFhirChargeItemDefinition);
    procedure ComposeChargeItemDefinitionChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinition);
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
    procedure ComposeCitationSummary(xml : TXmlBuilder; name : string; value : TFhirCitationSummary);
    procedure ComposeCitationSummaryChildren(xml : TXmlBuilder; value : TFhirCitationSummary);
    procedure ComposeCitationVariantCitation(xml : TXmlBuilder; name : string; value : TFhirCitationVariantCitation);
    procedure ComposeCitationVariantCitationChildren(xml : TXmlBuilder; value : TFhirCitationVariantCitation);
    procedure ComposeCitationJournal(xml : TXmlBuilder; name : string; value : TFhirCitationJournal);
    procedure ComposeCitationJournalChildren(xml : TXmlBuilder; value : TFhirCitationJournal);
    procedure ComposeCitationJournalJournalIssue(xml : TXmlBuilder; name : string; value : TFhirCitationJournalJournalIssue);
    procedure ComposeCitationJournalJournalIssueChildren(xml : TXmlBuilder; value : TFhirCitationJournalJournalIssue);
    procedure ComposeCitationJournalJournalIssuePublicationDate(xml : TXmlBuilder; name : string; value : TFhirCitationJournalJournalIssuePublicationDate);
    procedure ComposeCitationJournalJournalIssuePublicationDateChildren(xml : TXmlBuilder; value : TFhirCitationJournalJournalIssuePublicationDate);
    procedure ComposeCitationPublicationInfo(xml : TXmlBuilder; name : string; value : TFhirCitationPublicationInfo);
    procedure ComposeCitationPublicationInfoChildren(xml : TXmlBuilder; value : TFhirCitationPublicationInfo);
    procedure ComposeCitationPublicationInfoPublishedIn(xml : TXmlBuilder; name : string; value : TFhirCitationPublicationInfoPublishedIn);
    procedure ComposeCitationPublicationInfoPublishedInChildren(xml : TXmlBuilder; value : TFhirCitationPublicationInfoPublishedIn);
    procedure ComposeCitationAlternativeTitle(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeTitle);
    procedure ComposeCitationAlternativeTitleChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeTitle);
    procedure ComposeCitationPagination(xml : TXmlBuilder; name : string; value : TFhirCitationPagination);
    procedure ComposeCitationPaginationChildren(xml : TXmlBuilder; value : TFhirCitationPagination);
    procedure ComposeCitationArticleUrl(xml : TXmlBuilder; name : string; value : TFhirCitationArticleUrl);
    procedure ComposeCitationArticleUrlChildren(xml : TXmlBuilder; value : TFhirCitationArticleUrl);
    procedure ComposeCitationAlternativeAbstract(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeAbstract);
    procedure ComposeCitationAlternativeAbstractChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeAbstract);
    procedure ComposeCitationContributorship(xml : TXmlBuilder; name : string; value : TFhirCitationContributorship);
    procedure ComposeCitationContributorshipChildren(xml : TXmlBuilder; value : TFhirCitationContributorship);
    procedure ComposeCitationContributorshipEntry(xml : TXmlBuilder; name : string; value : TFhirCitationContributorshipEntry);
    procedure ComposeCitationContributorshipEntryChildren(xml : TXmlBuilder; value : TFhirCitationContributorshipEntry);
    procedure ComposeCitationContributorshipEntryAffiliationInfo(xml : TXmlBuilder; name : string; value : TFhirCitationContributorshipEntryAffiliationInfo);
    procedure ComposeCitationContributorshipEntryAffiliationInfoChildren(xml : TXmlBuilder; value : TFhirCitationContributorshipEntryAffiliationInfo);
    procedure ComposeCitationContributorshipSummary(xml : TXmlBuilder; name : string; value : TFhirCitationContributorshipSummary);
    procedure ComposeCitationContributorshipSummaryChildren(xml : TXmlBuilder; value : TFhirCitationContributorshipSummary);
    procedure ComposeCitationAlternativeForm(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeForm);
    procedure ComposeCitationAlternativeFormChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeForm);
    procedure ComposeCitationAlternativeFormJournalIssue(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeFormJournalIssue);
    procedure ComposeCitationAlternativeFormJournalIssueChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormJournalIssue);
    procedure ComposeCitationAlternativeFormJournalIssuePublicationDate(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeFormJournalIssuePublicationDate);
    procedure ComposeCitationAlternativeFormJournalIssuePublicationDateChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormJournalIssuePublicationDate);
    procedure ComposeCitationAlternativeFormPagination(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeFormPagination);
    procedure ComposeCitationAlternativeFormPaginationChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormPagination);
    procedure ComposeCitationAlternativeFormPublicationInfo(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeFormPublicationInfo);
    procedure ComposeCitationAlternativeFormPublicationInfoChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormPublicationInfo);
    procedure ComposeCitationAlternativeFormPublicationInfoPublishedIn(xml : TXmlBuilder; name : string; value : TFhirCitationAlternativeFormPublicationInfoPublishedIn);
    procedure ComposeCitationAlternativeFormPublicationInfoPublishedInChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormPublicationInfoPublishedIn);
    procedure ComposeCitationKeywordList(xml : TXmlBuilder; name : string; value : TFhirCitationKeywordList);
    procedure ComposeCitationKeywordListChildren(xml : TXmlBuilder; value : TFhirCitationKeywordList);
    procedure ComposeCitationKeywordListKeyword(xml : TXmlBuilder; name : string; value : TFhirCitationKeywordListKeyword);
    procedure ComposeCitationKeywordListKeywordChildren(xml : TXmlBuilder; value : TFhirCitationKeywordListKeyword);
    procedure ComposeCitationMedlinePubMed(xml : TXmlBuilder; name : string; value : TFhirCitationMedlinePubMed);
    procedure ComposeCitationMedlinePubMedChildren(xml : TXmlBuilder; value : TFhirCitationMedlinePubMed);
    procedure ComposeCitationMedlinePubMedPubMedPubDate(xml : TXmlBuilder; name : string; value : TFhirCitationMedlinePubMedPubMedPubDate);
    procedure ComposeCitationMedlinePubMedPubMedPubDateChildren(xml : TXmlBuilder; value : TFhirCitationMedlinePubMedPubMedPubDate);
    procedure ComposeCitationMedlinePubMedRelatedArticle(xml : TXmlBuilder; name : string; value : TFhirCitationMedlinePubMedRelatedArticle);
    procedure ComposeCitationMedlinePubMedRelatedArticleChildren(xml : TXmlBuilder; value : TFhirCitationMedlinePubMedRelatedArticle);
    procedure ComposeCitation(xml : TXmlBuilder; name : string; value : TFhirCitation);
    procedure ComposeCitationChildren(xml : TXmlBuilder; value : TFhirCitation);
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
    procedure ComposeClaimRelated(xml : TXmlBuilder; name : string; value : TFhirClaimRelated);
    procedure ComposeClaimRelatedChildren(xml : TXmlBuilder; value : TFhirClaimRelated);
    procedure ComposeClaimPayee(xml : TXmlBuilder; name : string; value : TFhirClaimPayee);
    procedure ComposeClaimPayeeChildren(xml : TXmlBuilder; value : TFhirClaimPayee);
    procedure ComposeClaimCareTeam(xml : TXmlBuilder; name : string; value : TFhirClaimCareTeam);
    procedure ComposeClaimCareTeamChildren(xml : TXmlBuilder; value : TFhirClaimCareTeam);
    procedure ComposeClaimSupportingInfo(xml : TXmlBuilder; name : string; value : TFhirClaimSupportingInfo);
    procedure ComposeClaimSupportingInfoChildren(xml : TXmlBuilder; value : TFhirClaimSupportingInfo);
    procedure ComposeClaimDiagnosis(xml : TXmlBuilder; name : string; value : TFhirClaimDiagnosis);
    procedure ComposeClaimDiagnosisChildren(xml : TXmlBuilder; value : TFhirClaimDiagnosis);
    procedure ComposeClaimProcedure(xml : TXmlBuilder; name : string; value : TFhirClaimProcedure);
    procedure ComposeClaimProcedureChildren(xml : TXmlBuilder; value : TFhirClaimProcedure);
    procedure ComposeClaimInsurance(xml : TXmlBuilder; name : string; value : TFhirClaimInsurance);
    procedure ComposeClaimInsuranceChildren(xml : TXmlBuilder; value : TFhirClaimInsurance);
    procedure ComposeClaimAccident(xml : TXmlBuilder; name : string; value : TFhirClaimAccident);
    procedure ComposeClaimAccidentChildren(xml : TXmlBuilder; value : TFhirClaimAccident);
    procedure ComposeClaimItem(xml : TXmlBuilder; name : string; value : TFhirClaimItem);
    procedure ComposeClaimItemChildren(xml : TXmlBuilder; value : TFhirClaimItem);
    procedure ComposeClaimItemDetail(xml : TXmlBuilder; name : string; value : TFhirClaimItemDetail);
    procedure ComposeClaimItemDetailChildren(xml : TXmlBuilder; value : TFhirClaimItemDetail);
    procedure ComposeClaimItemDetailSubDetail(xml : TXmlBuilder; name : string; value : TFhirClaimItemDetailSubDetail);
    procedure ComposeClaimItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirClaimItemDetailSubDetail);
    procedure ComposeClaim(xml : TXmlBuilder; name : string; value : TFhirClaim);
    procedure ComposeClaimChildren(xml : TXmlBuilder; value : TFhirClaim);
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    procedure ComposeClaimResponseItem(xml : TXmlBuilder; name : string; value : TFhirClaimResponseItem);
    procedure ComposeClaimResponseItemChildren(xml : TXmlBuilder; value : TFhirClaimResponseItem);
    procedure ComposeClaimResponseItemAdjudication(xml : TXmlBuilder; name : string; value : TFhirClaimResponseItemAdjudication);
    procedure ComposeClaimResponseItemAdjudicationChildren(xml : TXmlBuilder; value : TFhirClaimResponseItemAdjudication);
    procedure ComposeClaimResponseItemDetail(xml : TXmlBuilder; name : string; value : TFhirClaimResponseItemDetail);
    procedure ComposeClaimResponseItemDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseItemDetail);
    procedure ComposeClaimResponseItemDetailSubDetail(xml : TXmlBuilder; name : string; value : TFhirClaimResponseItemDetailSubDetail);
    procedure ComposeClaimResponseItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseItemDetailSubDetail);
    procedure ComposeClaimResponseAddItem(xml : TXmlBuilder; name : string; value : TFhirClaimResponseAddItem);
    procedure ComposeClaimResponseAddItemChildren(xml : TXmlBuilder; value : TFhirClaimResponseAddItem);
    procedure ComposeClaimResponseAddItemDetail(xml : TXmlBuilder; name : string; value : TFhirClaimResponseAddItemDetail);
    procedure ComposeClaimResponseAddItemDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseAddItemDetail);
    procedure ComposeClaimResponseAddItemDetailSubDetail(xml : TXmlBuilder; name : string; value : TFhirClaimResponseAddItemDetailSubDetail);
    procedure ComposeClaimResponseAddItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseAddItemDetailSubDetail);
    procedure ComposeClaimResponseTotal(xml : TXmlBuilder; name : string; value : TFhirClaimResponseTotal);
    procedure ComposeClaimResponseTotalChildren(xml : TXmlBuilder; value : TFhirClaimResponseTotal);
    procedure ComposeClaimResponsePayment(xml : TXmlBuilder; name : string; value : TFhirClaimResponsePayment);
    procedure ComposeClaimResponsePaymentChildren(xml : TXmlBuilder; value : TFhirClaimResponsePayment);
    procedure ComposeClaimResponseProcessNote(xml : TXmlBuilder; name : string; value : TFhirClaimResponseProcessNote);
    procedure ComposeClaimResponseProcessNoteChildren(xml : TXmlBuilder; value : TFhirClaimResponseProcessNote);
    procedure ComposeClaimResponseInsurance(xml : TXmlBuilder; name : string; value : TFhirClaimResponseInsurance);
    procedure ComposeClaimResponseInsuranceChildren(xml : TXmlBuilder; value : TFhirClaimResponseInsurance);
    procedure ComposeClaimResponseError(xml : TXmlBuilder; name : string; value : TFhirClaimResponseError);
    procedure ComposeClaimResponseErrorChildren(xml : TXmlBuilder; value : TFhirClaimResponseError);
    procedure ComposeClaimResponse(xml : TXmlBuilder; name : string; value : TFhirClaimResponse);
    procedure ComposeClaimResponseChildren(xml : TXmlBuilder; value : TFhirClaimResponse);
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    procedure ComposeClinicalImpressionFinding(xml : TXmlBuilder; name : string; value : TFhirClinicalImpressionFinding);
    procedure ComposeClinicalImpressionFindingChildren(xml : TXmlBuilder; value : TFhirClinicalImpressionFinding);
    procedure ComposeClinicalImpression(xml : TXmlBuilder; name : string; value : TFhirClinicalImpression);
    procedure ComposeClinicalImpressionChildren(xml : TXmlBuilder; value : TFhirClinicalImpression);
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEISSUE}
    procedure ComposeClinicalUseIssueContraindication(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssueContraindication);
    procedure ComposeClinicalUseIssueContraindicationChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueContraindication);
    procedure ComposeClinicalUseIssueContraindicationOtherTherapy(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssueContraindicationOtherTherapy);
    procedure ComposeClinicalUseIssueContraindicationOtherTherapyChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueContraindicationOtherTherapy);
    procedure ComposeClinicalUseIssueIndication(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssueIndication);
    procedure ComposeClinicalUseIssueIndicationChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueIndication);
    procedure ComposeClinicalUseIssueInteraction(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssueInteraction);
    procedure ComposeClinicalUseIssueInteractionChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueInteraction);
    procedure ComposeClinicalUseIssueInteractionInteractant(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssueInteractionInteractant);
    procedure ComposeClinicalUseIssueInteractionInteractantChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueInteractionInteractant);
    procedure ComposeClinicalUseIssueUndesirableEffect(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssueUndesirableEffect);
    procedure ComposeClinicalUseIssueUndesirableEffectChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueUndesirableEffect);
    procedure ComposeClinicalUseIssue(xml : TXmlBuilder; name : string; value : TFhirClinicalUseIssue);
    procedure ComposeClinicalUseIssueChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssue);
{$ENDIF FHIR_CLINICALUSEISSUE}
{$IFDEF FHIR_CODESYSTEM}
    procedure ComposeCodeSystemFilter(xml : TXmlBuilder; name : string; value : TFhirCodeSystemFilter);
    procedure ComposeCodeSystemFilterChildren(xml : TXmlBuilder; value : TFhirCodeSystemFilter);
    procedure ComposeCodeSystemProperty(xml : TXmlBuilder; name : string; value : TFhirCodeSystemProperty);
    procedure ComposeCodeSystemPropertyChildren(xml : TXmlBuilder; value : TFhirCodeSystemProperty);
    procedure ComposeCodeSystemConcept(xml : TXmlBuilder; name : string; value : TFhirCodeSystemConcept);
    procedure ComposeCodeSystemConceptChildren(xml : TXmlBuilder; value : TFhirCodeSystemConcept);
    procedure ComposeCodeSystemConceptDesignation(xml : TXmlBuilder; name : string; value : TFhirCodeSystemConceptDesignation);
    procedure ComposeCodeSystemConceptDesignationChildren(xml : TXmlBuilder; value : TFhirCodeSystemConceptDesignation);
    procedure ComposeCodeSystemConceptProperty(xml : TXmlBuilder; name : string; value : TFhirCodeSystemConceptProperty);
    procedure ComposeCodeSystemConceptPropertyChildren(xml : TXmlBuilder; value : TFhirCodeSystemConceptProperty);
    procedure ComposeCodeSystem(xml : TXmlBuilder; name : string; value : TFhirCodeSystem);
    procedure ComposeCodeSystemChildren(xml : TXmlBuilder; value : TFhirCodeSystem);
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    procedure ComposeCommunicationPayload(xml : TXmlBuilder; name : string; value : TFhirCommunicationPayload);
    procedure ComposeCommunicationPayloadChildren(xml : TXmlBuilder; value : TFhirCommunicationPayload);
    procedure ComposeCommunication(xml : TXmlBuilder; name : string; value : TFhirCommunication);
    procedure ComposeCommunicationChildren(xml : TXmlBuilder; value : TFhirCommunication);
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    procedure ComposeCommunicationRequestPayload(xml : TXmlBuilder; name : string; value : TFhirCommunicationRequestPayload);
    procedure ComposeCommunicationRequestPayloadChildren(xml : TXmlBuilder; value : TFhirCommunicationRequestPayload);
    procedure ComposeCommunicationRequest(xml : TXmlBuilder; name : string; value : TFhirCommunicationRequest);
    procedure ComposeCommunicationRequestChildren(xml : TXmlBuilder; value : TFhirCommunicationRequest);
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    procedure ComposeCompartmentDefinitionResource(xml : TXmlBuilder; name : string; value : TFhirCompartmentDefinitionResource);
    procedure ComposeCompartmentDefinitionResourceChildren(xml : TXmlBuilder; value : TFhirCompartmentDefinitionResource);
    procedure ComposeCompartmentDefinition(xml : TXmlBuilder; name : string; value : TFhirCompartmentDefinition);
    procedure ComposeCompartmentDefinitionChildren(xml : TXmlBuilder; value : TFhirCompartmentDefinition);
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    procedure ComposeCompositionAttester(xml : TXmlBuilder; name : string; value : TFhirCompositionAttester);
    procedure ComposeCompositionAttesterChildren(xml : TXmlBuilder; value : TFhirCompositionAttester);
    procedure ComposeCompositionRelatesTo(xml : TXmlBuilder; name : string; value : TFhirCompositionRelatesTo);
    procedure ComposeCompositionRelatesToChildren(xml : TXmlBuilder; value : TFhirCompositionRelatesTo);
    procedure ComposeCompositionEvent(xml : TXmlBuilder; name : string; value : TFhirCompositionEvent);
    procedure ComposeCompositionEventChildren(xml : TXmlBuilder; value : TFhirCompositionEvent);
    procedure ComposeCompositionSection(xml : TXmlBuilder; name : string; value : TFhirCompositionSection);
    procedure ComposeCompositionSectionChildren(xml : TXmlBuilder; value : TFhirCompositionSection);
    procedure ComposeComposition(xml : TXmlBuilder; name : string; value : TFhirComposition);
    procedure ComposeCompositionChildren(xml : TXmlBuilder; value : TFhirComposition);
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    procedure ComposeConceptMapGroup(xml : TXmlBuilder; name : string; value : TFhirConceptMapGroup);
    procedure ComposeConceptMapGroupChildren(xml : TXmlBuilder; value : TFhirConceptMapGroup);
    procedure ComposeConceptMapGroupElement(xml : TXmlBuilder; name : string; value : TFhirConceptMapGroupElement);
    procedure ComposeConceptMapGroupElementChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupElement);
    procedure ComposeConceptMapGroupElementTarget(xml : TXmlBuilder; name : string; value : TFhirConceptMapGroupElementTarget);
    procedure ComposeConceptMapGroupElementTargetChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupElementTarget);
    procedure ComposeConceptMapGroupElementTargetDependsOn(xml : TXmlBuilder; name : string; value : TFhirConceptMapGroupElementTargetDependsOn);
    procedure ComposeConceptMapGroupElementTargetDependsOnChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupElementTargetDependsOn);
    procedure ComposeConceptMapGroupUnmapped(xml : TXmlBuilder; name : string; value : TFhirConceptMapGroupUnmapped);
    procedure ComposeConceptMapGroupUnmappedChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupUnmapped);
    procedure ComposeConceptMap(xml : TXmlBuilder; name : string; value : TFhirConceptMap);
    procedure ComposeConceptMapChildren(xml : TXmlBuilder; value : TFhirConceptMap);
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    procedure ComposeConditionStage(xml : TXmlBuilder; name : string; value : TFhirConditionStage);
    procedure ComposeConditionStageChildren(xml : TXmlBuilder; value : TFhirConditionStage);
    procedure ComposeConditionEvidence(xml : TXmlBuilder; name : string; value : TFhirConditionEvidence);
    procedure ComposeConditionEvidenceChildren(xml : TXmlBuilder; value : TFhirConditionEvidence);
    procedure ComposeCondition(xml : TXmlBuilder; name : string; value : TFhirCondition);
    procedure ComposeConditionChildren(xml : TXmlBuilder; value : TFhirCondition);
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONDITIONDEFINITION}
    procedure ComposeConditionDefinitionObservation(xml : TXmlBuilder; name : string; value : TFhirConditionDefinitionObservation);
    procedure ComposeConditionDefinitionObservationChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionObservation);
    procedure ComposeConditionDefinitionMedication(xml : TXmlBuilder; name : string; value : TFhirConditionDefinitionMedication);
    procedure ComposeConditionDefinitionMedicationChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionMedication);
    procedure ComposeConditionDefinitionPrecondition(xml : TXmlBuilder; name : string; value : TFhirConditionDefinitionPrecondition);
    procedure ComposeConditionDefinitionPreconditionChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionPrecondition);
    procedure ComposeConditionDefinitionQuestionnaire(xml : TXmlBuilder; name : string; value : TFhirConditionDefinitionQuestionnaire);
    procedure ComposeConditionDefinitionQuestionnaireChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionQuestionnaire);
    procedure ComposeConditionDefinitionPlan(xml : TXmlBuilder; name : string; value : TFhirConditionDefinitionPlan);
    procedure ComposeConditionDefinitionPlanChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionPlan);
    procedure ComposeConditionDefinition(xml : TXmlBuilder; name : string; value : TFhirConditionDefinition);
    procedure ComposeConditionDefinitionChildren(xml : TXmlBuilder; value : TFhirConditionDefinition);
{$ENDIF FHIR_CONDITIONDEFINITION}
{$IFDEF FHIR_CONSENT}
    procedure ComposeConsentPolicy(xml : TXmlBuilder; name : string; value : TFhirConsentPolicy);
    procedure ComposeConsentPolicyChildren(xml : TXmlBuilder; value : TFhirConsentPolicy);
    procedure ComposeConsentVerification(xml : TXmlBuilder; name : string; value : TFhirConsentVerification);
    procedure ComposeConsentVerificationChildren(xml : TXmlBuilder; value : TFhirConsentVerification);
    procedure ComposeConsentProvision(xml : TXmlBuilder; name : string; value : TFhirConsentProvision);
    procedure ComposeConsentProvisionChildren(xml : TXmlBuilder; value : TFhirConsentProvision);
    procedure ComposeConsentProvisionActor(xml : TXmlBuilder; name : string; value : TFhirConsentProvisionActor);
    procedure ComposeConsentProvisionActorChildren(xml : TXmlBuilder; value : TFhirConsentProvisionActor);
    procedure ComposeConsentProvisionData(xml : TXmlBuilder; name : string; value : TFhirConsentProvisionData);
    procedure ComposeConsentProvisionDataChildren(xml : TXmlBuilder; value : TFhirConsentProvisionData);
    procedure ComposeConsent(xml : TXmlBuilder; name : string; value : TFhirConsent);
    procedure ComposeConsentChildren(xml : TXmlBuilder; value : TFhirConsent);
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    procedure ComposeContractContentDefinition(xml : TXmlBuilder; name : string; value : TFhirContractContentDefinition);
    procedure ComposeContractContentDefinitionChildren(xml : TXmlBuilder; value : TFhirContractContentDefinition);
    procedure ComposeContractTerm(xml : TXmlBuilder; name : string; value : TFhirContractTerm);
    procedure ComposeContractTermChildren(xml : TXmlBuilder; value : TFhirContractTerm);
    procedure ComposeContractTermSecurityLabel(xml : TXmlBuilder; name : string; value : TFhirContractTermSecurityLabel);
    procedure ComposeContractTermSecurityLabelChildren(xml : TXmlBuilder; value : TFhirContractTermSecurityLabel);
    procedure ComposeContractTermOffer(xml : TXmlBuilder; name : string; value : TFhirContractTermOffer);
    procedure ComposeContractTermOfferChildren(xml : TXmlBuilder; value : TFhirContractTermOffer);
    procedure ComposeContractTermOfferParty(xml : TXmlBuilder; name : string; value : TFhirContractTermOfferParty);
    procedure ComposeContractTermOfferPartyChildren(xml : TXmlBuilder; value : TFhirContractTermOfferParty);
    procedure ComposeContractTermOfferAnswer(xml : TXmlBuilder; name : string; value : TFhirContractTermOfferAnswer);
    procedure ComposeContractTermOfferAnswerChildren(xml : TXmlBuilder; value : TFhirContractTermOfferAnswer);
    procedure ComposeContractTermAsset(xml : TXmlBuilder; name : string; value : TFhirContractTermAsset);
    procedure ComposeContractTermAssetChildren(xml : TXmlBuilder; value : TFhirContractTermAsset);
    procedure ComposeContractTermAssetContext(xml : TXmlBuilder; name : string; value : TFhirContractTermAssetContext);
    procedure ComposeContractTermAssetContextChildren(xml : TXmlBuilder; value : TFhirContractTermAssetContext);
    procedure ComposeContractTermAssetValuedItem(xml : TXmlBuilder; name : string; value : TFhirContractTermAssetValuedItem);
    procedure ComposeContractTermAssetValuedItemChildren(xml : TXmlBuilder; value : TFhirContractTermAssetValuedItem);
    procedure ComposeContractTermAction(xml : TXmlBuilder; name : string; value : TFhirContractTermAction);
    procedure ComposeContractTermActionChildren(xml : TXmlBuilder; value : TFhirContractTermAction);
    procedure ComposeContractTermActionSubject(xml : TXmlBuilder; name : string; value : TFhirContractTermActionSubject);
    procedure ComposeContractTermActionSubjectChildren(xml : TXmlBuilder; value : TFhirContractTermActionSubject);
    procedure ComposeContractSigner(xml : TXmlBuilder; name : string; value : TFhirContractSigner);
    procedure ComposeContractSignerChildren(xml : TXmlBuilder; value : TFhirContractSigner);
    procedure ComposeContractFriendly(xml : TXmlBuilder; name : string; value : TFhirContractFriendly);
    procedure ComposeContractFriendlyChildren(xml : TXmlBuilder; value : TFhirContractFriendly);
    procedure ComposeContractLegal(xml : TXmlBuilder; name : string; value : TFhirContractLegal);
    procedure ComposeContractLegalChildren(xml : TXmlBuilder; value : TFhirContractLegal);
    procedure ComposeContractRule(xml : TXmlBuilder; name : string; value : TFhirContractRule);
    procedure ComposeContractRuleChildren(xml : TXmlBuilder; value : TFhirContractRule);
    procedure ComposeContract(xml : TXmlBuilder; name : string; value : TFhirContract);
    procedure ComposeContractChildren(xml : TXmlBuilder; value : TFhirContract);
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    procedure ComposeCoverageClass(xml : TXmlBuilder; name : string; value : TFhirCoverageClass);
    procedure ComposeCoverageClassChildren(xml : TXmlBuilder; value : TFhirCoverageClass);
    procedure ComposeCoverageCostToBeneficiary(xml : TXmlBuilder; name : string; value : TFhirCoverageCostToBeneficiary);
    procedure ComposeCoverageCostToBeneficiaryChildren(xml : TXmlBuilder; value : TFhirCoverageCostToBeneficiary);
    procedure ComposeCoverageCostToBeneficiaryException(xml : TXmlBuilder; name : string; value : TFhirCoverageCostToBeneficiaryException);
    procedure ComposeCoverageCostToBeneficiaryExceptionChildren(xml : TXmlBuilder; value : TFhirCoverageCostToBeneficiaryException);
    procedure ComposeCoverage(xml : TXmlBuilder; name : string; value : TFhirCoverage);
    procedure ComposeCoverageChildren(xml : TXmlBuilder; value : TFhirCoverage);
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    procedure ComposeCoverageEligibilityRequestSupportingInfo(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityRequestSupportingInfo);
    procedure ComposeCoverageEligibilityRequestSupportingInfoChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestSupportingInfo);
    procedure ComposeCoverageEligibilityRequestInsurance(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityRequestInsurance);
    procedure ComposeCoverageEligibilityRequestInsuranceChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestInsurance);
    procedure ComposeCoverageEligibilityRequestItem(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityRequestItem);
    procedure ComposeCoverageEligibilityRequestItemChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestItem);
    procedure ComposeCoverageEligibilityRequestItemDiagnosis(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityRequestItemDiagnosis);
    procedure ComposeCoverageEligibilityRequestItemDiagnosisChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestItemDiagnosis);
    procedure ComposeCoverageEligibilityRequest(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityRequest);
    procedure ComposeCoverageEligibilityRequestChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequest);
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    procedure ComposeCoverageEligibilityResponseInsurance(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityResponseInsurance);
    procedure ComposeCoverageEligibilityResponseInsuranceChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseInsurance);
    procedure ComposeCoverageEligibilityResponseInsuranceItem(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityResponseInsuranceItem);
    procedure ComposeCoverageEligibilityResponseInsuranceItemChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseInsuranceItem);
    procedure ComposeCoverageEligibilityResponseInsuranceItemBenefit(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
    procedure ComposeCoverageEligibilityResponseInsuranceItemBenefitChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
    procedure ComposeCoverageEligibilityResponseError(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityResponseError);
    procedure ComposeCoverageEligibilityResponseErrorChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseError);
    procedure ComposeCoverageEligibilityResponse(xml : TXmlBuilder; name : string; value : TFhirCoverageEligibilityResponse);
    procedure ComposeCoverageEligibilityResponseChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponse);
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    procedure ComposeDetectedIssueEvidence(xml : TXmlBuilder; name : string; value : TFhirDetectedIssueEvidence);
    procedure ComposeDetectedIssueEvidenceChildren(xml : TXmlBuilder; value : TFhirDetectedIssueEvidence);
    procedure ComposeDetectedIssueMitigation(xml : TXmlBuilder; name : string; value : TFhirDetectedIssueMitigation);
    procedure ComposeDetectedIssueMitigationChildren(xml : TXmlBuilder; value : TFhirDetectedIssueMitigation);
    procedure ComposeDetectedIssue(xml : TXmlBuilder; name : string; value : TFhirDetectedIssue);
    procedure ComposeDetectedIssueChildren(xml : TXmlBuilder; value : TFhirDetectedIssue);
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    procedure ComposeDeviceUdiCarrier(xml : TXmlBuilder; name : string; value : TFhirDeviceUdiCarrier);
    procedure ComposeDeviceUdiCarrierChildren(xml : TXmlBuilder; value : TFhirDeviceUdiCarrier);
    procedure ComposeDeviceDeviceName(xml : TXmlBuilder; name : string; value : TFhirDeviceDeviceName);
    procedure ComposeDeviceDeviceNameChildren(xml : TXmlBuilder; value : TFhirDeviceDeviceName);
    procedure ComposeDeviceSpecialization(xml : TXmlBuilder; name : string; value : TFhirDeviceSpecialization);
    procedure ComposeDeviceSpecializationChildren(xml : TXmlBuilder; value : TFhirDeviceSpecialization);
    procedure ComposeDeviceVersion(xml : TXmlBuilder; name : string; value : TFhirDeviceVersion);
    procedure ComposeDeviceVersionChildren(xml : TXmlBuilder; value : TFhirDeviceVersion);
    procedure ComposeDeviceProperty(xml : TXmlBuilder; name : string; value : TFhirDeviceProperty);
    procedure ComposeDevicePropertyChildren(xml : TXmlBuilder; value : TFhirDeviceProperty);
    procedure ComposeDeviceOperationalStatus(xml : TXmlBuilder; name : string; value : TFhirDeviceOperationalStatus);
    procedure ComposeDeviceOperationalStatusChildren(xml : TXmlBuilder; value : TFhirDeviceOperationalStatus);
    procedure ComposeDeviceAssociationStatus(xml : TXmlBuilder; name : string; value : TFhirDeviceAssociationStatus);
    procedure ComposeDeviceAssociationStatusChildren(xml : TXmlBuilder; value : TFhirDeviceAssociationStatus);
    procedure ComposeDevice(xml : TXmlBuilder; name : string; value : TFhirDevice);
    procedure ComposeDeviceChildren(xml : TXmlBuilder; value : TFhirDevice);
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    procedure ComposeDeviceDefinitionUdiDeviceIdentifier(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinitionUdiDeviceIdentifier);
    procedure ComposeDeviceDefinitionUdiDeviceIdentifierChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionUdiDeviceIdentifier);
    procedure ComposeDeviceDefinitionDeviceName(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinitionDeviceName);
    procedure ComposeDeviceDefinitionDeviceNameChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionDeviceName);
    procedure ComposeDeviceDefinitionSpecialization(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinitionSpecialization);
    procedure ComposeDeviceDefinitionSpecializationChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionSpecialization);
    procedure ComposeDeviceDefinitionCapability(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinitionCapability);
    procedure ComposeDeviceDefinitionCapabilityChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionCapability);
    procedure ComposeDeviceDefinitionProperty(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinitionProperty);
    procedure ComposeDeviceDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionProperty);
    procedure ComposeDeviceDefinitionMaterial(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinitionMaterial);
    procedure ComposeDeviceDefinitionMaterialChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionMaterial);
    procedure ComposeDeviceDefinition(xml : TXmlBuilder; name : string; value : TFhirDeviceDefinition);
    procedure ComposeDeviceDefinitionChildren(xml : TXmlBuilder; value : TFhirDeviceDefinition);
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    procedure ComposeDeviceMetricCalibration(xml : TXmlBuilder; name : string; value : TFhirDeviceMetricCalibration);
    procedure ComposeDeviceMetricCalibrationChildren(xml : TXmlBuilder; value : TFhirDeviceMetricCalibration);
    procedure ComposeDeviceMetric(xml : TXmlBuilder; name : string; value : TFhirDeviceMetric);
    procedure ComposeDeviceMetricChildren(xml : TXmlBuilder; value : TFhirDeviceMetric);
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    procedure ComposeDeviceRequestParameter(xml : TXmlBuilder; name : string; value : TFhirDeviceRequestParameter);
    procedure ComposeDeviceRequestParameterChildren(xml : TXmlBuilder; value : TFhirDeviceRequestParameter);
    procedure ComposeDeviceRequest(xml : TXmlBuilder; name : string; value : TFhirDeviceRequest);
    procedure ComposeDeviceRequestChildren(xml : TXmlBuilder; value : TFhirDeviceRequest);
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    procedure ComposeDeviceUseStatement(xml : TXmlBuilder; name : string; value : TFhirDeviceUseStatement);
    procedure ComposeDeviceUseStatementChildren(xml : TXmlBuilder; value : TFhirDeviceUseStatement);
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    procedure ComposeDiagnosticReportMedia(xml : TXmlBuilder; name : string; value : TFhirDiagnosticReportMedia);
    procedure ComposeDiagnosticReportMediaChildren(xml : TXmlBuilder; value : TFhirDiagnosticReportMedia);
    procedure ComposeDiagnosticReport(xml : TXmlBuilder; name : string; value : TFhirDiagnosticReport);
    procedure ComposeDiagnosticReportChildren(xml : TXmlBuilder; value : TFhirDiagnosticReport);
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    procedure ComposeDocumentManifestRelated(xml : TXmlBuilder; name : string; value : TFhirDocumentManifestRelated);
    procedure ComposeDocumentManifestRelatedChildren(xml : TXmlBuilder; value : TFhirDocumentManifestRelated);
    procedure ComposeDocumentManifest(xml : TXmlBuilder; name : string; value : TFhirDocumentManifest);
    procedure ComposeDocumentManifestChildren(xml : TXmlBuilder; value : TFhirDocumentManifest);
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    procedure ComposeDocumentReferenceAttester(xml : TXmlBuilder; name : string; value : TFhirDocumentReferenceAttester);
    procedure ComposeDocumentReferenceAttesterChildren(xml : TXmlBuilder; value : TFhirDocumentReferenceAttester);
    procedure ComposeDocumentReferenceRelatesTo(xml : TXmlBuilder; name : string; value : TFhirDocumentReferenceRelatesTo);
    procedure ComposeDocumentReferenceRelatesToChildren(xml : TXmlBuilder; value : TFhirDocumentReferenceRelatesTo);
    procedure ComposeDocumentReferenceContent(xml : TXmlBuilder; name : string; value : TFhirDocumentReferenceContent);
    procedure ComposeDocumentReferenceContentChildren(xml : TXmlBuilder; value : TFhirDocumentReferenceContent);
    procedure ComposeDocumentReference(xml : TXmlBuilder; name : string; value : TFhirDocumentReference);
    procedure ComposeDocumentReferenceChildren(xml : TXmlBuilder; value : TFhirDocumentReference);
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
    procedure ComposeEncounterStatusHistory(xml : TXmlBuilder; name : string; value : TFhirEncounterStatusHistory);
    procedure ComposeEncounterStatusHistoryChildren(xml : TXmlBuilder; value : TFhirEncounterStatusHistory);
    procedure ComposeEncounterClassHistory(xml : TXmlBuilder; name : string; value : TFhirEncounterClassHistory);
    procedure ComposeEncounterClassHistoryChildren(xml : TXmlBuilder; value : TFhirEncounterClassHistory);
    procedure ComposeEncounterParticipant(xml : TXmlBuilder; name : string; value : TFhirEncounterParticipant);
    procedure ComposeEncounterParticipantChildren(xml : TXmlBuilder; value : TFhirEncounterParticipant);
    procedure ComposeEncounterDiagnosis(xml : TXmlBuilder; name : string; value : TFhirEncounterDiagnosis);
    procedure ComposeEncounterDiagnosisChildren(xml : TXmlBuilder; value : TFhirEncounterDiagnosis);
    procedure ComposeEncounterHospitalization(xml : TXmlBuilder; name : string; value : TFhirEncounterHospitalization);
    procedure ComposeEncounterHospitalizationChildren(xml : TXmlBuilder; value : TFhirEncounterHospitalization);
    procedure ComposeEncounterLocation(xml : TXmlBuilder; name : string; value : TFhirEncounterLocation);
    procedure ComposeEncounterLocationChildren(xml : TXmlBuilder; value : TFhirEncounterLocation);
    procedure ComposeEncounter(xml : TXmlBuilder; name : string; value : TFhirEncounter);
    procedure ComposeEncounterChildren(xml : TXmlBuilder; value : TFhirEncounter);
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    procedure ComposeEndpoint(xml : TXmlBuilder; name : string; value : TFhirEndpoint);
    procedure ComposeEndpointChildren(xml : TXmlBuilder; value : TFhirEndpoint);
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    procedure ComposeEnrollmentRequest(xml : TXmlBuilder; name : string; value : TFhirEnrollmentRequest);
    procedure ComposeEnrollmentRequestChildren(xml : TXmlBuilder; value : TFhirEnrollmentRequest);
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    procedure ComposeEnrollmentResponse(xml : TXmlBuilder; name : string; value : TFhirEnrollmentResponse);
    procedure ComposeEnrollmentResponseChildren(xml : TXmlBuilder; value : TFhirEnrollmentResponse);
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    procedure ComposeEpisodeOfCareStatusHistory(xml : TXmlBuilder; name : string; value : TFhirEpisodeOfCareStatusHistory);
    procedure ComposeEpisodeOfCareStatusHistoryChildren(xml : TXmlBuilder; value : TFhirEpisodeOfCareStatusHistory);
    procedure ComposeEpisodeOfCareDiagnosis(xml : TXmlBuilder; name : string; value : TFhirEpisodeOfCareDiagnosis);
    procedure ComposeEpisodeOfCareDiagnosisChildren(xml : TXmlBuilder; value : TFhirEpisodeOfCareDiagnosis);
    procedure ComposeEpisodeOfCare(xml : TXmlBuilder; name : string; value : TFhirEpisodeOfCare);
    procedure ComposeEpisodeOfCareChildren(xml : TXmlBuilder; value : TFhirEpisodeOfCare);
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    procedure ComposeEventDefinition(xml : TXmlBuilder; name : string; value : TFhirEventDefinition);
    procedure ComposeEventDefinitionChildren(xml : TXmlBuilder; value : TFhirEventDefinition);
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    procedure ComposeEvidenceVariableDefinition(xml : TXmlBuilder; name : string; value : TFhirEvidenceVariableDefinition);
    procedure ComposeEvidenceVariableDefinitionChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableDefinition);
    procedure ComposeEvidenceCertainty(xml : TXmlBuilder; name : string; value : TFhirEvidenceCertainty);
    procedure ComposeEvidenceCertaintyChildren(xml : TXmlBuilder; value : TFhirEvidenceCertainty);
    procedure ComposeEvidenceCertaintyCertaintySubcomponent(xml : TXmlBuilder; name : string; value : TFhirEvidenceCertaintyCertaintySubcomponent);
    procedure ComposeEvidenceCertaintyCertaintySubcomponentChildren(xml : TXmlBuilder; value : TFhirEvidenceCertaintyCertaintySubcomponent);
    procedure ComposeEvidence(xml : TXmlBuilder; name : string; value : TFhirEvidence);
    procedure ComposeEvidenceChildren(xml : TXmlBuilder; value : TFhirEvidence);
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
    procedure ComposeEvidenceReportSubject(xml : TXmlBuilder; name : string; value : TFhirEvidenceReportSubject);
    procedure ComposeEvidenceReportSubjectChildren(xml : TXmlBuilder; value : TFhirEvidenceReportSubject);
    procedure ComposeEvidenceReportSubjectCharacteristic(xml : TXmlBuilder; name : string; value : TFhirEvidenceReportSubjectCharacteristic);
    procedure ComposeEvidenceReportSubjectCharacteristicChildren(xml : TXmlBuilder; value : TFhirEvidenceReportSubjectCharacteristic);
    procedure ComposeEvidenceReportRelatesTo(xml : TXmlBuilder; name : string; value : TFhirEvidenceReportRelatesTo);
    procedure ComposeEvidenceReportRelatesToChildren(xml : TXmlBuilder; value : TFhirEvidenceReportRelatesTo);
    procedure ComposeEvidenceReportSection(xml : TXmlBuilder; name : string; value : TFhirEvidenceReportSection);
    procedure ComposeEvidenceReportSectionChildren(xml : TXmlBuilder; value : TFhirEvidenceReportSection);
    procedure ComposeEvidenceReport(xml : TXmlBuilder; name : string; value : TFhirEvidenceReport);
    procedure ComposeEvidenceReportChildren(xml : TXmlBuilder; value : TFhirEvidenceReport);
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    procedure ComposeEvidenceVariableCharacteristic(xml : TXmlBuilder; name : string; value : TFhirEvidenceVariableCharacteristic);
    procedure ComposeEvidenceVariableCharacteristicChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableCharacteristic);
    procedure ComposeEvidenceVariableCharacteristicTimeFromStart(xml : TXmlBuilder; name : string; value : TFhirEvidenceVariableCharacteristicTimeFromStart);
    procedure ComposeEvidenceVariableCharacteristicTimeFromStartChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableCharacteristicTimeFromStart);
    procedure ComposeEvidenceVariableCategory(xml : TXmlBuilder; name : string; value : TFhirEvidenceVariableCategory);
    procedure ComposeEvidenceVariableCategoryChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableCategory);
    procedure ComposeEvidenceVariable(xml : TXmlBuilder; name : string; value : TFhirEvidenceVariable);
    procedure ComposeEvidenceVariableChildren(xml : TXmlBuilder; value : TFhirEvidenceVariable);
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    procedure ComposeExampleScenarioActor(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioActor);
    procedure ComposeExampleScenarioActorChildren(xml : TXmlBuilder; value : TFhirExampleScenarioActor);
    procedure ComposeExampleScenarioInstance(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioInstance);
    procedure ComposeExampleScenarioInstanceChildren(xml : TXmlBuilder; value : TFhirExampleScenarioInstance);
    procedure ComposeExampleScenarioInstanceVersion(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioInstanceVersion);
    procedure ComposeExampleScenarioInstanceVersionChildren(xml : TXmlBuilder; value : TFhirExampleScenarioInstanceVersion);
    procedure ComposeExampleScenarioInstanceContainedInstance(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioInstanceContainedInstance);
    procedure ComposeExampleScenarioInstanceContainedInstanceChildren(xml : TXmlBuilder; value : TFhirExampleScenarioInstanceContainedInstance);
    procedure ComposeExampleScenarioProcess(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioProcess);
    procedure ComposeExampleScenarioProcessChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcess);
    procedure ComposeExampleScenarioProcessStep(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioProcessStep);
    procedure ComposeExampleScenarioProcessStepChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcessStep);
    procedure ComposeExampleScenarioProcessStepOperation(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioProcessStepOperation);
    procedure ComposeExampleScenarioProcessStepOperationChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcessStepOperation);
    procedure ComposeExampleScenarioProcessStepAlternative(xml : TXmlBuilder; name : string; value : TFhirExampleScenarioProcessStepAlternative);
    procedure ComposeExampleScenarioProcessStepAlternativeChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcessStepAlternative);
    procedure ComposeExampleScenario(xml : TXmlBuilder; name : string; value : TFhirExampleScenario);
    procedure ComposeExampleScenarioChildren(xml : TXmlBuilder; value : TFhirExampleScenario);
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    procedure ComposeExplanationOfBenefitRelated(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitRelated);
    procedure ComposeExplanationOfBenefitRelatedChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitRelated);
    procedure ComposeExplanationOfBenefitPayee(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitPayee);
    procedure ComposeExplanationOfBenefitPayeeChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitPayee);
    procedure ComposeExplanationOfBenefitCareTeam(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitCareTeam);
    procedure ComposeExplanationOfBenefitCareTeamChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitCareTeam);
    procedure ComposeExplanationOfBenefitSupportingInfo(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitSupportingInfo);
    procedure ComposeExplanationOfBenefitSupportingInfoChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitSupportingInfo);
    procedure ComposeExplanationOfBenefitDiagnosis(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitDiagnosis);
    procedure ComposeExplanationOfBenefitDiagnosisChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitDiagnosis);
    procedure ComposeExplanationOfBenefitProcedure(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitProcedure);
    procedure ComposeExplanationOfBenefitProcedureChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitProcedure);
    procedure ComposeExplanationOfBenefitInsurance(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitInsurance);
    procedure ComposeExplanationOfBenefitInsuranceChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitInsurance);
    procedure ComposeExplanationOfBenefitAccident(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitAccident);
    procedure ComposeExplanationOfBenefitAccidentChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAccident);
    procedure ComposeExplanationOfBenefitItem(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitItem);
    procedure ComposeExplanationOfBenefitItemChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItem);
    procedure ComposeExplanationOfBenefitItemAdjudication(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitItemAdjudication);
    procedure ComposeExplanationOfBenefitItemAdjudicationChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItemAdjudication);
    procedure ComposeExplanationOfBenefitItemDetail(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitItemDetail);
    procedure ComposeExplanationOfBenefitItemDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItemDetail);
    procedure ComposeExplanationOfBenefitItemDetailSubDetail(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitAddItem(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitAddItem);
    procedure ComposeExplanationOfBenefitAddItemChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAddItem);
    procedure ComposeExplanationOfBenefitAddItemDetail(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitAddItemDetail);
    procedure ComposeExplanationOfBenefitAddItemDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAddItemDetail);
    procedure ComposeExplanationOfBenefitAddItemDetailSubDetail(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitAddItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitAddItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAddItemDetailSubDetail);
    procedure ComposeExplanationOfBenefitTotal(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitTotal);
    procedure ComposeExplanationOfBenefitTotalChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitTotal);
    procedure ComposeExplanationOfBenefitPayment(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitPayment);
    procedure ComposeExplanationOfBenefitPaymentChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitPayment);
    procedure ComposeExplanationOfBenefitProcessNote(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitProcessNote);
    procedure ComposeExplanationOfBenefitProcessNoteChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitProcessNote);
    procedure ComposeExplanationOfBenefitBenefitBalance(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitBenefitBalance);
    procedure ComposeExplanationOfBenefitBenefitBalanceChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitBenefitBalance);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancial(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefitBenefitBalanceFinancial);
    procedure ComposeExplanationOfBenefitBenefitBalanceFinancialChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitBenefitBalanceFinancial);
    procedure ComposeExplanationOfBenefit(xml : TXmlBuilder; name : string; value : TFhirExplanationOfBenefit);
    procedure ComposeExplanationOfBenefitChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefit);
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    procedure ComposeFamilyMemberHistoryCondition(xml : TXmlBuilder; name : string; value : TFhirFamilyMemberHistoryCondition);
    procedure ComposeFamilyMemberHistoryConditionChildren(xml : TXmlBuilder; value : TFhirFamilyMemberHistoryCondition);
    procedure ComposeFamilyMemberHistoryProcedure(xml : TXmlBuilder; name : string; value : TFhirFamilyMemberHistoryProcedure);
    procedure ComposeFamilyMemberHistoryProcedureChildren(xml : TXmlBuilder; value : TFhirFamilyMemberHistoryProcedure);
    procedure ComposeFamilyMemberHistory(xml : TXmlBuilder; name : string; value : TFhirFamilyMemberHistory);
    procedure ComposeFamilyMemberHistoryChildren(xml : TXmlBuilder; value : TFhirFamilyMemberHistory);
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    procedure ComposeFlag(xml : TXmlBuilder; name : string; value : TFhirFlag);
    procedure ComposeFlagChildren(xml : TXmlBuilder; value : TFhirFlag);
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    procedure ComposeGoalTarget(xml : TXmlBuilder; name : string; value : TFhirGoalTarget);
    procedure ComposeGoalTargetChildren(xml : TXmlBuilder; value : TFhirGoalTarget);
    procedure ComposeGoal(xml : TXmlBuilder; name : string; value : TFhirGoal);
    procedure ComposeGoalChildren(xml : TXmlBuilder; value : TFhirGoal);
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    procedure ComposeGraphDefinitionLink(xml : TXmlBuilder; name : string; value : TFhirGraphDefinitionLink);
    procedure ComposeGraphDefinitionLinkChildren(xml : TXmlBuilder; value : TFhirGraphDefinitionLink);
    procedure ComposeGraphDefinitionLinkTarget(xml : TXmlBuilder; name : string; value : TFhirGraphDefinitionLinkTarget);
    procedure ComposeGraphDefinitionLinkTargetChildren(xml : TXmlBuilder; value : TFhirGraphDefinitionLinkTarget);
    procedure ComposeGraphDefinitionLinkTargetCompartment(xml : TXmlBuilder; name : string; value : TFhirGraphDefinitionLinkTargetCompartment);
    procedure ComposeGraphDefinitionLinkTargetCompartmentChildren(xml : TXmlBuilder; value : TFhirGraphDefinitionLinkTargetCompartment);
    procedure ComposeGraphDefinition(xml : TXmlBuilder; name : string; value : TFhirGraphDefinition);
    procedure ComposeGraphDefinitionChildren(xml : TXmlBuilder; value : TFhirGraphDefinition);
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    procedure ComposeGroupCharacteristic(xml : TXmlBuilder; name : string; value : TFhirGroupCharacteristic);
    procedure ComposeGroupCharacteristicChildren(xml : TXmlBuilder; value : TFhirGroupCharacteristic);
    procedure ComposeGroupMember(xml : TXmlBuilder; name : string; value : TFhirGroupMember);
    procedure ComposeGroupMemberChildren(xml : TXmlBuilder; value : TFhirGroupMember);
    procedure ComposeGroup(xml : TXmlBuilder; name : string; value : TFhirGroup);
    procedure ComposeGroupChildren(xml : TXmlBuilder; value : TFhirGroup);
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    procedure ComposeGuidanceResponse(xml : TXmlBuilder; name : string; value : TFhirGuidanceResponse);
    procedure ComposeGuidanceResponseChildren(xml : TXmlBuilder; value : TFhirGuidanceResponse);
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    procedure ComposeHealthcareServiceEligibility(xml : TXmlBuilder; name : string; value : TFhirHealthcareServiceEligibility);
    procedure ComposeHealthcareServiceEligibilityChildren(xml : TXmlBuilder; value : TFhirHealthcareServiceEligibility);
    procedure ComposeHealthcareServiceAvailableTime(xml : TXmlBuilder; name : string; value : TFhirHealthcareServiceAvailableTime);
    procedure ComposeHealthcareServiceAvailableTimeChildren(xml : TXmlBuilder; value : TFhirHealthcareServiceAvailableTime);
    procedure ComposeHealthcareServiceNotAvailable(xml : TXmlBuilder; name : string; value : TFhirHealthcareServiceNotAvailable);
    procedure ComposeHealthcareServiceNotAvailableChildren(xml : TXmlBuilder; value : TFhirHealthcareServiceNotAvailable);
    procedure ComposeHealthcareService(xml : TXmlBuilder; name : string; value : TFhirHealthcareService);
    procedure ComposeHealthcareServiceChildren(xml : TXmlBuilder; value : TFhirHealthcareService);
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    procedure ComposeImagingStudyProcedure(xml : TXmlBuilder; name : string; value : TFhirImagingStudyProcedure);
    procedure ComposeImagingStudyProcedureChildren(xml : TXmlBuilder; value : TFhirImagingStudyProcedure);
    procedure ComposeImagingStudySeries(xml : TXmlBuilder; name : string; value : TFhirImagingStudySeries);
    procedure ComposeImagingStudySeriesChildren(xml : TXmlBuilder; value : TFhirImagingStudySeries);
    procedure ComposeImagingStudySeriesPerformer(xml : TXmlBuilder; name : string; value : TFhirImagingStudySeriesPerformer);
    procedure ComposeImagingStudySeriesPerformerChildren(xml : TXmlBuilder; value : TFhirImagingStudySeriesPerformer);
    procedure ComposeImagingStudySeriesInstance(xml : TXmlBuilder; name : string; value : TFhirImagingStudySeriesInstance);
    procedure ComposeImagingStudySeriesInstanceChildren(xml : TXmlBuilder; value : TFhirImagingStudySeriesInstance);
    procedure ComposeImagingStudy(xml : TXmlBuilder; name : string; value : TFhirImagingStudy);
    procedure ComposeImagingStudyChildren(xml : TXmlBuilder; value : TFhirImagingStudy);
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    procedure ComposeImmunizationPerformer(xml : TXmlBuilder; name : string; value : TFhirImmunizationPerformer);
    procedure ComposeImmunizationPerformerChildren(xml : TXmlBuilder; value : TFhirImmunizationPerformer);
    procedure ComposeImmunizationEducation(xml : TXmlBuilder; name : string; value : TFhirImmunizationEducation);
    procedure ComposeImmunizationEducationChildren(xml : TXmlBuilder; value : TFhirImmunizationEducation);
    procedure ComposeImmunizationReaction(xml : TXmlBuilder; name : string; value : TFhirImmunizationReaction);
    procedure ComposeImmunizationReactionChildren(xml : TXmlBuilder; value : TFhirImmunizationReaction);
    procedure ComposeImmunizationProtocolApplied(xml : TXmlBuilder; name : string; value : TFhirImmunizationProtocolApplied);
    procedure ComposeImmunizationProtocolAppliedChildren(xml : TXmlBuilder; value : TFhirImmunizationProtocolApplied);
    procedure ComposeImmunization(xml : TXmlBuilder; name : string; value : TFhirImmunization);
    procedure ComposeImmunizationChildren(xml : TXmlBuilder; value : TFhirImmunization);
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    procedure ComposeImmunizationEvaluation(xml : TXmlBuilder; name : string; value : TFhirImmunizationEvaluation);
    procedure ComposeImmunizationEvaluationChildren(xml : TXmlBuilder; value : TFhirImmunizationEvaluation);
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    procedure ComposeImmunizationRecommendationRecommendation(xml : TXmlBuilder; name : string; value : TFhirImmunizationRecommendationRecommendation);
    procedure ComposeImmunizationRecommendationRecommendationChildren(xml : TXmlBuilder; value : TFhirImmunizationRecommendationRecommendation);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterion(xml : TXmlBuilder; name : string; value : TFhirImmunizationRecommendationRecommendationDateCriterion);
    procedure ComposeImmunizationRecommendationRecommendationDateCriterionChildren(xml : TXmlBuilder; value : TFhirImmunizationRecommendationRecommendationDateCriterion);
    procedure ComposeImmunizationRecommendation(xml : TXmlBuilder; name : string; value : TFhirImmunizationRecommendation);
    procedure ComposeImmunizationRecommendationChildren(xml : TXmlBuilder; value : TFhirImmunizationRecommendation);
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    procedure ComposeImplementationGuideDependsOn(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDependsOn);
    procedure ComposeImplementationGuideDependsOnChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDependsOn);
    procedure ComposeImplementationGuideGlobal(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideGlobal);
    procedure ComposeImplementationGuideGlobalChildren(xml : TXmlBuilder; value : TFhirImplementationGuideGlobal);
    procedure ComposeImplementationGuideDefinition(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDefinition);
    procedure ComposeImplementationGuideDefinitionChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinition);
    procedure ComposeImplementationGuideDefinitionGrouping(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDefinitionGrouping);
    procedure ComposeImplementationGuideDefinitionGroupingChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionGrouping);
    procedure ComposeImplementationGuideDefinitionResource(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDefinitionResource);
    procedure ComposeImplementationGuideDefinitionResourceChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionResource);
    procedure ComposeImplementationGuideDefinitionPage(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDefinitionPage);
    procedure ComposeImplementationGuideDefinitionPageChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionPage);
    procedure ComposeImplementationGuideDefinitionParameter(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDefinitionParameter);
    procedure ComposeImplementationGuideDefinitionParameterChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionParameter);
    procedure ComposeImplementationGuideDefinitionTemplate(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideDefinitionTemplate);
    procedure ComposeImplementationGuideDefinitionTemplateChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionTemplate);
    procedure ComposeImplementationGuideManifest(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideManifest);
    procedure ComposeImplementationGuideManifestChildren(xml : TXmlBuilder; value : TFhirImplementationGuideManifest);
    procedure ComposeImplementationGuideManifestResource(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideManifestResource);
    procedure ComposeImplementationGuideManifestResourceChildren(xml : TXmlBuilder; value : TFhirImplementationGuideManifestResource);
    procedure ComposeImplementationGuideManifestPage(xml : TXmlBuilder; name : string; value : TFhirImplementationGuideManifestPage);
    procedure ComposeImplementationGuideManifestPageChildren(xml : TXmlBuilder; value : TFhirImplementationGuideManifestPage);
    procedure ComposeImplementationGuide(xml : TXmlBuilder; name : string; value : TFhirImplementationGuide);
    procedure ComposeImplementationGuideChildren(xml : TXmlBuilder; value : TFhirImplementationGuide);
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
    procedure ComposeIngredientSubstance(xml : TXmlBuilder; name : string; value : TFhirIngredientSubstance);
    procedure ComposeIngredientSubstanceChildren(xml : TXmlBuilder; value : TFhirIngredientSubstance);
    procedure ComposeIngredientSubstanceStrength(xml : TXmlBuilder; name : string; value : TFhirIngredientSubstanceStrength);
    procedure ComposeIngredientSubstanceStrengthChildren(xml : TXmlBuilder; value : TFhirIngredientSubstanceStrength);
    procedure ComposeIngredientSubstanceStrengthReferenceStrength(xml : TXmlBuilder; name : string; value : TFhirIngredientSubstanceStrengthReferenceStrength);
    procedure ComposeIngredientSubstanceStrengthReferenceStrengthChildren(xml : TXmlBuilder; value : TFhirIngredientSubstanceStrengthReferenceStrength);
    procedure ComposeIngredientSpecifiedSubstance(xml : TXmlBuilder; name : string; value : TFhirIngredientSpecifiedSubstance);
    procedure ComposeIngredientSpecifiedSubstanceChildren(xml : TXmlBuilder; value : TFhirIngredientSpecifiedSubstance);
    procedure ComposeIngredient(xml : TXmlBuilder; name : string; value : TFhirIngredient);
    procedure ComposeIngredientChildren(xml : TXmlBuilder; value : TFhirIngredient);
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
    procedure ComposeInsurancePlanContact(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanContact);
    procedure ComposeInsurancePlanContactChildren(xml : TXmlBuilder; value : TFhirInsurancePlanContact);
    procedure ComposeInsurancePlanCoverage(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanCoverage);
    procedure ComposeInsurancePlanCoverageChildren(xml : TXmlBuilder; value : TFhirInsurancePlanCoverage);
    procedure ComposeInsurancePlanCoverageBenefit(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanCoverageBenefit);
    procedure ComposeInsurancePlanCoverageBenefitChildren(xml : TXmlBuilder; value : TFhirInsurancePlanCoverageBenefit);
    procedure ComposeInsurancePlanCoverageBenefitLimit(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanCoverageBenefitLimit);
    procedure ComposeInsurancePlanCoverageBenefitLimitChildren(xml : TXmlBuilder; value : TFhirInsurancePlanCoverageBenefitLimit);
    procedure ComposeInsurancePlanPlan(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanPlan);
    procedure ComposeInsurancePlanPlanChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlan);
    procedure ComposeInsurancePlanPlanGeneralCost(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanPlanGeneralCost);
    procedure ComposeInsurancePlanPlanGeneralCostChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanGeneralCost);
    procedure ComposeInsurancePlanPlanSpecificCost(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanPlanSpecificCost);
    procedure ComposeInsurancePlanPlanSpecificCostChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanSpecificCost);
    procedure ComposeInsurancePlanPlanSpecificCostBenefit(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanPlanSpecificCostBenefit);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanSpecificCostBenefit);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitCost(xml : TXmlBuilder; name : string; value : TFhirInsurancePlanPlanSpecificCostBenefitCost);
    procedure ComposeInsurancePlanPlanSpecificCostBenefitCostChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanSpecificCostBenefitCost);
    procedure ComposeInsurancePlan(xml : TXmlBuilder; name : string; value : TFhirInsurancePlan);
    procedure ComposeInsurancePlanChildren(xml : TXmlBuilder; value : TFhirInsurancePlan);
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    procedure ComposeInvoiceParticipant(xml : TXmlBuilder; name : string; value : TFhirInvoiceParticipant);
    procedure ComposeInvoiceParticipantChildren(xml : TXmlBuilder; value : TFhirInvoiceParticipant);
    procedure ComposeInvoiceLineItem(xml : TXmlBuilder; name : string; value : TFhirInvoiceLineItem);
    procedure ComposeInvoiceLineItemChildren(xml : TXmlBuilder; value : TFhirInvoiceLineItem);
    procedure ComposeInvoiceLineItemPriceComponent(xml : TXmlBuilder; name : string; value : TFhirInvoiceLineItemPriceComponent);
    procedure ComposeInvoiceLineItemPriceComponentChildren(xml : TXmlBuilder; value : TFhirInvoiceLineItemPriceComponent);
    procedure ComposeInvoice(xml : TXmlBuilder; name : string; value : TFhirInvoice);
    procedure ComposeInvoiceChildren(xml : TXmlBuilder; value : TFhirInvoice);
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    procedure ComposeLibrary(xml : TXmlBuilder; name : string; value : TFhirLibrary);
    procedure ComposeLibraryChildren(xml : TXmlBuilder; value : TFhirLibrary);
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    procedure ComposeLinkageItem(xml : TXmlBuilder; name : string; value : TFhirLinkageItem);
    procedure ComposeLinkageItemChildren(xml : TXmlBuilder; value : TFhirLinkageItem);
    procedure ComposeLinkage(xml : TXmlBuilder; name : string; value : TFhirLinkage);
    procedure ComposeLinkageChildren(xml : TXmlBuilder; value : TFhirLinkage);
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    procedure ComposeListEntry(xml : TXmlBuilder; name : string; value : TFhirListEntry);
    procedure ComposeListEntryChildren(xml : TXmlBuilder; value : TFhirListEntry);
    procedure ComposeList(xml : TXmlBuilder; name : string; value : TFhirList);
    procedure ComposeListChildren(xml : TXmlBuilder; value : TFhirList);
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    procedure ComposeLocationPosition(xml : TXmlBuilder; name : string; value : TFhirLocationPosition);
    procedure ComposeLocationPositionChildren(xml : TXmlBuilder; value : TFhirLocationPosition);
    procedure ComposeLocationHoursOfOperation(xml : TXmlBuilder; name : string; value : TFhirLocationHoursOfOperation);
    procedure ComposeLocationHoursOfOperationChildren(xml : TXmlBuilder; value : TFhirLocationHoursOfOperation);
    procedure ComposeLocation(xml : TXmlBuilder; name : string; value : TFhirLocation);
    procedure ComposeLocationChildren(xml : TXmlBuilder; value : TFhirLocation);
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
    procedure ComposeManufacturedItemDefinitionProperty(xml : TXmlBuilder; name : string; value : TFhirManufacturedItemDefinitionProperty);
    procedure ComposeManufacturedItemDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirManufacturedItemDefinitionProperty);
    procedure ComposeManufacturedItemDefinition(xml : TXmlBuilder; name : string; value : TFhirManufacturedItemDefinition);
    procedure ComposeManufacturedItemDefinitionChildren(xml : TXmlBuilder; value : TFhirManufacturedItemDefinition);
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
    procedure ComposeMeasureGroup(xml : TXmlBuilder; name : string; value : TFhirMeasureGroup);
    procedure ComposeMeasureGroupChildren(xml : TXmlBuilder; value : TFhirMeasureGroup);
    procedure ComposeMeasureGroupPopulation(xml : TXmlBuilder; name : string; value : TFhirMeasureGroupPopulation);
    procedure ComposeMeasureGroupPopulationChildren(xml : TXmlBuilder; value : TFhirMeasureGroupPopulation);
    procedure ComposeMeasureGroupStratifier(xml : TXmlBuilder; name : string; value : TFhirMeasureGroupStratifier);
    procedure ComposeMeasureGroupStratifierChildren(xml : TXmlBuilder; value : TFhirMeasureGroupStratifier);
    procedure ComposeMeasureGroupStratifierComponent(xml : TXmlBuilder; name : string; value : TFhirMeasureGroupStratifierComponent);
    procedure ComposeMeasureGroupStratifierComponentChildren(xml : TXmlBuilder; value : TFhirMeasureGroupStratifierComponent);
    procedure ComposeMeasureSupplementalData(xml : TXmlBuilder; name : string; value : TFhirMeasureSupplementalData);
    procedure ComposeMeasureSupplementalDataChildren(xml : TXmlBuilder; value : TFhirMeasureSupplementalData);
    procedure ComposeMeasure(xml : TXmlBuilder; name : string; value : TFhirMeasure);
    procedure ComposeMeasureChildren(xml : TXmlBuilder; value : TFhirMeasure);
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    procedure ComposeMeasureReportGroup(xml : TXmlBuilder; name : string; value : TFhirMeasureReportGroup);
    procedure ComposeMeasureReportGroupChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroup);
    procedure ComposeMeasureReportGroupPopulation(xml : TXmlBuilder; name : string; value : TFhirMeasureReportGroupPopulation);
    procedure ComposeMeasureReportGroupPopulationChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupPopulation);
    procedure ComposeMeasureReportGroupStratifier(xml : TXmlBuilder; name : string; value : TFhirMeasureReportGroupStratifier);
    procedure ComposeMeasureReportGroupStratifierChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifier);
    procedure ComposeMeasureReportGroupStratifierStratum(xml : TXmlBuilder; name : string; value : TFhirMeasureReportGroupStratifierStratum);
    procedure ComposeMeasureReportGroupStratifierStratumChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifierStratum);
    procedure ComposeMeasureReportGroupStratifierStratumComponent(xml : TXmlBuilder; name : string; value : TFhirMeasureReportGroupStratifierStratumComponent);
    procedure ComposeMeasureReportGroupStratifierStratumComponentChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifierStratumComponent);
    procedure ComposeMeasureReportGroupStratifierStratumPopulation(xml : TXmlBuilder; name : string; value : TFhirMeasureReportGroupStratifierStratumPopulation);
    procedure ComposeMeasureReportGroupStratifierStratumPopulationChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifierStratumPopulation);
    procedure ComposeMeasureReport(xml : TXmlBuilder; name : string; value : TFhirMeasureReport);
    procedure ComposeMeasureReportChildren(xml : TXmlBuilder; value : TFhirMeasureReport);
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDICATION}
    procedure ComposeMedicationIngredient(xml : TXmlBuilder; name : string; value : TFhirMedicationIngredient);
    procedure ComposeMedicationIngredientChildren(xml : TXmlBuilder; value : TFhirMedicationIngredient);
    procedure ComposeMedicationBatch(xml : TXmlBuilder; name : string; value : TFhirMedicationBatch);
    procedure ComposeMedicationBatchChildren(xml : TXmlBuilder; value : TFhirMedicationBatch);
    procedure ComposeMedication(xml : TXmlBuilder; name : string; value : TFhirMedication);
    procedure ComposeMedicationChildren(xml : TXmlBuilder; value : TFhirMedication);
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    procedure ComposeMedicationAdministrationPerformer(xml : TXmlBuilder; name : string; value : TFhirMedicationAdministrationPerformer);
    procedure ComposeMedicationAdministrationPerformerChildren(xml : TXmlBuilder; value : TFhirMedicationAdministrationPerformer);
    procedure ComposeMedicationAdministrationDosage(xml : TXmlBuilder; name : string; value : TFhirMedicationAdministrationDosage);
    procedure ComposeMedicationAdministrationDosageChildren(xml : TXmlBuilder; value : TFhirMedicationAdministrationDosage);
    procedure ComposeMedicationAdministration(xml : TXmlBuilder; name : string; value : TFhirMedicationAdministration);
    procedure ComposeMedicationAdministrationChildren(xml : TXmlBuilder; value : TFhirMedicationAdministration);
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    procedure ComposeMedicationDispensePerformer(xml : TXmlBuilder; name : string; value : TFhirMedicationDispensePerformer);
    procedure ComposeMedicationDispensePerformerChildren(xml : TXmlBuilder; value : TFhirMedicationDispensePerformer);
    procedure ComposeMedicationDispenseSubstitution(xml : TXmlBuilder; name : string; value : TFhirMedicationDispenseSubstitution);
    procedure ComposeMedicationDispenseSubstitutionChildren(xml : TXmlBuilder; value : TFhirMedicationDispenseSubstitution);
    procedure ComposeMedicationDispense(xml : TXmlBuilder; name : string; value : TFhirMedicationDispense);
    procedure ComposeMedicationDispenseChildren(xml : TXmlBuilder; value : TFhirMedicationDispense);
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    procedure ComposeMedicationKnowledgeRelatedMedicationKnowledge(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
    procedure ComposeMedicationKnowledgeRelatedMedicationKnowledgeChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
    procedure ComposeMedicationKnowledgeMonograph(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeMonograph);
    procedure ComposeMedicationKnowledgeMonographChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeMonograph);
    procedure ComposeMedicationKnowledgeIngredient(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeIngredient);
    procedure ComposeMedicationKnowledgeIngredientChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeIngredient);
    procedure ComposeMedicationKnowledgeCost(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeCost);
    procedure ComposeMedicationKnowledgeCostChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeCost);
    procedure ComposeMedicationKnowledgeMonitoringProgram(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeMonitoringProgram);
    procedure ComposeMedicationKnowledgeMonitoringProgramChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeMonitoringProgram);
    procedure ComposeMedicationKnowledgeAdministrationGuideline(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeAdministrationGuideline);
    procedure ComposeMedicationKnowledgeAdministrationGuidelineChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeAdministrationGuideline);
    procedure ComposeMedicationKnowledgeAdministrationGuidelineDosage(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelineDosage);
    procedure ComposeMedicationKnowledgeAdministrationGuidelineDosageChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeAdministrationGuidelineDosage);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinePatientCharacteristic(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic);
    procedure ComposeMedicationKnowledgeAdministrationGuidelinePatientCharacteristicChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic);
    procedure ComposeMedicationKnowledgeMedicineClassification(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeMedicineClassification);
    procedure ComposeMedicationKnowledgeMedicineClassificationChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeMedicineClassification);
    procedure ComposeMedicationKnowledgePackaging(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgePackaging);
    procedure ComposeMedicationKnowledgePackagingChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgePackaging);
    procedure ComposeMedicationKnowledgeDrugCharacteristic(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeDrugCharacteristic);
    procedure ComposeMedicationKnowledgeDrugCharacteristicChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeDrugCharacteristic);
    procedure ComposeMedicationKnowledgeRegulatory(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeRegulatory);
    procedure ComposeMedicationKnowledgeRegulatoryChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRegulatory);
    procedure ComposeMedicationKnowledgeRegulatorySubstitution(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeRegulatorySubstitution);
    procedure ComposeMedicationKnowledgeRegulatorySubstitutionChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRegulatorySubstitution);
    procedure ComposeMedicationKnowledgeRegulatoryMaxDispense(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeRegulatoryMaxDispense);
    procedure ComposeMedicationKnowledgeRegulatoryMaxDispenseChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRegulatoryMaxDispense);
    procedure ComposeMedicationKnowledgeKineticCharacteristic(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledgeKineticCharacteristic);
    procedure ComposeMedicationKnowledgeKineticCharacteristicChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeKineticCharacteristic);
    procedure ComposeMedicationKnowledge(xml : TXmlBuilder; name : string; value : TFhirMedicationKnowledge);
    procedure ComposeMedicationKnowledgeChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledge);
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    procedure ComposeMedicationRequestDispenseRequest(xml : TXmlBuilder; name : string; value : TFhirMedicationRequestDispenseRequest);
    procedure ComposeMedicationRequestDispenseRequestChildren(xml : TXmlBuilder; value : TFhirMedicationRequestDispenseRequest);
    procedure ComposeMedicationRequestDispenseRequestInitialFill(xml : TXmlBuilder; name : string; value : TFhirMedicationRequestDispenseRequestInitialFill);
    procedure ComposeMedicationRequestDispenseRequestInitialFillChildren(xml : TXmlBuilder; value : TFhirMedicationRequestDispenseRequestInitialFill);
    procedure ComposeMedicationRequestSubstitution(xml : TXmlBuilder; name : string; value : TFhirMedicationRequestSubstitution);
    procedure ComposeMedicationRequestSubstitutionChildren(xml : TXmlBuilder; value : TFhirMedicationRequestSubstitution);
    procedure ComposeMedicationRequest(xml : TXmlBuilder; name : string; value : TFhirMedicationRequest);
    procedure ComposeMedicationRequestChildren(xml : TXmlBuilder; value : TFhirMedicationRequest);
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONUSAGE}
    procedure ComposeMedicationUsage(xml : TXmlBuilder; name : string; value : TFhirMedicationUsage);
    procedure ComposeMedicationUsageChildren(xml : TXmlBuilder; value : TFhirMedicationUsage);
{$ENDIF FHIR_MEDICATIONUSAGE}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
    procedure ComposeMedicinalProductDefinitionContact(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinitionContact);
    procedure ComposeMedicinalProductDefinitionContactChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionContact);
    procedure ComposeMedicinalProductDefinitionName(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinitionName);
    procedure ComposeMedicinalProductDefinitionNameChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionName);
    procedure ComposeMedicinalProductDefinitionNameNamePart(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinitionNameNamePart);
    procedure ComposeMedicinalProductDefinitionNameNamePartChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionNameNamePart);
    procedure ComposeMedicinalProductDefinitionNameCountryLanguage(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinitionNameCountryLanguage);
    procedure ComposeMedicinalProductDefinitionNameCountryLanguageChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionNameCountryLanguage);
    procedure ComposeMedicinalProductDefinitionCrossReference(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinitionCrossReference);
    procedure ComposeMedicinalProductDefinitionCrossReferenceChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionCrossReference);
    procedure ComposeMedicinalProductDefinitionManufacturingBusinessOperation(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinitionManufacturingBusinessOperation);
    procedure ComposeMedicinalProductDefinitionManufacturingBusinessOperationChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionManufacturingBusinessOperation);
    procedure ComposeMedicinalProductDefinition(xml : TXmlBuilder; name : string; value : TFhirMedicinalProductDefinition);
    procedure ComposeMedicinalProductDefinitionChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinition);
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
    procedure ComposeMessageDefinitionFocus(xml : TXmlBuilder; name : string; value : TFhirMessageDefinitionFocus);
    procedure ComposeMessageDefinitionFocusChildren(xml : TXmlBuilder; value : TFhirMessageDefinitionFocus);
    procedure ComposeMessageDefinitionAllowedResponse(xml : TXmlBuilder; name : string; value : TFhirMessageDefinitionAllowedResponse);
    procedure ComposeMessageDefinitionAllowedResponseChildren(xml : TXmlBuilder; value : TFhirMessageDefinitionAllowedResponse);
    procedure ComposeMessageDefinition(xml : TXmlBuilder; name : string; value : TFhirMessageDefinition);
    procedure ComposeMessageDefinitionChildren(xml : TXmlBuilder; value : TFhirMessageDefinition);
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    procedure ComposeMessageHeaderDestination(xml : TXmlBuilder; name : string; value : TFhirMessageHeaderDestination);
    procedure ComposeMessageHeaderDestinationChildren(xml : TXmlBuilder; value : TFhirMessageHeaderDestination);
    procedure ComposeMessageHeaderSource(xml : TXmlBuilder; name : string; value : TFhirMessageHeaderSource);
    procedure ComposeMessageHeaderSourceChildren(xml : TXmlBuilder; value : TFhirMessageHeaderSource);
    procedure ComposeMessageHeaderResponse(xml : TXmlBuilder; name : string; value : TFhirMessageHeaderResponse);
    procedure ComposeMessageHeaderResponseChildren(xml : TXmlBuilder; value : TFhirMessageHeaderResponse);
    procedure ComposeMessageHeader(xml : TXmlBuilder; name : string; value : TFhirMessageHeader);
    procedure ComposeMessageHeaderChildren(xml : TXmlBuilder; value : TFhirMessageHeader);
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    procedure ComposeMolecularSequenceReferenceSeq(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceReferenceSeq);
    procedure ComposeMolecularSequenceReferenceSeqChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceReferenceSeq);
    procedure ComposeMolecularSequenceVariant(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceVariant);
    procedure ComposeMolecularSequenceVariantChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceVariant);
    procedure ComposeMolecularSequenceQuality(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceQuality);
    procedure ComposeMolecularSequenceQualityChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceQuality);
    procedure ComposeMolecularSequenceQualityRoc(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceQualityRoc);
    procedure ComposeMolecularSequenceQualityRocChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceQualityRoc);
    procedure ComposeMolecularSequenceRepository(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceRepository);
    procedure ComposeMolecularSequenceRepositoryChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceRepository);
    procedure ComposeMolecularSequenceStructureVariant(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceStructureVariant);
    procedure ComposeMolecularSequenceStructureVariantChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceStructureVariant);
    procedure ComposeMolecularSequenceStructureVariantOuter(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceStructureVariantOuter);
    procedure ComposeMolecularSequenceStructureVariantOuterChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceStructureVariantOuter);
    procedure ComposeMolecularSequenceStructureVariantInner(xml : TXmlBuilder; name : string; value : TFhirMolecularSequenceStructureVariantInner);
    procedure ComposeMolecularSequenceStructureVariantInnerChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceStructureVariantInner);
    procedure ComposeMolecularSequence(xml : TXmlBuilder; name : string; value : TFhirMolecularSequence);
    procedure ComposeMolecularSequenceChildren(xml : TXmlBuilder; value : TFhirMolecularSequence);
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    procedure ComposeNamingSystemUniqueId(xml : TXmlBuilder; name : string; value : TFhirNamingSystemUniqueId);
    procedure ComposeNamingSystemUniqueIdChildren(xml : TXmlBuilder; value : TFhirNamingSystemUniqueId);
    procedure ComposeNamingSystem(xml : TXmlBuilder; name : string; value : TFhirNamingSystem);
    procedure ComposeNamingSystemChildren(xml : TXmlBuilder; value : TFhirNamingSystem);
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONINTAKE}
    procedure ComposeNutritionIntakeConsumedItem(xml : TXmlBuilder; name : string; value : TFhirNutritionIntakeConsumedItem);
    procedure ComposeNutritionIntakeConsumedItemChildren(xml : TXmlBuilder; value : TFhirNutritionIntakeConsumedItem);
    procedure ComposeNutritionIntakeIngredientLabel(xml : TXmlBuilder; name : string; value : TFhirNutritionIntakeIngredientLabel);
    procedure ComposeNutritionIntakeIngredientLabelChildren(xml : TXmlBuilder; value : TFhirNutritionIntakeIngredientLabel);
    procedure ComposeNutritionIntakePerformer(xml : TXmlBuilder; name : string; value : TFhirNutritionIntakePerformer);
    procedure ComposeNutritionIntakePerformerChildren(xml : TXmlBuilder; value : TFhirNutritionIntakePerformer);
    procedure ComposeNutritionIntake(xml : TXmlBuilder; name : string; value : TFhirNutritionIntake);
    procedure ComposeNutritionIntakeChildren(xml : TXmlBuilder; value : TFhirNutritionIntake);
{$ENDIF FHIR_NUTRITIONINTAKE}
{$IFDEF FHIR_NUTRITIONORDER}
    procedure ComposeNutritionOrderOralDiet(xml : TXmlBuilder; name : string; value : TFhirNutritionOrderOralDiet);
    procedure ComposeNutritionOrderOralDietChildren(xml : TXmlBuilder; value : TFhirNutritionOrderOralDiet);
    procedure ComposeNutritionOrderOralDietNutrient(xml : TXmlBuilder; name : string; value : TFhirNutritionOrderOralDietNutrient);
    procedure ComposeNutritionOrderOralDietNutrientChildren(xml : TXmlBuilder; value : TFhirNutritionOrderOralDietNutrient);
    procedure ComposeNutritionOrderOralDietTexture(xml : TXmlBuilder; name : string; value : TFhirNutritionOrderOralDietTexture);
    procedure ComposeNutritionOrderOralDietTextureChildren(xml : TXmlBuilder; value : TFhirNutritionOrderOralDietTexture);
    procedure ComposeNutritionOrderSupplement(xml : TXmlBuilder; name : string; value : TFhirNutritionOrderSupplement);
    procedure ComposeNutritionOrderSupplementChildren(xml : TXmlBuilder; value : TFhirNutritionOrderSupplement);
    procedure ComposeNutritionOrderEnteralFormula(xml : TXmlBuilder; name : string; value : TFhirNutritionOrderEnteralFormula);
    procedure ComposeNutritionOrderEnteralFormulaChildren(xml : TXmlBuilder; value : TFhirNutritionOrderEnteralFormula);
    procedure ComposeNutritionOrderEnteralFormulaAdministration(xml : TXmlBuilder; name : string; value : TFhirNutritionOrderEnteralFormulaAdministration);
    procedure ComposeNutritionOrderEnteralFormulaAdministrationChildren(xml : TXmlBuilder; value : TFhirNutritionOrderEnteralFormulaAdministration);
    procedure ComposeNutritionOrder(xml : TXmlBuilder; name : string; value : TFhirNutritionOrder);
    procedure ComposeNutritionOrderChildren(xml : TXmlBuilder; value : TFhirNutritionOrder);
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
    procedure ComposeNutritionProductNutrient(xml : TXmlBuilder; name : string; value : TFhirNutritionProductNutrient);
    procedure ComposeNutritionProductNutrientChildren(xml : TXmlBuilder; value : TFhirNutritionProductNutrient);
    procedure ComposeNutritionProductIngredient(xml : TXmlBuilder; name : string; value : TFhirNutritionProductIngredient);
    procedure ComposeNutritionProductIngredientChildren(xml : TXmlBuilder; value : TFhirNutritionProductIngredient);
    procedure ComposeNutritionProductProductCharacteristic(xml : TXmlBuilder; name : string; value : TFhirNutritionProductProductCharacteristic);
    procedure ComposeNutritionProductProductCharacteristicChildren(xml : TXmlBuilder; value : TFhirNutritionProductProductCharacteristic);
    procedure ComposeNutritionProductInstance(xml : TXmlBuilder; name : string; value : TFhirNutritionProductInstance);
    procedure ComposeNutritionProductInstanceChildren(xml : TXmlBuilder; value : TFhirNutritionProductInstance);
    procedure ComposeNutritionProduct(xml : TXmlBuilder; name : string; value : TFhirNutritionProduct);
    procedure ComposeNutritionProductChildren(xml : TXmlBuilder; value : TFhirNutritionProduct);
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
    procedure ComposeObservationReferenceRange(xml : TXmlBuilder; name : string; value : TFhirObservationReferenceRange);
    procedure ComposeObservationReferenceRangeChildren(xml : TXmlBuilder; value : TFhirObservationReferenceRange);
    procedure ComposeObservationComponent(xml : TXmlBuilder; name : string; value : TFhirObservationComponent);
    procedure ComposeObservationComponentChildren(xml : TXmlBuilder; value : TFhirObservationComponent);
    procedure ComposeObservation(xml : TXmlBuilder; name : string; value : TFhirObservation);
    procedure ComposeObservationChildren(xml : TXmlBuilder; value : TFhirObservation);
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    procedure ComposeObservationDefinitionQuantitativeDetails(xml : TXmlBuilder; name : string; value : TFhirObservationDefinitionQuantitativeDetails);
    procedure ComposeObservationDefinitionQuantitativeDetailsChildren(xml : TXmlBuilder; value : TFhirObservationDefinitionQuantitativeDetails);
    procedure ComposeObservationDefinitionQualifiedInterval(xml : TXmlBuilder; name : string; value : TFhirObservationDefinitionQualifiedInterval);
    procedure ComposeObservationDefinitionQualifiedIntervalChildren(xml : TXmlBuilder; value : TFhirObservationDefinitionQualifiedInterval);
    procedure ComposeObservationDefinitionComponent(xml : TXmlBuilder; name : string; value : TFhirObservationDefinitionComponent);
    procedure ComposeObservationDefinitionComponentChildren(xml : TXmlBuilder; value : TFhirObservationDefinitionComponent);
    procedure ComposeObservationDefinition(xml : TXmlBuilder; name : string; value : TFhirObservationDefinition);
    procedure ComposeObservationDefinitionChildren(xml : TXmlBuilder; value : TFhirObservationDefinition);
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    procedure ComposeOperationDefinitionParameter(xml : TXmlBuilder; name : string; value : TFhirOperationDefinitionParameter);
    procedure ComposeOperationDefinitionParameterChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionParameter);
    procedure ComposeOperationDefinitionParameterBinding(xml : TXmlBuilder; name : string; value : TFhirOperationDefinitionParameterBinding);
    procedure ComposeOperationDefinitionParameterBindingChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionParameterBinding);
    procedure ComposeOperationDefinitionParameterReferencedFrom(xml : TXmlBuilder; name : string; value : TFhirOperationDefinitionParameterReferencedFrom);
    procedure ComposeOperationDefinitionParameterReferencedFromChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionParameterReferencedFrom);
    procedure ComposeOperationDefinitionOverload(xml : TXmlBuilder; name : string; value : TFhirOperationDefinitionOverload);
    procedure ComposeOperationDefinitionOverloadChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionOverload);
    procedure ComposeOperationDefinition(xml : TXmlBuilder; name : string; value : TFhirOperationDefinition);
    procedure ComposeOperationDefinitionChildren(xml : TXmlBuilder; value : TFhirOperationDefinition);
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    procedure ComposeOperationOutcomeIssue(xml : TXmlBuilder; name : string; value : TFhirOperationOutcomeIssue);
    procedure ComposeOperationOutcomeIssueChildren(xml : TXmlBuilder; value : TFhirOperationOutcomeIssue);
    procedure ComposeOperationOutcome(xml : TXmlBuilder; name : string; value : TFhirOperationOutcome);
    procedure ComposeOperationOutcomeChildren(xml : TXmlBuilder; value : TFhirOperationOutcome);
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    procedure ComposeOrganizationContact(xml : TXmlBuilder; name : string; value : TFhirOrganizationContact);
    procedure ComposeOrganizationContactChildren(xml : TXmlBuilder; value : TFhirOrganizationContact);
    procedure ComposeOrganization(xml : TXmlBuilder; name : string; value : TFhirOrganization);
    procedure ComposeOrganizationChildren(xml : TXmlBuilder; value : TFhirOrganization);
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    procedure ComposeOrganizationAffiliation(xml : TXmlBuilder; name : string; value : TFhirOrganizationAffiliation);
    procedure ComposeOrganizationAffiliationChildren(xml : TXmlBuilder; value : TFhirOrganizationAffiliation);
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
    procedure ComposePackagedProductDefinitionBatchIdentifier(xml : TXmlBuilder; name : string; value : TFhirPackagedProductDefinitionBatchIdentifier);
    procedure ComposePackagedProductDefinitionBatchIdentifierChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionBatchIdentifier);
    procedure ComposePackagedProductDefinitionPackage(xml : TXmlBuilder; name : string; value : TFhirPackagedProductDefinitionPackage);
    procedure ComposePackagedProductDefinitionPackageChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionPackage);
    procedure ComposePackagedProductDefinitionPackageProperty(xml : TXmlBuilder; name : string; value : TFhirPackagedProductDefinitionPackageProperty);
    procedure ComposePackagedProductDefinitionPackagePropertyChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionPackageProperty);
    procedure ComposePackagedProductDefinitionPackageContainedItem(xml : TXmlBuilder; name : string; value : TFhirPackagedProductDefinitionPackageContainedItem);
    procedure ComposePackagedProductDefinitionPackageContainedItemChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionPackageContainedItem);
    procedure ComposePackagedProductDefinition(xml : TXmlBuilder; name : string; value : TFhirPackagedProductDefinition);
    procedure ComposePackagedProductDefinitionChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinition);
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
    procedure ComposeParametersParameter(xml : TXmlBuilder; name : string; value : TFhirParametersParameter);
    procedure ComposeParametersParameterChildren(xml : TXmlBuilder; value : TFhirParametersParameter);
    procedure ComposeParameters(xml : TXmlBuilder; name : string; value : TFhirParameters);
    procedure ComposeParametersChildren(xml : TXmlBuilder; value : TFhirParameters);
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
    procedure ComposePatientContact(xml : TXmlBuilder; name : string; value : TFhirPatientContact);
    procedure ComposePatientContactChildren(xml : TXmlBuilder; value : TFhirPatientContact);
    procedure ComposePatientCommunication(xml : TXmlBuilder; name : string; value : TFhirPatientCommunication);
    procedure ComposePatientCommunicationChildren(xml : TXmlBuilder; value : TFhirPatientCommunication);
    procedure ComposePatientLink(xml : TXmlBuilder; name : string; value : TFhirPatientLink);
    procedure ComposePatientLinkChildren(xml : TXmlBuilder; value : TFhirPatientLink);
    procedure ComposePatient(xml : TXmlBuilder; name : string; value : TFhirPatient);
    procedure ComposePatientChildren(xml : TXmlBuilder; value : TFhirPatient);
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    procedure ComposePaymentNotice(xml : TXmlBuilder; name : string; value : TFhirPaymentNotice);
    procedure ComposePaymentNoticeChildren(xml : TXmlBuilder; value : TFhirPaymentNotice);
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    procedure ComposePaymentReconciliationDetail(xml : TXmlBuilder; name : string; value : TFhirPaymentReconciliationDetail);
    procedure ComposePaymentReconciliationDetailChildren(xml : TXmlBuilder; value : TFhirPaymentReconciliationDetail);
    procedure ComposePaymentReconciliationProcessNote(xml : TXmlBuilder; name : string; value : TFhirPaymentReconciliationProcessNote);
    procedure ComposePaymentReconciliationProcessNoteChildren(xml : TXmlBuilder; value : TFhirPaymentReconciliationProcessNote);
    procedure ComposePaymentReconciliation(xml : TXmlBuilder; name : string; value : TFhirPaymentReconciliation);
    procedure ComposePaymentReconciliationChildren(xml : TXmlBuilder; value : TFhirPaymentReconciliation);
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERMISSION}
    procedure ComposePermissionProcessingActivity(xml : TXmlBuilder; name : string; value : TFhirPermissionProcessingActivity);
    procedure ComposePermissionProcessingActivityChildren(xml : TXmlBuilder; value : TFhirPermissionProcessingActivity);
    procedure ComposePermissionJustification(xml : TXmlBuilder; name : string; value : TFhirPermissionJustification);
    procedure ComposePermissionJustificationChildren(xml : TXmlBuilder; value : TFhirPermissionJustification);
    procedure ComposePermission(xml : TXmlBuilder; name : string; value : TFhirPermission);
    procedure ComposePermissionChildren(xml : TXmlBuilder; value : TFhirPermission);
{$ENDIF FHIR_PERMISSION}
{$IFDEF FHIR_PERSON}
    procedure ComposePersonLink(xml : TXmlBuilder; name : string; value : TFhirPersonLink);
    procedure ComposePersonLinkChildren(xml : TXmlBuilder; value : TFhirPersonLink);
    procedure ComposePerson(xml : TXmlBuilder; name : string; value : TFhirPerson);
    procedure ComposePersonChildren(xml : TXmlBuilder; value : TFhirPerson);
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    procedure ComposePlanDefinitionGoal(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionGoal);
    procedure ComposePlanDefinitionGoalChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionGoal);
    procedure ComposePlanDefinitionGoalTarget(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionGoalTarget);
    procedure ComposePlanDefinitionGoalTargetChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionGoalTarget);
    procedure ComposePlanDefinitionAction(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionAction);
    procedure ComposePlanDefinitionActionChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionAction);
    procedure ComposePlanDefinitionActionCondition(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionActionCondition);
    procedure ComposePlanDefinitionActionConditionChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionCondition);
    procedure ComposePlanDefinitionActionRelatedAction(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionActionRelatedAction);
    procedure ComposePlanDefinitionActionRelatedActionChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionRelatedAction);
    procedure ComposePlanDefinitionActionParticipant(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionActionParticipant);
    procedure ComposePlanDefinitionActionParticipantChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionParticipant);
    procedure ComposePlanDefinitionActionDynamicValue(xml : TXmlBuilder; name : string; value : TFhirPlanDefinitionActionDynamicValue);
    procedure ComposePlanDefinitionActionDynamicValueChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionDynamicValue);
    procedure ComposePlanDefinition(xml : TXmlBuilder; name : string; value : TFhirPlanDefinition);
    procedure ComposePlanDefinitionChildren(xml : TXmlBuilder; value : TFhirPlanDefinition);
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    procedure ComposePractitionerQualification(xml : TXmlBuilder; name : string; value : TFhirPractitionerQualification);
    procedure ComposePractitionerQualificationChildren(xml : TXmlBuilder; value : TFhirPractitionerQualification);
    procedure ComposePractitioner(xml : TXmlBuilder; name : string; value : TFhirPractitioner);
    procedure ComposePractitionerChildren(xml : TXmlBuilder; value : TFhirPractitioner);
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    procedure ComposePractitionerRoleAvailableTime(xml : TXmlBuilder; name : string; value : TFhirPractitionerRoleAvailableTime);
    procedure ComposePractitionerRoleAvailableTimeChildren(xml : TXmlBuilder; value : TFhirPractitionerRoleAvailableTime);
    procedure ComposePractitionerRoleNotAvailable(xml : TXmlBuilder; name : string; value : TFhirPractitionerRoleNotAvailable);
    procedure ComposePractitionerRoleNotAvailableChildren(xml : TXmlBuilder; value : TFhirPractitionerRoleNotAvailable);
    procedure ComposePractitionerRole(xml : TXmlBuilder; name : string; value : TFhirPractitionerRole);
    procedure ComposePractitionerRoleChildren(xml : TXmlBuilder; value : TFhirPractitionerRole);
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    procedure ComposeProcedurePerformer(xml : TXmlBuilder; name : string; value : TFhirProcedurePerformer);
    procedure ComposeProcedurePerformerChildren(xml : TXmlBuilder; value : TFhirProcedurePerformer);
    procedure ComposeProcedureFocalDevice(xml : TXmlBuilder; name : string; value : TFhirProcedureFocalDevice);
    procedure ComposeProcedureFocalDeviceChildren(xml : TXmlBuilder; value : TFhirProcedureFocalDevice);
    procedure ComposeProcedure(xml : TXmlBuilder; name : string; value : TFhirProcedure);
    procedure ComposeProcedureChildren(xml : TXmlBuilder; value : TFhirProcedure);
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    procedure ComposeProvenanceAgent(xml : TXmlBuilder; name : string; value : TFhirProvenanceAgent);
    procedure ComposeProvenanceAgentChildren(xml : TXmlBuilder; value : TFhirProvenanceAgent);
    procedure ComposeProvenanceEntity(xml : TXmlBuilder; name : string; value : TFhirProvenanceEntity);
    procedure ComposeProvenanceEntityChildren(xml : TXmlBuilder; value : TFhirProvenanceEntity);
    procedure ComposeProvenance(xml : TXmlBuilder; name : string; value : TFhirProvenance);
    procedure ComposeProvenanceChildren(xml : TXmlBuilder; value : TFhirProvenance);
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    procedure ComposeQuestionnaireItem(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireItem);
    procedure ComposeQuestionnaireItemChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItem);
    procedure ComposeQuestionnaireItemEnableWhen(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireItemEnableWhen);
    procedure ComposeQuestionnaireItemEnableWhenChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItemEnableWhen);
    procedure ComposeQuestionnaireItemAnswerOption(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireItemAnswerOption);
    procedure ComposeQuestionnaireItemAnswerOptionChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItemAnswerOption);
    procedure ComposeQuestionnaireItemInitial(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireItemInitial);
    procedure ComposeQuestionnaireItemInitialChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItemInitial);
    procedure ComposeQuestionnaire(xml : TXmlBuilder; name : string; value : TFhirQuestionnaire);
    procedure ComposeQuestionnaireChildren(xml : TXmlBuilder; value : TFhirQuestionnaire);
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    procedure ComposeQuestionnaireResponseItem(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireResponseItem);
    procedure ComposeQuestionnaireResponseItemChildren(xml : TXmlBuilder; value : TFhirQuestionnaireResponseItem);
    procedure ComposeQuestionnaireResponseItemAnswer(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireResponseItemAnswer);
    procedure ComposeQuestionnaireResponseItemAnswerChildren(xml : TXmlBuilder; value : TFhirQuestionnaireResponseItemAnswer);
    procedure ComposeQuestionnaireResponse(xml : TXmlBuilder; name : string; value : TFhirQuestionnaireResponse);
    procedure ComposeQuestionnaireResponseChildren(xml : TXmlBuilder; value : TFhirQuestionnaireResponse);
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
    procedure ComposeRegulatedAuthorizationRelatedDate(xml : TXmlBuilder; name : string; value : TFhirRegulatedAuthorizationRelatedDate);
    procedure ComposeRegulatedAuthorizationRelatedDateChildren(xml : TXmlBuilder; value : TFhirRegulatedAuthorizationRelatedDate);
    procedure ComposeRegulatedAuthorizationCase(xml : TXmlBuilder; name : string; value : TFhirRegulatedAuthorizationCase);
    procedure ComposeRegulatedAuthorizationCaseChildren(xml : TXmlBuilder; value : TFhirRegulatedAuthorizationCase);
    procedure ComposeRegulatedAuthorization(xml : TXmlBuilder; name : string; value : TFhirRegulatedAuthorization);
    procedure ComposeRegulatedAuthorizationChildren(xml : TXmlBuilder; value : TFhirRegulatedAuthorization);
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
    procedure ComposeRelatedPersonCommunication(xml : TXmlBuilder; name : string; value : TFhirRelatedPersonCommunication);
    procedure ComposeRelatedPersonCommunicationChildren(xml : TXmlBuilder; value : TFhirRelatedPersonCommunication);
    procedure ComposeRelatedPerson(xml : TXmlBuilder; name : string; value : TFhirRelatedPerson);
    procedure ComposeRelatedPersonChildren(xml : TXmlBuilder; value : TFhirRelatedPerson);
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    procedure ComposeRequestGroupAction(xml : TXmlBuilder; name : string; value : TFhirRequestGroupAction);
    procedure ComposeRequestGroupActionChildren(xml : TXmlBuilder; value : TFhirRequestGroupAction);
    procedure ComposeRequestGroupActionCondition(xml : TXmlBuilder; name : string; value : TFhirRequestGroupActionCondition);
    procedure ComposeRequestGroupActionConditionChildren(xml : TXmlBuilder; value : TFhirRequestGroupActionCondition);
    procedure ComposeRequestGroupActionRelatedAction(xml : TXmlBuilder; name : string; value : TFhirRequestGroupActionRelatedAction);
    procedure ComposeRequestGroupActionRelatedActionChildren(xml : TXmlBuilder; value : TFhirRequestGroupActionRelatedAction);
    procedure ComposeRequestGroup(xml : TXmlBuilder; name : string; value : TFhirRequestGroup);
    procedure ComposeRequestGroupChildren(xml : TXmlBuilder; value : TFhirRequestGroup);
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    procedure ComposeResearchStudyArm(xml : TXmlBuilder; name : string; value : TFhirResearchStudyArm);
    procedure ComposeResearchStudyArmChildren(xml : TXmlBuilder; value : TFhirResearchStudyArm);
    procedure ComposeResearchStudyObjective(xml : TXmlBuilder; name : string; value : TFhirResearchStudyObjective);
    procedure ComposeResearchStudyObjectiveChildren(xml : TXmlBuilder; value : TFhirResearchStudyObjective);
    procedure ComposeResearchStudy(xml : TXmlBuilder; name : string; value : TFhirResearchStudy);
    procedure ComposeResearchStudyChildren(xml : TXmlBuilder; value : TFhirResearchStudy);
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    procedure ComposeResearchSubjectProgress(xml : TXmlBuilder; name : string; value : TFhirResearchSubjectProgress);
    procedure ComposeResearchSubjectProgressChildren(xml : TXmlBuilder; value : TFhirResearchSubjectProgress);
    procedure ComposeResearchSubject(xml : TXmlBuilder; name : string; value : TFhirResearchSubject);
    procedure ComposeResearchSubjectChildren(xml : TXmlBuilder; value : TFhirResearchSubject);
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    procedure ComposeRiskAssessmentPrediction(xml : TXmlBuilder; name : string; value : TFhirRiskAssessmentPrediction);
    procedure ComposeRiskAssessmentPredictionChildren(xml : TXmlBuilder; value : TFhirRiskAssessmentPrediction);
    procedure ComposeRiskAssessment(xml : TXmlBuilder; name : string; value : TFhirRiskAssessment);
    procedure ComposeRiskAssessmentChildren(xml : TXmlBuilder; value : TFhirRiskAssessment);
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    procedure ComposeSchedule(xml : TXmlBuilder; name : string; value : TFhirSchedule);
    procedure ComposeScheduleChildren(xml : TXmlBuilder; value : TFhirSchedule);
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    procedure ComposeSearchParameterComponent(xml : TXmlBuilder; name : string; value : TFhirSearchParameterComponent);
    procedure ComposeSearchParameterComponentChildren(xml : TXmlBuilder; value : TFhirSearchParameterComponent);
    procedure ComposeSearchParameter(xml : TXmlBuilder; name : string; value : TFhirSearchParameter);
    procedure ComposeSearchParameterChildren(xml : TXmlBuilder; value : TFhirSearchParameter);
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    procedure ComposeServiceRequest(xml : TXmlBuilder; name : string; value : TFhirServiceRequest);
    procedure ComposeServiceRequestChildren(xml : TXmlBuilder; value : TFhirServiceRequest);
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    procedure ComposeSlot(xml : TXmlBuilder; name : string; value : TFhirSlot);
    procedure ComposeSlotChildren(xml : TXmlBuilder; value : TFhirSlot);
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    procedure ComposeSpecimenCollection(xml : TXmlBuilder; name : string; value : TFhirSpecimenCollection);
    procedure ComposeSpecimenCollectionChildren(xml : TXmlBuilder; value : TFhirSpecimenCollection);
    procedure ComposeSpecimenProcessing(xml : TXmlBuilder; name : string; value : TFhirSpecimenProcessing);
    procedure ComposeSpecimenProcessingChildren(xml : TXmlBuilder; value : TFhirSpecimenProcessing);
    procedure ComposeSpecimenContainer(xml : TXmlBuilder; name : string; value : TFhirSpecimenContainer);
    procedure ComposeSpecimenContainerChildren(xml : TXmlBuilder; value : TFhirSpecimenContainer);
    procedure ComposeSpecimen(xml : TXmlBuilder; name : string; value : TFhirSpecimen);
    procedure ComposeSpecimenChildren(xml : TXmlBuilder; value : TFhirSpecimen);
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    procedure ComposeSpecimenDefinitionTypeTested(xml : TXmlBuilder; name : string; value : TFhirSpecimenDefinitionTypeTested);
    procedure ComposeSpecimenDefinitionTypeTestedChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTested);
    procedure ComposeSpecimenDefinitionTypeTestedContainer(xml : TXmlBuilder; name : string; value : TFhirSpecimenDefinitionTypeTestedContainer);
    procedure ComposeSpecimenDefinitionTypeTestedContainerChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTestedContainer);
    procedure ComposeSpecimenDefinitionTypeTestedContainerAdditive(xml : TXmlBuilder; name : string; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
    procedure ComposeSpecimenDefinitionTypeTestedContainerAdditiveChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
    procedure ComposeSpecimenDefinitionTypeTestedHandling(xml : TXmlBuilder; name : string; value : TFhirSpecimenDefinitionTypeTestedHandling);
    procedure ComposeSpecimenDefinitionTypeTestedHandlingChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTestedHandling);
    procedure ComposeSpecimenDefinition(xml : TXmlBuilder; name : string; value : TFhirSpecimenDefinition);
    procedure ComposeSpecimenDefinitionChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinition);
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    procedure ComposeStructureDefinitionMapping(xml : TXmlBuilder; name : string; value : TFhirStructureDefinitionMapping);
    procedure ComposeStructureDefinitionMappingChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionMapping);
    procedure ComposeStructureDefinitionContext(xml : TXmlBuilder; name : string; value : TFhirStructureDefinitionContext);
    procedure ComposeStructureDefinitionContextChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionContext);
    procedure ComposeStructureDefinitionSnapshot(xml : TXmlBuilder; name : string; value : TFhirStructureDefinitionSnapshot);
    procedure ComposeStructureDefinitionSnapshotChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionSnapshot);
    procedure ComposeStructureDefinitionDifferential(xml : TXmlBuilder; name : string; value : TFhirStructureDefinitionDifferential);
    procedure ComposeStructureDefinitionDifferentialChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionDifferential);
    procedure ComposeStructureDefinition(xml : TXmlBuilder; name : string; value : TFhirStructureDefinition);
    procedure ComposeStructureDefinitionChildren(xml : TXmlBuilder; value : TFhirStructureDefinition);
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    procedure ComposeStructureMapStructure(xml : TXmlBuilder; name : string; value : TFhirStructureMapStructure);
    procedure ComposeStructureMapStructureChildren(xml : TXmlBuilder; value : TFhirStructureMapStructure);
    procedure ComposeStructureMapGroup(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroup);
    procedure ComposeStructureMapGroupChildren(xml : TXmlBuilder; value : TFhirStructureMapGroup);
    procedure ComposeStructureMapGroupInput(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroupInput);
    procedure ComposeStructureMapGroupInputChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupInput);
    procedure ComposeStructureMapGroupRule(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroupRule);
    procedure ComposeStructureMapGroupRuleChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRule);
    procedure ComposeStructureMapGroupRuleSource(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroupRuleSource);
    procedure ComposeStructureMapGroupRuleSourceChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleSource);
    procedure ComposeStructureMapGroupRuleTarget(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroupRuleTarget);
    procedure ComposeStructureMapGroupRuleTargetChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleTarget);
    procedure ComposeStructureMapGroupRuleTargetParameter(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroupRuleTargetParameter);
    procedure ComposeStructureMapGroupRuleTargetParameterChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleTargetParameter);
    procedure ComposeStructureMapGroupRuleDependent(xml : TXmlBuilder; name : string; value : TFhirStructureMapGroupRuleDependent);
    procedure ComposeStructureMapGroupRuleDependentChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleDependent);
    procedure ComposeStructureMap(xml : TXmlBuilder; name : string; value : TFhirStructureMap);
    procedure ComposeStructureMapChildren(xml : TXmlBuilder; value : TFhirStructureMap);
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    procedure ComposeSubscriptionFilterBy(xml : TXmlBuilder; name : string; value : TFhirSubscriptionFilterBy);
    procedure ComposeSubscriptionFilterByChildren(xml : TXmlBuilder; value : TFhirSubscriptionFilterBy);
    procedure ComposeSubscription(xml : TXmlBuilder; name : string; value : TFhirSubscription);
    procedure ComposeSubscriptionChildren(xml : TXmlBuilder; value : TFhirSubscription);
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
    procedure ComposeSubscriptionStatus(xml : TXmlBuilder; name : string; value : TFhirSubscriptionStatus);
    procedure ComposeSubscriptionStatusChildren(xml : TXmlBuilder; value : TFhirSubscriptionStatus);
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
    procedure ComposeSubscriptionTopicResourceTrigger(xml : TXmlBuilder; name : string; value : TFhirSubscriptionTopicResourceTrigger);
    procedure ComposeSubscriptionTopicResourceTriggerChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopicResourceTrigger);
    procedure ComposeSubscriptionTopicResourceTriggerQueryCriteria(xml : TXmlBuilder; name : string; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria);
    procedure ComposeSubscriptionTopicResourceTriggerQueryCriteriaChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria);
    procedure ComposeSubscriptionTopicCanFilterBy(xml : TXmlBuilder; name : string; value : TFhirSubscriptionTopicCanFilterBy);
    procedure ComposeSubscriptionTopicCanFilterByChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopicCanFilterBy);
    procedure ComposeSubscriptionTopic(xml : TXmlBuilder; name : string; value : TFhirSubscriptionTopic);
    procedure ComposeSubscriptionTopicChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopic);
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
    procedure ComposeSubstanceInstance(xml : TXmlBuilder; name : string; value : TFhirSubstanceInstance);
    procedure ComposeSubstanceInstanceChildren(xml : TXmlBuilder; value : TFhirSubstanceInstance);
    procedure ComposeSubstanceIngredient(xml : TXmlBuilder; name : string; value : TFhirSubstanceIngredient);
    procedure ComposeSubstanceIngredientChildren(xml : TXmlBuilder; value : TFhirSubstanceIngredient);
    procedure ComposeSubstance(xml : TXmlBuilder; name : string; value : TFhirSubstance);
    procedure ComposeSubstanceChildren(xml : TXmlBuilder; value : TFhirSubstance);
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
    procedure ComposeSubstanceDefinitionMoiety(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionMoiety);
    procedure ComposeSubstanceDefinitionMoietyChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionMoiety);
    procedure ComposeSubstanceDefinitionProperty(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionProperty);
    procedure ComposeSubstanceDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionProperty);
    procedure ComposeSubstanceDefinitionStructure(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionStructure);
    procedure ComposeSubstanceDefinitionStructureChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructure);
    procedure ComposeSubstanceDefinitionStructureIsotope(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionStructureIsotope);
    procedure ComposeSubstanceDefinitionStructureIsotopeChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructureIsotope);
    procedure ComposeSubstanceDefinitionStructureIsotopeMolecularWeight(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight);
    procedure ComposeSubstanceDefinitionStructureIsotopeMolecularWeightChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight);
    procedure ComposeSubstanceDefinitionStructureRepresentation(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionStructureRepresentation);
    procedure ComposeSubstanceDefinitionStructureRepresentationChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructureRepresentation);
    procedure ComposeSubstanceDefinitionCode(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionCode);
    procedure ComposeSubstanceDefinitionCodeChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionCode);
    procedure ComposeSubstanceDefinitionName(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionName);
    procedure ComposeSubstanceDefinitionNameChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionName);
    procedure ComposeSubstanceDefinitionNameOfficial(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionNameOfficial);
    procedure ComposeSubstanceDefinitionNameOfficialChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionNameOfficial);
    procedure ComposeSubstanceDefinitionRelationship(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinitionRelationship);
    procedure ComposeSubstanceDefinitionRelationshipChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionRelationship);
    procedure ComposeSubstanceDefinition(xml : TXmlBuilder; name : string; value : TFhirSubstanceDefinition);
    procedure ComposeSubstanceDefinitionChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinition);
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
    procedure ComposeSubstanceNucleicAcidSubunit(xml : TXmlBuilder; name : string; value : TFhirSubstanceNucleicAcidSubunit);
    procedure ComposeSubstanceNucleicAcidSubunitChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcidSubunit);
    procedure ComposeSubstanceNucleicAcidSubunitLinkage(xml : TXmlBuilder; name : string; value : TFhirSubstanceNucleicAcidSubunitLinkage);
    procedure ComposeSubstanceNucleicAcidSubunitLinkageChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcidSubunitLinkage);
    procedure ComposeSubstanceNucleicAcidSubunitSugar(xml : TXmlBuilder; name : string; value : TFhirSubstanceNucleicAcidSubunitSugar);
    procedure ComposeSubstanceNucleicAcidSubunitSugarChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcidSubunitSugar);
    procedure ComposeSubstanceNucleicAcid(xml : TXmlBuilder; name : string; value : TFhirSubstanceNucleicAcid);
    procedure ComposeSubstanceNucleicAcidChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcid);
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    procedure ComposeSubstancePolymerMonomerSet(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymerMonomerSet);
    procedure ComposeSubstancePolymerMonomerSetChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerMonomerSet);
    procedure ComposeSubstancePolymerMonomerSetStartingMaterial(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymerMonomerSetStartingMaterial);
    procedure ComposeSubstancePolymerMonomerSetStartingMaterialChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerMonomerSetStartingMaterial);
    procedure ComposeSubstancePolymerRepeat(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymerRepeat);
    procedure ComposeSubstancePolymerRepeatChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeat);
    procedure ComposeSubstancePolymerRepeatRepeatUnit(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymerRepeatRepeatUnit);
    procedure ComposeSubstancePolymerRepeatRepeatUnitChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeatRepeatUnit);
    procedure ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
    procedure ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
    procedure ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
    procedure ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentationChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
    procedure ComposeSubstancePolymer(xml : TXmlBuilder; name : string; value : TFhirSubstancePolymer);
    procedure ComposeSubstancePolymerChildren(xml : TXmlBuilder; value : TFhirSubstancePolymer);
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
    procedure ComposeSubstanceProteinSubunit(xml : TXmlBuilder; name : string; value : TFhirSubstanceProteinSubunit);
    procedure ComposeSubstanceProteinSubunitChildren(xml : TXmlBuilder; value : TFhirSubstanceProteinSubunit);
    procedure ComposeSubstanceProtein(xml : TXmlBuilder; name : string; value : TFhirSubstanceProtein);
    procedure ComposeSubstanceProteinChildren(xml : TXmlBuilder; value : TFhirSubstanceProtein);
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    procedure ComposeSubstanceReferenceInformationGene(xml : TXmlBuilder; name : string; value : TFhirSubstanceReferenceInformationGene);
    procedure ComposeSubstanceReferenceInformationGeneChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformationGene);
    procedure ComposeSubstanceReferenceInformationGeneElement(xml : TXmlBuilder; name : string; value : TFhirSubstanceReferenceInformationGeneElement);
    procedure ComposeSubstanceReferenceInformationGeneElementChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformationGeneElement);
    procedure ComposeSubstanceReferenceInformationTarget(xml : TXmlBuilder; name : string; value : TFhirSubstanceReferenceInformationTarget);
    procedure ComposeSubstanceReferenceInformationTargetChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformationTarget);
    procedure ComposeSubstanceReferenceInformation(xml : TXmlBuilder; name : string; value : TFhirSubstanceReferenceInformation);
    procedure ComposeSubstanceReferenceInformationChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformation);
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
    procedure ComposeSubstanceSourceMaterialFractionDescription(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterialFractionDescription);
    procedure ComposeSubstanceSourceMaterialFractionDescriptionChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialFractionDescription);
    procedure ComposeSubstanceSourceMaterialOrganism(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterialOrganism);
    procedure ComposeSubstanceSourceMaterialOrganismChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganism);
    procedure ComposeSubstanceSourceMaterialOrganismAuthor(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterialOrganismAuthor);
    procedure ComposeSubstanceSourceMaterialOrganismAuthorChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganismAuthor);
    procedure ComposeSubstanceSourceMaterialOrganismHybrid(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterialOrganismHybrid);
    procedure ComposeSubstanceSourceMaterialOrganismHybridChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganismHybrid);
    procedure ComposeSubstanceSourceMaterialOrganismOrganismGeneral(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
    procedure ComposeSubstanceSourceMaterialOrganismOrganismGeneralChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
    procedure ComposeSubstanceSourceMaterialPartDescription(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterialPartDescription);
    procedure ComposeSubstanceSourceMaterialPartDescriptionChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialPartDescription);
    procedure ComposeSubstanceSourceMaterial(xml : TXmlBuilder; name : string; value : TFhirSubstanceSourceMaterial);
    procedure ComposeSubstanceSourceMaterialChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterial);
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUPPLYDELIVERY}
    procedure ComposeSupplyDeliverySuppliedItem(xml : TXmlBuilder; name : string; value : TFhirSupplyDeliverySuppliedItem);
    procedure ComposeSupplyDeliverySuppliedItemChildren(xml : TXmlBuilder; value : TFhirSupplyDeliverySuppliedItem);
    procedure ComposeSupplyDelivery(xml : TXmlBuilder; name : string; value : TFhirSupplyDelivery);
    procedure ComposeSupplyDeliveryChildren(xml : TXmlBuilder; value : TFhirSupplyDelivery);
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    procedure ComposeSupplyRequestParameter(xml : TXmlBuilder; name : string; value : TFhirSupplyRequestParameter);
    procedure ComposeSupplyRequestParameterChildren(xml : TXmlBuilder; value : TFhirSupplyRequestParameter);
    procedure ComposeSupplyRequest(xml : TXmlBuilder; name : string; value : TFhirSupplyRequest);
    procedure ComposeSupplyRequestChildren(xml : TXmlBuilder; value : TFhirSupplyRequest);
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    procedure ComposeTaskRestriction(xml : TXmlBuilder; name : string; value : TFhirTaskRestriction);
    procedure ComposeTaskRestrictionChildren(xml : TXmlBuilder; value : TFhirTaskRestriction);
    procedure ComposeTaskInput(xml : TXmlBuilder; name : string; value : TFhirTaskInput);
    procedure ComposeTaskInputChildren(xml : TXmlBuilder; value : TFhirTaskInput);
    procedure ComposeTaskOutput(xml : TXmlBuilder; name : string; value : TFhirTaskOutput);
    procedure ComposeTaskOutputChildren(xml : TXmlBuilder; value : TFhirTaskOutput);
    procedure ComposeTask(xml : TXmlBuilder; name : string; value : TFhirTask);
    procedure ComposeTaskChildren(xml : TXmlBuilder; value : TFhirTask);
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    procedure ComposeTerminologyCapabilitiesSoftware(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesSoftware);
    procedure ComposeTerminologyCapabilitiesSoftwareChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesSoftware);
    procedure ComposeTerminologyCapabilitiesImplementation(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesImplementation);
    procedure ComposeTerminologyCapabilitiesImplementationChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesImplementation);
    procedure ComposeTerminologyCapabilitiesCodeSystem(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesCodeSystem);
    procedure ComposeTerminologyCapabilitiesCodeSystemChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesCodeSystem);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersion(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesCodeSystemVersion);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesCodeSystemVersion);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionFilter(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
    procedure ComposeTerminologyCapabilitiesCodeSystemVersionFilterChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
    procedure ComposeTerminologyCapabilitiesExpansion(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesExpansion);
    procedure ComposeTerminologyCapabilitiesExpansionChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesExpansion);
    procedure ComposeTerminologyCapabilitiesExpansionParameter(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesExpansionParameter);
    procedure ComposeTerminologyCapabilitiesExpansionParameterChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesExpansionParameter);
    procedure ComposeTerminologyCapabilitiesValidateCode(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesValidateCode);
    procedure ComposeTerminologyCapabilitiesValidateCodeChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesValidateCode);
    procedure ComposeTerminologyCapabilitiesTranslation(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesTranslation);
    procedure ComposeTerminologyCapabilitiesTranslationChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesTranslation);
    procedure ComposeTerminologyCapabilitiesClosure(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilitiesClosure);
    procedure ComposeTerminologyCapabilitiesClosureChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesClosure);
    procedure ComposeTerminologyCapabilities(xml : TXmlBuilder; name : string; value : TFhirTerminologyCapabilities);
    procedure ComposeTerminologyCapabilitiesChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilities);
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    procedure ComposeTestReportParticipant(xml : TXmlBuilder; name : string; value : TFhirTestReportParticipant);
    procedure ComposeTestReportParticipantChildren(xml : TXmlBuilder; value : TFhirTestReportParticipant);
    procedure ComposeTestReportSetup(xml : TXmlBuilder; name : string; value : TFhirTestReportSetup);
    procedure ComposeTestReportSetupChildren(xml : TXmlBuilder; value : TFhirTestReportSetup);
    procedure ComposeTestReportSetupAction(xml : TXmlBuilder; name : string; value : TFhirTestReportSetupAction);
    procedure ComposeTestReportSetupActionChildren(xml : TXmlBuilder; value : TFhirTestReportSetupAction);
    procedure ComposeTestReportSetupActionOperation(xml : TXmlBuilder; name : string; value : TFhirTestReportSetupActionOperation);
    procedure ComposeTestReportSetupActionOperationChildren(xml : TXmlBuilder; value : TFhirTestReportSetupActionOperation);
    procedure ComposeTestReportSetupActionAssert(xml : TXmlBuilder; name : string; value : TFhirTestReportSetupActionAssert);
    procedure ComposeTestReportSetupActionAssertChildren(xml : TXmlBuilder; value : TFhirTestReportSetupActionAssert);
    procedure ComposeTestReportTest(xml : TXmlBuilder; name : string; value : TFhirTestReportTest);
    procedure ComposeTestReportTestChildren(xml : TXmlBuilder; value : TFhirTestReportTest);
    procedure ComposeTestReportTestAction(xml : TXmlBuilder; name : string; value : TFhirTestReportTestAction);
    procedure ComposeTestReportTestActionChildren(xml : TXmlBuilder; value : TFhirTestReportTestAction);
    procedure ComposeTestReportTeardown(xml : TXmlBuilder; name : string; value : TFhirTestReportTeardown);
    procedure ComposeTestReportTeardownChildren(xml : TXmlBuilder; value : TFhirTestReportTeardown);
    procedure ComposeTestReportTeardownAction(xml : TXmlBuilder; name : string; value : TFhirTestReportTeardownAction);
    procedure ComposeTestReportTeardownActionChildren(xml : TXmlBuilder; value : TFhirTestReportTeardownAction);
    procedure ComposeTestReport(xml : TXmlBuilder; name : string; value : TFhirTestReport);
    procedure ComposeTestReportChildren(xml : TXmlBuilder; value : TFhirTestReport);
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    procedure ComposeTestScriptOrigin(xml : TXmlBuilder; name : string; value : TFhirTestScriptOrigin);
    procedure ComposeTestScriptOriginChildren(xml : TXmlBuilder; value : TFhirTestScriptOrigin);
    procedure ComposeTestScriptDestination(xml : TXmlBuilder; name : string; value : TFhirTestScriptDestination);
    procedure ComposeTestScriptDestinationChildren(xml : TXmlBuilder; value : TFhirTestScriptDestination);
    procedure ComposeTestScriptMetadata(xml : TXmlBuilder; name : string; value : TFhirTestScriptMetadata);
    procedure ComposeTestScriptMetadataChildren(xml : TXmlBuilder; value : TFhirTestScriptMetadata);
    procedure ComposeTestScriptMetadataLink(xml : TXmlBuilder; name : string; value : TFhirTestScriptMetadataLink);
    procedure ComposeTestScriptMetadataLinkChildren(xml : TXmlBuilder; value : TFhirTestScriptMetadataLink);
    procedure ComposeTestScriptMetadataCapability(xml : TXmlBuilder; name : string; value : TFhirTestScriptMetadataCapability);
    procedure ComposeTestScriptMetadataCapabilityChildren(xml : TXmlBuilder; value : TFhirTestScriptMetadataCapability);
    procedure ComposeTestScriptFixture(xml : TXmlBuilder; name : string; value : TFhirTestScriptFixture);
    procedure ComposeTestScriptFixtureChildren(xml : TXmlBuilder; value : TFhirTestScriptFixture);
    procedure ComposeTestScriptVariable(xml : TXmlBuilder; name : string; value : TFhirTestScriptVariable);
    procedure ComposeTestScriptVariableChildren(xml : TXmlBuilder; value : TFhirTestScriptVariable);
    procedure ComposeTestScriptSetup(xml : TXmlBuilder; name : string; value : TFhirTestScriptSetup);
    procedure ComposeTestScriptSetupChildren(xml : TXmlBuilder; value : TFhirTestScriptSetup);
    procedure ComposeTestScriptSetupAction(xml : TXmlBuilder; name : string; value : TFhirTestScriptSetupAction);
    procedure ComposeTestScriptSetupActionChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupAction);
    procedure ComposeTestScriptSetupActionOperation(xml : TXmlBuilder; name : string; value : TFhirTestScriptSetupActionOperation);
    procedure ComposeTestScriptSetupActionOperationChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupActionOperation);
    procedure ComposeTestScriptSetupActionOperationRequestHeader(xml : TXmlBuilder; name : string; value : TFhirTestScriptSetupActionOperationRequestHeader);
    procedure ComposeTestScriptSetupActionOperationRequestHeaderChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupActionOperationRequestHeader);
    procedure ComposeTestScriptSetupActionAssert(xml : TXmlBuilder; name : string; value : TFhirTestScriptSetupActionAssert);
    procedure ComposeTestScriptSetupActionAssertChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupActionAssert);
    procedure ComposeTestScriptTest(xml : TXmlBuilder; name : string; value : TFhirTestScriptTest);
    procedure ComposeTestScriptTestChildren(xml : TXmlBuilder; value : TFhirTestScriptTest);
    procedure ComposeTestScriptTestAction(xml : TXmlBuilder; name : string; value : TFhirTestScriptTestAction);
    procedure ComposeTestScriptTestActionChildren(xml : TXmlBuilder; value : TFhirTestScriptTestAction);
    procedure ComposeTestScriptTeardown(xml : TXmlBuilder; name : string; value : TFhirTestScriptTeardown);
    procedure ComposeTestScriptTeardownChildren(xml : TXmlBuilder; value : TFhirTestScriptTeardown);
    procedure ComposeTestScriptTeardownAction(xml : TXmlBuilder; name : string; value : TFhirTestScriptTeardownAction);
    procedure ComposeTestScriptTeardownActionChildren(xml : TXmlBuilder; value : TFhirTestScriptTeardownAction);
    procedure ComposeTestScript(xml : TXmlBuilder; name : string; value : TFhirTestScript);
    procedure ComposeTestScriptChildren(xml : TXmlBuilder; value : TFhirTestScript);
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    procedure ComposeValueSetCompose(xml : TXmlBuilder; name : string; value : TFhirValueSetCompose);
    procedure ComposeValueSetComposeChildren(xml : TXmlBuilder; value : TFhirValueSetCompose);
    procedure ComposeValueSetComposeInclude(xml : TXmlBuilder; name : string; value : TFhirValueSetComposeInclude);
    procedure ComposeValueSetComposeIncludeChildren(xml : TXmlBuilder; value : TFhirValueSetComposeInclude);
    procedure ComposeValueSetComposeIncludeConcept(xml : TXmlBuilder; name : string; value : TFhirValueSetComposeIncludeConcept);
    procedure ComposeValueSetComposeIncludeConceptChildren(xml : TXmlBuilder; value : TFhirValueSetComposeIncludeConcept);
    procedure ComposeValueSetComposeIncludeConceptDesignation(xml : TXmlBuilder; name : string; value : TFhirValueSetComposeIncludeConceptDesignation);
    procedure ComposeValueSetComposeIncludeConceptDesignationChildren(xml : TXmlBuilder; value : TFhirValueSetComposeIncludeConceptDesignation);
    procedure ComposeValueSetComposeIncludeFilter(xml : TXmlBuilder; name : string; value : TFhirValueSetComposeIncludeFilter);
    procedure ComposeValueSetComposeIncludeFilterChildren(xml : TXmlBuilder; value : TFhirValueSetComposeIncludeFilter);
    procedure ComposeValueSetExpansion(xml : TXmlBuilder; name : string; value : TFhirValueSetExpansion);
    procedure ComposeValueSetExpansionChildren(xml : TXmlBuilder; value : TFhirValueSetExpansion);
    procedure ComposeValueSetExpansionParameter(xml : TXmlBuilder; name : string; value : TFhirValueSetExpansionParameter);
    procedure ComposeValueSetExpansionParameterChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionParameter);
    procedure ComposeValueSetExpansionProperty(xml : TXmlBuilder; name : string; value : TFhirValueSetExpansionProperty);
    procedure ComposeValueSetExpansionPropertyChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionProperty);
    procedure ComposeValueSetExpansionContains(xml : TXmlBuilder; name : string; value : TFhirValueSetExpansionContains);
    procedure ComposeValueSetExpansionContainsChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionContains);
    procedure ComposeValueSetExpansionContainsProperty(xml : TXmlBuilder; name : string; value : TFhirValueSetExpansionContainsProperty);
    procedure ComposeValueSetExpansionContainsPropertyChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionContainsProperty);
    procedure ComposeValueSet(xml : TXmlBuilder; name : string; value : TFhirValueSet);
    procedure ComposeValueSetChildren(xml : TXmlBuilder; value : TFhirValueSet);
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    procedure ComposeVerificationResultPrimarySource(xml : TXmlBuilder; name : string; value : TFhirVerificationResultPrimarySource);
    procedure ComposeVerificationResultPrimarySourceChildren(xml : TXmlBuilder; value : TFhirVerificationResultPrimarySource);
    procedure ComposeVerificationResultAttestation(xml : TXmlBuilder; name : string; value : TFhirVerificationResultAttestation);
    procedure ComposeVerificationResultAttestationChildren(xml : TXmlBuilder; value : TFhirVerificationResultAttestation);
    procedure ComposeVerificationResultValidator(xml : TXmlBuilder; name : string; value : TFhirVerificationResultValidator);
    procedure ComposeVerificationResultValidatorChildren(xml : TXmlBuilder; value : TFhirVerificationResultValidator);
    procedure ComposeVerificationResult(xml : TXmlBuilder; name : string; value : TFhirVerificationResult);
    procedure ComposeVerificationResultChildren(xml : TXmlBuilder; value : TFhirVerificationResult);
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    procedure ComposeVisionPrescriptionLensSpecification(xml : TXmlBuilder; name : string; value : TFhirVisionPrescriptionLensSpecification);
    procedure ComposeVisionPrescriptionLensSpecificationChildren(xml : TXmlBuilder; value : TFhirVisionPrescriptionLensSpecification);
    procedure ComposeVisionPrescriptionLensSpecificationPrism(xml : TXmlBuilder; name : string; value : TFhirVisionPrescriptionLensSpecificationPrism);
    procedure ComposeVisionPrescriptionLensSpecificationPrismChildren(xml : TXmlBuilder; value : TFhirVisionPrescriptionLensSpecificationPrism);
    procedure ComposeVisionPrescription(xml : TXmlBuilder; name : string; value : TFhirVisionPrescription);
    procedure ComposeVisionPrescriptionChildren(xml : TXmlBuilder; value : TFhirVisionPrescription);
{$ENDIF FHIR_VISIONPRESCRIPTION}

  public
    procedure ComposeResource(xml : TXmlBuilder; resource : TFhirResource); override;
    procedure ComposeBase(xml : TXmlBuilder; name : String; base : TFHIRObject); override;
  end;

implementation

{ TFHIRXmlParser / TFHIRXmlComposer }

Procedure TFHIRXmlParser.ParseBaseAttributes(value : TFhirBase; path : string; element : TMXmlElement); 
begin
  TakeCommentsStart(value);
  GetObjectLocation(value, element);
end;

Procedure TFHIRXmlParser.ParseBaseAttributes(value : TFhirResource; path : string; element : TMXmlElement);  
begin
  TakeCommentsStart(value);
  GetObjectLocation(value, element);
end;

Function TFHIRXmlParser.ParseBaseChild(value : TFhirBase; path : string; child : TMXmlElement) : boolean;  
begin
  result := false;
end;

Function TFHIRXmlParser.ParseBaseChild(value : TFhirResource; path : string; child : TMXmlElement) : boolean;  
begin
  result := false;
end;

Procedure TFHIRXmlComposer.ComposeBaseAttributes(xml : TXmlBuilder; res : TFhirBase); 
begin
  CommentsStart(xml, res);
end;

Procedure TFHIRXmlComposer.ComposeBaseAttributes(xml : TXmlBuilder; res : TFhirResource); 
begin
  CommentsStart(xml, res);
end;

Procedure TFHIRXmlComposer.ComposeBaseChildren(xml : TXmlBuilder; value : TFhirBase); 
begin
  // nothing
end;

Procedure TFHIRXmlComposer.ComposeBaseChildren(xml : TXmlBuilder; value : TFhirResource); 
begin
  // nothing
end;

Procedure TFHIRXmlParser.ParseElementAttributes(value : TFhirElement; path : string; element : TMXmlElement);
begin
  ParseBaseAttributes(value, path, element);
    value.id := GetAttribute(element, 'id'); {L730}
end;

Function TFHIRXmlParser.ParseElementChild(value : TFhirElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'extension') then
    value.extensionList.Add(ParseExtension(child, path+'/extension')) {L631}
  else if not parseBaseChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeElementAttributes(xml : TXmlBuilder; value : TFhirElement);
begin
  ComposeBaseAttributes(xml, value);
  Attribute(xml, 'id', value.id  );
end;

Procedure TFHIRXmlComposer.ComposeElementChildren(xml : TXmlBuilder; value : TFhirElement);
var
  i : integer; {L414}
begin
  composeBaseChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.extensionList.Count - 1 do
      ComposeExtension(xml, 'extension', value.extensionList[i]);
end;

Procedure TFHIRXmlParser.ParseBackboneElementAttributes(value : TFhirBackboneElement; path : string; element : TMXmlElement);
begin
  ParseElementAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseBackboneElementChild(value : TFhirBackboneElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'modifierExtension') then
    value.modifierExtensionList.Add(ParseExtension(child, path+'/modifierExtension')) {L631}
  else if not parseElementChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeBackboneElementAttributes(xml : TXmlBuilder; value : TFhirBackboneElement);
begin
  ComposeElementAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeBackboneElementChildren(xml : TXmlBuilder; value : TFhirBackboneElement);
var
  i : integer; {L414}
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.modifierExtensionList.Count - 1 do
      ComposeExtension(xml, 'modifierExtension', value.modifierExtensionList[i]);
end;

Procedure TFHIRXmlParser.ParseDataTypeAttributes(value : TFhirDataType; path : string; element : TMXmlElement);
begin
  ParseElementAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseDataTypeChild(value : TFhirDataType; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if not parseElementChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeDataTypeAttributes(xml : TXmlBuilder; value : TFhirDataType);
begin
  ComposeElementAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeDataTypeChildren(xml : TXmlBuilder; value : TFhirDataType);
begin
  composeElementChildren(xml, value);
end;

Procedure TFHIRXmlParser.ParseBackboneTypeAttributes(value : TFhirBackboneType; path : string; element : TMXmlElement);
begin
  ParseDataTypeAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseBackboneTypeChild(value : TFhirBackboneType; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'modifierExtension') then
    value.modifierExtensionList.Add(ParseExtension(child, path+'/modifierExtension')) {L631}
  else if not parseDataTypeChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeBackboneTypeAttributes(xml : TXmlBuilder; value : TFhirBackboneType);
begin
  ComposeDataTypeAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeBackboneTypeChildren(xml : TXmlBuilder; value : TFhirBackboneType);
var
  i : integer; {L414}
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.modifierExtensionList.Count - 1 do
      ComposeExtension(xml, 'modifierExtension', value.modifierExtensionList[i]);
end;

Procedure TFHIRXmlParser.ParsePrimitiveTypeAttributes(value : TFhirPrimitiveType; path : string; element : TMXmlElement);
begin
  ParseDataTypeAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParsePrimitiveTypeChild(value : TFhirPrimitiveType; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if not parseDataTypeChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposePrimitiveTypeAttributes(xml : TXmlBuilder; value : TFhirPrimitiveType);
begin
  ComposeDataTypeAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposePrimitiveTypeChildren(xml : TXmlBuilder; value : TFhirPrimitiveType);
begin
  composeDataTypeChildren(xml, value);
end;

function TFHIRXmlParser.ParseEnum(Const aNames, aSystems : Array Of String; element : TMXmlElement; path : String) : TFhirEnum;
var
  child : TMXmlElement;
  i : integer;
begin
  result := TFhirEnum.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    i := StringArrayIndexOfSensitive(aNames, result.value);
    if i < 0 then
      raise EXmlException.create('unknown code: '+result.value+' from a set of choices of '+StringArrayToCommaString(aNames)+' for "'+path+'"');
    result.system := aSystems[i];
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeEnum(xml : TXmlBuilder; name : String; value : TFhirEnum; Const aNames : Array Of String);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseDate(element : TMXmlElement; path : string) : TFhirDate;
var
  child : TMXmlElement;
begin
  result := TFhirDate.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTFslDateTime(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeDate(xml : TXmlBuilder; name : String; value : TFhirDate);
begin
  if (value = nil) or ((value.value.null) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value.notNull) then
    attribute(xml, 'value', asString(value.value));
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseDateTime(element : TMXmlElement; path : string) : TFhirDateTime;
var
  child : TMXmlElement;
begin
  result := TFhirDateTime.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTFslDateTime(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeDateTime(xml : TXmlBuilder; name : String; value : TFhirDateTime);
begin
  if (value = nil) or ((value.value.null) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value.notNull) then
    attribute(xml, 'value', asString(value.value));
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseString(element : TMXmlElement; path : string) : TFhirString;
var
  child : TMXmlElement;
begin
  result := TFhirString.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeString(xml : TXmlBuilder; name : String; value : TFhirString);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseInteger(element : TMXmlElement; path : string) : TFhirInteger;
var
  child : TMXmlElement;
begin
  result := TFhirInteger.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeInteger(xml : TXmlBuilder; name : String; value : TFhirInteger);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseUri(element : TMXmlElement; path : string) : TFhirUri;
var
  child : TMXmlElement;
begin
  result := TFhirUri.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUri(xml : TXmlBuilder; name : String; value : TFhirUri);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseInstant(element : TMXmlElement; path : string) : TFhirInstant;
var
  child : TMXmlElement;
begin
  result := TFhirInstant.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTFslDateTime(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeInstant(xml : TXmlBuilder; name : String; value : TFhirInstant);
begin
  if (value = nil) or ((value.value.null) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value.notNull) then
    attribute(xml, 'value', asString(value.value));
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseXhtml(element : TMXmlElement; path : string) : TFhirXhtml;
var
  child : TMXmlElement;
begin
  result := TFhirXhtml.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeXhtml(xml : TXmlBuilder; name : String; value : TFhirXhtml);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseBoolean(element : TMXmlElement; path : string) : TFhirBoolean;
var
  child : TMXmlElement;
begin
  result := TFhirBoolean.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := StringToBoolean(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeBoolean(xml : TXmlBuilder; name : String; value : TFhirBoolean);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', LCBooleanToString(value.value));
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseBase64Binary(element : TMXmlElement; path : string) : TFhirBase64Binary;
var
  child : TMXmlElement;
begin
  result := TFhirBase64Binary.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := toTBytes(GetAttribute(element, 'value'));
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeBase64Binary(xml : TXmlBuilder; name : String; value : TFhirBase64Binary);
begin
  if (value = nil) or ((value.value = nil) and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  if (value.value <> nil) then
    attribute(xml, 'value', asString(value.value));
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseTime(element : TMXmlElement; path : string) : TFhirTime;
var
  child : TMXmlElement;
begin
  result := TFhirTime.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeTime(xml : TXmlBuilder; name : String; value : TFhirTime);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseDecimal(element : TMXmlElement; path : string) : TFhirDecimal;
var
  child : TMXmlElement;
begin
  result := TFhirDecimal.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeDecimal(xml : TXmlBuilder; name : String; value : TFhirDecimal);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseCode(element : TMXmlElement; path : string) : TFhirCode;
var
  child : TMXmlElement;
begin
  result := TFhirCode.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeCode(xml : TXmlBuilder; name : String; value : TFhirCode);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseCanonical(element : TMXmlElement; path : string) : TFhirCanonical;
var
  child : TMXmlElement;
begin
  result := TFhirCanonical.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeCanonical(xml : TXmlBuilder; name : String; value : TFhirCanonical);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseOid(element : TMXmlElement; path : string) : TFhirOid;
var
  child : TMXmlElement;
begin
  result := TFhirOid.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeOid(xml : TXmlBuilder; name : String; value : TFhirOid);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseUuid(element : TMXmlElement; path : string) : TFhirUuid;
var
  child : TMXmlElement;
begin
  result := TFhirUuid.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUuid(xml : TXmlBuilder; name : String; value : TFhirUuid);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseUrl(element : TMXmlElement; path : string) : TFhirUrl;
var
  child : TMXmlElement;
begin
  result := TFhirUrl.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUrl(xml : TXmlBuilder; name : String; value : TFhirUrl);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseMarkdown(element : TMXmlElement; path : string) : TFhirMarkdown;
var
  child : TMXmlElement;
begin
  result := TFhirMarkdown.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeMarkdown(xml : TXmlBuilder; name : String; value : TFhirMarkdown);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseUnsignedInt(element : TMXmlElement; path : string) : TFhirUnsignedInt;
var
  child : TMXmlElement;
begin
  result := TFhirUnsignedInt.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeUnsignedInt(xml : TXmlBuilder; name : String; value : TFhirUnsignedInt);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseId(element : TMXmlElement; path : string) : TFhirId;
var
  child : TMXmlElement;
begin
  result := TFhirId.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeId(xml : TXmlBuilder; name : String; value : TFhirId);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParsePositiveInt(element : TMXmlElement; path : string) : TFhirPositiveInt;
var
  child : TMXmlElement;
begin
  result := TFhirPositiveInt.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposePositiveInt(xml : TXmlBuilder; name : String; value : TFhirPositiveInt);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseInteger64(element : TMXmlElement; path : string) : TFhirInteger64;
var
  child : TMXmlElement;
begin
  result := TFhirInteger64.create;
  try
    ParseElementAttributes(result, path, element);
    result.value := GetAttribute(element, 'value');
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if Not ParseElementChild(result, path, child) then
         UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

Procedure TFHIRXmlComposer.ComposeInteger64(xml : TXmlBuilder; name : String; value : TFhirInteger64);
begin
  if (value = nil) or ((value.value = '') and (value.extensionList.count = 0)) then
    exit;
  composeElementAttributes(xml, value);
  attribute(xml, 'value', value.value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

function TFHIRXmlParser.ParseAddress(element : TMXmlElement; path : string) : TFhirAddress;
var
  child : TMXmlElement;
begin
  result := TFhirAddress.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAddressChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAddressChild(value : TFhirAddress; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirAddressUseEnum, SYSTEMS_TFhirAddressUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirAddressTypeEnum, SYSTEMS_TFhirAddressTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'line') then
        value.lineList.Add(ParseString(child, path+'/line')) {L631}
      else if (child.localName = 'city') then
        value.cityElement := ParseString(child, path+'/city') {L737}
      else if (child.localName = 'district') then
        value.districtElement := ParseString(child, path+'/district') {L737}
      else if (child.localName = 'state') then
        value.stateElement := ParseString(child, path+'/state') {L737}
      else if (child.localName = 'postalCode') then
        value.postalCodeElement := ParseString(child, path+'/postalCode') {L737}
      else if (child.localName = 'country') then
        value.countryElement := ParseString(child, path+'/country') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAddress(xml : TXmlBuilder; name : String; value : TFhirAddress);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAddressChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAddressChildren(xml : TXmlBuilder; value : TFhirAddress);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'use', value.useElement, CODES_TFhirAddressUseEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirAddressTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.lineList.Count - 1 do
      ComposeString(xml, 'line', value.lineList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'city', value.cityElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'district', value.districtElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'state', value.stateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'postalCode', value.postalCodeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'country', value.countryElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseAnnotation(element : TMXmlElement; path : string) : TFhirAnnotation;
var
  child : TMXmlElement;
begin
  result := TFhirAnnotation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAnnotationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAnnotationChild(value : TFhirAnnotation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authorReference') then
        value.author := ParseReference(child, path+'/authorReference') {L881}
      else if (child.localName = 'authorString') then
        value.author := ParseString(child, path+'/authorString') {L891}
      else if (child.localName = 'time') then
        value.timeElement := ParseDateTime(child, path+'/time') {L737}
      else if (child.localName = 'text') then
        value.textElement := ParseMarkdown(child, path+'/text') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAnnotation(xml : TXmlBuilder; name : String; value : TFhirAnnotation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAnnotationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAnnotationChildren(xml : TXmlBuilder; value : TFhirAnnotation);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.author is TFhirReference) {2} then
    ComposeReference(xml, 'authorReference', TFhirReference(value.author))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.author is TFhirString) {6} then
    ComposeString(xml, 'authorString', TFhirString(value.author));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'time', value.timeElement); {L738}
  ComposeMarkdown(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseAttachment(element : TMXmlElement; path : string) : TFhirAttachment;
var
  child : TMXmlElement;
begin
  result := TFhirAttachment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAttachmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAttachmentChild(value : TFhirAttachment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentType') then
        value.contentTypeElement := ParseCode(child, path+'/contentType') {L737}
      else if (child.localName = 'language') then
        value.languageElement := ParseCode(child, path+'/language') {L737}
      else if (child.localName = 'data') then
        value.dataElement := ParseBase64Binary(child, path+'/data') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseUrl(child, path+'/url') {L737}
      else if (child.localName = 'size') then
        value.sizeElement := ParseInteger64(child, path+'/size') {L737}
      else if (child.localName = 'hash') then
        value.hashElement := ParseBase64Binary(child, path+'/hash') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'creation') then
        value.creationElement := ParseDateTime(child, path+'/creation') {L737}
      else if (child.localName = 'height') then
        value.heightElement := ParsePositiveInt(child, path+'/height') {L737}
      else if (child.localName = 'width') then
        value.widthElement := ParsePositiveInt(child, path+'/width') {L737}
      else if (child.localName = 'frames') then
        value.framesElement := ParsePositiveInt(child, path+'/frames') {L737}
      else if (child.localName = 'duration') then
        value.durationElement := ParseDecimal(child, path+'/duration') {L737}
      else if (child.localName = 'pages') then
        value.pagesElement := ParsePositiveInt(child, path+'/pages') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAttachment(xml : TXmlBuilder; name : String; value : TFhirAttachment);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAttachmentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAttachmentChildren(xml : TXmlBuilder; value : TFhirAttachment);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'contentType', value.contentTypeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'language', value.languageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64Binary(xml, 'data', value.dataElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger64(xml, 'size', value.sizeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64Binary(xml, 'hash', value.hashElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'creation', value.creationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'height', value.heightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'width', value.widthElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'frames', value.framesElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'duration', value.durationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'pages', value.pagesElement); {L738}
end;

function TFHIRXmlParser.ParseCodeableConcept(element : TMXmlElement; path : string) : TFhirCodeableConcept;
var
  child : TMXmlElement;
begin
  result := TFhirCodeableConcept.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeableConceptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeableConceptChild(value : TFhirCodeableConcept; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'coding') then
        value.codingList.Add(ParseCoding(child, path+'/coding')) {L631}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeableConcept(xml : TXmlBuilder; name : String; value : TFhirCodeableConcept);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeableConceptChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeableConceptChildren(xml : TXmlBuilder; value : TFhirCodeableConcept);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codingList.Count - 1 do
      ComposeCoding(xml, 'coding', value.codingList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseCodeableReference(element : TMXmlElement; path : string) : TFhirCodeableReference;
var
  child : TMXmlElement;
begin
  result := TFhirCodeableReference.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeableReferenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeableReferenceChild(value : TFhirCodeableReference; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'concept') then
        value.concept := ParseCodeableConcept(child, path+'/concept') {L740}
      else if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeableReference(xml : TXmlBuilder; name : String; value : TFhirCodeableReference);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeableReferenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeableReferenceChildren(xml : TXmlBuilder; value : TFhirCodeableReference);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'concept', value.concept); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseCoding(element : TMXmlElement; path : string) : TFhirCoding;
var
  child : TMXmlElement;
begin
  result := TFhirCoding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodingChild(value : TFhirCoding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        value.systemElement := ParseUri(child, path+'/system') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'userSelected') then
        value.userSelectedElement := ParseBoolean(child, path+'/userSelected') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoding(xml : TXmlBuilder; name : String; value : TFhirCoding);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodingChildren(xml : TXmlBuilder; value : TFhirCoding);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'system', value.systemElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'userSelected', value.userSelectedElement); {L738}
end;

function TFHIRXmlParser.ParseContactDetail(element : TMXmlElement; path : string) : TFhirContactDetail;
var
  child : TMXmlElement;
begin
  result := TFhirContactDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContactDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContactDetailChild(value : TFhirContactDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContactDetail(xml : TXmlBuilder; name : String; value : TFhirContactDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContactDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContactDetailChildren(xml : TXmlBuilder; value : TFhirContactDetail);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
end;

function TFHIRXmlParser.ParseContactPoint(element : TMXmlElement; path : string) : TFhirContactPoint;
var
  child : TMXmlElement;
begin
  result := TFhirContactPoint.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContactPointChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContactPointChild(value : TFhirContactPoint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        value.systemElement := ParseEnum(CODES_TFhirContactPointSystemEnum, SYSTEMS_TFhirContactPointSystemEnum, child, path+'/system') {L734}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirContactPointUseEnum, SYSTEMS_TFhirContactPointUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'rank') then
        value.rankElement := ParsePositiveInt(child, path+'/rank') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContactPoint(xml : TXmlBuilder; name : String; value : TFhirContactPoint);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContactPointChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContactPointChildren(xml : TXmlBuilder; value : TFhirContactPoint);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'system', value.systemElement, CODES_TFhirContactPointSystemEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'use', value.useElement, CODES_TFhirContactPointUseEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'rank', value.rankElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseContributor(element : TMXmlElement; path : string) : TFhirContributor;
var
  child : TMXmlElement;
begin
  result := TFhirContributor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContributorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContributorChild(value : TFhirContributor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirContributorTypeEnum, SYSTEMS_TFhirContributorTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContributor(xml : TXmlBuilder; name : String; value : TFhirContributor);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContributorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContributorChildren(xml : TXmlBuilder; value : TFhirContributor);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirContributorTypeEnum); {L735}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
end;

function TFHIRXmlParser.ParseDataRequirementCodeFilter(element : TMXmlElement; path : string) : TFhirDataRequirementCodeFilter;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirementCodeFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementCodeFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementCodeFilterChild(value : TFhirDataRequirementCodeFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'searchParam') then
        value.searchParamElement := ParseString(child, path+'/searchParam') {L737}
      else if (child.localName = 'valueSet') then
        value.valueSetElement := ParseCanonical(child, path+'/valueSet') {L737}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCoding(child, path+'/code')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementCodeFilter(xml : TXmlBuilder; name : String; value : TFhirDataRequirementCodeFilter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDataRequirementCodeFilterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementCodeFilterChildren(xml : TXmlBuilder; value : TFhirDataRequirementCodeFilter);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'searchParam', value.searchParamElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'valueSet', value.valueSetElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(xml, 'code', value.codeList[i]);
end;

function TFHIRXmlParser.ParseDataRequirementDateFilter(element : TMXmlElement; path : string) : TFhirDataRequirementDateFilter;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirementDateFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementDateFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementDateFilterChild(value : TFhirDataRequirementDateFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'searchParam') then
        value.searchParamElement := ParseString(child, path+'/searchParam') {L737}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementDateFilter(xml : TXmlBuilder; name : String; value : TFhirDataRequirementDateFilter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDataRequirementDateFilterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementDateFilterChildren(xml : TXmlBuilder; value : TFhirDataRequirementDateFilter);
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'searchParam', value.searchParamElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value));
end;

function TFHIRXmlParser.ParseDataRequirementSort(element : TMXmlElement; path : string) : TFhirDataRequirementSort;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirementSort.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementSortChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementSortChild(value : TFhirDataRequirementSort; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'direction') then
        value.directionElement := ParseEnum(CODES_TFhirSortDirectionEnum, SYSTEMS_TFhirSortDirectionEnum, child, path+'/direction') {L734}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementSort(xml : TXmlBuilder; name : String; value : TFhirDataRequirementSort);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDataRequirementSortChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementSortChildren(xml : TXmlBuilder; value : TFhirDataRequirementSort);
begin
  composeElementChildren(xml, value);
  ComposeString(xml, 'path', value.pathElement); {L738}
  ComposeEnum(xml, 'direction', value.directionElement, CODES_TFhirSortDirectionEnum); {L735}
end;

function TFHIRXmlParser.ParseDataRequirement(element : TMXmlElement; path : string) : TFhirDataRequirement;
var
  child : TMXmlElement;
begin
  result := TFhirDataRequirement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDataRequirementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDataRequirementChild(value : TFhirDataRequirement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'profile') then
        value.profileList.Add(ParseCanonical(child, path+'/profile')) {L631}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'mustSupport') then
        value.mustSupportList.Add(ParseString(child, path+'/mustSupport')) {L631}
      else if (child.localName = 'codeFilter') then
        value.codeFilterList.Add(ParseDataRequirementCodeFilter(child, path+'/codeFilter')) {L631}
      else if (child.localName = 'dateFilter') then
        value.dateFilterList.Add(ParseDataRequirementDateFilter(child, path+'/dateFilter')) {L631}
      else if (child.localName = 'limit') then
        value.limitElement := ParsePositiveInt(child, path+'/limit') {L737}
      else if (child.localName = 'sort') then
        value.sortList.Add(ParseDataRequirementSort(child, path+'/sort')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDataRequirement(xml : TXmlBuilder; name : String; value : TFhirDataRequirement);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDataRequirementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDataRequirementChildren(xml : TXmlBuilder; value : TFhirDataRequirement);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirAllTypesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.profileList.Count - 1 do
      ComposeCanonical(xml, 'profile', value.profileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.mustSupportList.Count - 1 do
      ComposeString(xml, 'mustSupport', value.mustSupportList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeFilterList.Count - 1 do
      ComposeDataRequirementCodeFilter(xml, 'codeFilter', value.codeFilterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dateFilterList.Count - 1 do
      ComposeDataRequirementDateFilter(xml, 'dateFilter', value.dateFilterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'limit', value.limitElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sortList.Count - 1 do
      ComposeDataRequirementSort(xml, 'sort', value.sortList[i]);
end;

function TFHIRXmlParser.ParseExpression(element : TMXmlElement; path : string) : TFhirExpression;
var
  child : TMXmlElement;
begin
  result := TFhirExpression.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExpressionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExpressionChild(value : TFhirExpression; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseId(child, path+'/name') {L737}
      else if (child.localName = 'language') then
        value.languageElement := ParseCode(child, path+'/language') {L737}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if (child.localName = 'reference') then
        value.referenceElement := ParseUri(child, path+'/reference') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExpression(xml : TXmlBuilder; name : String; value : TFhirExpression);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExpressionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExpressionChildren(xml : TXmlBuilder; value : TFhirExpression);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'name', value.nameElement); {L738}
  ComposeCode(xml, 'language', value.languageElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'reference', value.referenceElement); {L738}
end;

function TFHIRXmlParser.ParseExtension(element : TMXmlElement; path : string) : TFhirExtension;
var
  child : TMXmlElement;
begin
  result := TFhirExtension.create;
  try
    parseElementAttributes(result, path, element);
    result.url := GetAttribute(element, 'url'); {L730}
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExtensionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExtensionChild(value : TFhirExtension; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueCanonical') then
        value.value := ParseCanonical(child, path+'/valueCanonical') {L891}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueId') then
        value.value := ParseId(child, path+'/valueId') {L891}
      else if (child.localName = 'valueMarkdown') then
        value.value := ParseMarkdown(child, path+'/valueMarkdown') {L891}
      else if (child.localName = 'valueOid') then
        value.value := ParseOid(child, path+'/valueOid') {L891}
      else if (child.localName = 'valuePositiveInt') then
        value.value := ParsePositiveInt(child, path+'/valuePositiveInt') {L891}
      else if (child.localName = 'valueUnsignedInt') then
        value.value := ParseUnsignedInt(child, path+'/valueUnsignedInt') {L891}
      else if (child.localName = 'valueUrl') then
        value.value := ParseUrl(child, path+'/valueUrl') {L891}
      else if (child.localName = 'valueUuid') then
        value.value := ParseUuid(child, path+'/valueUuid') {L891}
      else if (child.localName = 'valueAddress') then
        value.value := ParseAddress(child, path+'/valueAddress') {L891}
      else if (child.localName = 'valueAge') then
        value.value := ParseAge(child, path+'/valueAge') {L891}
      else if (child.localName = 'valueAnnotation') then
        value.value := ParseAnnotation(child, path+'/valueAnnotation') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueContactPoint') then
        value.value := ParseContactPoint(child, path+'/valueContactPoint') {L891}
      else if (child.localName = 'valueCount') then
        value.value := ParseCount(child, path+'/valueCount') {L891}
      else if (child.localName = 'valueDistance') then
        value.value := ParseDistance(child, path+'/valueDistance') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if (child.localName = 'valueHumanName') then
        value.value := ParseHumanName(child, path+'/valueHumanName') {L891}
      else if (child.localName = 'valueIdentifier') then
        value.value := ParseIdentifier(child, path+'/valueIdentifier') {L891}
      else if (child.localName = 'valueMoney') then
        value.value := ParseMoney(child, path+'/valueMoney') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valueSignature') then
        value.value := ParseSignature(child, path+'/valueSignature') {L891}
      else if (child.localName = 'valueTiming') then
        value.value := ParseTiming(child, path+'/valueTiming') {L891}
      else if (child.localName = 'valueContactDetail') then
        value.value := ParseContactDetail(child, path+'/valueContactDetail') {L891}
      else if (child.localName = 'valueContributor') then
        value.value := ParseContributor(child, path+'/valueContributor') {L891}
      else if (child.localName = 'valueDataRequirement') then
        value.value := ParseDataRequirement(child, path+'/valueDataRequirement') {L891}
      else if (child.localName = 'valueExpression') then
        value.value := ParseExpression(child, path+'/valueExpression') {L891}
      else if (child.localName = 'valueParameterDefinition') then
        value.value := ParseParameterDefinition(child, path+'/valueParameterDefinition') {L891}
      else if (child.localName = 'valueRelatedArtifact') then
        value.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact') {L891}
      else if (child.localName = 'valueTriggerDefinition') then
        value.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition') {L891}
      else if (child.localName = 'valueUsageContext') then
        value.value := ParseUsageContext(child, path+'/valueUsageContext') {L891}
      else if (child.localName = 'valueDosage') then
        value.value := ParseDosage(child, path+'/valueDosage') {L891}
      else if (child.localName = 'valueMeta') then
        value.value := ParseMeta(child, path+'/valueMeta') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInstant') then
        value.value := ParseInstant(child, path+'/valueInstant') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueInteger64') then
        value.value := ParseInteger64(child, path+'/valueInteger64') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExtension(xml : TXmlBuilder; name : String; value : TFhirExtension);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  Attribute(xml, 'url', value.url  );
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExtensionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExtensionChildren(xml : TXmlBuilder; value : TFhirExtension);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirMeta) {6} then
    ComposeMeta(xml, 'valueMeta', TFhirMeta(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'valueInteger64', TFhirInteger64(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
end;

function TFHIRXmlParser.ParseHumanName(element : TMXmlElement; path : string) : TFhirHumanName;
var
  child : TMXmlElement;
begin
  result := TFhirHumanName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHumanNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHumanNameChild(value : TFhirHumanName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirNameUseEnum, SYSTEMS_TFhirNameUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'family') then
        value.familyElement := ParseString(child, path+'/family') {L737}
      else if (child.localName = 'given') then
        value.givenList.Add(ParseString(child, path+'/given')) {L631}
      else if (child.localName = 'prefix') then
        value.prefixList.Add(ParseString(child, path+'/prefix')) {L631}
      else if (child.localName = 'suffix') then
        value.suffixList.Add(ParseString(child, path+'/suffix')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHumanName(xml : TXmlBuilder; name : String; value : TFhirHumanName);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeHumanNameChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeHumanNameChildren(xml : TXmlBuilder; value : TFhirHumanName);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'use', value.useElement, CODES_TFhirNameUseEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'family', value.familyElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.givenList.Count - 1 do
      ComposeString(xml, 'given', value.givenList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.prefixList.Count - 1 do
      ComposeString(xml, 'prefix', value.prefixList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.suffixList.Count - 1 do
      ComposeString(xml, 'suffix', value.suffixList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseIdentifier(element : TMXmlElement; path : string) : TFhirIdentifier;
var
  child : TMXmlElement;
begin
  result := TFhirIdentifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIdentifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIdentifierChild(value : TFhirIdentifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirIdentifierUseEnum, SYSTEMS_TFhirIdentifierUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'system') then
        value.systemElement := ParseUri(child, path+'/system') {L737}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'assigner') then
        value.assigner := ParseReference(child, path+'/assigner') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIdentifier(xml : TXmlBuilder; name : String; value : TFhirIdentifier);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeIdentifierChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeIdentifierChildren(xml : TXmlBuilder; value : TFhirIdentifier);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'use', value.useElement, CODES_TFhirIdentifierUseEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'system', value.systemElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'assigner', value.assigner); {L741}
end;

function TFHIRXmlParser.ParseMeta(element : TMXmlElement; path : string) : TFhirMeta;
var
  child : TMXmlElement;
begin
  result := TFhirMeta.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMetaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMetaChild(value : TFhirMeta; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'versionId') then
        value.versionIdElement := ParseId(child, path+'/versionId') {L737}
      else if (child.localName = 'lastUpdated') then
        value.lastUpdatedElement := ParseInstant(child, path+'/lastUpdated') {L737}
      else if (child.localName = 'source') then
        value.sourceElement := ParseUri(child, path+'/source') {L737}
      else if (child.localName = 'profile') then
        value.profileList.Add(ParseCanonical(child, path+'/profile')) {L631}
      else if (child.localName = 'security') then
        value.securityList.Add(ParseCoding(child, path+'/security')) {L631}
      else if (child.localName = 'tag') then
        value.tagList.Add(ParseCoding(child, path+'/tag')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeta(xml : TXmlBuilder; name : String; value : TFhirMeta);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMetaChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMetaChildren(xml : TXmlBuilder; value : TFhirMeta);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'versionId', value.versionIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'lastUpdated', value.lastUpdatedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'source', value.sourceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.profileList.Count - 1 do
      ComposeCanonical(xml, 'profile', value.profileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.securityList.Count - 1 do
      ComposeCoding(xml, 'security', value.securityList[i]);
  for i := 0 to value.tagList.Count - 1 do
    if (SummaryOption in [soFull, soSummary, soData]) or isSubsettedTag(value.tagList[i]) then
      ComposeCoding(xml, 'tag', value.tagList[i]);
end;

function TFHIRXmlParser.ParseMoney(element : TMXmlElement; path : string) : TFhirMoney;
var
  child : TMXmlElement;
begin
  result := TFhirMoney.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMoneyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMoneyChild(value : TFhirMoney; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        value.valueElement := ParseDecimal(child, path+'/value') {L737}
      else if (child.localName = 'currency') then
        value.currencyElement := ParseCode(child, path+'/currency') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMoney(xml : TXmlBuilder; name : String; value : TFhirMoney);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMoneyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMoneyChildren(xml : TXmlBuilder; value : TFhirMoney);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'currency', value.currencyElement); {L738}
end;

function TFHIRXmlParser.ParseNarrative(element : TMXmlElement; path : string) : TFhirNarrative;
var
  child : TMXmlElement;
begin
  result := TFhirNarrative.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNarrativeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNarrativeChild(value : TFhirNarrative; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirNarrativeStatusEnum, SYSTEMS_TFhirNarrativeStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'div') then
        value.div_ := ParseXHtmlNode(child, path+'/div') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNarrative(xml : TXmlBuilder; name : String; value : TFhirNarrative);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNarrativeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNarrativeChildren(xml : TXmlBuilder; value : TFhirNarrative);
begin
  composeDataTypeChildren(xml, value);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirNarrativeStatusEnum); {L735}
  ComposeXHtmlNode(xml, 'div', value.div_); {L741}
end;

function TFHIRXmlParser.ParseParameterDefinition(element : TMXmlElement; path : string) : TFhirParameterDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirParameterDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseParameterDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseParameterDefinitionChild(value : TFhirParameterDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseCode(child, path+'/name') {L737}
      else if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'min') then
        value.minElement := ParseInteger(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeParameterDefinition(xml : TXmlBuilder; name : String; value : TFhirParameterDefinition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeParameterDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeParameterDefinitionChildren(xml : TXmlBuilder; value : TFhirParameterDefinition);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'use', value.useElement, CODES_TFhirOperationParameterUseEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'min', value.minElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'max', value.maxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirAllTypesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
end;

function TFHIRXmlParser.ParsePeriod(element : TMXmlElement; path : string) : TFhirPeriod;
var
  child : TMXmlElement;
begin
  result := TFhirPeriod.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePeriodChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePeriodChild(value : TFhirPeriod; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        value.startElement := ParseDateTime(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseDateTime(child, path+'/end') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePeriod(xml : TXmlBuilder; name : String; value : TFhirPeriod);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePeriodChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePeriodChildren(xml : TXmlBuilder; value : TFhirPeriod);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'end', value.end_Element); {L738}
end;

function TFHIRXmlParser.ParseQuantity(element : TMXmlElement; path : string) : TFhirQuantity;
var
  child : TMXmlElement;
begin
  result := TFhirQuantity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuantityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuantityChild(value : TFhirQuantity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        value.valueElement := ParseDecimal(child, path+'/value') {L737}
      else if (child.localName = 'comparator') then
        value.comparatorElement := ParseEnum(CODES_TFhirQuantityComparatorEnum, SYSTEMS_TFhirQuantityComparatorEnum, child, path+'/comparator') {L734}
      else if (child.localName = 'unit') then
        value.unit_Element := ParseString(child, path+'/unit') {L737}
      else if (child.localName = 'system') then
        value.systemElement := ParseUri(child, path+'/system') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuantity(xml : TXmlBuilder; name : String; value : TFhirQuantity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuantityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuantityChildren(xml : TXmlBuilder; value : TFhirQuantity);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'comparator', value.comparatorElement, CODES_TFhirQuantityComparatorEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'unit', value.unit_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'system', value.systemElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'code', value.codeElement); {L738}
end;

function TFHIRXmlParser.ParseRange(element : TMXmlElement; path : string) : TFhirRange;
var
  child : TMXmlElement;
begin
  result := TFhirRange.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRangeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRangeChild(value : TFhirRange; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'low') then
        value.low := ParseQuantity(child, path+'/low') {L740}
      else if (child.localName = 'high') then
        value.high := ParseQuantity(child, path+'/high') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRange(xml : TXmlBuilder; name : String; value : TFhirRange);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRangeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRangeChildren(xml : TXmlBuilder; value : TFhirRange);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'low', value.low); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'high', value.high); {L741}
end;

function TFHIRXmlParser.ParseRatio(element : TMXmlElement; path : string) : TFhirRatio;
var
  child : TMXmlElement;
begin
  result := TFhirRatio.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRatioChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRatioChild(value : TFhirRatio; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'numerator') then
        value.numerator := ParseQuantity(child, path+'/numerator') {L740}
      else if (child.localName = 'denominator') then
        value.denominator := ParseQuantity(child, path+'/denominator') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRatio(xml : TXmlBuilder; name : String; value : TFhirRatio);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRatioChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRatioChildren(xml : TXmlBuilder; value : TFhirRatio);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'numerator', value.numerator); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'denominator', value.denominator); {L741}
end;

function TFHIRXmlParser.ParseReference(element : TMXmlElement; path : string) : TFhirReference;
var
  child : TMXmlElement;
begin
  result := TFhirReference.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseReferenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseReferenceChild(value : TFhirReference; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        value.referenceElement := ParseString(child, path+'/reference') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseUri(child, path+'/type') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeReference(xml : TXmlBuilder; name : String; value : TFhirReference);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeReferenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeReferenceChildren(xml : TXmlBuilder; value : TFhirReference);
begin
  composeDataTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'reference', value.referenceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'type', value.type_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
end;

function TFHIRXmlParser.ParseRelatedArtifact(element : TMXmlElement; path : string) : TFhirRelatedArtifact;
var
  child : TMXmlElement;
begin
  result := TFhirRelatedArtifact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRelatedArtifactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRelatedArtifactChild(value : TFhirRelatedArtifact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirRelatedArtifactTypeEnum, SYSTEMS_TFhirRelatedArtifactTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'label') then
        value.label_Element := ParseString(child, path+'/label') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'citation') then
        value.citationElement := ParseMarkdown(child, path+'/citation') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseUrl(child, path+'/url') {L737}
      else if (child.localName = 'document') then
        value.document := ParseAttachment(child, path+'/document') {L740}
      else if (child.localName = 'resource') then
        value.resourceElement := ParseCanonical(child, path+'/resource') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRelatedArtifact(xml : TXmlBuilder; name : String; value : TFhirRelatedArtifact);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRelatedArtifactChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRelatedArtifactChildren(xml : TXmlBuilder; value : TFhirRelatedArtifact);
begin
  composeDataTypeChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirRelatedArtifactTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'label', value.label_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'citation', value.citationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'document', value.document); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'resource', value.resourceElement); {L738}
end;

function TFHIRXmlParser.ParseSampledData(element : TMXmlElement; path : string) : TFhirSampledData;
var
  child : TMXmlElement;
begin
  result := TFhirSampledData.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSampledDataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSampledDataChild(value : TFhirSampledData; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'origin') then
        value.origin := ParseQuantity(child, path+'/origin') {L740}
      else if (child.localName = 'period') then
        value.periodElement := ParseDecimal(child, path+'/period') {L737}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'lowerLimit') then
        value.lowerLimitElement := ParseDecimal(child, path+'/lowerLimit') {L737}
      else if (child.localName = 'upperLimit') then
        value.upperLimitElement := ParseDecimal(child, path+'/upperLimit') {L737}
      else if (child.localName = 'dimensions') then
        value.dimensionsElement := ParsePositiveInt(child, path+'/dimensions') {L737}
      else if (child.localName = 'data') then
        value.dataElement := ParseString(child, path+'/data') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSampledData(xml : TXmlBuilder; name : String; value : TFhirSampledData);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSampledDataChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSampledDataChildren(xml : TXmlBuilder; value : TFhirSampledData);
begin
  composeDataTypeChildren(xml, value);
  ComposeQuantity(xml, 'origin', value.origin); {L741}
  ComposeDecimal(xml, 'period', value.periodElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'lowerLimit', value.lowerLimitElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'upperLimit', value.upperLimitElement); {L738}
  ComposePositiveInt(xml, 'dimensions', value.dimensionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'data', value.dataElement); {L738}
end;

function TFHIRXmlParser.ParseSignature(element : TMXmlElement; path : string) : TFhirSignature;
var
  child : TMXmlElement;
begin
  result := TFhirSignature.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSignatureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSignatureChild(value : TFhirSignature; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_List.Add(ParseCoding(child, path+'/type')) {L631}
      else if (child.localName = 'when') then
        value.whenElement := ParseInstant(child, path+'/when') {L737}
      else if (child.localName = 'who') then
        value.who := ParseReference(child, path+'/who') {L740}
      else if (child.localName = 'onBehalfOf') then
        value.onBehalfOf := ParseReference(child, path+'/onBehalfOf') {L740}
      else if (child.localName = 'targetFormat') then
        value.targetFormatElement := ParseCode(child, path+'/targetFormat') {L737}
      else if (child.localName = 'sigFormat') then
        value.sigFormatElement := ParseCode(child, path+'/sigFormat') {L737}
      else if (child.localName = 'data') then
        value.dataElement := ParseBase64Binary(child, path+'/data') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSignature(xml : TXmlBuilder; name : String; value : TFhirSignature);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSignatureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSignatureChildren(xml : TXmlBuilder; value : TFhirSignature);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  for i := 0 to value.type_List.Count - 1 do
      ComposeCoding(xml, 'type', value.type_List[i]);
  ComposeInstant(xml, 'when', value.whenElement); {L738}
  ComposeReference(xml, 'who', value.who); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'onBehalfOf', value.onBehalfOf); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'targetFormat', value.targetFormatElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'sigFormat', value.sigFormatElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64Binary(xml, 'data', value.dataElement); {L738}
end;

function TFHIRXmlParser.ParseTriggerDefinition(element : TMXmlElement; path : string) : TFhirTriggerDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirTriggerDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTriggerDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTriggerDefinitionChild(value : TFhirTriggerDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirTriggerTypeEnum, SYSTEMS_TFhirTriggerTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'timingTiming') then
        value.timing := ParseTiming(child, path+'/timingTiming') {L891}
      else if (child.localName = 'timingReference') then
        value.timing := ParseReference(child, path+'/timingReference') {L881}
      else if (child.localName = 'timingDate') then
        value.timing := ParseDate(child, path+'/timingDate') {L891}
      else if (child.localName = 'timingDateTime') then
        value.timing := ParseDateTime(child, path+'/timingDateTime') {L891}
      else if (child.localName = 'data') then
        value.dataList.Add(ParseDataRequirement(child, path+'/data')) {L631}
      else if (child.localName = 'condition') then
        value.condition := ParseExpression(child, path+'/condition') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTriggerDefinition(xml : TXmlBuilder; name : String; value : TFhirTriggerDefinition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTriggerDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTriggerDefinitionChildren(xml : TXmlBuilder; value : TFhirTriggerDefinition);
var
  i : integer;
begin
  composeDataTypeChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirTriggerTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(value.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirReference) {2} then
    ComposeReference(xml, 'timingReference', TFhirReference(value.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirDate) {6} then
    ComposeDate(xml, 'timingDate', TFhirDate(value.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(value.timing));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dataList.Count - 1 do
      ComposeDataRequirement(xml, 'data', value.dataList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeExpression(xml, 'condition', value.condition); {L741}
end;

function TFHIRXmlParser.ParseUsageContext(element : TMXmlElement; path : string) : TFhirUsageContext;
var
  child : TMXmlElement;
begin
  result := TFhirUsageContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseUsageContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseUsageContextChild(value : TFhirUsageContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCoding(child, path+'/code') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeUsageContext(xml : TXmlBuilder; name : String; value : TFhirUsageContext);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeUsageContextChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeUsageContextChildren(xml : TXmlBuilder; value : TFhirUsageContext);
begin
  composeDataTypeChildren(xml, value);
  ComposeCoding(xml, 'code', value.code); {L741}
  if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value));
end;

function TFHIRXmlParser.ParseAge(element : TMXmlElement; path : string) : TFhirAge;
var
  child : TMXmlElement;
begin
  result := TFhirAge.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAgeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAgeChild(value : TFhirAge; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAge(xml : TXmlBuilder; name : String; value : TFhirAge);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAgeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAgeChildren(xml : TXmlBuilder; value : TFhirAge);
begin
  composeQuantityChildren(xml, value);
end;

function TFHIRXmlParser.ParseCount(element : TMXmlElement; path : string) : TFhirCount;
var
  child : TMXmlElement;
begin
  result := TFhirCount.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCountChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCountChild(value : TFhirCount; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCount(xml : TXmlBuilder; name : String; value : TFhirCount);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCountChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCountChildren(xml : TXmlBuilder; value : TFhirCount);
begin
  composeQuantityChildren(xml, value);
end;

function TFHIRXmlParser.ParseDistance(element : TMXmlElement; path : string) : TFhirDistance;
var
  child : TMXmlElement;
begin
  result := TFhirDistance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDistanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDistanceChild(value : TFhirDistance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDistance(xml : TXmlBuilder; name : String; value : TFhirDistance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDistanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDistanceChildren(xml : TXmlBuilder; value : TFhirDistance);
begin
  composeQuantityChildren(xml, value);
end;

function TFHIRXmlParser.ParseDosageDoseAndRate(element : TMXmlElement; path : string) : TFhirDosageDoseAndRate;
var
  child : TMXmlElement;
begin
  result := TFhirDosageDoseAndRate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDosageDoseAndRateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDosageDoseAndRateChild(value : TFhirDosageDoseAndRate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'doseRange') then
        value.dose := ParseRange(child, path+'/doseRange') {L891}
      else if (child.localName = 'doseQuantity') then
        value.dose := ParseQuantity(child, path+'/doseQuantity') {L891}
      else if (child.localName = 'rateRatio') then
        value.rate := ParseRatio(child, path+'/rateRatio') {L891}
      else if (child.localName = 'rateRange') then
        value.rate := ParseRange(child, path+'/rateRange') {L891}
      else if (child.localName = 'rateQuantity') then
        value.rate := ParseQuantity(child, path+'/rateQuantity') {L891}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDosageDoseAndRate(xml : TXmlBuilder; name : String; value : TFhirDosageDoseAndRate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDosageDoseAndRateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDosageDoseAndRateChildren(xml : TXmlBuilder; value : TFhirDosageDoseAndRate);
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.dose is TFhirRange) {6} then
    ComposeRange(xml, 'doseRange', TFhirRange(value.dose))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.dose is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'doseQuantity', TFhirQuantity(value.dose));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.rate is TFhirRatio) {6} then
    ComposeRatio(xml, 'rateRatio', TFhirRatio(value.rate))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.rate is TFhirRange) {6} then
    ComposeRange(xml, 'rateRange', TFhirRange(value.rate))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.rate is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'rateQuantity', TFhirQuantity(value.rate));
end;

function TFHIRXmlParser.ParseDosage(element : TMXmlElement; path : string) : TFhirDosage;
var
  child : TMXmlElement;
begin
  result := TFhirDosage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDosageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDosageChild(value : TFhirDosage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParseInteger(child, path+'/sequence') {L737}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'additionalInstruction') then
        value.additionalInstructionList.Add(ParseCodeableConcept(child, path+'/additionalInstruction')) {L631}
      else if (child.localName = 'patientInstruction') then
        value.patientInstructionElement := ParseString(child, path+'/patientInstruction') {L737}
      else if (child.localName = 'timing') then
        value.timing := ParseTiming(child, path+'/timing') {L740}
      else if (child.localName = 'asNeededCodeableConcept') then
        value.asNeeded := ParseCodeableConcept(child, path+'/asNeededCodeableConcept') {L891}
      else if (child.localName = 'asNeededBoolean') then
        value.asNeeded := ParseBoolean(child, path+'/asNeededBoolean') {L891}
      else if (child.localName = 'site') then
        value.site := ParseCodeableConcept(child, path+'/site') {L740}
      else if (child.localName = 'route') then
        value.route := ParseCodeableConcept(child, path+'/route') {L740}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'doseAndRate') then
        value.doseAndRateList.Add(ParseDosageDoseAndRate(child, path+'/doseAndRate')) {L631}
      else if (child.localName = 'maxDosePerPeriod') then
        value.maxDosePerPeriod := ParseRatio(child, path+'/maxDosePerPeriod') {L740}
      else if (child.localName = 'maxDosePerAdministration') then
        value.maxDosePerAdministration := ParseQuantity(child, path+'/maxDosePerAdministration') {L740}
      else if (child.localName = 'maxDosePerLifetime') then
        value.maxDosePerLifetime := ParseQuantity(child, path+'/maxDosePerLifetime') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDosage(xml : TXmlBuilder; name : String; value : TFhirDosage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDosageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDosageChildren(xml : TXmlBuilder; value : TFhirDosage);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.additionalInstructionList.Count - 1 do
      ComposeCodeableConcept(xml, 'additionalInstruction', value.additionalInstructionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'patientInstruction', value.patientInstructionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTiming(xml, 'timing', value.timing); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'asNeededCodeableConcept', TFhirCodeableConcept(value.asNeeded))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'asNeededBoolean', TFhirBoolean(value.asNeeded));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'site', value.site); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'route', value.route); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.doseAndRateList.Count - 1 do
      ComposeDosageDoseAndRate(xml, 'doseAndRate', value.doseAndRateList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'maxDosePerPeriod', value.maxDosePerPeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'maxDosePerAdministration', value.maxDosePerAdministration); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'maxDosePerLifetime', value.maxDosePerLifetime); {L741}
end;

function TFHIRXmlParser.ParseDuration(element : TMXmlElement; path : string) : TFhirDuration;
var
  child : TMXmlElement;
begin
  result := TFhirDuration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDurationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDurationChild(value : TFhirDuration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDuration(xml : TXmlBuilder; name : String; value : TFhirDuration);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDurationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDurationChildren(xml : TXmlBuilder; value : TFhirDuration);
begin
  composeQuantityChildren(xml, value);
end;

function TFHIRXmlParser.ParseElementDefinitionSlicing(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicing;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionSlicing.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionSlicingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionSlicingChild(value : TFhirElementDefinitionSlicing; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'discriminator') then
        value.discriminatorList.Add(ParseElementDefinitionSlicingDiscriminator(child, path+'/discriminator')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'ordered') then
        value.orderedElement := ParseBoolean(child, path+'/ordered') {L737}
      else if (child.localName = 'rules') then
        value.rulesElement := ParseEnum(CODES_TFhirSlicingRulesEnum, SYSTEMS_TFhirSlicingRulesEnum, child, path+'/rules') {L734}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicing(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionSlicing);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionSlicingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicingChildren(xml : TXmlBuilder; value : TFhirElementDefinitionSlicing);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.discriminatorList.Count - 1 do
      ComposeElementDefinitionSlicingDiscriminator(xml, 'discriminator', value.discriminatorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'ordered', value.orderedElement); {L738}
  ComposeEnum(xml, 'rules', value.rulesElement, CODES_TFhirSlicingRulesEnum); {L735}
end;

function TFHIRXmlParser.ParseElementDefinitionSlicingDiscriminator(element : TMXmlElement; path : string) : TFhirElementDefinitionSlicingDiscriminator;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionSlicingDiscriminator.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionSlicingDiscriminatorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionSlicingDiscriminatorChild(value : TFhirElementDefinitionSlicingDiscriminator; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirDiscriminatorTypeEnum, SYSTEMS_TFhirDiscriminatorTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicingDiscriminator(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionSlicingDiscriminator);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionSlicingDiscriminatorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionSlicingDiscriminatorChildren(xml : TXmlBuilder; value : TFhirElementDefinitionSlicingDiscriminator);
begin
  composeElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirDiscriminatorTypeEnum); {L735}
  ComposeString(xml, 'path', value.pathElement); {L738}
end;

function TFHIRXmlParser.ParseElementDefinitionBase(element : TMXmlElement; path : string) : TFhirElementDefinitionBase;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionBase.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionBaseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionBaseChild(value : TFhirElementDefinitionBase; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'min') then
        value.minElement := ParseUnsignedInt(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBase(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionBase);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionBaseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBaseChildren(xml : TXmlBuilder; value : TFhirElementDefinitionBase);
begin
  composeElementChildren(xml, value);
  ComposeString(xml, 'path', value.pathElement); {L738}
  ComposeUnsignedInt(xml, 'min', value.minElement); {L738}
  ComposeString(xml, 'max', value.maxElement); {L738}
end;

function TFHIRXmlParser.ParseElementDefinitionType(element : TMXmlElement; path : string) : TFhirElementDefinitionType;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionType.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionTypeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionTypeChild(value : TFhirElementDefinitionType; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseUri(child, path+'/code') {L737}
      else if (child.localName = 'profile') then
        value.profileList.Add(ParseCanonical(child, path+'/profile')) {L631}
      else if (child.localName = 'targetProfile') then
        value.targetProfileList.Add(ParseCanonical(child, path+'/targetProfile')) {L631}
      else if (child.localName = 'aggregation') then
        value.aggregationList.Add(ParseEnum(CODES_TFhirAggregationModeEnum, SYSTEMS_TFhirAggregationModeEnum, child, path+'/aggregation')){y.1}
      else if (child.localName = 'versioning') then
        value.versioningElement := ParseEnum(CODES_TFhirReferenceVersionRulesEnum, SYSTEMS_TFhirReferenceVersionRulesEnum, child, path+'/versioning') {L734}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionType(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionType);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionTypeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionTypeChildren(xml : TXmlBuilder; value : TFhirElementDefinitionType);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  ComposeUri(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.profileList.Count - 1 do
      ComposeCanonical(xml, 'profile', value.profileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetProfileList.Count - 1 do
      ComposeCanonical(xml, 'targetProfile', value.targetProfileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.aggregationList.Count - 1 do
      ComposeEnum(xml, 'aggregation', value.aggregationList[i], CODES_TFhirAggregationModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'versioning', value.versioningElement, CODES_TFhirReferenceVersionRulesEnum); {L735}
end;

function TFHIRXmlParser.ParseElementDefinitionExample(element : TMXmlElement; path : string) : TFhirElementDefinitionExample;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionExample.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionExampleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionExampleChild(value : TFhirElementDefinitionExample; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'label') then
        value.label_Element := ParseString(child, path+'/label') {L737}
      else if (child.localName = 'valueCanonical') then
        value.value := ParseCanonical(child, path+'/valueCanonical') {L891}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueId') then
        value.value := ParseId(child, path+'/valueId') {L891}
      else if (child.localName = 'valueMarkdown') then
        value.value := ParseMarkdown(child, path+'/valueMarkdown') {L891}
      else if (child.localName = 'valueOid') then
        value.value := ParseOid(child, path+'/valueOid') {L891}
      else if (child.localName = 'valuePositiveInt') then
        value.value := ParsePositiveInt(child, path+'/valuePositiveInt') {L891}
      else if (child.localName = 'valueUnsignedInt') then
        value.value := ParseUnsignedInt(child, path+'/valueUnsignedInt') {L891}
      else if (child.localName = 'valueUrl') then
        value.value := ParseUrl(child, path+'/valueUrl') {L891}
      else if (child.localName = 'valueUuid') then
        value.value := ParseUuid(child, path+'/valueUuid') {L891}
      else if (child.localName = 'valueAddress') then
        value.value := ParseAddress(child, path+'/valueAddress') {L891}
      else if (child.localName = 'valueAge') then
        value.value := ParseAge(child, path+'/valueAge') {L891}
      else if (child.localName = 'valueAnnotation') then
        value.value := ParseAnnotation(child, path+'/valueAnnotation') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueContactPoint') then
        value.value := ParseContactPoint(child, path+'/valueContactPoint') {L891}
      else if (child.localName = 'valueCount') then
        value.value := ParseCount(child, path+'/valueCount') {L891}
      else if (child.localName = 'valueDistance') then
        value.value := ParseDistance(child, path+'/valueDistance') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if (child.localName = 'valueHumanName') then
        value.value := ParseHumanName(child, path+'/valueHumanName') {L891}
      else if (child.localName = 'valueIdentifier') then
        value.value := ParseIdentifier(child, path+'/valueIdentifier') {L891}
      else if (child.localName = 'valueMoney') then
        value.value := ParseMoney(child, path+'/valueMoney') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valueSignature') then
        value.value := ParseSignature(child, path+'/valueSignature') {L891}
      else if (child.localName = 'valueTiming') then
        value.value := ParseTiming(child, path+'/valueTiming') {L891}
      else if (child.localName = 'valueContactDetail') then
        value.value := ParseContactDetail(child, path+'/valueContactDetail') {L891}
      else if (child.localName = 'valueContributor') then
        value.value := ParseContributor(child, path+'/valueContributor') {L891}
      else if (child.localName = 'valueDataRequirement') then
        value.value := ParseDataRequirement(child, path+'/valueDataRequirement') {L891}
      else if (child.localName = 'valueExpression') then
        value.value := ParseExpression(child, path+'/valueExpression') {L891}
      else if (child.localName = 'valueParameterDefinition') then
        value.value := ParseParameterDefinition(child, path+'/valueParameterDefinition') {L891}
      else if (child.localName = 'valueRelatedArtifact') then
        value.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact') {L891}
      else if (child.localName = 'valueTriggerDefinition') then
        value.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition') {L891}
      else if (child.localName = 'valueUsageContext') then
        value.value := ParseUsageContext(child, path+'/valueUsageContext') {L891}
      else if (child.localName = 'valueDosage') then
        value.value := ParseDosage(child, path+'/valueDosage') {L891}
      else if (child.localName = 'valueMeta') then
        value.value := ParseMeta(child, path+'/valueMeta') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInstant') then
        value.value := ParseInstant(child, path+'/valueInstant') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueInteger64') then
        value.value := ParseInteger64(child, path+'/valueInteger64') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionExample(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionExample);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionExampleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionExampleChildren(xml : TXmlBuilder; value : TFhirElementDefinitionExample);
begin
  composeElementChildren(xml, value);
  ComposeString(xml, 'label', value.label_Element); {L738}
  if (value.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(value.value))
  else if (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (value.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(value.value))
  else if (value.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(value.value))
  else if (value.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(value.value))
  else if (value.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(value.value))
  else if (value.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(value.value))
  else if (value.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(value.value))
  else if (value.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(value.value))
  else if (value.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(value.value))
  else if (value.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(value.value))
  else if (value.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(value.value))
  else if (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(value.value))
  else if (value.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(value.value))
  else if (value.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(value.value))
  else if (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value))
  else if (value.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(value.value))
  else if (value.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(value.value))
  else if (value.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(value.value))
  else if (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (value.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (value.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(value.value))
  else if (value.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(value.value))
  else if (value.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(value.value))
  else if (value.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(value.value))
  else if (value.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(value.value))
  else if (value.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(value.value))
  else if (value.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(value.value))
  else if (value.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value))
  else if (value.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value))
  else if (value.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(value.value))
  else if (value.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(value.value))
  else if (value.value is TFhirMeta) {6} then
    ComposeMeta(xml, 'valueMeta', TFhirMeta(value.value))
  else if (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (value.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'valueInteger64', TFhirInteger64(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
end;

function TFHIRXmlParser.ParseElementDefinitionConstraint(element : TMXmlElement; path : string) : TFhirElementDefinitionConstraint;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionConstraint.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionConstraintChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionConstraintChild(value : TFhirElementDefinitionConstraint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'key') then
        value.keyElement := ParseId(child, path+'/key') {L737}
      else if (child.localName = 'requirements') then
        value.requirementsElement := ParseString(child, path+'/requirements') {L737}
      else if (child.localName = 'severity') then
        value.severityElement := ParseEnum(CODES_TFhirConstraintSeverityEnum, SYSTEMS_TFhirConstraintSeverityEnum, child, path+'/severity') {L734}
      else if (child.localName = 'human') then
        value.humanElement := ParseString(child, path+'/human') {L737}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if (child.localName = 'xpath') then
        value.xpathElement := ParseString(child, path+'/xpath') {L737}
      else if (child.localName = 'source') then
        value.sourceElement := ParseCanonical(child, path+'/source') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionConstraint(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionConstraint);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionConstraintChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionConstraintChildren(xml : TXmlBuilder; value : TFhirElementDefinitionConstraint);
begin
  composeElementChildren(xml, value);
  ComposeId(xml, 'key', value.keyElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'requirements', value.requirementsElement); {L738}
  ComposeEnum(xml, 'severity', value.severityElement, CODES_TFhirConstraintSeverityEnum); {L735}
  ComposeString(xml, 'human', value.humanElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'xpath', value.xpathElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'source', value.sourceElement); {L738}
end;

function TFHIRXmlParser.ParseElementDefinitionBinding(element : TMXmlElement; path : string) : TFhirElementDefinitionBinding;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionBinding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionBindingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionBindingChild(value : TFhirElementDefinitionBinding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'strength') then
        value.strengthElement := ParseEnum(CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum, child, path+'/strength') {L734}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'valueSet') then
        value.valueSetElement := ParseCanonical(child, path+'/valueSet') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBinding(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionBinding);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionBindingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionBindingChildren(xml : TXmlBuilder; value : TFhirElementDefinitionBinding);
begin
  composeElementChildren(xml, value);
  ComposeEnum(xml, 'strength', value.strengthElement, CODES_TFhirBindingStrengthEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'valueSet', value.valueSetElement); {L738}
end;

function TFHIRXmlParser.ParseElementDefinitionMapping(element : TMXmlElement; path : string) : TFhirElementDefinitionMapping;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinitionMapping.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionMappingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionMappingChild(value : TFhirElementDefinitionMapping; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identity') then
        value.identityElement := ParseId(child, path+'/identity') {L737}
      else if (child.localName = 'language') then
        value.languageElement := ParseCode(child, path+'/language') {L737}
      else if (child.localName = 'map') then
        value.mapElement := ParseString(child, path+'/map') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionMapping(xml : TXmlBuilder; name : String; value : TFhirElementDefinitionMapping);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionMappingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionMappingChildren(xml : TXmlBuilder; value : TFhirElementDefinitionMapping);
begin
  composeElementChildren(xml, value);
  ComposeId(xml, 'identity', value.identityElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'language', value.languageElement); {L738}
  ComposeString(xml, 'map', value.mapElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

function TFHIRXmlParser.ParseElementDefinition(element : TMXmlElement; path : string) : TFhirElementDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirElementDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseElementDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseElementDefinitionChild(value : TFhirElementDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'representation') then
        value.representationList.Add(ParseEnum(CODES_TFhirPropertyRepresentationEnum, SYSTEMS_TFhirPropertyRepresentationEnum, child, path+'/representation')){y.1}
      else if (child.localName = 'sliceName') then
        value.sliceNameElement := ParseString(child, path+'/sliceName') {L737}
      else if (child.localName = 'sliceIsConstraining') then
        value.sliceIsConstrainingElement := ParseBoolean(child, path+'/sliceIsConstraining') {L737}
      else if (child.localName = 'label') then
        value.label_Element := ParseString(child, path+'/label') {L737}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCoding(child, path+'/code')) {L631}
      else if (child.localName = 'slicing') then
        value.slicing := ParseElementDefinitionSlicing(child, path+'/slicing') {L740}
      else if (child.localName = 'short') then
        value.shortElement := ParseString(child, path+'/short') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseMarkdown(child, path+'/definition') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseMarkdown(child, path+'/comment') {L737}
      else if (child.localName = 'requirements') then
        value.requirementsElement := ParseMarkdown(child, path+'/requirements') {L737}
      else if (child.localName = 'alias') then
        value.aliasList.Add(ParseString(child, path+'/alias')) {L631}
      else if (child.localName = 'min') then
        value.minElement := ParseUnsignedInt(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if (child.localName = 'base') then
        value.base := ParseElementDefinitionBase(child, path+'/base') {L740}
      else if (child.localName = 'contentReference') then
        value.contentReferenceElement := ParseUri(child, path+'/contentReference') {L737}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseElementDefinitionType(child, path+'/type')) {L631}
      else if (child.localName = 'defaultValueCanonical') then
        value.defaultValue := ParseCanonical(child, path+'/defaultValueCanonical') {L891}
      else if (child.localName = 'defaultValueCode') then
        value.defaultValue := ParseCode(child, path+'/defaultValueCode') {L891}
      else if (child.localName = 'defaultValueId') then
        value.defaultValue := ParseId(child, path+'/defaultValueId') {L891}
      else if (child.localName = 'defaultValueMarkdown') then
        value.defaultValue := ParseMarkdown(child, path+'/defaultValueMarkdown') {L891}
      else if (child.localName = 'defaultValueOid') then
        value.defaultValue := ParseOid(child, path+'/defaultValueOid') {L891}
      else if (child.localName = 'defaultValuePositiveInt') then
        value.defaultValue := ParsePositiveInt(child, path+'/defaultValuePositiveInt') {L891}
      else if (child.localName = 'defaultValueUnsignedInt') then
        value.defaultValue := ParseUnsignedInt(child, path+'/defaultValueUnsignedInt') {L891}
      else if (child.localName = 'defaultValueUrl') then
        value.defaultValue := ParseUrl(child, path+'/defaultValueUrl') {L891}
      else if (child.localName = 'defaultValueUuid') then
        value.defaultValue := ParseUuid(child, path+'/defaultValueUuid') {L891}
      else if (child.localName = 'defaultValueAddress') then
        value.defaultValue := ParseAddress(child, path+'/defaultValueAddress') {L891}
      else if (child.localName = 'defaultValueAge') then
        value.defaultValue := ParseAge(child, path+'/defaultValueAge') {L891}
      else if (child.localName = 'defaultValueAnnotation') then
        value.defaultValue := ParseAnnotation(child, path+'/defaultValueAnnotation') {L891}
      else if (child.localName = 'defaultValueAttachment') then
        value.defaultValue := ParseAttachment(child, path+'/defaultValueAttachment') {L891}
      else if (child.localName = 'defaultValueCodeableConcept') then
        value.defaultValue := ParseCodeableConcept(child, path+'/defaultValueCodeableConcept') {L891}
      else if (child.localName = 'defaultValueCoding') then
        value.defaultValue := ParseCoding(child, path+'/defaultValueCoding') {L891}
      else if (child.localName = 'defaultValueContactPoint') then
        value.defaultValue := ParseContactPoint(child, path+'/defaultValueContactPoint') {L891}
      else if (child.localName = 'defaultValueCount') then
        value.defaultValue := ParseCount(child, path+'/defaultValueCount') {L891}
      else if (child.localName = 'defaultValueDistance') then
        value.defaultValue := ParseDistance(child, path+'/defaultValueDistance') {L891}
      else if (child.localName = 'defaultValueDuration') then
        value.defaultValue := ParseDuration(child, path+'/defaultValueDuration') {L891}
      else if (child.localName = 'defaultValueHumanName') then
        value.defaultValue := ParseHumanName(child, path+'/defaultValueHumanName') {L891}
      else if (child.localName = 'defaultValueIdentifier') then
        value.defaultValue := ParseIdentifier(child, path+'/defaultValueIdentifier') {L891}
      else if (child.localName = 'defaultValueMoney') then
        value.defaultValue := ParseMoney(child, path+'/defaultValueMoney') {L891}
      else if (child.localName = 'defaultValuePeriod') then
        value.defaultValue := ParsePeriod(child, path+'/defaultValuePeriod') {L891}
      else if (child.localName = 'defaultValueQuantity') then
        value.defaultValue := ParseQuantity(child, path+'/defaultValueQuantity') {L891}
      else if (child.localName = 'defaultValueRange') then
        value.defaultValue := ParseRange(child, path+'/defaultValueRange') {L891}
      else if (child.localName = 'defaultValueRatio') then
        value.defaultValue := ParseRatio(child, path+'/defaultValueRatio') {L891}
      else if (child.localName = 'defaultValueReference') then
        value.defaultValue := ParseReference(child, path+'/defaultValueReference') {L891}
      else if (child.localName = 'defaultValueSampledData') then
        value.defaultValue := ParseSampledData(child, path+'/defaultValueSampledData') {L891}
      else if (child.localName = 'defaultValueSignature') then
        value.defaultValue := ParseSignature(child, path+'/defaultValueSignature') {L891}
      else if (child.localName = 'defaultValueTiming') then
        value.defaultValue := ParseTiming(child, path+'/defaultValueTiming') {L891}
      else if (child.localName = 'defaultValueContactDetail') then
        value.defaultValue := ParseContactDetail(child, path+'/defaultValueContactDetail') {L891}
      else if (child.localName = 'defaultValueContributor') then
        value.defaultValue := ParseContributor(child, path+'/defaultValueContributor') {L891}
      else if (child.localName = 'defaultValueDataRequirement') then
        value.defaultValue := ParseDataRequirement(child, path+'/defaultValueDataRequirement') {L891}
      else if (child.localName = 'defaultValueExpression') then
        value.defaultValue := ParseExpression(child, path+'/defaultValueExpression') {L891}
      else if (child.localName = 'defaultValueParameterDefinition') then
        value.defaultValue := ParseParameterDefinition(child, path+'/defaultValueParameterDefinition') {L891}
      else if (child.localName = 'defaultValueRelatedArtifact') then
        value.defaultValue := ParseRelatedArtifact(child, path+'/defaultValueRelatedArtifact') {L891}
      else if (child.localName = 'defaultValueTriggerDefinition') then
        value.defaultValue := ParseTriggerDefinition(child, path+'/defaultValueTriggerDefinition') {L891}
      else if (child.localName = 'defaultValueUsageContext') then
        value.defaultValue := ParseUsageContext(child, path+'/defaultValueUsageContext') {L891}
      else if (child.localName = 'defaultValueDosage') then
        value.defaultValue := ParseDosage(child, path+'/defaultValueDosage') {L891}
      else if (child.localName = 'defaultValueMeta') then
        value.defaultValue := ParseMeta(child, path+'/defaultValueMeta') {L891}
      else if (child.localName = 'defaultValueBase64Binary') then
        value.defaultValue := ParseBase64Binary(child, path+'/defaultValueBase64Binary') {L891}
      else if (child.localName = 'defaultValueBoolean') then
        value.defaultValue := ParseBoolean(child, path+'/defaultValueBoolean') {L891}
      else if (child.localName = 'defaultValueDate') then
        value.defaultValue := ParseDate(child, path+'/defaultValueDate') {L891}
      else if (child.localName = 'defaultValueDateTime') then
        value.defaultValue := ParseDateTime(child, path+'/defaultValueDateTime') {L891}
      else if (child.localName = 'defaultValueDecimal') then
        value.defaultValue := ParseDecimal(child, path+'/defaultValueDecimal') {L891}
      else if (child.localName = 'defaultValueInstant') then
        value.defaultValue := ParseInstant(child, path+'/defaultValueInstant') {L891}
      else if (child.localName = 'defaultValueInteger') then
        value.defaultValue := ParseInteger(child, path+'/defaultValueInteger') {L891}
      else if (child.localName = 'defaultValueInteger64') then
        value.defaultValue := ParseInteger64(child, path+'/defaultValueInteger64') {L891}
      else if (child.localName = 'defaultValueString') then
        value.defaultValue := ParseString(child, path+'/defaultValueString') {L891}
      else if (child.localName = 'defaultValueTime') then
        value.defaultValue := ParseTime(child, path+'/defaultValueTime') {L891}
      else if (child.localName = 'defaultValueUri') then
        value.defaultValue := ParseUri(child, path+'/defaultValueUri') {L891}
      else if (child.localName = 'meaningWhenMissing') then
        value.meaningWhenMissingElement := ParseMarkdown(child, path+'/meaningWhenMissing') {L737}
      else if (child.localName = 'orderMeaning') then
        value.orderMeaningElement := ParseString(child, path+'/orderMeaning') {L737}
      else if (child.localName = 'fixedCanonical') then
        value.fixed := ParseCanonical(child, path+'/fixedCanonical') {L891}
      else if (child.localName = 'fixedCode') then
        value.fixed := ParseCode(child, path+'/fixedCode') {L891}
      else if (child.localName = 'fixedId') then
        value.fixed := ParseId(child, path+'/fixedId') {L891}
      else if (child.localName = 'fixedMarkdown') then
        value.fixed := ParseMarkdown(child, path+'/fixedMarkdown') {L891}
      else if (child.localName = 'fixedOid') then
        value.fixed := ParseOid(child, path+'/fixedOid') {L891}
      else if (child.localName = 'fixedPositiveInt') then
        value.fixed := ParsePositiveInt(child, path+'/fixedPositiveInt') {L891}
      else if (child.localName = 'fixedUnsignedInt') then
        value.fixed := ParseUnsignedInt(child, path+'/fixedUnsignedInt') {L891}
      else if (child.localName = 'fixedUrl') then
        value.fixed := ParseUrl(child, path+'/fixedUrl') {L891}
      else if (child.localName = 'fixedUuid') then
        value.fixed := ParseUuid(child, path+'/fixedUuid') {L891}
      else if (child.localName = 'fixedAddress') then
        value.fixed := ParseAddress(child, path+'/fixedAddress') {L891}
      else if (child.localName = 'fixedAge') then
        value.fixed := ParseAge(child, path+'/fixedAge') {L891}
      else if (child.localName = 'fixedAnnotation') then
        value.fixed := ParseAnnotation(child, path+'/fixedAnnotation') {L891}
      else if (child.localName = 'fixedAttachment') then
        value.fixed := ParseAttachment(child, path+'/fixedAttachment') {L891}
      else if (child.localName = 'fixedCodeableConcept') then
        value.fixed := ParseCodeableConcept(child, path+'/fixedCodeableConcept') {L891}
      else if (child.localName = 'fixedCoding') then
        value.fixed := ParseCoding(child, path+'/fixedCoding') {L891}
      else if (child.localName = 'fixedContactPoint') then
        value.fixed := ParseContactPoint(child, path+'/fixedContactPoint') {L891}
      else if (child.localName = 'fixedCount') then
        value.fixed := ParseCount(child, path+'/fixedCount') {L891}
      else if (child.localName = 'fixedDistance') then
        value.fixed := ParseDistance(child, path+'/fixedDistance') {L891}
      else if (child.localName = 'fixedDuration') then
        value.fixed := ParseDuration(child, path+'/fixedDuration') {L891}
      else if (child.localName = 'fixedHumanName') then
        value.fixed := ParseHumanName(child, path+'/fixedHumanName') {L891}
      else if (child.localName = 'fixedIdentifier') then
        value.fixed := ParseIdentifier(child, path+'/fixedIdentifier') {L891}
      else if (child.localName = 'fixedMoney') then
        value.fixed := ParseMoney(child, path+'/fixedMoney') {L891}
      else if (child.localName = 'fixedPeriod') then
        value.fixed := ParsePeriod(child, path+'/fixedPeriod') {L891}
      else if (child.localName = 'fixedQuantity') then
        value.fixed := ParseQuantity(child, path+'/fixedQuantity') {L891}
      else if (child.localName = 'fixedRange') then
        value.fixed := ParseRange(child, path+'/fixedRange') {L891}
      else if (child.localName = 'fixedRatio') then
        value.fixed := ParseRatio(child, path+'/fixedRatio') {L891}
      else if (child.localName = 'fixedReference') then
        value.fixed := ParseReference(child, path+'/fixedReference') {L891}
      else if (child.localName = 'fixedSampledData') then
        value.fixed := ParseSampledData(child, path+'/fixedSampledData') {L891}
      else if (child.localName = 'fixedSignature') then
        value.fixed := ParseSignature(child, path+'/fixedSignature') {L891}
      else if (child.localName = 'fixedTiming') then
        value.fixed := ParseTiming(child, path+'/fixedTiming') {L891}
      else if (child.localName = 'fixedContactDetail') then
        value.fixed := ParseContactDetail(child, path+'/fixedContactDetail') {L891}
      else if (child.localName = 'fixedContributor') then
        value.fixed := ParseContributor(child, path+'/fixedContributor') {L891}
      else if (child.localName = 'fixedDataRequirement') then
        value.fixed := ParseDataRequirement(child, path+'/fixedDataRequirement') {L891}
      else if (child.localName = 'fixedExpression') then
        value.fixed := ParseExpression(child, path+'/fixedExpression') {L891}
      else if (child.localName = 'fixedParameterDefinition') then
        value.fixed := ParseParameterDefinition(child, path+'/fixedParameterDefinition') {L891}
      else if (child.localName = 'fixedRelatedArtifact') then
        value.fixed := ParseRelatedArtifact(child, path+'/fixedRelatedArtifact') {L891}
      else if (child.localName = 'fixedTriggerDefinition') then
        value.fixed := ParseTriggerDefinition(child, path+'/fixedTriggerDefinition') {L891}
      else if (child.localName = 'fixedUsageContext') then
        value.fixed := ParseUsageContext(child, path+'/fixedUsageContext') {L891}
      else if (child.localName = 'fixedDosage') then
        value.fixed := ParseDosage(child, path+'/fixedDosage') {L891}
      else if (child.localName = 'fixedMeta') then
        value.fixed := ParseMeta(child, path+'/fixedMeta') {L891}
      else if (child.localName = 'fixedBase64Binary') then
        value.fixed := ParseBase64Binary(child, path+'/fixedBase64Binary') {L891}
      else if (child.localName = 'fixedBoolean') then
        value.fixed := ParseBoolean(child, path+'/fixedBoolean') {L891}
      else if (child.localName = 'fixedDate') then
        value.fixed := ParseDate(child, path+'/fixedDate') {L891}
      else if (child.localName = 'fixedDateTime') then
        value.fixed := ParseDateTime(child, path+'/fixedDateTime') {L891}
      else if (child.localName = 'fixedDecimal') then
        value.fixed := ParseDecimal(child, path+'/fixedDecimal') {L891}
      else if (child.localName = 'fixedInstant') then
        value.fixed := ParseInstant(child, path+'/fixedInstant') {L891}
      else if (child.localName = 'fixedInteger') then
        value.fixed := ParseInteger(child, path+'/fixedInteger') {L891}
      else if (child.localName = 'fixedInteger64') then
        value.fixed := ParseInteger64(child, path+'/fixedInteger64') {L891}
      else if (child.localName = 'fixedString') then
        value.fixed := ParseString(child, path+'/fixedString') {L891}
      else if (child.localName = 'fixedTime') then
        value.fixed := ParseTime(child, path+'/fixedTime') {L891}
      else if (child.localName = 'fixedUri') then
        value.fixed := ParseUri(child, path+'/fixedUri') {L891}
      else if (child.localName = 'patternCanonical') then
        value.pattern := ParseCanonical(child, path+'/patternCanonical') {L891}
      else if (child.localName = 'patternCode') then
        value.pattern := ParseCode(child, path+'/patternCode') {L891}
      else if (child.localName = 'patternId') then
        value.pattern := ParseId(child, path+'/patternId') {L891}
      else if (child.localName = 'patternMarkdown') then
        value.pattern := ParseMarkdown(child, path+'/patternMarkdown') {L891}
      else if (child.localName = 'patternOid') then
        value.pattern := ParseOid(child, path+'/patternOid') {L891}
      else if (child.localName = 'patternPositiveInt') then
        value.pattern := ParsePositiveInt(child, path+'/patternPositiveInt') {L891}
      else if (child.localName = 'patternUnsignedInt') then
        value.pattern := ParseUnsignedInt(child, path+'/patternUnsignedInt') {L891}
      else if (child.localName = 'patternUrl') then
        value.pattern := ParseUrl(child, path+'/patternUrl') {L891}
      else if (child.localName = 'patternUuid') then
        value.pattern := ParseUuid(child, path+'/patternUuid') {L891}
      else if (child.localName = 'patternAddress') then
        value.pattern := ParseAddress(child, path+'/patternAddress') {L891}
      else if (child.localName = 'patternAge') then
        value.pattern := ParseAge(child, path+'/patternAge') {L891}
      else if (child.localName = 'patternAnnotation') then
        value.pattern := ParseAnnotation(child, path+'/patternAnnotation') {L891}
      else if (child.localName = 'patternAttachment') then
        value.pattern := ParseAttachment(child, path+'/patternAttachment') {L891}
      else if (child.localName = 'patternCodeableConcept') then
        value.pattern := ParseCodeableConcept(child, path+'/patternCodeableConcept') {L891}
      else if (child.localName = 'patternCoding') then
        value.pattern := ParseCoding(child, path+'/patternCoding') {L891}
      else if (child.localName = 'patternContactPoint') then
        value.pattern := ParseContactPoint(child, path+'/patternContactPoint') {L891}
      else if (child.localName = 'patternCount') then
        value.pattern := ParseCount(child, path+'/patternCount') {L891}
      else if (child.localName = 'patternDistance') then
        value.pattern := ParseDistance(child, path+'/patternDistance') {L891}
      else if (child.localName = 'patternDuration') then
        value.pattern := ParseDuration(child, path+'/patternDuration') {L891}
      else if (child.localName = 'patternHumanName') then
        value.pattern := ParseHumanName(child, path+'/patternHumanName') {L891}
      else if (child.localName = 'patternIdentifier') then
        value.pattern := ParseIdentifier(child, path+'/patternIdentifier') {L891}
      else if (child.localName = 'patternMoney') then
        value.pattern := ParseMoney(child, path+'/patternMoney') {L891}
      else if (child.localName = 'patternPeriod') then
        value.pattern := ParsePeriod(child, path+'/patternPeriod') {L891}
      else if (child.localName = 'patternQuantity') then
        value.pattern := ParseQuantity(child, path+'/patternQuantity') {L891}
      else if (child.localName = 'patternRange') then
        value.pattern := ParseRange(child, path+'/patternRange') {L891}
      else if (child.localName = 'patternRatio') then
        value.pattern := ParseRatio(child, path+'/patternRatio') {L891}
      else if (child.localName = 'patternReference') then
        value.pattern := ParseReference(child, path+'/patternReference') {L891}
      else if (child.localName = 'patternSampledData') then
        value.pattern := ParseSampledData(child, path+'/patternSampledData') {L891}
      else if (child.localName = 'patternSignature') then
        value.pattern := ParseSignature(child, path+'/patternSignature') {L891}
      else if (child.localName = 'patternTiming') then
        value.pattern := ParseTiming(child, path+'/patternTiming') {L891}
      else if (child.localName = 'patternContactDetail') then
        value.pattern := ParseContactDetail(child, path+'/patternContactDetail') {L891}
      else if (child.localName = 'patternContributor') then
        value.pattern := ParseContributor(child, path+'/patternContributor') {L891}
      else if (child.localName = 'patternDataRequirement') then
        value.pattern := ParseDataRequirement(child, path+'/patternDataRequirement') {L891}
      else if (child.localName = 'patternExpression') then
        value.pattern := ParseExpression(child, path+'/patternExpression') {L891}
      else if (child.localName = 'patternParameterDefinition') then
        value.pattern := ParseParameterDefinition(child, path+'/patternParameterDefinition') {L891}
      else if (child.localName = 'patternRelatedArtifact') then
        value.pattern := ParseRelatedArtifact(child, path+'/patternRelatedArtifact') {L891}
      else if (child.localName = 'patternTriggerDefinition') then
        value.pattern := ParseTriggerDefinition(child, path+'/patternTriggerDefinition') {L891}
      else if (child.localName = 'patternUsageContext') then
        value.pattern := ParseUsageContext(child, path+'/patternUsageContext') {L891}
      else if (child.localName = 'patternDosage') then
        value.pattern := ParseDosage(child, path+'/patternDosage') {L891}
      else if (child.localName = 'patternMeta') then
        value.pattern := ParseMeta(child, path+'/patternMeta') {L891}
      else if (child.localName = 'patternBase64Binary') then
        value.pattern := ParseBase64Binary(child, path+'/patternBase64Binary') {L891}
      else if (child.localName = 'patternBoolean') then
        value.pattern := ParseBoolean(child, path+'/patternBoolean') {L891}
      else if (child.localName = 'patternDate') then
        value.pattern := ParseDate(child, path+'/patternDate') {L891}
      else if (child.localName = 'patternDateTime') then
        value.pattern := ParseDateTime(child, path+'/patternDateTime') {L891}
      else if (child.localName = 'patternDecimal') then
        value.pattern := ParseDecimal(child, path+'/patternDecimal') {L891}
      else if (child.localName = 'patternInstant') then
        value.pattern := ParseInstant(child, path+'/patternInstant') {L891}
      else if (child.localName = 'patternInteger') then
        value.pattern := ParseInteger(child, path+'/patternInteger') {L891}
      else if (child.localName = 'patternInteger64') then
        value.pattern := ParseInteger64(child, path+'/patternInteger64') {L891}
      else if (child.localName = 'patternString') then
        value.pattern := ParseString(child, path+'/patternString') {L891}
      else if (child.localName = 'patternTime') then
        value.pattern := ParseTime(child, path+'/patternTime') {L891}
      else if (child.localName = 'patternUri') then
        value.pattern := ParseUri(child, path+'/patternUri') {L891}
      else if (child.localName = 'example') then
        value.exampleList.Add(ParseElementDefinitionExample(child, path+'/example')) {L631}
      else if (child.localName = 'minValuePositiveInt') then
        value.minValue := ParsePositiveInt(child, path+'/minValuePositiveInt') {L891}
      else if (child.localName = 'minValueUnsignedInt') then
        value.minValue := ParseUnsignedInt(child, path+'/minValueUnsignedInt') {L891}
      else if (child.localName = 'minValueQuantity') then
        value.minValue := ParseQuantity(child, path+'/minValueQuantity') {L891}
      else if (child.localName = 'minValueDate') then
        value.minValue := ParseDate(child, path+'/minValueDate') {L891}
      else if (child.localName = 'minValueDateTime') then
        value.minValue := ParseDateTime(child, path+'/minValueDateTime') {L891}
      else if (child.localName = 'minValueInstant') then
        value.minValue := ParseInstant(child, path+'/minValueInstant') {L891}
      else if (child.localName = 'minValueTime') then
        value.minValue := ParseTime(child, path+'/minValueTime') {L891}
      else if (child.localName = 'minValueDecimal') then
        value.minValue := ParseDecimal(child, path+'/minValueDecimal') {L891}
      else if (child.localName = 'minValueInteger') then
        value.minValue := ParseInteger(child, path+'/minValueInteger') {L891}
      else if (child.localName = 'minValueInteger64') then
        value.minValue := ParseInteger64(child, path+'/minValueInteger64') {L891}
      else if (child.localName = 'maxValuePositiveInt') then
        value.maxValue := ParsePositiveInt(child, path+'/maxValuePositiveInt') {L891}
      else if (child.localName = 'maxValueUnsignedInt') then
        value.maxValue := ParseUnsignedInt(child, path+'/maxValueUnsignedInt') {L891}
      else if (child.localName = 'maxValueQuantity') then
        value.maxValue := ParseQuantity(child, path+'/maxValueQuantity') {L891}
      else if (child.localName = 'maxValueDate') then
        value.maxValue := ParseDate(child, path+'/maxValueDate') {L891}
      else if (child.localName = 'maxValueDateTime') then
        value.maxValue := ParseDateTime(child, path+'/maxValueDateTime') {L891}
      else if (child.localName = 'maxValueInstant') then
        value.maxValue := ParseInstant(child, path+'/maxValueInstant') {L891}
      else if (child.localName = 'maxValueTime') then
        value.maxValue := ParseTime(child, path+'/maxValueTime') {L891}
      else if (child.localName = 'maxValueDecimal') then
        value.maxValue := ParseDecimal(child, path+'/maxValueDecimal') {L891}
      else if (child.localName = 'maxValueInteger') then
        value.maxValue := ParseInteger(child, path+'/maxValueInteger') {L891}
      else if (child.localName = 'maxValueInteger64') then
        value.maxValue := ParseInteger64(child, path+'/maxValueInteger64') {L891}
      else if (child.localName = 'maxLength') then
        value.maxLengthElement := ParseInteger(child, path+'/maxLength') {L737}
      else if (child.localName = 'condition') then
        value.conditionList.Add(ParseId(child, path+'/condition')) {L631}
      else if (child.localName = 'constraint') then
        value.constraintList.Add(ParseElementDefinitionConstraint(child, path+'/constraint')) {L631}
      else if (child.localName = 'mustSupport') then
        value.mustSupportElement := ParseBoolean(child, path+'/mustSupport') {L737}
      else if (child.localName = 'isModifier') then
        value.isModifierElement := ParseBoolean(child, path+'/isModifier') {L737}
      else if (child.localName = 'isModifierReason') then
        value.isModifierReasonElement := ParseString(child, path+'/isModifierReason') {L737}
      else if (child.localName = 'isSummary') then
        value.isSummaryElement := ParseBoolean(child, path+'/isSummary') {L737}
      else if (child.localName = 'binding') then
        value.binding := ParseElementDefinitionBinding(child, path+'/binding') {L740}
      else if (child.localName = 'mapping') then
        value.mappingList.Add(ParseElementDefinitionMapping(child, path+'/mapping')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeElementDefinition(xml : TXmlBuilder; name : String; value : TFhirElementDefinition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeElementDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeElementDefinitionChildren(xml : TXmlBuilder; value : TFhirElementDefinition);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.representationList.Count - 1 do
      ComposeEnum(xml, 'representation', value.representationList[i], CODES_TFhirPropertyRepresentationEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'sliceName', value.sliceNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'sliceIsConstraining', value.sliceIsConstrainingElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'label', value.label_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeElementDefinitionSlicing(xml, 'slicing', value.slicing); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'short', value.shortElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'definition', value.definitionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'requirements', value.requirementsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.aliasList.Count - 1 do
      ComposeString(xml, 'alias', value.aliasList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'min', value.minElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'max', value.maxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeElementDefinitionBase(xml, 'base', value.base); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'contentReference', value.contentReferenceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeElementDefinitionType(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'defaultValueCanonical', TFhirCanonical(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCode) {6} then
    ComposeCode(xml, 'defaultValueCode', TFhirCode(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirId) {6} then
    ComposeId(xml, 'defaultValueId', TFhirId(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'defaultValueMarkdown', TFhirMarkdown(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirOid) {6} then
    ComposeOid(xml, 'defaultValueOid', TFhirOid(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'defaultValuePositiveInt', TFhirPositiveInt(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'defaultValueUnsignedInt', TFhirUnsignedInt(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUrl) {6} then
    ComposeUrl(xml, 'defaultValueUrl', TFhirUrl(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUuid) {6} then
    ComposeUuid(xml, 'defaultValueUuid', TFhirUuid(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAddress) {6} then
    ComposeAddress(xml, 'defaultValueAddress', TFhirAddress(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAge) {6} then
    ComposeAge(xml, 'defaultValueAge', TFhirAge(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'defaultValueAnnotation', TFhirAnnotation(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'defaultValueAttachment', TFhirAttachment(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'defaultValueCodeableConcept', TFhirCodeableConcept(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCoding) {6} then
    ComposeCoding(xml, 'defaultValueCoding', TFhirCoding(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'defaultValueContactPoint', TFhirContactPoint(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCount) {6} then
    ComposeCount(xml, 'defaultValueCount', TFhirCount(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDistance) {6} then
    ComposeDistance(xml, 'defaultValueDistance', TFhirDistance(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDuration) {6} then
    ComposeDuration(xml, 'defaultValueDuration', TFhirDuration(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'defaultValueHumanName', TFhirHumanName(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'defaultValueIdentifier', TFhirIdentifier(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMoney) {6} then
    ComposeMoney(xml, 'defaultValueMoney', TFhirMoney(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPeriod) {6} then
    ComposePeriod(xml, 'defaultValuePeriod', TFhirPeriod(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'defaultValueQuantity', TFhirQuantity(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRange) {6} then
    ComposeRange(xml, 'defaultValueRange', TFhirRange(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRatio) {6} then
    ComposeRatio(xml, 'defaultValueRatio', TFhirRatio(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirReference) {6} then
    ComposeReference(xml, 'defaultValueReference', TFhirReference(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'defaultValueSampledData', TFhirSampledData(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSignature) {6} then
    ComposeSignature(xml, 'defaultValueSignature', TFhirSignature(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTiming) {6} then
    ComposeTiming(xml, 'defaultValueTiming', TFhirTiming(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'defaultValueContactDetail', TFhirContactDetail(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContributor) {6} then
    ComposeContributor(xml, 'defaultValueContributor', TFhirContributor(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'defaultValueDataRequirement', TFhirDataRequirement(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirExpression) {6} then
    ComposeExpression(xml, 'defaultValueExpression', TFhirExpression(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'defaultValueParameterDefinition', TFhirParameterDefinition(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'defaultValueUsageContext', TFhirUsageContext(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDosage) {6} then
    ComposeDosage(xml, 'defaultValueDosage', TFhirDosage(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMeta) {6} then
    ComposeMeta(xml, 'defaultValueMeta', TFhirMeta(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'defaultValueBase64Binary', TFhirBase64Binary(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'defaultValueBoolean', TFhirBoolean(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDate) {6} then
    ComposeDate(xml, 'defaultValueDate', TFhirDate(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'defaultValueDateTime', TFhirDateTime(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'defaultValueDecimal', TFhirDecimal(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'defaultValueInstant', TFhirInstant(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'defaultValueInteger', TFhirInteger(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'defaultValueInteger64', TFhirInteger64(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirString) {6} then
    ComposeString(xml, 'defaultValueString', TFhirString(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTime) {6} then
    ComposeTime(xml, 'defaultValueTime', TFhirTime(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUri) {6} then
    ComposeUri(xml, 'defaultValueUri', TFhirUri(value.defaultValue));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'meaningWhenMissing', value.meaningWhenMissingElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'orderMeaning', value.orderMeaningElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'fixedCanonical', TFhirCanonical(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCode) {6} then
    ComposeCode(xml, 'fixedCode', TFhirCode(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirId) {6} then
    ComposeId(xml, 'fixedId', TFhirId(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'fixedMarkdown', TFhirMarkdown(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirOid) {6} then
    ComposeOid(xml, 'fixedOid', TFhirOid(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'fixedPositiveInt', TFhirPositiveInt(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'fixedUnsignedInt', TFhirUnsignedInt(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUrl) {6} then
    ComposeUrl(xml, 'fixedUrl', TFhirUrl(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUuid) {6} then
    ComposeUuid(xml, 'fixedUuid', TFhirUuid(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAddress) {6} then
    ComposeAddress(xml, 'fixedAddress', TFhirAddress(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAge) {6} then
    ComposeAge(xml, 'fixedAge', TFhirAge(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'fixedAnnotation', TFhirAnnotation(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'fixedAttachment', TFhirAttachment(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'fixedCodeableConcept', TFhirCodeableConcept(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCoding) {6} then
    ComposeCoding(xml, 'fixedCoding', TFhirCoding(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'fixedContactPoint', TFhirContactPoint(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirCount) {6} then
    ComposeCount(xml, 'fixedCount', TFhirCount(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDistance) {6} then
    ComposeDistance(xml, 'fixedDistance', TFhirDistance(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDuration) {6} then
    ComposeDuration(xml, 'fixedDuration', TFhirDuration(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'fixedHumanName', TFhirHumanName(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'fixedIdentifier', TFhirIdentifier(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirMoney) {6} then
    ComposeMoney(xml, 'fixedMoney', TFhirMoney(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirPeriod) {6} then
    ComposePeriod(xml, 'fixedPeriod', TFhirPeriod(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'fixedQuantity', TFhirQuantity(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRange) {6} then
    ComposeRange(xml, 'fixedRange', TFhirRange(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRatio) {6} then
    ComposeRatio(xml, 'fixedRatio', TFhirRatio(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirReference) {6} then
    ComposeReference(xml, 'fixedReference', TFhirReference(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'fixedSampledData', TFhirSampledData(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirSignature) {6} then
    ComposeSignature(xml, 'fixedSignature', TFhirSignature(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirTiming) {6} then
    ComposeTiming(xml, 'fixedTiming', TFhirTiming(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'fixedContactDetail', TFhirContactDetail(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirContributor) {6} then
    ComposeContributor(xml, 'fixedContributor', TFhirContributor(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'fixedDataRequirement', TFhirDataRequirement(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirExpression) {6} then
    ComposeExpression(xml, 'fixedExpression', TFhirExpression(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'fixedParameterDefinition', TFhirParameterDefinition(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'fixedRelatedArtifact', TFhirRelatedArtifact(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'fixedTriggerDefinition', TFhirTriggerDefinition(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'fixedUsageContext', TFhirUsageContext(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDosage) {6} then
    ComposeDosage(xml, 'fixedDosage', TFhirDosage(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirMeta) {6} then
    ComposeMeta(xml, 'fixedMeta', TFhirMeta(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'fixedBase64Binary', TFhirBase64Binary(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'fixedBoolean', TFhirBoolean(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDate) {6} then
    ComposeDate(xml, 'fixedDate', TFhirDate(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'fixedDateTime', TFhirDateTime(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'fixedDecimal', TFhirDecimal(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirInstant) {6} then
    ComposeInstant(xml, 'fixedInstant', TFhirInstant(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirInteger) {6} then
    ComposeInteger(xml, 'fixedInteger', TFhirInteger(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'fixedInteger64', TFhirInteger64(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirString) {6} then
    ComposeString(xml, 'fixedString', TFhirString(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirTime) {6} then
    ComposeTime(xml, 'fixedTime', TFhirTime(value.fixed))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fixed is TFhirUri) {6} then
    ComposeUri(xml, 'fixedUri', TFhirUri(value.fixed));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'patternCanonical', TFhirCanonical(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCode) {6} then
    ComposeCode(xml, 'patternCode', TFhirCode(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirId) {6} then
    ComposeId(xml, 'patternId', TFhirId(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'patternMarkdown', TFhirMarkdown(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirOid) {6} then
    ComposeOid(xml, 'patternOid', TFhirOid(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'patternPositiveInt', TFhirPositiveInt(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'patternUnsignedInt', TFhirUnsignedInt(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUrl) {6} then
    ComposeUrl(xml, 'patternUrl', TFhirUrl(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUuid) {6} then
    ComposeUuid(xml, 'patternUuid', TFhirUuid(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAddress) {6} then
    ComposeAddress(xml, 'patternAddress', TFhirAddress(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAge) {6} then
    ComposeAge(xml, 'patternAge', TFhirAge(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'patternAnnotation', TFhirAnnotation(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'patternAttachment', TFhirAttachment(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'patternCodeableConcept', TFhirCodeableConcept(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCoding) {6} then
    ComposeCoding(xml, 'patternCoding', TFhirCoding(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'patternContactPoint', TFhirContactPoint(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirCount) {6} then
    ComposeCount(xml, 'patternCount', TFhirCount(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDistance) {6} then
    ComposeDistance(xml, 'patternDistance', TFhirDistance(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDuration) {6} then
    ComposeDuration(xml, 'patternDuration', TFhirDuration(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'patternHumanName', TFhirHumanName(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'patternIdentifier', TFhirIdentifier(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirMoney) {6} then
    ComposeMoney(xml, 'patternMoney', TFhirMoney(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirPeriod) {6} then
    ComposePeriod(xml, 'patternPeriod', TFhirPeriod(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'patternQuantity', TFhirQuantity(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRange) {6} then
    ComposeRange(xml, 'patternRange', TFhirRange(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRatio) {6} then
    ComposeRatio(xml, 'patternRatio', TFhirRatio(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirReference) {6} then
    ComposeReference(xml, 'patternReference', TFhirReference(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'patternSampledData', TFhirSampledData(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirSignature) {6} then
    ComposeSignature(xml, 'patternSignature', TFhirSignature(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirTiming) {6} then
    ComposeTiming(xml, 'patternTiming', TFhirTiming(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'patternContactDetail', TFhirContactDetail(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirContributor) {6} then
    ComposeContributor(xml, 'patternContributor', TFhirContributor(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'patternDataRequirement', TFhirDataRequirement(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirExpression) {6} then
    ComposeExpression(xml, 'patternExpression', TFhirExpression(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'patternParameterDefinition', TFhirParameterDefinition(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'patternRelatedArtifact', TFhirRelatedArtifact(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'patternTriggerDefinition', TFhirTriggerDefinition(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'patternUsageContext', TFhirUsageContext(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDosage) {6} then
    ComposeDosage(xml, 'patternDosage', TFhirDosage(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirMeta) {6} then
    ComposeMeta(xml, 'patternMeta', TFhirMeta(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'patternBase64Binary', TFhirBase64Binary(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'patternBoolean', TFhirBoolean(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDate) {6} then
    ComposeDate(xml, 'patternDate', TFhirDate(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'patternDateTime', TFhirDateTime(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'patternDecimal', TFhirDecimal(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirInstant) {6} then
    ComposeInstant(xml, 'patternInstant', TFhirInstant(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirInteger) {6} then
    ComposeInteger(xml, 'patternInteger', TFhirInteger(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'patternInteger64', TFhirInteger64(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirString) {6} then
    ComposeString(xml, 'patternString', TFhirString(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirTime) {6} then
    ComposeTime(xml, 'patternTime', TFhirTime(value.pattern))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.pattern is TFhirUri) {6} then
    ComposeUri(xml, 'patternUri', TFhirUri(value.pattern));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.exampleList.Count - 1 do
      ComposeElementDefinitionExample(xml, 'example', value.exampleList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'minValuePositiveInt', TFhirPositiveInt(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'minValueUnsignedInt', TFhirUnsignedInt(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'minValueQuantity', TFhirQuantity(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirDate) {6} then
    ComposeDate(xml, 'minValueDate', TFhirDate(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'minValueDateTime', TFhirDateTime(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'minValueInstant', TFhirInstant(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirTime) {6} then
    ComposeTime(xml, 'minValueTime', TFhirTime(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'minValueDecimal', TFhirDecimal(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'minValueInteger', TFhirInteger(value.minValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.minValue is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'minValueInteger64', TFhirInteger64(value.minValue));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'maxValuePositiveInt', TFhirPositiveInt(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'maxValueUnsignedInt', TFhirUnsignedInt(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'maxValueQuantity', TFhirQuantity(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirDate) {6} then
    ComposeDate(xml, 'maxValueDate', TFhirDate(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'maxValueDateTime', TFhirDateTime(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'maxValueInstant', TFhirInstant(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirTime) {6} then
    ComposeTime(xml, 'maxValueTime', TFhirTime(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'maxValueDecimal', TFhirDecimal(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'maxValueInteger', TFhirInteger(value.maxValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.maxValue is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'maxValueInteger64', TFhirInteger64(value.maxValue));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'maxLength', value.maxLengthElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.conditionList.Count - 1 do
      ComposeId(xml, 'condition', value.conditionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.constraintList.Count - 1 do
      ComposeElementDefinitionConstraint(xml, 'constraint', value.constraintList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'mustSupport', value.mustSupportElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isModifier', value.isModifierElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'isModifierReason', value.isModifierReasonElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isSummary', value.isSummaryElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeElementDefinitionBinding(xml, 'binding', value.binding); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.mappingList.Count - 1 do
      ComposeElementDefinitionMapping(xml, 'mapping', value.mappingList[i]);
end;

function TFHIRXmlParser.ParseMarketingStatus(element : TMXmlElement; path : string) : TFhirMarketingStatus;
var
  child : TMXmlElement;
begin
  result := TFhirMarketingStatus.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMarketingStatusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMarketingStatusChild(value : TFhirMarketingStatus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'country') then
        value.country := ParseCodeableConcept(child, path+'/country') {L740}
      else if (child.localName = 'jurisdiction') then
        value.jurisdiction := ParseCodeableConcept(child, path+'/jurisdiction') {L740}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'dateRange') then
        value.dateRange := ParsePeriod(child, path+'/dateRange') {L740}
      else if (child.localName = 'restoreDate') then
        value.restoreDateElement := ParseDateTime(child, path+'/restoreDate') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMarketingStatus(xml : TXmlBuilder; name : String; value : TFhirMarketingStatus);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMarketingStatusChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMarketingStatusChildren(xml : TXmlBuilder; value : TFhirMarketingStatus);
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'country', value.country); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdiction); {L741}
  ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'dateRange', value.dateRange); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'restoreDate', value.restoreDateElement); {L738}
end;

function TFHIRXmlParser.ParseOrderedDistributionInterval(element : TMXmlElement; path : string) : TFhirOrderedDistributionInterval;
var
  child : TMXmlElement;
begin
  result := TFhirOrderedDistributionInterval.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrderedDistributionIntervalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrderedDistributionIntervalChild(value : TFhirOrderedDistributionInterval; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'rankOrder') then
        value.rankOrderElement := ParseInteger(child, path+'/rankOrder') {L737}
      else if (child.localName = 'intervalStatistic') then
        value.intervalStatisticList.Add(ParseStatistic(child, path+'/intervalStatistic')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrderedDistributionInterval(xml : TXmlBuilder; name : String; value : TFhirOrderedDistributionInterval);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOrderedDistributionIntervalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOrderedDistributionIntervalChildren(xml : TXmlBuilder; value : TFhirOrderedDistributionInterval);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  ComposeInteger(xml, 'rankOrder', value.rankOrderElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.intervalStatisticList.Count - 1 do
      ComposeStatistic(xml, 'intervalStatistic', value.intervalStatisticList[i]);
end;

function TFHIRXmlParser.ParseOrderedDistribution(element : TMXmlElement; path : string) : TFhirOrderedDistribution;
var
  child : TMXmlElement;
begin
  result := TFhirOrderedDistribution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrderedDistributionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrderedDistributionChild(value : TFhirOrderedDistribution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'numberOfIntervals') then
        value.numberOfIntervalsElement := ParseInteger(child, path+'/numberOfIntervals') {L737}
      else if (child.localName = 'bottomOfFirstInterval') then
        value.bottomOfFirstInterval := ParseQuantity(child, path+'/bottomOfFirstInterval') {L740}
      else if (child.localName = 'interval') then
        value.intervalList.Add(ParseOrderedDistributionInterval(child, path+'/interval')) {L631}
      else if (child.localName = 'topOfInterval') then
        value.topOfInterval := ParseQuantity(child, path+'/topOfInterval') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrderedDistribution(xml : TXmlBuilder; name : String; value : TFhirOrderedDistribution);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOrderedDistributionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOrderedDistributionChildren(xml : TXmlBuilder; value : TFhirOrderedDistribution);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  ComposeInteger(xml, 'numberOfIntervals', value.numberOfIntervalsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'bottomOfFirstInterval', value.bottomOfFirstInterval); {L741}
  for i := 0 to value.intervalList.Count - 1 do
      ComposeOrderedDistributionInterval(xml, 'interval', value.intervalList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'topOfInterval', value.topOfInterval); {L741}
end;

function TFHIRXmlParser.ParsePopulation(element : TMXmlElement; path : string) : TFhirPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePopulationChild(value : TFhirPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'ageRange') then
        value.age := ParseRange(child, path+'/ageRange') {L891}
      else if (child.localName = 'ageCodeableConcept') then
        value.age := ParseCodeableConcept(child, path+'/ageCodeableConcept') {L891}
      else if (child.localName = 'gender') then
        value.gender := ParseCodeableConcept(child, path+'/gender') {L740}
      else if (child.localName = 'race') then
        value.race := ParseCodeableConcept(child, path+'/race') {L740}
      else if (child.localName = 'physiologicalCondition') then
        value.physiologicalCondition := ParseCodeableConcept(child, path+'/physiologicalCondition') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePopulation(xml : TXmlBuilder; name : String; value : TFhirPopulation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePopulationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePopulationChildren(xml : TXmlBuilder; value : TFhirPopulation);
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirRange) {6} then
    ComposeRange(xml, 'ageRange', TFhirRange(value.age))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'ageCodeableConcept', TFhirCodeableConcept(value.age));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'gender', value.gender); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'race', value.race); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'physiologicalCondition', value.physiologicalCondition); {L741}
end;

function TFHIRXmlParser.ParseProdCharacteristic(element : TMXmlElement; path : string) : TFhirProdCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirProdCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProdCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProdCharacteristicChild(value : TFhirProdCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'height') then
        value.height := ParseQuantity(child, path+'/height') {L740}
      else if (child.localName = 'width') then
        value.width := ParseQuantity(child, path+'/width') {L740}
      else if (child.localName = 'depth') then
        value.depth := ParseQuantity(child, path+'/depth') {L740}
      else if (child.localName = 'weight') then
        value.weight := ParseQuantity(child, path+'/weight') {L740}
      else if (child.localName = 'nominalVolume') then
        value.nominalVolume := ParseQuantity(child, path+'/nominalVolume') {L740}
      else if (child.localName = 'externalDiameter') then
        value.externalDiameter := ParseQuantity(child, path+'/externalDiameter') {L740}
      else if (child.localName = 'shape') then
        value.shapeElement := ParseString(child, path+'/shape') {L737}
      else if (child.localName = 'color') then
        value.colorList.Add(ParseString(child, path+'/color')) {L631}
      else if (child.localName = 'imprint') then
        value.imprintList.Add(ParseString(child, path+'/imprint')) {L631}
      else if (child.localName = 'image') then
        value.imageList.Add(ParseAttachment(child, path+'/image')) {L631}
      else if (child.localName = 'scoring') then
        value.scoring := ParseCodeableConcept(child, path+'/scoring') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProdCharacteristic(xml : TXmlBuilder; name : String; value : TFhirProdCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProdCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProdCharacteristicChildren(xml : TXmlBuilder; value : TFhirProdCharacteristic);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'height', value.height); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'width', value.width); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'depth', value.depth); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'weight', value.weight); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'nominalVolume', value.nominalVolume); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'externalDiameter', value.externalDiameter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'shape', value.shapeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.colorList.Count - 1 do
      ComposeString(xml, 'color', value.colorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.imprintList.Count - 1 do
      ComposeString(xml, 'imprint', value.imprintList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.imageList.Count - 1 do
      ComposeAttachment(xml, 'image', value.imageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'scoring', value.scoring); {L741}
end;

function TFHIRXmlParser.ParseProductShelfLife(element : TMXmlElement; path : string) : TFhirProductShelfLife;
var
  child : TMXmlElement;
begin
  result := TFhirProductShelfLife.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProductShelfLifeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProductShelfLifeChild(value : TFhirProductShelfLife; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'periodQuantity') then
        value.period := ParseQuantity(child, path+'/periodQuantity') {L891}
      else if (child.localName = 'periodString') then
        value.period := ParseString(child, path+'/periodString') {L891}
      else if (child.localName = 'specialPrecautionsForStorage') then
        value.specialPrecautionsForStorageList.Add(ParseCodeableConcept(child, path+'/specialPrecautionsForStorage')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProductShelfLife(xml : TXmlBuilder; name : String; value : TFhirProductShelfLife);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProductShelfLifeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProductShelfLifeChildren(xml : TXmlBuilder; value : TFhirProductShelfLife);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.period is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'periodQuantity', TFhirQuantity(value.period))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.period is TFhirString) {6} then
    ComposeString(xml, 'periodString', TFhirString(value.period));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialPrecautionsForStorageList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialPrecautionsForStorage', value.specialPrecautionsForStorageList[i]);
end;

function TFHIRXmlParser.ParseStatisticSampleSize(element : TMXmlElement; path : string) : TFhirStatisticSampleSize;
var
  child : TMXmlElement;
begin
  result := TFhirStatisticSampleSize.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStatisticSampleSizeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStatisticSampleSizeChild(value : TFhirStatisticSampleSize; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'numberOfStudies') then
        value.numberOfStudiesElement := ParseInteger(child, path+'/numberOfStudies') {L737}
      else if (child.localName = 'numberOfParticipants') then
        value.numberOfParticipantsElement := ParseInteger(child, path+'/numberOfParticipants') {L737}
      else if (child.localName = 'knownDataCount') then
        value.knownDataCountElement := ParseInteger(child, path+'/knownDataCount') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStatisticSampleSize(xml : TXmlBuilder; name : String; value : TFhirStatisticSampleSize);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStatisticSampleSizeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStatisticSampleSizeChildren(xml : TXmlBuilder; value : TFhirStatisticSampleSize);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'numberOfStudies', value.numberOfStudiesElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'numberOfParticipants', value.numberOfParticipantsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'knownDataCount', value.knownDataCountElement); {L738}
end;

function TFHIRXmlParser.ParseStatisticAttributeEstimate(element : TMXmlElement; path : string) : TFhirStatisticAttributeEstimate;
var
  child : TMXmlElement;
begin
  result := TFhirStatisticAttributeEstimate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStatisticAttributeEstimateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStatisticAttributeEstimateChild(value : TFhirStatisticAttributeEstimate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'level') then
        value.levelElement := ParseDecimal(child, path+'/level') {L737}
      else if (child.localName = 'range') then
        value.range := ParseRange(child, path+'/range') {L740}
      else if (child.localName = 'attributeEstimate') then
        value.attributeEstimateList.Add(ParseStatisticAttributeEstimateAttributeEstimate(child, path+'/attributeEstimate')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStatisticAttributeEstimate(xml : TXmlBuilder; name : String; value : TFhirStatisticAttributeEstimate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStatisticAttributeEstimateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStatisticAttributeEstimateChildren(xml : TXmlBuilder; value : TFhirStatisticAttributeEstimate);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'level', value.levelElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRange(xml, 'range', value.range); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.attributeEstimateList.Count - 1 do
      ComposeStatisticAttributeEstimateAttributeEstimate(xml, 'attributeEstimate', value.attributeEstimateList[i]);
end;

function TFHIRXmlParser.ParseStatisticAttributeEstimateAttributeEstimate(element : TMXmlElement; path : string) : TFhirStatisticAttributeEstimateAttributeEstimate;
var
  child : TMXmlElement;
begin
  result := TFhirStatisticAttributeEstimateAttributeEstimate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStatisticAttributeEstimateAttributeEstimateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStatisticAttributeEstimateAttributeEstimateChild(value : TFhirStatisticAttributeEstimateAttributeEstimate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'level') then
        value.levelElement := ParseDecimal(child, path+'/level') {L737}
      else if (child.localName = 'range') then
        value.range := ParseRange(child, path+'/range') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStatisticAttributeEstimateAttributeEstimate(xml : TXmlBuilder; name : String; value : TFhirStatisticAttributeEstimateAttributeEstimate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStatisticAttributeEstimateAttributeEstimateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStatisticAttributeEstimateAttributeEstimateChildren(xml : TXmlBuilder; value : TFhirStatisticAttributeEstimateAttributeEstimate);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'level', value.levelElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRange(xml, 'range', value.range); {L741}
end;

function TFHIRXmlParser.ParseStatisticModelCharacteristic(element : TMXmlElement; path : string) : TFhirStatisticModelCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirStatisticModelCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStatisticModelCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStatisticModelCharacteristicChild(value : TFhirStatisticModelCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'variable') then
        value.variableList.Add(ParseStatisticModelCharacteristicVariable(child, path+'/variable')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStatisticModelCharacteristic(xml : TXmlBuilder; name : String; value : TFhirStatisticModelCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStatisticModelCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStatisticModelCharacteristicChildren(xml : TXmlBuilder; value : TFhirStatisticModelCharacteristic);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.variableList.Count - 1 do
      ComposeStatisticModelCharacteristicVariable(xml, 'variable', value.variableList[i]);
end;

function TFHIRXmlParser.ParseStatisticModelCharacteristicVariable(element : TMXmlElement; path : string) : TFhirStatisticModelCharacteristicVariable;
var
  child : TMXmlElement;
begin
  result := TFhirStatisticModelCharacteristicVariable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStatisticModelCharacteristicVariableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStatisticModelCharacteristicVariableChild(value : TFhirStatisticModelCharacteristicVariable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'variableDefinition') then
        value.variableDefinition := ParseReference(child, path+'/variableDefinition') {L740}
      else if (child.localName = 'handling') then
        value.handlingElement := ParseEnum(CODES_TFhirEvidenceVariableHandlingEnum, SYSTEMS_TFhirEvidenceVariableHandlingEnum, child, path+'/handling') {L734}
      else if (child.localName = 'valueCategory') then
        value.valueCategoryList.Add(ParseCodeableConcept(child, path+'/valueCategory')) {L631}
      else if (child.localName = 'valueQuantity') then
        value.valueQuantityList.Add(ParseQuantity(child, path+'/valueQuantity')) {L631}
      else if (child.localName = 'valueRange') then
        value.valueRangeList.Add(ParseRange(child, path+'/valueRange')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStatisticModelCharacteristicVariable(xml : TXmlBuilder; name : String; value : TFhirStatisticModelCharacteristicVariable);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStatisticModelCharacteristicVariableChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStatisticModelCharacteristicVariableChildren(xml : TXmlBuilder; value : TFhirStatisticModelCharacteristicVariable);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  ComposeReference(xml, 'variableDefinition', value.variableDefinition); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'handling', value.handlingElement, CODES_TFhirEvidenceVariableHandlingEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.valueCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'valueCategory', value.valueCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.valueQuantityList.Count - 1 do
      ComposeQuantity(xml, 'valueQuantity', value.valueQuantityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.valueRangeList.Count - 1 do
      ComposeRange(xml, 'valueRange', value.valueRangeList[i]);
end;

function TFHIRXmlParser.ParseStatistic(element : TMXmlElement; path : string) : TFhirStatistic;
var
  child : TMXmlElement;
begin
  result := TFhirStatistic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStatisticChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStatisticChild(value : TFhirStatistic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'statisticType') then
        value.statisticType := ParseCodeableConcept(child, path+'/statisticType') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'numberOfEvents') then
        value.numberOfEventsElement := ParseInteger(child, path+'/numberOfEvents') {L737}
      else if (child.localName = 'sampleSize') then
        value.sampleSize := ParseStatisticSampleSize(child, path+'/sampleSize') {L740}
      else if (child.localName = 'attributeEstimate') then
        value.attributeEstimateList.Add(ParseStatisticAttributeEstimate(child, path+'/attributeEstimate')) {L631}
      else if (child.localName = 'modelCharacteristic') then
        value.modelCharacteristicList.Add(ParseStatisticModelCharacteristic(child, path+'/modelCharacteristic')) {L631}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStatistic(xml : TXmlBuilder; name : String; value : TFhirStatistic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStatisticChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStatisticChildren(xml : TXmlBuilder; value : TFhirStatistic);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'statisticType', value.statisticType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'numberOfEvents', value.numberOfEventsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeStatisticSampleSize(xml, 'sampleSize', value.sampleSize); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.attributeEstimateList.Count - 1 do
      ComposeStatisticAttributeEstimate(xml, 'attributeEstimate', value.attributeEstimateList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.modelCharacteristicList.Count - 1 do
      ComposeStatisticModelCharacteristic(xml, 'modelCharacteristic', value.modelCharacteristicList[i]);
end;

function TFHIRXmlParser.ParseTimingRepeat(element : TMXmlElement; path : string) : TFhirTimingRepeat;
var
  child : TMXmlElement;
begin
  result := TFhirTimingRepeat.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTimingRepeatChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTimingRepeatChild(value : TFhirTimingRepeat; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'boundsDuration') then
        value.bounds := ParseDuration(child, path+'/boundsDuration') {L891}
      else if (child.localName = 'boundsRange') then
        value.bounds := ParseRange(child, path+'/boundsRange') {L891}
      else if (child.localName = 'boundsPeriod') then
        value.bounds := ParsePeriod(child, path+'/boundsPeriod') {L891}
      else if (child.localName = 'count') then
        value.countElement := ParsePositiveInt(child, path+'/count') {L737}
      else if (child.localName = 'countMax') then
        value.countMaxElement := ParsePositiveInt(child, path+'/countMax') {L737}
      else if (child.localName = 'duration') then
        value.durationElement := ParseDecimal(child, path+'/duration') {L737}
      else if (child.localName = 'durationMax') then
        value.durationMaxElement := ParseDecimal(child, path+'/durationMax') {L737}
      else if (child.localName = 'durationUnit') then
        value.durationUnitElement := ParseEnum(CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum, child, path+'/durationUnit') {L734}
      else if (child.localName = 'frequency') then
        value.frequencyElement := ParsePositiveInt(child, path+'/frequency') {L737}
      else if (child.localName = 'frequencyMax') then
        value.frequencyMaxElement := ParsePositiveInt(child, path+'/frequencyMax') {L737}
      else if (child.localName = 'period') then
        value.periodElement := ParseDecimal(child, path+'/period') {L737}
      else if (child.localName = 'periodMax') then
        value.periodMaxElement := ParseDecimal(child, path+'/periodMax') {L737}
      else if (child.localName = 'periodUnit') then
        value.periodUnitElement := ParseEnum(CODES_TFhirUnitsOfTimeEnum, SYSTEMS_TFhirUnitsOfTimeEnum, child, path+'/periodUnit') {L734}
      else if (child.localName = 'dayOfWeek') then
        value.dayOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, child, path+'/dayOfWeek')){y.1}
      else if (child.localName = 'timeOfDay') then
        value.timeOfDayList.Add(ParseTime(child, path+'/timeOfDay')) {L631}
      else if (child.localName = 'when') then
        value.whenList.Add(ParseEnum(CODES_TFhirEventTimingEnum, SYSTEMS_TFhirEventTimingEnum, child, path+'/when')){y.1}
      else if (child.localName = 'offset') then
        value.offsetElement := ParseUnsignedInt(child, path+'/offset') {L737}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTimingRepeat(xml : TXmlBuilder; name : String; value : TFhirTimingRepeat);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTimingRepeatChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTimingRepeatChildren(xml : TXmlBuilder; value : TFhirTimingRepeat);
var
  i : integer;
begin
  composeElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.bounds is TFhirDuration) {6} then
    ComposeDuration(xml, 'boundsDuration', TFhirDuration(value.bounds))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.bounds is TFhirRange) {6} then
    ComposeRange(xml, 'boundsRange', TFhirRange(value.bounds))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.bounds is TFhirPeriod) {6} then
    ComposePeriod(xml, 'boundsPeriod', TFhirPeriod(value.bounds));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'count', value.countElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'countMax', value.countMaxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'duration', value.durationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'durationMax', value.durationMaxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'durationUnit', value.durationUnitElement, CODES_TFhirUnitsOfTimeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'frequency', value.frequencyElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'frequencyMax', value.frequencyMaxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'period', value.periodElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'periodMax', value.periodMaxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'periodUnit', value.periodUnitElement, CODES_TFhirUnitsOfTimeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dayOfWeekList.Count - 1 do
      ComposeEnum(xml, 'dayOfWeek', value.dayOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.timeOfDayList.Count - 1 do
      ComposeTime(xml, 'timeOfDay', value.timeOfDayList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.whenList.Count - 1 do
      ComposeEnum(xml, 'when', value.whenList[i], CODES_TFhirEventTimingEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'offset', value.offsetElement); {L738}
end;

function TFHIRXmlParser.ParseTiming(element : TMXmlElement; path : string) : TFhirTiming;
var
  child : TMXmlElement;
begin
  result := TFhirTiming.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTimingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTimingChild(value : TFhirTiming; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'event') then
        value.eventList.Add(ParseDateTime(child, path+'/event')) {L631}
      else if (child.localName = 'repeat') then
        value.repeat_ := ParseTimingRepeat(child, path+'/repeat') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if Not ParseElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTiming(xml : TXmlBuilder; name : String; value : TFhirTiming);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTimingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTimingChildren(xml : TXmlBuilder; value : TFhirTiming);
var
  i : integer;
begin
  composeBackboneTypeChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.eventList.Count - 1 do
      ComposeDateTime(xml, 'event', value.eventList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTimingRepeat(xml, 'repeat', value.repeat_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
end;

Procedure TFHIRXmlParser.ParseResourceAttributes(value : TFhirResource; path : string; element : TMXmlElement);
begin
  ParseBaseAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseResourceChild(value : TFhirResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'id') then
    value.idElement := ParseId(child, path+'/id') {L737}
  else if (child.localName = 'meta') then
    value.meta := ParseMeta(child, path+'/meta') {L740}
  else if (child.localName = 'implicitRules') then
    value.implicitRulesElement := ParseUri(child, path+'/implicitRules') {L737}
  else if (child.localName = 'language') then
    value.languageElement := ParseCode(child, path+'/language') {L737}
  else if not parseBaseChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeResourceAttributes(xml : TXmlBuilder; value : TFhirResource);
begin
  ComposeBaseAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeResourceChildren(xml : TXmlBuilder; value : TFhirResource);
begin
  composeBaseChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeId(xml, 'id', value.idElement); {L738}
  if (true) {(SummaryOption in [soFull, soSummary, soData])} then
    ComposeMeta(xml, 'meta', value.meta); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'implicitRules', value.implicitRulesElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'language', value.languageElement); {L738}
end;

Procedure TFHIRXmlParser.ParseDomainResourceAttributes(value : TFhirDomainResource; path : string; element : TMXmlElement);
begin
  ParseResourceAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseDomainResourceChild(value : TFhirDomainResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if (child.localName = 'text') then
    value.text := ParseNarrative(child, path+'/text') {L740}
  else if (child.localName = 'contained') then
    value.containedList.Add(ParseInnerResource(child, path+'/contained')) {L631}
  else if (child.localName = 'extension') then
    value.extensionList.Add(ParseExtension(child, path+'/extension')) {L631}
  else if (child.localName = 'modifierExtension') then
    value.modifierExtensionList.Add(ParseExtension(child, path+'/modifierExtension')) {L631}
  else if not parseResourceChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeDomainResourceAttributes(xml : TXmlBuilder; value : TFhirDomainResource);
begin
  ComposeResourceAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeDomainResourceChildren(xml : TXmlBuilder; value : TFhirDomainResource);
var
  i : integer; {L414}
begin
  composeResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(xml, 'text', value.text); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.containedList.Count - 1 do
      ComposeInnerResource(xml, 'contained', value, value.containedList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.extensionList.Count - 1 do
      ComposeExtension(xml, 'extension', value.extensionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierExtensionList.Count - 1 do
      ComposeExtension(xml, 'modifierExtension', value.modifierExtensionList[i]);
end;

Procedure TFHIRXmlParser.ParseCanonicalResourceAttributes(value : TFhirCanonicalResource; path : string; element : TMXmlElement);
begin
  ParseDomainResourceAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseCanonicalResourceChild(value : TFhirCanonicalResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if not parseDomainResourceChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeCanonicalResourceAttributes(xml : TXmlBuilder; value : TFhirCanonicalResource);
begin
  ComposeDomainResourceAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeCanonicalResourceChildren(xml : TXmlBuilder; value : TFhirCanonicalResource);
begin
  composeDomainResourceChildren(xml, value);
end;

Procedure TFHIRXmlParser.ParseMetadataResourceAttributes(value : TFhirMetadataResource; path : string; element : TMXmlElement);
begin
  ParseCanonicalResourceAttributes(value, path, element);
end;

Function TFHIRXmlParser.ParseMetadataResourceChild(value : TFhirMetadataResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
  if not parseCanonicalResourceChild(value, path, child) then
    result := false;
end;

Procedure TFHIRXmlComposer.ComposeMetadataResourceAttributes(xml : TXmlBuilder; value : TFhirMetadataResource);
begin
  ComposeCanonicalResourceAttributes(xml, value);
end;

Procedure TFHIRXmlComposer.ComposeMetadataResourceChildren(xml : TXmlBuilder; value : TFhirMetadataResource);
begin
  composeCanonicalResourceChildren(xml, value);
end;

{$IFDEF FHIR_ACCOUNT}
function TFHIRXmlParser.ParseAccountCoverage(element : TMXmlElement; path : string) : TFhirAccountCoverage;
var
  child : TMXmlElement;
begin
  result := TFhirAccountCoverage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAccountCoverageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAccountCoverageChild(value : TFhirAccountCoverage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if (child.localName = 'priority') then
        value.priorityElement := ParsePositiveInt(child, path+'/priority') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAccountCoverage(xml : TXmlBuilder; name : String; value : TFhirAccountCoverage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAccountCoverageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAccountCoverageChildren(xml : TXmlBuilder; value : TFhirAccountCoverage);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'coverage', value.coverage); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'priority', value.priorityElement); {L738}
end;

function TFHIRXmlParser.ParseAccountGuarantor(element : TMXmlElement; path : string) : TFhirAccountGuarantor;
var
  child : TMXmlElement;
begin
  result := TFhirAccountGuarantor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAccountGuarantorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAccountGuarantorChild(value : TFhirAccountGuarantor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'party') then
        value.party := ParseReference(child, path+'/party') {L740}
      else if (child.localName = 'onHold') then
        value.onHoldElement := ParseBoolean(child, path+'/onHold') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAccountGuarantor(xml : TXmlBuilder; name : String; value : TFhirAccountGuarantor);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAccountGuarantorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAccountGuarantorChildren(xml : TXmlBuilder; value : TFhirAccountGuarantor);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'party', value.party); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'onHold', value.onHoldElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseAccount(element : TMXmlElement; path : string) : TFhirAccount;
var
  child : TMXmlElement;
begin
  result := TFhirAccount.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAccountChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAccountChild(value : TFhirAccount; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirAccountStatusEnum, SYSTEMS_TFhirAccountStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'subject') then
        value.subjectList.Add(ParseReference(child, path+'/subject')) {L631}
      else if (child.localName = 'servicePeriod') then
        value.servicePeriod := ParsePeriod(child, path+'/servicePeriod') {L740}
      else if (child.localName = 'coverage') then
        value.coverageList.Add(ParseAccountCoverage(child, path+'/coverage')) {L631}
      else if (child.localName = 'owner') then
        value.owner := ParseReference(child, path+'/owner') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'guarantor') then
        value.guarantorList.Add(ParseAccountGuarantor(child, path+'/guarantor')) {L631}
      else if (child.localName = 'partOf') then
        value.partOf := ParseReference(child, path+'/partOf') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAccount(xml : TXmlBuilder; name : String; value : TFhirAccount);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAccountChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAccountChildren(xml : TXmlBuilder; value : TFhirAccount);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirAccountStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(xml, 'subject', value.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'servicePeriod', value.servicePeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.coverageList.Count - 1 do
      ComposeAccountCoverage(xml, 'coverage', value.coverageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'owner', value.owner); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.guarantorList.Count - 1 do
      ComposeAccountGuarantor(xml, 'guarantor', value.guarantorList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'partOf', value.partOf); {L741}
end;

{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
function TFHIRXmlParser.ParseActivityDefinitionParticipant(element : TMXmlElement; path : string) : TFhirActivityDefinitionParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirActivityDefinitionParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseActivityDefinitionParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseActivityDefinitionParticipantChild(value : TFhirActivityDefinitionParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionParticipant(xml : TXmlBuilder; name : String; value : TFhirActivityDefinitionParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeActivityDefinitionParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionParticipantChildren(xml : TXmlBuilder; value : TFhirActivityDefinitionParticipant);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirActionParticipantTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
end;

function TFHIRXmlParser.ParseActivityDefinitionDynamicValue(element : TMXmlElement; path : string) : TFhirActivityDefinitionDynamicValue;
var
  child : TMXmlElement;
begin
  result := TFhirActivityDefinitionDynamicValue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseActivityDefinitionDynamicValueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseActivityDefinitionDynamicValueChild(value : TFhirActivityDefinitionDynamicValue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'expression') then
        value.expression := ParseExpression(child, path+'/expression') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionDynamicValue(xml : TXmlBuilder; name : String; value : TFhirActivityDefinitionDynamicValue);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeActivityDefinitionDynamicValueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionDynamicValueChildren(xml : TXmlBuilder; value : TFhirActivityDefinitionDynamicValue);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'path', value.pathElement); {L738}
  ComposeExpression(xml, 'expression', value.expression); {L741}
end;

function TFHIRXmlParser.ParseActivityDefinition(element : TMXmlElement; path : string) : TFhirActivityDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirActivityDefinition.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseActivityDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseActivityDefinitionChild(value : TFhirActivityDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'usage') then
        value.usageElement := ParseString(child, path+'/usage') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'topic') then
        value.topicList.Add(ParseCodeableConcept(child, path+'/topic')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'library') then
        value.library_List.Add(ParseCanonical(child, path+'/library')) {L631}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirRequestResourceTypeEnum, SYSTEMS_TFhirRequestResourceTypeEnum, child, path+'/kind') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'doNotPerform') then
        value.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {L737}
      else if (child.localName = 'timingTiming') then
        value.timing := ParseTiming(child, path+'/timingTiming') {L891}
      else if (child.localName = 'timingAge') then
        value.timing := ParseAge(child, path+'/timingAge') {L891}
      else if (child.localName = 'timingPeriod') then
        value.timing := ParsePeriod(child, path+'/timingPeriod') {L891}
      else if (child.localName = 'timingRange') then
        value.timing := ParseRange(child, path+'/timingRange') {L891}
      else if (child.localName = 'timingDuration') then
        value.timing := ParseDuration(child, path+'/timingDuration') {L891}
      else if (child.localName = 'timingDateTime') then
        value.timing := ParseDateTime(child, path+'/timingDateTime') {L891}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseActivityDefinitionParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'productReference') then
        value.product := ParseReference(child, path+'/productReference') {L881}
      else if (child.localName = 'productCodeableConcept') then
        value.product := ParseCodeableConcept(child, path+'/productCodeableConcept') {L891}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'dosage') then
        value.dosageList.Add(ParseDosage(child, path+'/dosage')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')) {L631}
      else if (child.localName = 'specimenRequirement') then
        value.specimenRequirementList.Add(ParseReference(child, path+'/specimenRequirement')) {L631}
      else if (child.localName = 'observationRequirement') then
        value.observationRequirementList.Add(ParseReference(child, path+'/observationRequirement')) {L631}
      else if (child.localName = 'observationResultRequirement') then
        value.observationResultRequirementList.Add(ParseReference(child, path+'/observationResultRequirement')) {L631}
      else if (child.localName = 'transform') then
        value.transformElement := ParseCanonical(child, path+'/transform') {L737}
      else if (child.localName = 'dynamicValue') then
        value.dynamicValueList.Add(ParseActivityDefinitionDynamicValue(child, path+'/dynamicValue')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinition(xml : TXmlBuilder; name : String; value : TFhirActivityDefinition);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeActivityDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeActivityDefinitionChildren(xml : TXmlBuilder; value : TFhirActivityDefinition);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'usage', value.usageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', value.topicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', value.library_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirRequestResourceTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'doNotPerform', value.doNotPerformElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirAge) {6} then
    ComposeAge(xml, 'timingAge', TFhirAge(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirRange) {6} then
    ComposeRange(xml, 'timingRange', TFhirRange(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDuration) {6} then
    ComposeDuration(xml, 'timingDuration', TFhirDuration(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(value.timing));
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeActivityDefinitionParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) and (value.product is TFhirReference) {2} then
    ComposeReference(xml, 'productReference', TFhirReference(value.product))
  else if (SummaryOption in [soFull, soData]) and (value.product is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'productCodeableConcept', TFhirCodeableConcept(value.product));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dosageList.Count - 1 do
      ComposeDosage(xml, 'dosage', value.dosageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', value.bodySiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specimenRequirementList.Count - 1 do
      ComposeReference(xml, 'specimenRequirement', value.specimenRequirementList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.observationRequirementList.Count - 1 do
      ComposeReference(xml, 'observationRequirement', value.observationRequirementList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.observationResultRequirementList.Count - 1 do
      ComposeReference(xml, 'observationResultRequirement', value.observationResultRequirementList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'transform', value.transformElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dynamicValueList.Count - 1 do
      ComposeActivityDefinitionDynamicValue(xml, 'dynamicValue', value.dynamicValueList[i]);
end;

{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
function TFHIRXmlParser.ParseAdministrableProductDefinitionProperty(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionProperty;
var
  child : TMXmlElement;
begin
  result := TFhirAdministrableProductDefinitionProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdministrableProductDefinitionPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionPropertyChild(value : TFhirAdministrableProductDefinitionProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionProperty(xml : TXmlBuilder; name : String; value : TFhirAdministrableProductDefinitionProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdministrableProductDefinitionPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionRouteOfAdministration(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionRouteOfAdministration;
var
  child : TMXmlElement;
begin
  result := TFhirAdministrableProductDefinitionRouteOfAdministration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdministrableProductDefinitionRouteOfAdministrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionRouteOfAdministrationChild(value : TFhirAdministrableProductDefinitionRouteOfAdministration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'firstDose') then
        value.firstDose := ParseQuantity(child, path+'/firstDose') {L740}
      else if (child.localName = 'maxSingleDose') then
        value.maxSingleDose := ParseQuantity(child, path+'/maxSingleDose') {L740}
      else if (child.localName = 'maxDosePerDay') then
        value.maxDosePerDay := ParseQuantity(child, path+'/maxDosePerDay') {L740}
      else if (child.localName = 'maxDosePerTreatmentPeriod') then
        value.maxDosePerTreatmentPeriod := ParseRatio(child, path+'/maxDosePerTreatmentPeriod') {L740}
      else if (child.localName = 'maxTreatmentPeriod') then
        value.maxTreatmentPeriod := ParseDuration(child, path+'/maxTreatmentPeriod') {L740}
      else if (child.localName = 'targetSpecies') then
        value.targetSpeciesList.Add(ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(child, path+'/targetSpecies')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionRouteOfAdministration(xml : TXmlBuilder; name : String; value : TFhirAdministrableProductDefinitionRouteOfAdministration);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdministrableProductDefinitionRouteOfAdministrationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionRouteOfAdministration);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'firstDose', value.firstDose); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'maxSingleDose', value.maxSingleDose); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'maxDosePerDay', value.maxDosePerDay); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'maxDosePerTreatmentPeriod', value.maxDosePerTreatmentPeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(xml, 'maxTreatmentPeriod', value.maxTreatmentPeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetSpeciesList.Count - 1 do
      ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(xml, 'targetSpecies', value.targetSpeciesList[i]);
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies;
var
  child : TMXmlElement;
begin
  result := TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesChild(value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'withdrawalPeriod') then
        value.withdrawalPeriodList.Add(ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(child, path+'/withdrawalPeriod')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpecies(xml : TXmlBuilder; name : String; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpecies);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.withdrawalPeriodList.Count - 1 do
      ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml, 'withdrawalPeriod', value.withdrawalPeriodList[i]);
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod;
var
  child : TMXmlElement;
begin
  result := TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodChild(value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'tissue') then
        value.tissue := ParseCodeableConcept(child, path+'/tissue') {L740}
      else if (child.localName = 'value') then
        value.value := ParseQuantity(child, path+'/value') {L740}
      else if (child.localName = 'supportingInformation') then
        value.supportingInformationElement := ParseString(child, path+'/supportingInformation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod(xml : TXmlBuilder; name : String; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriodChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinitionRouteOfAdministrationTargetSpeciesWithdrawalPeriod);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'tissue', value.tissue); {L741}
  ComposeQuantity(xml, 'value', value.value); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'supportingInformation', value.supportingInformationElement); {L738}
end;

function TFHIRXmlParser.ParseAdministrableProductDefinition(element : TMXmlElement; path : string) : TFhirAdministrableProductDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirAdministrableProductDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdministrableProductDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdministrableProductDefinitionChild(value : TFhirAdministrableProductDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'subject') then
        value.subjectList.Add(ParseReference(child, path+'/subject')) {L631}
      else if (child.localName = 'administrableDoseForm') then
        value.administrableDoseForm := ParseCodeableConcept(child, path+'/administrableDoseForm') {L740}
      else if (child.localName = 'unitOfPresentation') then
        value.unitOfPresentation := ParseCodeableConcept(child, path+'/unitOfPresentation') {L740}
      else if (child.localName = 'producedFrom') then
        value.producedFromList.Add(ParseReference(child, path+'/producedFrom')) {L631}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseReference(child, path+'/ingredient')) {L631}
      else if (child.localName = 'device') then
        value.deviceList.Add(ParseReference(child, path+'/device')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseAdministrableProductDefinitionProperty(child, path+'/property')) {L631}
      else if (child.localName = 'routeOfAdministration') then
        value.routeOfAdministrationList.Add(ParseAdministrableProductDefinitionRouteOfAdministration(child, path+'/routeOfAdministration')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinition(xml : TXmlBuilder; name : String; value : TFhirAdministrableProductDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdministrableProductDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdministrableProductDefinitionChildren(xml : TXmlBuilder; value : TFhirAdministrableProductDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(xml, 'subject', value.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'administrableDoseForm', value.administrableDoseForm); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'unitOfPresentation', value.unitOfPresentation); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.producedFromList.Count - 1 do
      ComposeReference(xml, 'producedFrom', value.producedFromList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeReference(xml, 'ingredient', value.ingredientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.deviceList.Count - 1 do
      ComposeReference(xml, 'device', value.deviceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeAdministrableProductDefinitionProperty(xml, 'property', value.property_List[i]);
  for i := 0 to value.routeOfAdministrationList.Count - 1 do
      ComposeAdministrableProductDefinitionRouteOfAdministration(xml, 'routeOfAdministration', value.routeOfAdministrationList[i]);
end;

{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
function TFHIRXmlParser.ParseAdverseEventParticipant(element : TMXmlElement; path : string) : TFhirAdverseEventParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventParticipantChild(value : TFhirAdverseEventParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventParticipant(xml : TXmlBuilder; name : String; value : TFhirAdverseEventParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventParticipantChildren(xml : TXmlBuilder; value : TFhirAdverseEventParticipant);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntity(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntity;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventSuspectEntity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventSuspectEntityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntityChild(value : TFhirAdverseEventSuspectEntity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'instanceCodeableConcept') then
        value.instance := ParseCodeableConcept(child, path+'/instanceCodeableConcept') {L891}
      else if (child.localName = 'instanceReference') then
        value.instance := ParseReference(child, path+'/instanceReference') {L881}
      else if (child.localName = 'causality') then
        value.causality := ParseAdverseEventSuspectEntityCausality(child, path+'/causality') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntity(xml : TXmlBuilder; name : String; value : TFhirAdverseEventSuspectEntity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventSuspectEntityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntityChildren(xml : TXmlBuilder; value : TFhirAdverseEventSuspectEntity);
begin
  composeBackboneElementChildren(xml, value);
  if (value.instance is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'instanceCodeableConcept', TFhirCodeableConcept(value.instance))
  else if (value.instance is TFhirReference) {2} then
    ComposeReference(xml, 'instanceReference', TFhirReference(value.instance));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAdverseEventSuspectEntityCausality(xml, 'causality', value.causality); {L741}
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntityCausality(element : TMXmlElement; path : string) : TFhirAdverseEventSuspectEntityCausality;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventSuspectEntityCausality.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventSuspectEntityCausalityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventSuspectEntityCausalityChild(value : TFhirAdverseEventSuspectEntityCausality; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'assessmentMethod') then
        value.assessmentMethod := ParseCodeableConcept(child, path+'/assessmentMethod') {L740}
      else if (child.localName = 'entityRelatedness') then
        value.entityRelatedness := ParseCodeableConcept(child, path+'/entityRelatedness') {L740}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntityCausality(xml : TXmlBuilder; name : String; value : TFhirAdverseEventSuspectEntityCausality);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventSuspectEntityCausalityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSuspectEntityCausalityChildren(xml : TXmlBuilder; value : TFhirAdverseEventSuspectEntityCausality);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'assessmentMethod', value.assessmentMethod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'entityRelatedness', value.entityRelatedness); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
end;

function TFHIRXmlParser.ParseAdverseEventContributingFactor(element : TMXmlElement; path : string) : TFhirAdverseEventContributingFactor;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventContributingFactor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventContributingFactorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventContributingFactorChild(value : TFhirAdverseEventContributingFactor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemReference') then
        value.item := ParseReference(child, path+'/itemReference') {L881}
      else if (child.localName = 'itemCodeableConcept') then
        value.item := ParseCodeableConcept(child, path+'/itemCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventContributingFactor(xml : TXmlBuilder; name : String; value : TFhirAdverseEventContributingFactor);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventContributingFactorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventContributingFactorChildren(xml : TXmlBuilder; value : TFhirAdverseEventContributingFactor);
begin
  composeBackboneElementChildren(xml, value);
  if (value.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(value.item))
  else if (value.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(value.item));
end;

function TFHIRXmlParser.ParseAdverseEventPreventiveAction(element : TMXmlElement; path : string) : TFhirAdverseEventPreventiveAction;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventPreventiveAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventPreventiveActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventPreventiveActionChild(value : TFhirAdverseEventPreventiveAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemReference') then
        value.item := ParseReference(child, path+'/itemReference') {L881}
      else if (child.localName = 'itemCodeableConcept') then
        value.item := ParseCodeableConcept(child, path+'/itemCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventPreventiveAction(xml : TXmlBuilder; name : String; value : TFhirAdverseEventPreventiveAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventPreventiveActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventPreventiveActionChildren(xml : TXmlBuilder; value : TFhirAdverseEventPreventiveAction);
begin
  composeBackboneElementChildren(xml, value);
  if (value.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(value.item))
  else if (value.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(value.item));
end;

function TFHIRXmlParser.ParseAdverseEventMitigatingAction(element : TMXmlElement; path : string) : TFhirAdverseEventMitigatingAction;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventMitigatingAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventMitigatingActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventMitigatingActionChild(value : TFhirAdverseEventMitigatingAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemReference') then
        value.item := ParseReference(child, path+'/itemReference') {L881}
      else if (child.localName = 'itemCodeableConcept') then
        value.item := ParseCodeableConcept(child, path+'/itemCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventMitigatingAction(xml : TXmlBuilder; name : String; value : TFhirAdverseEventMitigatingAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventMitigatingActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventMitigatingActionChildren(xml : TXmlBuilder; value : TFhirAdverseEventMitigatingAction);
begin
  composeBackboneElementChildren(xml, value);
  if (value.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(value.item))
  else if (value.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(value.item));
end;

function TFHIRXmlParser.ParseAdverseEventSupportingInfo(element : TMXmlElement; path : string) : TFhirAdverseEventSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEventSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventSupportingInfoChild(value : TFhirAdverseEventSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemReference') then
        value.item := ParseReference(child, path+'/itemReference') {L881}
      else if (child.localName = 'itemCodeableConcept') then
        value.item := ParseCodeableConcept(child, path+'/itemCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSupportingInfo(xml : TXmlBuilder; name : String; value : TFhirAdverseEventSupportingInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventSupportingInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventSupportingInfoChildren(xml : TXmlBuilder; value : TFhirAdverseEventSupportingInfo);
begin
  composeBackboneElementChildren(xml, value);
  if (value.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(value.item))
  else if (value.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(value.item));
end;

function TFHIRXmlParser.ParseAdverseEvent(element : TMXmlElement; path : string) : TFhirAdverseEvent;
var
  child : TMXmlElement;
begin
  result := TFhirAdverseEvent.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAdverseEventChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAdverseEventChild(value : TFhirAdverseEvent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirAdverseEventStatusEnum, SYSTEMS_TFhirAdverseEventStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'actuality') then
        value.actualityElement := ParseEnum(CODES_TFhirAdverseEventActualityEnum, SYSTEMS_TFhirAdverseEventActualityEnum, child, path+'/actuality') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'detected') then
        value.detectedElement := ParseDateTime(child, path+'/detected') {L737}
      else if (child.localName = 'recordedDate') then
        value.recordedDateElement := ParseDateTime(child, path+'/recordedDate') {L737}
      else if (child.localName = 'resultingCondition') then
        value.resultingConditionList.Add(ParseReference(child, path+'/resultingCondition')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'seriousness') then
        value.seriousness := ParseCodeableConcept(child, path+'/seriousness') {L740}
      else if (child.localName = 'outcome') then
        value.outcome := ParseCodeableConcept(child, path+'/outcome') {L740}
      else if (child.localName = 'recorder') then
        value.recorder := ParseReference(child, path+'/recorder') {L740}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseAdverseEventParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'suspectEntity') then
        value.suspectEntityList.Add(ParseAdverseEventSuspectEntity(child, path+'/suspectEntity')) {L631}
      else if (child.localName = 'contributingFactor') then
        value.contributingFactorList.Add(ParseAdverseEventContributingFactor(child, path+'/contributingFactor')) {L631}
      else if (child.localName = 'preventiveAction') then
        value.preventiveActionList.Add(ParseAdverseEventPreventiveAction(child, path+'/preventiveAction')) {L631}
      else if (child.localName = 'mitigatingAction') then
        value.mitigatingActionList.Add(ParseAdverseEventMitigatingAction(child, path+'/mitigatingAction')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseAdverseEventSupportingInfo(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'study') then
        value.studyList.Add(ParseReference(child, path+'/study')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAdverseEvent(xml : TXmlBuilder; name : String; value : TFhirAdverseEvent);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAdverseEventChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAdverseEventChildren(xml : TXmlBuilder; value : TFhirAdverseEvent);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirAdverseEventStatusEnum); {L735}
  ComposeEnum(xml, 'actuality', value.actualityElement, CODES_TFhirAdverseEventActualityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'detected', value.detectedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'recordedDate', value.recordedDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resultingConditionList.Count - 1 do
      ComposeReference(xml, 'resultingCondition', value.resultingConditionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'seriousness', value.seriousness); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'outcome', value.outcome); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'recorder', value.recorder); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeAdverseEventParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.suspectEntityList.Count - 1 do
      ComposeAdverseEventSuspectEntity(xml, 'suspectEntity', value.suspectEntityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contributingFactorList.Count - 1 do
      ComposeAdverseEventContributingFactor(xml, 'contributingFactor', value.contributingFactorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.preventiveActionList.Count - 1 do
      ComposeAdverseEventPreventiveAction(xml, 'preventiveAction', value.preventiveActionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.mitigatingActionList.Count - 1 do
      ComposeAdverseEventMitigatingAction(xml, 'mitigatingAction', value.mitigatingActionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeAdverseEventSupportingInfo(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.studyList.Count - 1 do
      ComposeReference(xml, 'study', value.studyList[i]);
end;

{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
function TFHIRXmlParser.ParseAllergyIntoleranceReaction(element : TMXmlElement; path : string) : TFhirAllergyIntoleranceReaction;
var
  child : TMXmlElement;
begin
  result := TFhirAllergyIntoleranceReaction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAllergyIntoleranceReactionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAllergyIntoleranceReactionChild(value : TFhirAllergyIntoleranceReaction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substance') then
        value.substance := ParseCodeableConcept(child, path+'/substance') {L740}
      else if (child.localName = 'manifestation') then
        value.manifestationList.Add(ParseCodeableConcept(child, path+'/manifestation')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'onset') then
        value.onsetElement := ParseDateTime(child, path+'/onset') {L737}
      else if (child.localName = 'severity') then
        value.severityElement := ParseEnum(CODES_TFhirAllergyIntoleranceSeverityEnum, SYSTEMS_TFhirAllergyIntoleranceSeverityEnum, child, path+'/severity') {L734}
      else if (child.localName = 'exposureRoute') then
        value.exposureRoute := ParseCodeableConcept(child, path+'/exposureRoute') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAllergyIntoleranceReaction(xml : TXmlBuilder; name : String; value : TFhirAllergyIntoleranceReaction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAllergyIntoleranceReactionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAllergyIntoleranceReactionChildren(xml : TXmlBuilder; value : TFhirAllergyIntoleranceReaction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'substance', value.substance); {L741}
  for i := 0 to value.manifestationList.Count - 1 do
      ComposeCodeableConcept(xml, 'manifestation', value.manifestationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'onset', value.onsetElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'severity', value.severityElement, CODES_TFhirAllergyIntoleranceSeverityEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'exposureRoute', value.exposureRoute); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

function TFHIRXmlParser.ParseAllergyIntolerance(element : TMXmlElement; path : string) : TFhirAllergyIntolerance;
var
  child : TMXmlElement;
begin
  result := TFhirAllergyIntolerance.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAllergyIntoleranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAllergyIntoleranceChild(value : TFhirAllergyIntolerance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'clinicalStatus') then
        value.clinicalStatus := ParseCodeableConcept(child, path+'/clinicalStatus') {L740}
      else if (child.localName = 'verificationStatus') then
        value.verificationStatus := ParseCodeableConcept(child, path+'/verificationStatus') {L740}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirAllergyIntoleranceTypeEnum, SYSTEMS_TFhirAllergyIntoleranceTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseEnum(CODES_TFhirAllergyIntoleranceCategoryEnum, SYSTEMS_TFhirAllergyIntoleranceCategoryEnum, child, path+'/category')){y.1}
      else if (child.localName = 'criticality') then
        value.criticalityElement := ParseEnum(CODES_TFhirAllergyIntoleranceCriticalityEnum, SYSTEMS_TFhirAllergyIntoleranceCriticalityEnum, child, path+'/criticality') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'onsetAge') then
        value.onset := ParseAge(child, path+'/onsetAge') {L891}
      else if (child.localName = 'onsetPeriod') then
        value.onset := ParsePeriod(child, path+'/onsetPeriod') {L891}
      else if (child.localName = 'onsetRange') then
        value.onset := ParseRange(child, path+'/onsetRange') {L891}
      else if (child.localName = 'onsetDateTime') then
        value.onset := ParseDateTime(child, path+'/onsetDateTime') {L891}
      else if (child.localName = 'onsetString') then
        value.onset := ParseString(child, path+'/onsetString') {L891}
      else if (child.localName = 'recordedDate') then
        value.recordedDateElement := ParseDateTime(child, path+'/recordedDate') {L737}
      else if (child.localName = 'recorder') then
        value.recorder := ParseReference(child, path+'/recorder') {L740}
      else if (child.localName = 'asserter') then
        value.asserter := ParseReference(child, path+'/asserter') {L740}
      else if (child.localName = 'lastOccurrence') then
        value.lastOccurrenceElement := ParseDateTime(child, path+'/lastOccurrence') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'reaction') then
        value.reactionList.Add(ParseAllergyIntoleranceReaction(child, path+'/reaction')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAllergyIntolerance(xml : TXmlBuilder; name : String; value : TFhirAllergyIntolerance);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAllergyIntoleranceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAllergyIntoleranceChildren(xml : TXmlBuilder; value : TFhirAllergyIntolerance);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'clinicalStatus', value.clinicalStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'verificationStatus', value.verificationStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirAllergyIntoleranceTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeEnum(xml, 'category', value.categoryList[i], CODES_TFhirAllergyIntoleranceCategoryEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'criticality', value.criticalityElement, CODES_TFhirAllergyIntoleranceCriticalityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) and (value.onset is TFhirAge) {6} then
    ComposeAge(xml, 'onsetAge', TFhirAge(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirPeriod) {6} then
    ComposePeriod(xml, 'onsetPeriod', TFhirPeriod(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirRange) {6} then
    ComposeRange(xml, 'onsetRange', TFhirRange(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'onsetDateTime', TFhirDateTime(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirString) {6} then
    ComposeString(xml, 'onsetString', TFhirString(value.onset));
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'recordedDate', value.recordedDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'recorder', value.recorder); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'asserter', value.asserter); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'lastOccurrence', value.lastOccurrenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reactionList.Count - 1 do
      ComposeAllergyIntoleranceReaction(xml, 'reaction', value.reactionList[i]);
end;

{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
function TFHIRXmlParser.ParseAppointmentParticipant(element : TMXmlElement; path : string) : TFhirAppointmentParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirAppointmentParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAppointmentParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAppointmentParticipantChild(value : TFhirAppointmentParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if (child.localName = 'required') then
        value.requiredElement := ParseEnum(CODES_TFhirParticipantRequiredEnum, SYSTEMS_TFhirParticipantRequiredEnum, child, path+'/required') {L734}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirParticipationStatusEnum, SYSTEMS_TFhirParticipationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAppointmentParticipant(xml : TXmlBuilder; name : String; value : TFhirAppointmentParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAppointmentParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAppointmentParticipantChildren(xml : TXmlBuilder; value : TFhirAppointmentParticipant);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'actor', value.actor); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'required', value.requiredElement, CODES_TFhirParticipantRequiredEnum); {L735}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirParticipationStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseAppointment(element : TMXmlElement; path : string) : TFhirAppointment;
var
  child : TMXmlElement;
begin
  result := TFhirAppointment.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAppointmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAppointmentChild(value : TFhirAppointment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirAppointmentStatusEnum, SYSTEMS_TFhirAppointmentStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'cancelationReason') then
        value.cancelationReason := ParseCodeableConcept(child, path+'/cancelationReason') {L740}
      else if (child.localName = 'serviceCategory') then
        value.serviceCategoryList.Add(ParseCodeableConcept(child, path+'/serviceCategory')) {L631}
      else if (child.localName = 'serviceType') then
        value.serviceTypeList.Add(ParseCodeableConcept(child, path+'/serviceType')) {L631}
      else if (child.localName = 'specialty') then
        value.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')) {L631}
      else if (child.localName = 'appointmentType') then
        value.appointmentType := ParseCodeableConcept(child, path+'/appointmentType') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseUnsignedInt(child, path+'/priority') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'supportingInformation') then
        value.supportingInformationList.Add(ParseReference(child, path+'/supportingInformation')) {L631}
      else if (child.localName = 'start') then
        value.startElement := ParseInstant(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInstant(child, path+'/end') {L737}
      else if (child.localName = 'minutesDuration') then
        value.minutesDurationElement := ParsePositiveInt(child, path+'/minutesDuration') {L737}
      else if (child.localName = 'slot') then
        value.slotList.Add(ParseReference(child, path+'/slot')) {L631}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if (child.localName = 'patientInstruction') then
        value.patientInstructionElement := ParseString(child, path+'/patientInstruction') {L737}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseAppointmentParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'requestedPeriod') then
        value.requestedPeriodList.Add(ParsePeriod(child, path+'/requestedPeriod')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAppointment(xml : TXmlBuilder; name : String; value : TFhirAppointment);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAppointmentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAppointmentChildren(xml : TXmlBuilder; value : TFhirAppointment);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirAppointmentStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'cancelationReason', value.cancelationReason); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceCategory', value.serviceCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceType', value.serviceTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', value.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'appointmentType', value.appointmentType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'priority', value.priorityElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(xml, 'supportingInformation', value.supportingInformationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'end', value.end_Element); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'minutesDuration', value.minutesDurationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.slotList.Count - 1 do
      ComposeReference(xml, 'slot', value.slotList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'patientInstruction', value.patientInstructionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  for i := 0 to value.participantList.Count - 1 do
      ComposeAppointmentParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.requestedPeriodList.Count - 1 do
      ComposePeriod(xml, 'requestedPeriod', value.requestedPeriodList[i]);
end;

{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
function TFHIRXmlParser.ParseAppointmentResponse(element : TMXmlElement; path : string) : TFhirAppointmentResponse;
var
  child : TMXmlElement;
begin
  result := TFhirAppointmentResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAppointmentResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAppointmentResponseChild(value : TFhirAppointmentResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'appointment') then
        value.appointment := ParseReference(child, path+'/appointment') {L740}
      else if (child.localName = 'start') then
        value.startElement := ParseInstant(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInstant(child, path+'/end') {L737}
      else if (child.localName = 'participantType') then
        value.participantTypeList.Add(ParseCodeableConcept(child, path+'/participantType')) {L631}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if (child.localName = 'participantStatus') then
        value.participantStatusElement := ParseEnum(CODES_TFhirParticipationStatusEnum, SYSTEMS_TFhirParticipationStatusEnum, child, path+'/participantStatus') {L734}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAppointmentResponse(xml : TXmlBuilder; name : String; value : TFhirAppointmentResponse);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAppointmentResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAppointmentResponseChildren(xml : TXmlBuilder; value : TFhirAppointmentResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeReference(xml, 'appointment', value.appointment); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeInstant(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInstant(xml, 'end', value.end_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.participantTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'participantType', value.participantTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'actor', value.actor); {L741}
  ComposeEnum(xml, 'participantStatus', value.participantStatusElement, CODES_TFhirParticipationStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
function TFHIRXmlParser.ParseAuditEventAgent(element : TMXmlElement; path : string) : TFhirAuditEventAgent;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventAgent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventAgentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventAgentChild(value : TFhirAuditEventAgent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'role') then
        value.roleList.Add(ParseCodeableConcept(child, path+'/role')) {L631}
      else if (child.localName = 'who') then
        value.who := ParseReference(child, path+'/who') {L740}
      else if (child.localName = 'altId') then
        value.altIdElement := ParseString(child, path+'/altId') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'requestor') then
        value.requestorElement := ParseBoolean(child, path+'/requestor') {L737}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'policy') then
        value.policyList.Add(ParseUri(child, path+'/policy')) {L631}
      else if (child.localName = 'media') then
        value.media := ParseCoding(child, path+'/media') {L740}
      else if (child.localName = 'network') then
        value.network := ParseAuditEventAgentNetwork(child, path+'/network') {L740}
      else if (child.localName = 'purposeOfUse') then
        value.purposeOfUseList.Add(ParseCodeableConcept(child, path+'/purposeOfUse')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgent(xml : TXmlBuilder; name : String; value : TFhirAuditEventAgent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAuditEventAgentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgentChildren(xml : TXmlBuilder; value : TFhirAuditEventAgent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.roleList.Count - 1 do
      ComposeCodeableConcept(xml, 'role', value.roleList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'who', value.who); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'altId', value.altIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeBoolean(xml, 'requestor', value.requestorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.policyList.Count - 1 do
      ComposeUri(xml, 'policy', value.policyList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'media', value.media); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeAuditEventAgentNetwork(xml, 'network', value.network); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.purposeOfUseList.Count - 1 do
      ComposeCodeableConcept(xml, 'purposeOfUse', value.purposeOfUseList[i]);
end;

function TFHIRXmlParser.ParseAuditEventAgentNetwork(element : TMXmlElement; path : string) : TFhirAuditEventAgentNetwork;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventAgentNetwork.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventAgentNetworkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventAgentNetworkChild(value : TFhirAuditEventAgentNetwork; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'address') then
        value.addressElement := ParseString(child, path+'/address') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirAuditEventAgentNetworkTypeEnum, SYSTEMS_TFhirAuditEventAgentNetworkTypeEnum, child, path+'/type') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgentNetwork(xml : TXmlBuilder; name : String; value : TFhirAuditEventAgentNetwork);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAuditEventAgentNetworkChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAuditEventAgentNetworkChildren(xml : TXmlBuilder; value : TFhirAuditEventAgentNetwork);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'address', value.addressElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirAuditEventAgentNetworkTypeEnum); {L735}
end;

function TFHIRXmlParser.ParseAuditEventSource(element : TMXmlElement; path : string) : TFhirAuditEventSource;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventSource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventSourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventSourceChild(value : TFhirAuditEventSource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'site') then
        value.siteElement := ParseString(child, path+'/site') {L737}
      else if (child.localName = 'observer') then
        value.observer := ParseReference(child, path+'/observer') {L740}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCoding(child, path+'/type')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventSource(xml : TXmlBuilder; name : String; value : TFhirAuditEventSource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAuditEventSourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAuditEventSourceChildren(xml : TXmlBuilder; value : TFhirAuditEventSource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'site', value.siteElement); {L738}
  ComposeReference(xml, 'observer', value.observer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCoding(xml, 'type', value.type_List[i]);
end;

function TFHIRXmlParser.ParseAuditEventEntity(element : TMXmlElement; path : string) : TFhirAuditEventEntity;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventEntity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventEntityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventEntityChild(value : TFhirAuditEventEntity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'what') then
        value.what := ParseReference(child, path+'/what') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCoding(child, path+'/type') {L740}
      else if (child.localName = 'role') then
        value.role := ParseCoding(child, path+'/role') {L740}
      else if (child.localName = 'lifecycle') then
        value.lifecycle := ParseCoding(child, path+'/lifecycle') {L740}
      else if (child.localName = 'securityLabel') then
        value.securityLabelList.Add(ParseCoding(child, path+'/securityLabel')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'query') then
        value.queryElement := ParseBase64Binary(child, path+'/query') {L737}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseAuditEventEntityDetail(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntity(xml : TXmlBuilder; name : String; value : TFhirAuditEventEntity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAuditEventEntityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntityChildren(xml : TXmlBuilder; value : TFhirAuditEventEntity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'what', value.what); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'lifecycle', value.lifecycle); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeCoding(xml, 'securityLabel', value.securityLabelList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64Binary(xml, 'query', value.queryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeAuditEventEntityDetail(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseAuditEventEntityDetail(element : TMXmlElement; path : string) : TFhirAuditEventEntityDetail;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEventEntityDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventEntityDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventEntityDetailChild(value : TFhirAuditEventEntityDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseString(child, path+'/type') {L737}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntityDetail(xml : TXmlBuilder; name : String; value : TFhirAuditEventEntityDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAuditEventEntityDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAuditEventEntityDetailChildren(xml : TXmlBuilder; value : TFhirAuditEventEntityDetail);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'type', value.type_Element); {L738}
  if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value));
end;

function TFHIRXmlParser.ParseAuditEvent(element : TMXmlElement; path : string) : TFhirAuditEvent;
var
  child : TMXmlElement;
begin
  result := TFhirAuditEvent.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseAuditEventChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseAuditEventChild(value : TFhirAuditEvent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCoding(child, path+'/type') {L740}
      else if (child.localName = 'subtype') then
        value.subtypeList.Add(ParseCoding(child, path+'/subtype')) {L631}
      else if (child.localName = 'action') then
        value.actionElement := ParseEnum(CODES_TFhirAuditEventActionEnum, SYSTEMS_TFhirAuditEventActionEnum, child, path+'/action') {L734}
      else if (child.localName = 'severity') then
        value.severityElement := ParseEnum(CODES_TFhirAuditEventSeverityEnum, SYSTEMS_TFhirAuditEventSeverityEnum, child, path+'/severity') {L734}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'recorded') then
        value.recordedElement := ParseInstant(child, path+'/recorded') {L737}
      else if (child.localName = 'outcome') then
        value.outcome := ParseCodeableConcept(child, path+'/outcome') {L740}
      else if (child.localName = 'purposeOfEvent') then
        value.purposeOfEventList.Add(ParseCodeableConcept(child, path+'/purposeOfEvent')) {L631}
      else if (child.localName = 'agent') then
        value.agentList.Add(ParseAuditEventAgent(child, path+'/agent')) {L631}
      else if (child.localName = 'source') then
        value.source := ParseAuditEventSource(child, path+'/source') {L740}
      else if (child.localName = 'entity') then
        value.entityList.Add(ParseAuditEventEntity(child, path+'/entity')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeAuditEvent(xml : TXmlBuilder; name : String; value : TFhirAuditEvent);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeAuditEventChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeAuditEventChildren(xml : TXmlBuilder; value : TFhirAuditEvent);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  ComposeCoding(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subtypeList.Count - 1 do
      ComposeCoding(xml, 'subtype', value.subtypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'action', value.actionElement, CODES_TFhirAuditEventActionEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'severity', value.severityElement, CODES_TFhirAuditEventSeverityEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  ComposeInstant(xml, 'recorded', value.recordedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'outcome', value.outcome); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.purposeOfEventList.Count - 1 do
      ComposeCodeableConcept(xml, 'purposeOfEvent', value.purposeOfEventList[i]);
  for i := 0 to value.agentList.Count - 1 do
      ComposeAuditEventAgent(xml, 'agent', value.agentList[i]);
  ComposeAuditEventSource(xml, 'source', value.source); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entityList.Count - 1 do
      ComposeAuditEventEntity(xml, 'entity', value.entityList[i]);
end;

{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
function TFHIRXmlParser.ParseBasic(element : TMXmlElement; path : string) : TFhirBasic;
var
  child : TMXmlElement;
begin
  result := TFhirBasic.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBasicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBasicChild(value : TFhirBasic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDate(child, path+'/created') {L737}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBasic(xml : TXmlBuilder; name : String; value : TFhirBasic);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBasicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBasicChildren(xml : TXmlBuilder; value : TFhirBasic);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
end;

{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
function TFHIRXmlParser.ParseBinary(element : TMXmlElement; path : string) : TFhirBinary;
var
  child : TMXmlElement;
begin
  result := TFhirBinary.create;
  try
    parseResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBinaryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBinaryChild(value : TFhirBinary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentType') then
        value.contentTypeElement := ParseCode(child, path+'/contentType') {L737}
      else if (child.localName = 'securityContext') then
        value.securityContext := ParseReference(child, path+'/securityContext') {L740}
      else if (child.localName = 'data') then
        value.dataElement := ParseBase64Binary(child, path+'/data') {L737}
      else if Not ParseResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBinary(xml : TXmlBuilder; name : String; value : TFhirBinary);
begin
  if (value = nil) then
    exit;
  composeResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBinaryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBinaryChildren(xml : TXmlBuilder; value : TFhirBinary);
begin
  composeResourceChildren(xml, value);
  ComposeCode(xml, 'contentType', value.contentTypeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'securityContext', value.securityContext); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBase64Binary(xml, 'data', value.dataElement); {L738}
end;

{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
function TFHIRXmlParser.ParseBiologicallyDerivedProductCollection(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductCollection;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductCollection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductCollectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductCollectionChild(value : TFhirBiologicallyDerivedProductCollection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'collector') then
        value.collector := ParseReference(child, path+'/collector') {L740}
      else if (child.localName = 'source') then
        value.source := ParseReference(child, path+'/source') {L740}
      else if (child.localName = 'collectedPeriod') then
        value.collected := ParsePeriod(child, path+'/collectedPeriod') {L891}
      else if (child.localName = 'collectedDateTime') then
        value.collected := ParseDateTime(child, path+'/collectedDateTime') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductCollection(xml : TXmlBuilder; name : String; value : TFhirBiologicallyDerivedProductCollection);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBiologicallyDerivedProductCollectionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductCollectionChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductCollection);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'collector', value.collector); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'source', value.source); {L741}
  if (SummaryOption in [soFull, soData]) and (value.collected is TFhirPeriod) {6} then
    ComposePeriod(xml, 'collectedPeriod', TFhirPeriod(value.collected))
  else if (SummaryOption in [soFull, soData]) and (value.collected is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'collectedDateTime', TFhirDateTime(value.collected));
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductProcessing(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductProcessing;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductProcessing.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductProcessingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductProcessingChild(value : TFhirBiologicallyDerivedProductProcessing; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'procedure') then
        value.procedure_ := ParseCodeableConcept(child, path+'/procedure') {L740}
      else if (child.localName = 'additive') then
        value.additive := ParseReference(child, path+'/additive') {L740}
      else if (child.localName = 'timePeriod') then
        value.time := ParsePeriod(child, path+'/timePeriod') {L891}
      else if (child.localName = 'timeDateTime') then
        value.time := ParseDateTime(child, path+'/timeDateTime') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductProcessing(xml : TXmlBuilder; name : String; value : TFhirBiologicallyDerivedProductProcessing);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBiologicallyDerivedProductProcessingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductProcessingChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductProcessing);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'procedure', value.procedure_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'additive', value.additive); {L741}
  if (SummaryOption in [soFull, soData]) and (value.time is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timePeriod', TFhirPeriod(value.time))
  else if (SummaryOption in [soFull, soData]) and (value.time is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timeDateTime', TFhirDateTime(value.time));
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductManipulation(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductManipulation;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductManipulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductManipulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductManipulationChild(value : TFhirBiologicallyDerivedProductManipulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'timePeriod') then
        value.time := ParsePeriod(child, path+'/timePeriod') {L891}
      else if (child.localName = 'timeDateTime') then
        value.time := ParseDateTime(child, path+'/timeDateTime') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductManipulation(xml : TXmlBuilder; name : String; value : TFhirBiologicallyDerivedProductManipulation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBiologicallyDerivedProductManipulationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductManipulationChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductManipulation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.time is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timePeriod', TFhirPeriod(value.time))
  else if (SummaryOption in [soFull, soData]) and (value.time is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timeDateTime', TFhirDateTime(value.time));
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductStorage(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProductStorage;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProductStorage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductStorageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductStorageChild(value : TFhirBiologicallyDerivedProductStorage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'temperature') then
        value.temperatureElement := ParseDecimal(child, path+'/temperature') {L737}
      else if (child.localName = 'scale') then
        value.scaleElement := ParseEnum(CODES_TFhirBiologicallyDerivedProductStorageScaleEnum, SYSTEMS_TFhirBiologicallyDerivedProductStorageScaleEnum, child, path+'/scale') {L734}
      else if (child.localName = 'duration') then
        value.duration := ParsePeriod(child, path+'/duration') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductStorage(xml : TXmlBuilder; name : String; value : TFhirBiologicallyDerivedProductStorage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBiologicallyDerivedProductStorageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductStorageChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProductStorage);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'temperature', value.temperatureElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'scale', value.scaleElement, CODES_TFhirBiologicallyDerivedProductStorageScaleEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'duration', value.duration); {L741}
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProduct(element : TMXmlElement; path : string) : TFhirBiologicallyDerivedProduct;
var
  child : TMXmlElement;
begin
  result := TFhirBiologicallyDerivedProduct.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBiologicallyDerivedProductChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBiologicallyDerivedProductChild(value : TFhirBiologicallyDerivedProduct; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'productCategory') then
        value.productCategoryElement := ParseEnum(CODES_TFhirBiologicallyDerivedProductCategoryEnum, SYSTEMS_TFhirBiologicallyDerivedProductCategoryEnum, child, path+'/productCategory') {L734}
      else if (child.localName = 'productCode') then
        value.productCode := ParseCodeableConcept(child, path+'/productCode') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirBiologicallyDerivedProductStatusEnum, SYSTEMS_TFhirBiologicallyDerivedProductStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'request') then
        value.requestList.Add(ParseReference(child, path+'/request')) {L631}
      else if (child.localName = 'quantity') then
        value.quantityElement := ParseInteger(child, path+'/quantity') {L737}
      else if (child.localName = 'parent') then
        value.parentList.Add(ParseReference(child, path+'/parent')) {L631}
      else if (child.localName = 'collection') then
        value.collection := ParseBiologicallyDerivedProductCollection(child, path+'/collection') {L740}
      else if (child.localName = 'processing') then
        value.processingList.Add(ParseBiologicallyDerivedProductProcessing(child, path+'/processing')) {L631}
      else if (child.localName = 'manipulation') then
        value.manipulation := ParseBiologicallyDerivedProductManipulation(child, path+'/manipulation') {L740}
      else if (child.localName = 'storage') then
        value.storageList.Add(ParseBiologicallyDerivedProductStorage(child, path+'/storage')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProduct(xml : TXmlBuilder; name : String; value : TFhirBiologicallyDerivedProduct);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBiologicallyDerivedProductChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBiologicallyDerivedProductChildren(xml : TXmlBuilder; value : TFhirBiologicallyDerivedProduct);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'productCategory', value.productCategoryElement, CODES_TFhirBiologicallyDerivedProductCategoryEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'productCode', value.productCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirBiologicallyDerivedProductStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.requestList.Count - 1 do
      ComposeReference(xml, 'request', value.requestList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'quantity', value.quantityElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parentList.Count - 1 do
      ComposeReference(xml, 'parent', value.parentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBiologicallyDerivedProductCollection(xml, 'collection', value.collection); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processingList.Count - 1 do
      ComposeBiologicallyDerivedProductProcessing(xml, 'processing', value.processingList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBiologicallyDerivedProductManipulation(xml, 'manipulation', value.manipulation); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.storageList.Count - 1 do
      ComposeBiologicallyDerivedProductStorage(xml, 'storage', value.storageList[i]);
end;

{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
function TFHIRXmlParser.ParseBodyStructure(element : TMXmlElement; path : string) : TFhirBodyStructure;
var
  child : TMXmlElement;
begin
  result := TFhirBodyStructure.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBodyStructureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBodyStructureChild(value : TFhirBodyStructure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'morphology') then
        value.morphology := ParseCodeableConcept(child, path+'/morphology') {L740}
      else if (child.localName = 'location') then
        value.location := ParseCodeableConcept(child, path+'/location') {L740}
      else if (child.localName = 'locationQualifier') then
        value.locationQualifierList.Add(ParseCodeableConcept(child, path+'/locationQualifier')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'image') then
        value.imageList.Add(ParseAttachment(child, path+'/image')) {L631}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBodyStructure(xml : TXmlBuilder; name : String; value : TFhirBodyStructure);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBodyStructureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBodyStructureChildren(xml : TXmlBuilder; value : TFhirBodyStructure);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'morphology', value.morphology); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.locationQualifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'locationQualifier', value.locationQualifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.imageList.Count - 1 do
      ComposeAttachment(xml, 'image', value.imageList[i]);
  ComposeReference(xml, 'patient', value.patient); {L741}
end;

{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
function TFHIRXmlParser.ParseBundleLink(element : TMXmlElement; path : string) : TFhirBundleLink;
var
  child : TMXmlElement;
begin
  result := TFhirBundleLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleLinkChild(value : TFhirBundleLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'relation') then
        value.relationElement := ParseString(child, path+'/relation') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleLink(xml : TXmlBuilder; name : String; value : TFhirBundleLink);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBundleLinkChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBundleLinkChildren(xml : TXmlBuilder; value : TFhirBundleLink);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'relation', value.relationElement); {L738}
  ComposeUri(xml, 'url', value.urlElement); {L738}
end;

function TFHIRXmlParser.ParseBundleEntry(element : TMXmlElement; path : string) : TFhirBundleEntry;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntryChild(value : TFhirBundleEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'link') then
        value.link_List.Add(ParseBundleLink(child, path+'/link')) {L631}
      else if (child.localName = 'fullUrl') then
        value.fullUrlElement := ParseUri(child, path+'/fullUrl') {L737}
      else if (child.localName = 'resource') then
        value.resource := ParseInnerResource(child, path+'/resource') {L740}
      else if (child.localName = 'search') then
        value.search := ParseBundleEntrySearch(child, path+'/search') {L740}
      else if (child.localName = 'request') then
        value.request := ParseBundleEntryRequest(child, path+'/request') {L740}
      else if (child.localName = 'response') then
        value.response := ParseBundleEntryResponse(child, path+'/response') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntry(xml : TXmlBuilder; name : String; value : TFhirBundleEntry);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBundleEntryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryChildren(xml : TXmlBuilder; value : TFhirBundleEntry);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposeBundleLink(xml, 'link', value.link_List[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'fullUrl', value.fullUrlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(xml, 'resource', value, value.resource); {L741}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntrySearch(xml, 'search', value.search); {L741}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryRequest(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeBundleEntryResponse(xml, 'response', value.response); {L741}
end;

function TFHIRXmlParser.ParseBundleEntrySearch(element : TMXmlElement; path : string) : TFhirBundleEntrySearch;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntrySearch.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntrySearchChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntrySearchChild(value : TFhirBundleEntrySearch; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirSearchEntryModeEnum, SYSTEMS_TFhirSearchEntryModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'score') then
        value.scoreElement := ParseDecimal(child, path+'/score') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntrySearch(xml : TXmlBuilder; name : String; value : TFhirBundleEntrySearch);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBundleEntrySearchChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBundleEntrySearchChildren(xml : TXmlBuilder; value : TFhirBundleEntrySearch);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirSearchEntryModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeDecimal(xml, 'score', value.scoreElement); {L738}
end;

function TFHIRXmlParser.ParseBundleEntryRequest(element : TMXmlElement; path : string) : TFhirBundleEntryRequest;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntryRequest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntryRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntryRequestChild(value : TFhirBundleEntryRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'method') then
        value.methodElement := ParseEnum(CODES_TFhirHTTPVerbEnum, SYSTEMS_TFhirHTTPVerbEnum, child, path+'/method') {L734}
      else if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'ifNoneMatch') then
        value.ifNoneMatchElement := ParseString(child, path+'/ifNoneMatch') {L737}
      else if (child.localName = 'ifModifiedSince') then
        value.ifModifiedSinceElement := ParseInstant(child, path+'/ifModifiedSince') {L737}
      else if (child.localName = 'ifMatch') then
        value.ifMatchElement := ParseString(child, path+'/ifMatch') {L737}
      else if (child.localName = 'ifNoneExist') then
        value.ifNoneExistElement := ParseString(child, path+'/ifNoneExist') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryRequest(xml : TXmlBuilder; name : String; value : TFhirBundleEntryRequest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBundleEntryRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryRequestChildren(xml : TXmlBuilder; value : TFhirBundleEntryRequest);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'method', value.methodElement, CODES_TFhirHTTPVerbEnum); {L735}
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'ifNoneMatch', value.ifNoneMatchElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'ifModifiedSince', value.ifModifiedSinceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'ifMatch', value.ifMatchElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'ifNoneExist', value.ifNoneExistElement); {L738}
end;

function TFHIRXmlParser.ParseBundleEntryResponse(element : TMXmlElement; path : string) : TFhirBundleEntryResponse;
var
  child : TMXmlElement;
begin
  result := TFhirBundleEntryResponse.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleEntryResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleEntryResponseChild(value : TFhirBundleEntryResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        value.statusElement := ParseString(child, path+'/status') {L737}
      else if (child.localName = 'location') then
        value.locationElement := ParseUri(child, path+'/location') {L737}
      else if (child.localName = 'etag') then
        value.etagElement := ParseString(child, path+'/etag') {L737}
      else if (child.localName = 'lastModified') then
        value.lastModifiedElement := ParseInstant(child, path+'/lastModified') {L737}
      else if (child.localName = 'outcome') then
        value.outcome := ParseInnerResource(child, path+'/outcome') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryResponse(xml : TXmlBuilder; name : String; value : TFhirBundleEntryResponse);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBundleEntryResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBundleEntryResponseChildren(xml : TXmlBuilder; value : TFhirBundleEntryResponse);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'status', value.statusElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeUri(xml, 'location', value.locationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeString(xml, 'etag', value.etagElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'lastModified', value.lastModifiedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(xml, 'outcome', value, value.outcome); {L741}
end;

function TFHIRXmlParser.ParseBundle(element : TMXmlElement; path : string) : TFhirBundle;
var
  child : TMXmlElement;
begin
  result := TFhirBundle.create;
  try
    parseResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseBundleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseBundleChild(value : TFhirBundle; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirBundleTypeEnum, SYSTEMS_TFhirBundleTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'timestamp') then
        value.timestampElement := ParseInstant(child, path+'/timestamp') {L737}
      else if (child.localName = 'total') then
        value.totalElement := ParseUnsignedInt(child, path+'/total') {L737}
      else if (child.localName = 'link') then
        value.link_List.Add(ParseBundleLink(child, path+'/link')) {L631}
      else if (child.localName = 'entry') then
        value.entryList.Add(ParseBundleEntry(child, path+'/entry')) {L631}
      else if (child.localName = 'signature') then
        value.signature := ParseSignature(child, path+'/signature') {L740}
      else if Not ParseResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeBundle(xml : TXmlBuilder; name : String; value : TFhirBundle);
begin
  if (value = nil) then
    exit;
  composeResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeBundleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeBundleChildren(xml : TXmlBuilder; value : TFhirBundle);
var
  i : integer;
begin
  composeResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirBundleTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInstant(xml, 'timestamp', value.timestampElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData, soCount]) then
    ComposeUnsignedInt(xml, 'total', value.totalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposeBundleLink(xml, 'link', value.link_List[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to value.entryList.Count - 1 do
      ComposeBundleEntry(xml, 'entry', value.entryList[i]);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeSignature(xml, 'signature', value.signature); {L741}
end;

{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
function TFHIRXmlParser.ParseCapabilityStatementSoftware(element : TMXmlElement; path : string) : TFhirCapabilityStatementSoftware;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementSoftware.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementSoftwareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementSoftwareChild(value : TFhirCapabilityStatementSoftware; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'releaseDate') then
        value.releaseDateElement := ParseDateTime(child, path+'/releaseDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementSoftware(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementSoftware);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementSoftwareChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementSoftwareChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementSoftware);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'releaseDate', value.releaseDateElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementImplementation(element : TMXmlElement; path : string) : TFhirCapabilityStatementImplementation;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementImplementation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementImplementationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementImplementationChild(value : TFhirCapabilityStatementImplementation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseUrl(child, path+'/url') {L737}
      else if (child.localName = 'custodian') then
        value.custodian := ParseReference(child, path+'/custodian') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementImplementation(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementImplementation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementImplementationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementImplementationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementImplementation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'custodian', value.custodian); {L741}
end;

function TFHIRXmlParser.ParseCapabilityStatementRest(element : TMXmlElement; path : string) : TFhirCapabilityStatementRest;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestChild(value : TFhirCapabilityStatementRest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirRestfulCapabilityModeEnum, SYSTEMS_TFhirRestfulCapabilityModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if (child.localName = 'security') then
        value.security := ParseCapabilityStatementRestSecurity(child, path+'/security') {L740}
      else if (child.localName = 'resource') then
        value.resourceList.Add(ParseCapabilityStatementRestResource(child, path+'/resource')) {L631}
      else if (child.localName = 'interaction') then
        value.interactionList.Add(ParseCapabilityStatementRestInteraction(child, path+'/interaction')) {L631}
      else if (child.localName = 'searchParam') then
        value.searchParamList.Add(ParseCapabilityStatementRestResourceSearchParam(child, path+'/searchParam')) {L631}
      else if (child.localName = 'operation') then
        value.operationList.Add(ParseCapabilityStatementRestResourceOperation(child, path+'/operation')) {L631}
      else if (child.localName = 'compartment') then
        value.compartmentList.Add(ParseCanonical(child, path+'/compartment')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRest(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirRestfulCapabilityModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementRestSecurity(xml, 'security', value.security); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resourceList.Count - 1 do
      ComposeCapabilityStatementRestResource(xml, 'resource', value.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.interactionList.Count - 1 do
      ComposeCapabilityStatementRestInteraction(xml, 'interaction', value.interactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(xml, 'searchParam', value.searchParamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(xml, 'operation', value.operationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.compartmentList.Count - 1 do
      ComposeCanonical(xml, 'compartment', value.compartmentList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatementRestSecurity(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestSecurity;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestSecurity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestSecurityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestSecurityChild(value : TFhirCapabilityStatementRestSecurity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'cors') then
        value.corsElement := ParseBoolean(child, path+'/cors') {L737}
      else if (child.localName = 'service') then
        value.serviceList.Add(ParseCodeableConcept(child, path+'/service')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestSecurity(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRestSecurity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestSecurityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestSecurityChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestSecurity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'cors', value.corsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceList.Count - 1 do
      ComposeCodeableConcept(xml, 'service', value.serviceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResource(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResource;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceChild(value : TFhirCapabilityStatementRestResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if (child.localName = 'supportedProfile') then
        value.supportedProfileList.Add(ParseCanonical(child, path+'/supportedProfile')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if (child.localName = 'interaction') then
        value.interactionList.Add(ParseCapabilityStatementRestResourceInteraction(child, path+'/interaction')) {L631}
      else if (child.localName = 'versioning') then
        value.versioningElement := ParseEnum(CODES_TFhirResourceVersionPolicyEnum, SYSTEMS_TFhirResourceVersionPolicyEnum, child, path+'/versioning') {L734}
      else if (child.localName = 'readHistory') then
        value.readHistoryElement := ParseBoolean(child, path+'/readHistory') {L737}
      else if (child.localName = 'updateCreate') then
        value.updateCreateElement := ParseBoolean(child, path+'/updateCreate') {L737}
      else if (child.localName = 'conditionalCreate') then
        value.conditionalCreateElement := ParseBoolean(child, path+'/conditionalCreate') {L737}
      else if (child.localName = 'conditionalRead') then
        value.conditionalReadElement := ParseEnum(CODES_TFhirConditionalReadStatusEnum, SYSTEMS_TFhirConditionalReadStatusEnum, child, path+'/conditionalRead') {L734}
      else if (child.localName = 'conditionalUpdate') then
        value.conditionalUpdateElement := ParseBoolean(child, path+'/conditionalUpdate') {L737}
      else if (child.localName = 'conditionalDelete') then
        value.conditionalDeleteElement := ParseEnum(CODES_TFhirConditionalDeleteStatusEnum, SYSTEMS_TFhirConditionalDeleteStatusEnum, child, path+'/conditionalDelete') {L734}
      else if (child.localName = 'referencePolicy') then
        value.referencePolicyList.Add(ParseEnum(CODES_TFhirReferenceHandlingPolicyEnum, SYSTEMS_TFhirReferenceHandlingPolicyEnum, child, path+'/referencePolicy')){y.1}
      else if (child.localName = 'searchInclude') then
        value.searchIncludeList.Add(ParseString(child, path+'/searchInclude')) {L631}
      else if (child.localName = 'searchRevInclude') then
        value.searchRevIncludeList.Add(ParseString(child, path+'/searchRevInclude')) {L631}
      else if (child.localName = 'searchParam') then
        value.searchParamList.Add(ParseCapabilityStatementRestResourceSearchParam(child, path+'/searchParam')) {L631}
      else if (child.localName = 'operation') then
        value.operationList.Add(ParseCapabilityStatementRestResourceOperation(child, path+'/operation')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResource(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRestResource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestResourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.supportedProfileList.Count - 1 do
      ComposeCanonical(xml, 'supportedProfile', value.supportedProfileList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.interactionList.Count - 1 do
      ComposeCapabilityStatementRestResourceInteraction(xml, 'interaction', value.interactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'versioning', value.versioningElement, CODES_TFhirResourceVersionPolicyEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'readHistory', value.readHistoryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'updateCreate', value.updateCreateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'conditionalCreate', value.conditionalCreateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'conditionalRead', value.conditionalReadElement, CODES_TFhirConditionalReadStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'conditionalUpdate', value.conditionalUpdateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'conditionalDelete', value.conditionalDeleteElement, CODES_TFhirConditionalDeleteStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.referencePolicyList.Count - 1 do
      ComposeEnum(xml, 'referencePolicy', value.referencePolicyList[i], CODES_TFhirReferenceHandlingPolicyEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.searchIncludeList.Count - 1 do
      ComposeString(xml, 'searchInclude', value.searchIncludeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.searchRevIncludeList.Count - 1 do
      ComposeString(xml, 'searchRevInclude', value.searchRevIncludeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.searchParamList.Count - 1 do
      ComposeCapabilityStatementRestResourceSearchParam(xml, 'searchParam', value.searchParamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.operationList.Count - 1 do
      ComposeCapabilityStatementRestResourceOperation(xml, 'operation', value.operationList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResourceInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceInteractionChild(value : TFhirCapabilityStatementRestResourceInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirTypeRestfulInteractionEnum, SYSTEMS_TFhirTypeRestfulInteractionEnum, child, path+'/code') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceInteraction(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRestResourceInteraction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestResourceInteractionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResourceInteraction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirTypeRestfulInteractionEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceSearchParam(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceSearchParam;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResourceSearchParam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceSearchParamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceSearchParamChild(value : TFhirCapabilityStatementRestResourceSearchParam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceSearchParam(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRestResourceSearchParam);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestResourceSearchParamChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceSearchParamChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResourceSearchParam);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirSearchParamTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceOperation(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestResourceOperation;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestResourceOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestResourceOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestResourceOperationChild(value : TFhirCapabilityStatementRestResourceOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceOperation(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRestResourceOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestResourceOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestResourceOperationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestResourceOperation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementRestInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatementRestInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementRestInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementRestInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementRestInteractionChild(value : TFhirCapabilityStatementRestInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirSystemRestfulInteractionEnum, SYSTEMS_TFhirSystemRestfulInteractionEnum, child, path+'/code') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestInteraction(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementRestInteraction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementRestInteractionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementRestInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementRestInteraction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirSystemRestfulInteractionEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementMessaging(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessaging;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementMessaging.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementMessagingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingChild(value : TFhirCapabilityStatementMessaging; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseCapabilityStatementMessagingEndpoint(child, path+'/endpoint')) {L631}
      else if (child.localName = 'reliableCache') then
        value.reliableCacheElement := ParseUnsignedInt(child, path+'/reliableCache') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if (child.localName = 'supportedMessage') then
        value.supportedMessageList.Add(ParseCapabilityStatementMessagingSupportedMessage(child, path+'/supportedMessage')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessaging(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementMessaging);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementMessagingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementMessaging);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeCapabilityStatementMessagingEndpoint(xml, 'endpoint', value.endpointList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'reliableCache', value.reliableCacheElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.supportedMessageList.Count - 1 do
      ComposeCapabilityStatementMessagingSupportedMessage(xml, 'supportedMessage', value.supportedMessageList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingEndpoint(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingEndpoint;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementMessagingEndpoint.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementMessagingEndpointChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingEndpointChild(value : TFhirCapabilityStatementMessagingEndpoint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'protocol') then
        value.protocol := ParseCoding(child, path+'/protocol') {L740}
      else if (child.localName = 'address') then
        value.addressElement := ParseUrl(child, path+'/address') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingEndpoint(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementMessagingEndpoint);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementMessagingEndpointChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingEndpointChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementMessagingEndpoint);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCoding(xml, 'protocol', value.protocol); {L741}
  ComposeUrl(xml, 'address', value.addressElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingSupportedMessage(element : TMXmlElement; path : string) : TFhirCapabilityStatementMessagingSupportedMessage;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementMessagingSupportedMessage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementMessagingSupportedMessageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementMessagingSupportedMessageChild(value : TFhirCapabilityStatementMessagingSupportedMessage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirEventCapabilityModeEnum, SYSTEMS_TFhirEventCapabilityModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingSupportedMessage(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementMessagingSupportedMessage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementMessagingSupportedMessageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementMessagingSupportedMessageChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementMessagingSupportedMessage);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirEventCapabilityModeEnum); {L735}
  ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatementDocument(element : TMXmlElement; path : string) : TFhirCapabilityStatementDocument;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatementDocument.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementDocumentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementDocumentChild(value : TFhirCapabilityStatementDocument; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirDocumentModeEnum, SYSTEMS_TFhirDocumentModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementDocument(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatementDocument);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementDocumentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementDocumentChildren(xml : TXmlBuilder; value : TFhirCapabilityStatementDocument);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirDocumentModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
  ComposeCanonical(xml, 'profile', value.profileElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatement(element : TMXmlElement; path : string) : TFhirCapabilityStatement;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatementChild(value : TFhirCapabilityStatement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'instantiates') then
        value.instantiatesList.Add(ParseCanonical(child, path+'/instantiates')) {L631}
      else if (child.localName = 'imports') then
        value.importsList.Add(ParseCanonical(child, path+'/imports')) {L631}
      else if (child.localName = 'software') then
        value.software := ParseCapabilityStatementSoftware(child, path+'/software') {L740}
      else if (child.localName = 'implementation') then
        value.implementation_ := ParseCapabilityStatementImplementation(child, path+'/implementation') {L740}
      else if (child.localName = 'fhirVersion') then
        value.fhirVersionElement := ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, child, path+'/fhirVersion') {L734}
      else if (child.localName = 'format') then
        value.formatList.Add(ParseCode(child, path+'/format')) {L631}
      else if (child.localName = 'patchFormat') then
        value.patchFormatList.Add(ParseCode(child, path+'/patchFormat')) {L631}
      else if (child.localName = 'implementationGuide') then
        value.implementationGuideList.Add(ParseCanonical(child, path+'/implementationGuide')) {L631}
      else if (child.localName = 'rest') then
        value.restList.Add(ParseCapabilityStatementRest(child, path+'/rest')) {L631}
      else if (child.localName = 'messaging') then
        value.messagingList.Add(ParseCapabilityStatementMessaging(child, path+'/messaging')) {L631}
      else if (child.localName = 'document') then
        value.documentList.Add(ParseCapabilityStatementDocument(child, path+'/document')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatementChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirCapabilityStatementKindEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesList.Count - 1 do
      ComposeCanonical(xml, 'instantiates', value.instantiatesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.importsList.Count - 1 do
      ComposeCanonical(xml, 'imports', value.importsList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementSoftware(xml, 'software', value.software); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatementImplementation(xml, 'implementation', value.implementation_); {L741}
  ComposeEnum(xml, 'fhirVersion', value.fhirVersionElement, CODES_TFhirFHIRVersionEnum); {L735}
  for i := 0 to value.formatList.Count - 1 do
      ComposeCode(xml, 'format', value.formatList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.patchFormatList.Count - 1 do
      ComposeCode(xml, 'patchFormat', value.patchFormatList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.implementationGuideList.Count - 1 do
      ComposeCanonical(xml, 'implementationGuide', value.implementationGuideList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.restList.Count - 1 do
      ComposeCapabilityStatementRest(xml, 'rest', value.restList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.messagingList.Count - 1 do
      ComposeCapabilityStatementMessaging(xml, 'messaging', value.messagingList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.documentList.Count - 1 do
      ComposeCapabilityStatementDocument(xml, 'document', value.documentList[i]);
end;

{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAPABILITYSTATEMENT2}
function TFHIRXmlParser.ParseCapabilityStatement2Software(element : TMXmlElement; path : string) : TFhirCapabilityStatement2Software;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2Software.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2SoftwareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2SoftwareChild(value : TFhirCapabilityStatement2Software; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'releaseDate') then
        value.releaseDateElement := ParseDateTime(child, path+'/releaseDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2Software(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2Software);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2SoftwareChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2SoftwareChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2Software);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'releaseDate', value.releaseDateElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatement2Implementation(element : TMXmlElement; path : string) : TFhirCapabilityStatement2Implementation;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2Implementation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2ImplementationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2ImplementationChild(value : TFhirCapabilityStatement2Implementation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseUrl(child, path+'/url') {L737}
      else if (child.localName = 'custodian') then
        value.custodian := ParseReference(child, path+'/custodian') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2Implementation(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2Implementation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2ImplementationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2ImplementationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2Implementation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'custodian', value.custodian); {L741}
end;

function TFHIRXmlParser.ParseCapabilityStatement2Rest(element : TMXmlElement; path : string) : TFhirCapabilityStatement2Rest;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2Rest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2RestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestChild(value : TFhirCapabilityStatement2Rest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirRestfulCapabilityModeEnum, SYSTEMS_TFhirRestfulCapabilityModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if (child.localName = 'resource') then
        value.resourceList.Add(ParseCapabilityStatement2RestResource(child, path+'/resource')) {L631}
      else if (child.localName = 'interaction') then
        value.interactionList.Add(ParseCapabilityStatement2RestInteraction(child, path+'/interaction')) {L631}
      else if (child.localName = 'searchParam') then
        value.searchParamList.Add(ParseCapabilityStatement2RestResourceSearchParam(child, path+'/searchParam')) {L631}
      else if (child.localName = 'operation') then
        value.operationList.Add(ParseCapabilityStatement2RestResourceOperation(child, path+'/operation')) {L631}
      else if (child.localName = 'compartment') then
        value.compartmentList.Add(ParseCanonical(child, path+'/compartment')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2Rest(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2Rest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2RestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2Rest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirRestfulCapabilityModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resourceList.Count - 1 do
      ComposeCapabilityStatement2RestResource(xml, 'resource', value.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.interactionList.Count - 1 do
      ComposeCapabilityStatement2RestInteraction(xml, 'interaction', value.interactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.searchParamList.Count - 1 do
      ComposeCapabilityStatement2RestResourceSearchParam(xml, 'searchParam', value.searchParamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.operationList.Count - 1 do
      ComposeCapabilityStatement2RestResourceOperation(xml, 'operation', value.operationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.compartmentList.Count - 1 do
      ComposeCanonical(xml, 'compartment', value.compartmentList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResource(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResource;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2RestResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2RestResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceChild(value : TFhirCapabilityStatement2RestResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if (child.localName = 'supportedProfile') then
        value.supportedProfileList.Add(ParseCanonical(child, path+'/supportedProfile')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if (child.localName = 'interaction') then
        value.interactionList.Add(ParseCapabilityStatement2RestResourceInteraction(child, path+'/interaction')) {L631}
      else if (child.localName = 'searchParam') then
        value.searchParamList.Add(ParseCapabilityStatement2RestResourceSearchParam(child, path+'/searchParam')) {L631}
      else if (child.localName = 'operation') then
        value.operationList.Add(ParseCapabilityStatement2RestResourceOperation(child, path+'/operation')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResource(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2RestResource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2RestResourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.supportedProfileList.Count - 1 do
      ComposeCanonical(xml, 'supportedProfile', value.supportedProfileList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.interactionList.Count - 1 do
      ComposeCapabilityStatement2RestResourceInteraction(xml, 'interaction', value.interactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.searchParamList.Count - 1 do
      ComposeCapabilityStatement2RestResourceSearchParam(xml, 'searchParam', value.searchParamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.operationList.Count - 1 do
      ComposeCapabilityStatement2RestResourceOperation(xml, 'operation', value.operationList[i]);
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResourceInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2RestResourceInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2RestResourceInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceInteractionChild(value : TFhirCapabilityStatement2RestResourceInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirTypeRestfulInteractionEnum, SYSTEMS_TFhirTypeRestfulInteractionEnum, child, path+'/code') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceInteraction(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2RestResourceInteraction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2RestResourceInteractionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResourceInteraction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirTypeRestfulInteractionEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceSearchParam(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResourceSearchParam;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2RestResourceSearchParam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2RestResourceSearchParamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceSearchParamChild(value : TFhirCapabilityStatement2RestResourceSearchParam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceSearchParam(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2RestResourceSearchParam);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2RestResourceSearchParamChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceSearchParamChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResourceSearchParam);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirSearchParamTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceOperation(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestResourceOperation;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2RestResourceOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2RestResourceOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestResourceOperationChild(value : TFhirCapabilityStatement2RestResourceOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceOperation(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2RestResourceOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2RestResourceOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestResourceOperationChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestResourceOperation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestInteraction(element : TMXmlElement; path : string) : TFhirCapabilityStatement2RestInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2RestInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2RestInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2RestInteractionChild(value : TFhirCapabilityStatement2RestInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirSystemRestfulInteractionEnum, SYSTEMS_TFhirSystemRestfulInteractionEnum, child, path+'/code') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestInteraction(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2RestInteraction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2RestInteractionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2RestInteractionChildren(xml : TXmlBuilder; value : TFhirCapabilityStatement2RestInteraction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirSystemRestfulInteractionEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCapabilityStatement2(element : TMXmlElement; path : string) : TFhirCapabilityStatement2;
var
  child : TMXmlElement;
begin
  result := TFhirCapabilityStatement2.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCapabilityStatement2Child(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCapabilityStatement2Child(value : TFhirCapabilityStatement2; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'instantiates') then
        value.instantiatesList.Add(ParseCanonical(child, path+'/instantiates')) {L631}
      else if (child.localName = 'imports') then
        value.importsList.Add(ParseCanonical(child, path+'/imports')) {L631}
      else if (child.localName = 'software') then
        value.software := ParseCapabilityStatement2Software(child, path+'/software') {L740}
      else if (child.localName = 'implementation') then
        value.implementation_ := ParseCapabilityStatement2Implementation(child, path+'/implementation') {L740}
      else if (child.localName = 'fhirVersion') then
        value.fhirVersionElement := ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, child, path+'/fhirVersion') {L734}
      else if (child.localName = 'format') then
        value.formatList.Add(ParseCode(child, path+'/format')) {L631}
      else if (child.localName = 'patchFormat') then
        value.patchFormatList.Add(ParseCode(child, path+'/patchFormat')) {L631}
      else if (child.localName = 'implementationGuide') then
        value.implementationGuideList.Add(ParseCanonical(child, path+'/implementationGuide')) {L631}
      else if (child.localName = 'rest') then
        value.restList.Add(ParseCapabilityStatement2Rest(child, path+'/rest')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2(xml : TXmlBuilder; name : String; value : TFhirCapabilityStatement2);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCapabilityStatement2Children(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCapabilityStatement2Children(xml : TXmlBuilder; value : TFhirCapabilityStatement2);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirCapabilityStatementKindEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesList.Count - 1 do
      ComposeCanonical(xml, 'instantiates', value.instantiatesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.importsList.Count - 1 do
      ComposeCanonical(xml, 'imports', value.importsList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatement2Software(xml, 'software', value.software); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCapabilityStatement2Implementation(xml, 'implementation', value.implementation_); {L741}
  ComposeEnum(xml, 'fhirVersion', value.fhirVersionElement, CODES_TFhirFHIRVersionEnum); {L735}
  for i := 0 to value.formatList.Count - 1 do
      ComposeCode(xml, 'format', value.formatList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.patchFormatList.Count - 1 do
      ComposeCode(xml, 'patchFormat', value.patchFormatList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.implementationGuideList.Count - 1 do
      ComposeCanonical(xml, 'implementationGuide', value.implementationGuideList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.restList.Count - 1 do
      ComposeCapabilityStatement2Rest(xml, 'rest', value.restList[i]);
end;

{$ENDIF FHIR_CAPABILITYSTATEMENT2}
{$IFDEF FHIR_CAREPLAN}
function TFHIRXmlParser.ParseCarePlanActivity(element : TMXmlElement; path : string) : TFhirCarePlanActivity;
var
  child : TMXmlElement;
begin
  result := TFhirCarePlanActivity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCarePlanActivityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCarePlanActivityChild(value : TFhirCarePlanActivity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'outcome') then
        value.outcomeList.Add(ParseCodeableReference(child, path+'/outcome')) {L631}
      else if (child.localName = 'progress') then
        value.progressList.Add(ParseAnnotation(child, path+'/progress')) {L631}
      else if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if (child.localName = 'detail') then
        value.detail := ParseCarePlanActivityDetail(child, path+'/detail') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivity(xml : TXmlBuilder; name : String; value : TFhirCarePlanActivity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCarePlanActivityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivityChildren(xml : TXmlBuilder; value : TFhirCarePlanActivity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.outcomeList.Count - 1 do
      ComposeCodeableReference(xml, 'outcome', value.outcomeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.progressList.Count - 1 do
      ComposeAnnotation(xml, 'progress', value.progressList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'reference', value.reference); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCarePlanActivityDetail(xml, 'detail', value.detail); {L741}
end;

function TFHIRXmlParser.ParseCarePlanActivityDetail(element : TMXmlElement; path : string) : TFhirCarePlanActivityDetail;
var
  child : TMXmlElement;
begin
  result := TFhirCarePlanActivityDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCarePlanActivityDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCarePlanActivityDetailChild(value : TFhirCarePlanActivityDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirCarePlanActivityKindEnum, SYSTEMS_TFhirCarePlanActivityKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'goal') then
        value.goalList.Add(ParseReference(child, path+'/goal')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirCarePlanActivityStatusEnum, SYSTEMS_TFhirCarePlanActivityStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'doNotPerform') then
        value.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {L737}
      else if (child.localName = 'scheduledTiming') then
        value.scheduled := ParseTiming(child, path+'/scheduledTiming') {L891}
      else if (child.localName = 'scheduledPeriod') then
        value.scheduled := ParsePeriod(child, path+'/scheduledPeriod') {L891}
      else if (child.localName = 'scheduledString') then
        value.scheduled := ParseString(child, path+'/scheduledString') {L891}
      else if (child.localName = 'location') then
        value.location := ParseCodeableReference(child, path+'/location') {L740}
      else if (child.localName = 'reportedReference') then
        value.reported := ParseReference(child, path+'/reportedReference') {L881}
      else if (child.localName = 'reportedBoolean') then
        value.reported := ParseBoolean(child, path+'/reportedBoolean') {L891}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseReference(child, path+'/performer')) {L631}
      else if (child.localName = 'productCodeableConcept') then
        value.product := ParseCodeableConcept(child, path+'/productCodeableConcept') {L891}
      else if (child.localName = 'productReference') then
        value.product := ParseReference(child, path+'/productReference') {L881}
      else if (child.localName = 'dailyAmount') then
        value.dailyAmount := ParseQuantity(child, path+'/dailyAmount') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivityDetail(xml : TXmlBuilder; name : String; value : TFhirCarePlanActivityDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCarePlanActivityDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCarePlanActivityDetailChildren(xml : TXmlBuilder; value : TFhirCarePlanActivityDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirCarePlanActivityKindEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.goalList.Count - 1 do
      ComposeReference(xml, 'goal', value.goalList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirCarePlanActivityStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'doNotPerform', value.doNotPerformElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.scheduled is TFhirTiming) {6} then
    ComposeTiming(xml, 'scheduledTiming', TFhirTiming(value.scheduled))
  else if (SummaryOption in [soFull, soData]) and (value.scheduled is TFhirPeriod) {6} then
    ComposePeriod(xml, 'scheduledPeriod', TFhirPeriod(value.scheduled))
  else if (SummaryOption in [soFull, soData]) and (value.scheduled is TFhirString) {6} then
    ComposeString(xml, 'scheduledString', TFhirString(value.scheduled));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) and (value.reported is TFhirReference) {2} then
    ComposeReference(xml, 'reportedReference', TFhirReference(value.reported))
  else if (SummaryOption in [soFull, soData]) and (value.reported is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'reportedBoolean', TFhirBoolean(value.reported));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) and (value.product is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'productCodeableConcept', TFhirCodeableConcept(value.product))
  else if (SummaryOption in [soFull, soData]) and (value.product is TFhirReference) {2} then
    ComposeReference(xml, 'productReference', TFhirReference(value.product));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'dailyAmount', value.dailyAmount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseCarePlan(element : TMXmlElement; path : string) : TFhirCarePlan;
var
  child : TMXmlElement;
begin
  result := TFhirCarePlan.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCarePlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCarePlanChild(value : TFhirCarePlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'replaces') then
        value.replacesList.Add(ParseReference(child, path+'/replaces')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirCarePlanIntentEnum, SYSTEMS_TFhirCarePlanIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'contributor') then
        value.contributorList.Add(ParseReference(child, path+'/contributor')) {L631}
      else if (child.localName = 'careTeam') then
        value.careTeamList.Add(ParseReference(child, path+'/careTeam')) {L631}
      else if (child.localName = 'addresses') then
        value.addressesList.Add(ParseCodeableReference(child, path+'/addresses')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseReference(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'goal') then
        value.goalList.Add(ParseReference(child, path+'/goal')) {L631}
      else if (child.localName = 'activity') then
        value.activityList.Add(ParseCarePlanActivity(child, path+'/activity')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCarePlan(xml : TXmlBuilder; name : String; value : TFhirCarePlan);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCarePlanChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCarePlanChildren(xml : TXmlBuilder; value : TFhirCarePlan);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(xml, 'replaces', value.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirRequestStatusEnum); {L735}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirCarePlanIntentEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contributorList.Count - 1 do
      ComposeReference(xml, 'contributor', value.contributorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.careTeamList.Count - 1 do
      ComposeReference(xml, 'careTeam', value.careTeamList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.addressesList.Count - 1 do
      ComposeCodeableReference(xml, 'addresses', value.addressesList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.goalList.Count - 1 do
      ComposeReference(xml, 'goal', value.goalList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.activityList.Count - 1 do
      ComposeCarePlanActivity(xml, 'activity', value.activityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
function TFHIRXmlParser.ParseCareTeamParticipant(element : TMXmlElement; path : string) : TFhirCareTeamParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirCareTeamParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCareTeamParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCareTeamParticipantChild(value : TFhirCareTeamParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'member') then
        value.member := ParseReference(child, path+'/member') {L740}
      else if (child.localName = 'onBehalfOf') then
        value.onBehalfOf := ParseReference(child, path+'/onBehalfOf') {L740}
      else if (child.localName = 'coveragePeriod') then
        value.coverage := ParsePeriod(child, path+'/coveragePeriod') {L891}
      else if (child.localName = 'coverageTiming') then
        value.coverage := ParseTiming(child, path+'/coverageTiming') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCareTeamParticipant(xml : TXmlBuilder; name : String; value : TFhirCareTeamParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCareTeamParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCareTeamParticipantChildren(xml : TXmlBuilder; value : TFhirCareTeamParticipant);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'member', value.member); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'onBehalfOf', value.onBehalfOf); {L741}
  if (SummaryOption in [soFull, soData]) and (value.coverage is TFhirPeriod) {6} then
    ComposePeriod(xml, 'coveragePeriod', TFhirPeriod(value.coverage))
  else if (SummaryOption in [soFull, soData]) and (value.coverage is TFhirTiming) {6} then
    ComposeTiming(xml, 'coverageTiming', TFhirTiming(value.coverage));
end;

function TFHIRXmlParser.ParseCareTeam(element : TMXmlElement; path : string) : TFhirCareTeam;
var
  child : TMXmlElement;
begin
  result := TFhirCareTeam.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCareTeamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCareTeamChild(value : TFhirCareTeam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirCareTeamStatusEnum, SYSTEMS_TFhirCareTeamStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseCareTeamParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'managingOrganization') then
        value.managingOrganizationList.Add(ParseReference(child, path+'/managingOrganization')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCareTeam(xml : TXmlBuilder; name : String; value : TFhirCareTeam);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCareTeamChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCareTeamChildren(xml : TXmlBuilder; value : TFhirCareTeam);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirCareTeamStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeCareTeamParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.managingOrganizationList.Count - 1 do
      ComposeReference(xml, 'managingOrganization', value.managingOrganizationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
function TFHIRXmlParser.ParseCatalogEntryRelatedEntry(element : TMXmlElement; path : string) : TFhirCatalogEntryRelatedEntry;
var
  child : TMXmlElement;
begin
  result := TFhirCatalogEntryRelatedEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCatalogEntryRelatedEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCatalogEntryRelatedEntryChild(value : TFhirCatalogEntryRelatedEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'relationship') then
        value.relationshipElement := ParseEnum(CODES_TFhirCatalogEntryRelationTypeEnum, SYSTEMS_TFhirCatalogEntryRelationTypeEnum, child, path+'/relationship') {L734}
      else if (child.localName = 'target') then
        value.target := ParseReference(child, path+'/target') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCatalogEntryRelatedEntry(xml : TXmlBuilder; name : String; value : TFhirCatalogEntryRelatedEntry);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCatalogEntryRelatedEntryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCatalogEntryRelatedEntryChildren(xml : TXmlBuilder; value : TFhirCatalogEntryRelatedEntry);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'relationship', value.relationshipElement, CODES_TFhirCatalogEntryRelationTypeEnum); {L735}
  ComposeReference(xml, 'target', value.target); {L741}
end;

function TFHIRXmlParser.ParseCatalogEntry(element : TMXmlElement; path : string) : TFhirCatalogEntry;
var
  child : TMXmlElement;
begin
  result := TFhirCatalogEntry.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCatalogEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCatalogEntryChild(value : TFhirCatalogEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirCatalogEntryTypeEnum, SYSTEMS_TFhirCatalogEntryTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirCatalogEntryStatusEnum, SYSTEMS_TFhirCatalogEntryStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'orderable') then
        value.orderableElement := ParseBoolean(child, path+'/orderable') {L737}
      else if (child.localName = 'referencedItem') then
        value.referencedItem := ParseReference(child, path+'/referencedItem') {L740}
      else if (child.localName = 'relatedEntry') then
        value.relatedEntryList.Add(ParseCatalogEntryRelatedEntry(child, path+'/relatedEntry')) {L631}
      else if (child.localName = 'updatedBy') then
        value.updatedBy := ParseReference(child, path+'/updatedBy') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'estimatedDuration') then
        value.estimatedDuration := ParseDuration(child, path+'/estimatedDuration') {L740}
      else if (child.localName = 'billingCode') then
        value.billingCodeList.Add(ParseCodeableConcept(child, path+'/billingCode')) {L631}
      else if (child.localName = 'billingSummary') then
        value.billingSummaryElement := ParseString(child, path+'/billingSummary') {L737}
      else if (child.localName = 'scheduleSummary') then
        value.scheduleSummaryElement := ParseString(child, path+'/scheduleSummary') {L737}
      else if (child.localName = 'limitationSummary') then
        value.limitationSummaryElement := ParseString(child, path+'/limitationSummary') {L737}
      else if (child.localName = 'regulatorySummary') then
        value.regulatorySummaryElement := ParseString(child, path+'/regulatorySummary') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCatalogEntry(xml : TXmlBuilder; name : String; value : TFhirCatalogEntry);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCatalogEntryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCatalogEntryChildren(xml : TXmlBuilder; value : TFhirCatalogEntry);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirCatalogEntryTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirCatalogEntryStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  ComposeBoolean(xml, 'orderable', value.orderableElement); {L738}
  ComposeReference(xml, 'referencedItem', value.referencedItem); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedEntryList.Count - 1 do
      ComposeCatalogEntryRelatedEntry(xml, 'relatedEntry', value.relatedEntryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'updatedBy', value.updatedBy); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'estimatedDuration', value.estimatedDuration); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.billingCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'billingCode', value.billingCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'billingSummary', value.billingSummaryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'scheduleSummary', value.scheduleSummaryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'limitationSummary', value.limitationSummaryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'regulatorySummary', value.regulatorySummaryElement); {L738}
end;

{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
function TFHIRXmlParser.ParseChargeItemPerformer(element : TMXmlElement; path : string) : TFhirChargeItemPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemPerformerChild(value : TFhirChargeItemPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemPerformer(xml : TXmlBuilder; name : String; value : TFhirChargeItemPerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeChargeItemPerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeChargeItemPerformerChildren(xml : TXmlBuilder; value : TFhirChargeItemPerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseChargeItem(element : TMXmlElement; path : string) : TFhirChargeItem;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItem.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemChild(value : TFhirChargeItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'definitionUri') then
        value.definitionUriList.Add(ParseUri(child, path+'/definitionUri')) {L631}
      else if (child.localName = 'definitionCanonical') then
        value.definitionCanonicalList.Add(ParseCanonical(child, path+'/definitionCanonical')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirChargeItemStatusEnum, SYSTEMS_TFhirChargeItemStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'context') then
        value.context := ParseReference(child, path+'/context') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseChargeItemPerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'performingOrganization') then
        value.performingOrganization := ParseReference(child, path+'/performingOrganization') {L740}
      else if (child.localName = 'requestingOrganization') then
        value.requestingOrganization := ParseReference(child, path+'/requestingOrganization') {L740}
      else if (child.localName = 'costCenter') then
        value.costCenter := ParseReference(child, path+'/costCenter') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'bodysite') then
        value.bodysiteList.Add(ParseCodeableConcept(child, path+'/bodysite')) {L631}
      else if (child.localName = 'factorOverride') then
        value.factorOverrideElement := ParseDecimal(child, path+'/factorOverride') {L737}
      else if (child.localName = 'priceOverride') then
        value.priceOverride := ParseMoney(child, path+'/priceOverride') {L740}
      else if (child.localName = 'overrideReason') then
        value.overrideReasonElement := ParseString(child, path+'/overrideReason') {L737}
      else if (child.localName = 'enterer') then
        value.enterer := ParseReference(child, path+'/enterer') {L740}
      else if (child.localName = 'enteredDate') then
        value.enteredDateElement := ParseDateTime(child, path+'/enteredDate') {L737}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableConcept(child, path+'/reason')) {L631}
      else if (child.localName = 'service') then
        value.serviceList.Add(ParseReference(child, path+'/service')) {L631}
      else if (child.localName = 'productReference') then
        value.product := ParseReference(child, path+'/productReference') {L881}
      else if (child.localName = 'productCodeableConcept') then
        value.product := ParseCodeableConcept(child, path+'/productCodeableConcept') {L891}
      else if (child.localName = 'account') then
        value.accountList.Add(ParseReference(child, path+'/account')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'supportingInformation') then
        value.supportingInformationList.Add(ParseReference(child, path+'/supportingInformation')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItem(xml : TXmlBuilder; name : String; value : TFhirChargeItem);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeChargeItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeChargeItemChildren(xml : TXmlBuilder; value : TFhirChargeItem);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.definitionUriList.Count - 1 do
      ComposeUri(xml, 'definitionUri', value.definitionUriList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.definitionCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'definitionCanonical', value.definitionCanonicalList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirChargeItemStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'context', value.context); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeChargeItemPerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'performingOrganization', value.performingOrganization); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'requestingOrganization', value.requestingOrganization); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'costCenter', value.costCenter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.bodysiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodysite', value.bodysiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factorOverride', value.factorOverrideElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'priceOverride', value.priceOverride); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'overrideReason', value.overrideReasonElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'enterer', value.enterer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'enteredDate', value.enteredDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.serviceList.Count - 1 do
      ComposeReference(xml, 'service', value.serviceList[i]);
  if (SummaryOption in [soFull, soData]) and (value.product is TFhirReference) {2} then
    ComposeReference(xml, 'productReference', TFhirReference(value.product))
  else if (SummaryOption in [soFull, soData]) and (value.product is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'productCodeableConcept', TFhirCodeableConcept(value.product));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.accountList.Count - 1 do
      ComposeReference(xml, 'account', value.accountList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(xml, 'supportingInformation', value.supportingInformationList[i]);
end;

{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
function TFHIRXmlParser.ParseChargeItemDefinitionApplicability(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionApplicability;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinitionApplicability.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionApplicabilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionApplicabilityChild(value : TFhirChargeItemDefinitionApplicability; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'language') then
        value.languageElement := ParseString(child, path+'/language') {L737}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionApplicability(xml : TXmlBuilder; name : String; value : TFhirChargeItemDefinitionApplicability);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeChargeItemDefinitionApplicabilityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionApplicabilityChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinitionApplicability);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'language', value.languageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroup(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroup;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinitionPropertyGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionPropertyGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroupChild(value : TFhirChargeItemDefinitionPropertyGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'applicability') then
        value.applicabilityList.Add(ParseChargeItemDefinitionApplicability(child, path+'/applicability')) {L631}
      else if (child.localName = 'priceComponent') then
        value.priceComponentList.Add(ParseChargeItemDefinitionPropertyGroupPriceComponent(child, path+'/priceComponent')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroup(xml : TXmlBuilder; name : String; value : TFhirChargeItemDefinitionPropertyGroup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeChargeItemDefinitionPropertyGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroupChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinitionPropertyGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.applicabilityList.Count - 1 do
      ComposeChargeItemDefinitionApplicability(xml, 'applicability', value.applicabilityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.priceComponentList.Count - 1 do
      ComposeChargeItemDefinitionPropertyGroupPriceComponent(xml, 'priceComponent', value.priceComponentList[i]);
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroupPriceComponent(element : TMXmlElement; path : string) : TFhirChargeItemDefinitionPropertyGroupPriceComponent;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinitionPropertyGroupPriceComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionPropertyGroupPriceComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionPropertyGroupPriceComponentChild(value : TFhirChargeItemDefinitionPropertyGroupPriceComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroupPriceComponent(xml : TXmlBuilder; name : String; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeChargeItemDefinitionPropertyGroupPriceComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionPropertyGroupPriceComponentChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinitionPropertyGroupPriceComponent);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirInvoicePriceComponentTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseChargeItemDefinition(element : TMXmlElement; path : string) : TFhirChargeItemDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirChargeItemDefinition.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseChargeItemDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseChargeItemDefinitionChild(value : TFhirChargeItemDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'derivedFromUri') then
        value.derivedFromUriList.Add(ParseUri(child, path+'/derivedFromUri')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseCanonical(child, path+'/partOf')) {L631}
      else if (child.localName = 'replaces') then
        value.replacesList.Add(ParseCanonical(child, path+'/replaces')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'instance') then
        value.instanceList.Add(ParseReference(child, path+'/instance')) {L631}
      else if (child.localName = 'applicability') then
        value.applicabilityList.Add(ParseChargeItemDefinitionApplicability(child, path+'/applicability')) {L631}
      else if (child.localName = 'propertyGroup') then
        value.propertyGroupList.Add(ParseChargeItemDefinitionPropertyGroup(child, path+'/propertyGroup')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinition(xml : TXmlBuilder; name : String; value : TFhirChargeItemDefinition);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeChargeItemDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeChargeItemDefinitionChildren(xml : TXmlBuilder; value : TFhirChargeItemDefinition);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromUriList.Count - 1 do
      ComposeUri(xml, 'derivedFromUri', value.derivedFromUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeCanonical(xml, 'partOf', value.partOfList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.replacesList.Count - 1 do
      ComposeCanonical(xml, 'replaces', value.replacesList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instanceList.Count - 1 do
      ComposeReference(xml, 'instance', value.instanceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.applicabilityList.Count - 1 do
      ComposeChargeItemDefinitionApplicability(xml, 'applicability', value.applicabilityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.propertyGroupList.Count - 1 do
      ComposeChargeItemDefinitionPropertyGroup(xml, 'propertyGroup', value.propertyGroupList[i]);
end;

{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
function TFHIRXmlParser.ParseCitationSummary(element : TMXmlElement; path : string) : TFhirCitationSummary;
var
  child : TMXmlElement;
begin
  result := TFhirCitationSummary.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationSummaryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationSummaryChild(value : TFhirCitationSummary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'style') then
        value.style := ParseCodeableConcept(child, path+'/style') {L740}
      else if (child.localName = 'text') then
        value.textElement := ParseMarkdown(child, path+'/text') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationSummary(xml : TXmlBuilder; name : String; value : TFhirCitationSummary);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationSummaryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationSummaryChildren(xml : TXmlBuilder; value : TFhirCitationSummary);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'style', value.style); {L741}
  ComposeMarkdown(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseCitationVariantCitation(element : TMXmlElement; path : string) : TFhirCitationVariantCitation;
var
  child : TMXmlElement;
begin
  result := TFhirCitationVariantCitation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationVariantCitationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationVariantCitationChild(value : TFhirCitationVariantCitation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'baseCitation') then
        value.baseCitation := ParseReference(child, path+'/baseCitation') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationVariantCitation(xml : TXmlBuilder; name : String; value : TFhirCitationVariantCitation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationVariantCitationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationVariantCitationChildren(xml : TXmlBuilder; value : TFhirCitationVariantCitation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'baseCitation', value.baseCitation); {L741}
end;

function TFHIRXmlParser.ParseCitationJournal(element : TMXmlElement; path : string) : TFhirCitationJournal;
var
  child : TMXmlElement;
begin
  result := TFhirCitationJournal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationJournalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationJournalChild(value : TFhirCitationJournal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'country') then
        value.countryElement := ParseString(child, path+'/country') {L737}
      else if (child.localName = 'journalIssue') then
        value.journalIssue := ParseCitationJournalJournalIssue(child, path+'/journalIssue') {L740}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationJournal(xml : TXmlBuilder; name : String; value : TFhirCitationJournal);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationJournalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationJournalChildren(xml : TXmlBuilder; value : TFhirCitationJournal);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'country', value.countryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationJournalJournalIssue(xml, 'journalIssue', value.journalIssue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
end;

function TFHIRXmlParser.ParseCitationJournalJournalIssue(element : TMXmlElement; path : string) : TFhirCitationJournalJournalIssue;
var
  child : TMXmlElement;
begin
  result := TFhirCitationJournalJournalIssue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationJournalJournalIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationJournalJournalIssueChild(value : TFhirCitationJournalJournalIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'citedMedium') then
        value.citedMedium := ParseCodeableConcept(child, path+'/citedMedium') {L740}
      else if (child.localName = 'volume') then
        value.volumeElement := ParseString(child, path+'/volume') {L737}
      else if (child.localName = 'issue') then
        value.issueElement := ParseString(child, path+'/issue') {L737}
      else if (child.localName = 'publicationDate') then
        value.publicationDate := ParseCitationJournalJournalIssuePublicationDate(child, path+'/publicationDate') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationJournalJournalIssue(xml : TXmlBuilder; name : String; value : TFhirCitationJournalJournalIssue);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationJournalJournalIssueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationJournalJournalIssueChildren(xml : TXmlBuilder; value : TFhirCitationJournalJournalIssue);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'citedMedium', value.citedMedium); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'volume', value.volumeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'issue', value.issueElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationJournalJournalIssuePublicationDate(xml, 'publicationDate', value.publicationDate); {L741}
end;

function TFHIRXmlParser.ParseCitationJournalJournalIssuePublicationDate(element : TMXmlElement; path : string) : TFhirCitationJournalJournalIssuePublicationDate;
var
  child : TMXmlElement;
begin
  result := TFhirCitationJournalJournalIssuePublicationDate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationJournalJournalIssuePublicationDateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationJournalJournalIssuePublicationDateChild(value : TFhirCitationJournalJournalIssuePublicationDate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'year') then
        value.yearElement := ParseString(child, path+'/year') {L737}
      else if (child.localName = 'month') then
        value.monthElement := ParseString(child, path+'/month') {L737}
      else if (child.localName = 'day') then
        value.dayElement := ParseString(child, path+'/day') {L737}
      else if (child.localName = 'season') then
        value.seasonElement := ParseString(child, path+'/season') {L737}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationJournalJournalIssuePublicationDate(xml : TXmlBuilder; name : String; value : TFhirCitationJournalJournalIssuePublicationDate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationJournalJournalIssuePublicationDateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationJournalJournalIssuePublicationDateChildren(xml : TXmlBuilder; value : TFhirCitationJournalJournalIssuePublicationDate);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'year', value.yearElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'month', value.monthElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'day', value.dayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'season', value.seasonElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseCitationPublicationInfo(element : TMXmlElement; path : string) : TFhirCitationPublicationInfo;
var
  child : TMXmlElement;
begin
  result := TFhirCitationPublicationInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationPublicationInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationPublicationInfoChild(value : TFhirCitationPublicationInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'publishedIn') then
        value.publishedIn := ParseCitationPublicationInfoPublishedIn(child, path+'/publishedIn') {L740}
      else if (child.localName = 'entryDate') then
        value.entryDateElement := ParseDateTime(child, path+'/entryDate') {L737}
      else if (child.localName = 'revisionDate') then
        value.revisionDateElement := ParseDateTime(child, path+'/revisionDate') {L737}
      else if (child.localName = 'pageCount') then
        value.pageCountElement := ParseString(child, path+'/pageCount') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationPublicationInfo(xml : TXmlBuilder; name : String; value : TFhirCitationPublicationInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationPublicationInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationPublicationInfoChildren(xml : TXmlBuilder; value : TFhirCitationPublicationInfo);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationPublicationInfoPublishedIn(xml, 'publishedIn', value.publishedIn); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'entryDate', value.entryDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'revisionDate', value.revisionDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'pageCount', value.pageCountElement); {L738}
end;

function TFHIRXmlParser.ParseCitationPublicationInfoPublishedIn(element : TMXmlElement; path : string) : TFhirCitationPublicationInfoPublishedIn;
var
  child : TMXmlElement;
begin
  result := TFhirCitationPublicationInfoPublishedIn.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationPublicationInfoPublishedInChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationPublicationInfoPublishedInChild(value : TFhirCitationPublicationInfoPublishedIn; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'publisher') then
        value.publisher := ParseReference(child, path+'/publisher') {L740}
      else if (child.localName = 'publisherLocation') then
        value.publisherLocationElement := ParseString(child, path+'/publisherLocation') {L737}
      else if (child.localName = 'startDate') then
        value.startDateElement := ParseDate(child, path+'/startDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationPublicationInfoPublishedIn(xml : TXmlBuilder; name : String; value : TFhirCitationPublicationInfoPublishedIn);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationPublicationInfoPublishedInChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationPublicationInfoPublishedInChildren(xml : TXmlBuilder; value : TFhirCitationPublicationInfoPublishedIn);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'publisher', value.publisher); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'publisherLocation', value.publisherLocationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'startDate', value.startDateElement); {L738}
end;

function TFHIRXmlParser.ParseCitationAlternativeTitle(element : TMXmlElement; path : string) : TFhirCitationAlternativeTitle;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeTitle.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeTitleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeTitleChild(value : TFhirCitationAlternativeTitle; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if (child.localName = 'title') then
        value.titleElement := ParseMarkdown(child, path+'/title') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeTitle(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeTitle);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeTitleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeTitleChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeTitle);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', value.language); {L741}
  ComposeMarkdown(xml, 'title', value.titleElement); {L738}
end;

function TFHIRXmlParser.ParseCitationPagination(element : TMXmlElement; path : string) : TFhirCitationPagination;
var
  child : TMXmlElement;
begin
  result := TFhirCitationPagination.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationPaginationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationPaginationChild(value : TFhirCitationPagination; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'pageString') then
        value.pageStringElement := ParseString(child, path+'/pageString') {L737}
      else if (child.localName = 'firstPage') then
        value.firstPageElement := ParseString(child, path+'/firstPage') {L737}
      else if (child.localName = 'lastPage') then
        value.lastPageElement := ParseString(child, path+'/lastPage') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationPagination(xml : TXmlBuilder; name : String; value : TFhirCitationPagination);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationPaginationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationPaginationChildren(xml : TXmlBuilder; value : TFhirCitationPagination);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'pageString', value.pageStringElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'firstPage', value.firstPageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lastPage', value.lastPageElement); {L738}
end;

function TFHIRXmlParser.ParseCitationArticleUrl(element : TMXmlElement; path : string) : TFhirCitationArticleUrl;
var
  child : TMXmlElement;
begin
  result := TFhirCitationArticleUrl.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationArticleUrlChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationArticleUrlChild(value : TFhirCitationArticleUrl; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationArticleUrl(xml : TXmlBuilder; name : String; value : TFhirCitationArticleUrl);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationArticleUrlChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationArticleUrlChildren(xml : TXmlBuilder; value : TFhirCitationArticleUrl);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
end;

function TFHIRXmlParser.ParseCitationAlternativeAbstract(element : TMXmlElement; path : string) : TFhirCitationAlternativeAbstract;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeAbstract.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeAbstractChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeAbstractChild(value : TFhirCitationAlternativeAbstract; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if (child.localName = 'abstract') then
        value.abstractElement := ParseMarkdown(child, path+'/abstract') {L737}
      else if (child.localName = 'abstractCopyright') then
        value.abstractCopyrightElement := ParseMarkdown(child, path+'/abstractCopyright') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeAbstract(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeAbstract);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeAbstractChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeAbstractChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeAbstract);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', value.language); {L741}
  ComposeMarkdown(xml, 'abstract', value.abstractElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'abstractCopyright', value.abstractCopyrightElement); {L738}
end;

function TFHIRXmlParser.ParseCitationContributorship(element : TMXmlElement; path : string) : TFhirCitationContributorship;
var
  child : TMXmlElement;
begin
  result := TFhirCitationContributorship.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationContributorshipChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationContributorshipChild(value : TFhirCitationContributorship; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'complete') then
        value.completeElement := ParseBoolean(child, path+'/complete') {L737}
      else if (child.localName = 'entry') then
        value.entryList.Add(ParseCitationContributorshipEntry(child, path+'/entry')) {L631}
      else if (child.localName = 'summary') then
        value.summaryList.Add(ParseCitationContributorshipSummary(child, path+'/summary')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorship(xml : TXmlBuilder; name : String; value : TFhirCitationContributorship);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationContributorshipChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipChildren(xml : TXmlBuilder; value : TFhirCitationContributorship);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'complete', value.completeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entryList.Count - 1 do
      ComposeCitationContributorshipEntry(xml, 'entry', value.entryList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.summaryList.Count - 1 do
      ComposeCitationContributorshipSummary(xml, 'summary', value.summaryList[i]);
end;

function TFHIRXmlParser.ParseCitationContributorshipEntry(element : TMXmlElement; path : string) : TFhirCitationContributorshipEntry;
var
  child : TMXmlElement;
begin
  result := TFhirCitationContributorshipEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationContributorshipEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationContributorshipEntryChild(value : TFhirCitationContributorshipEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.name := ParseHumanName(child, path+'/name') {L740}
      else if (child.localName = 'initials') then
        value.initialsElement := ParseString(child, path+'/initials') {L737}
      else if (child.localName = 'collectiveName') then
        value.collectiveNameElement := ParseString(child, path+'/collectiveName') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'affiliationInfo') then
        value.affiliationInfoList.Add(ParseCitationContributorshipEntryAffiliationInfo(child, path+'/affiliationInfo')) {L631}
      else if (child.localName = 'address') then
        value.addressList.Add(ParseAddress(child, path+'/address')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'contribution') then
        value.contributionList.Add(ParseCodeableConcept(child, path+'/contribution')) {L631}
      else if (child.localName = 'notAnAuthor') then
        value.notAnAuthorElement := ParseBoolean(child, path+'/notAnAuthor') {L737}
      else if (child.localName = 'correspondingAuthor') then
        value.correspondingAuthorElement := ParseBoolean(child, path+'/correspondingAuthor') {L737}
      else if (child.localName = 'listOrder') then
        value.listOrderElement := ParsePositiveInt(child, path+'/listOrder') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipEntry(xml : TXmlBuilder; name : String; value : TFhirCitationContributorshipEntry);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationContributorshipEntryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipEntryChildren(xml : TXmlBuilder; value : TFhirCitationContributorshipEntry);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', value.name); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'initials', value.initialsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'collectiveName', value.collectiveNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.affiliationInfoList.Count - 1 do
      ComposeCitationContributorshipEntryAffiliationInfo(xml, 'affiliationInfo', value.affiliationInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(xml, 'address', value.addressList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contributionList.Count - 1 do
      ComposeCodeableConcept(xml, 'contribution', value.contributionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'notAnAuthor', value.notAnAuthorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'correspondingAuthor', value.correspondingAuthorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'listOrder', value.listOrderElement); {L738}
end;

function TFHIRXmlParser.ParseCitationContributorshipEntryAffiliationInfo(element : TMXmlElement; path : string) : TFhirCitationContributorshipEntryAffiliationInfo;
var
  child : TMXmlElement;
begin
  result := TFhirCitationContributorshipEntryAffiliationInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationContributorshipEntryAffiliationInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationContributorshipEntryAffiliationInfoChild(value : TFhirCitationContributorshipEntryAffiliationInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'affiliation') then
        value.affiliationElement := ParseString(child, path+'/affiliation') {L737}
      else if (child.localName = 'role') then
        value.roleElement := ParseString(child, path+'/role') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipEntryAffiliationInfo(xml : TXmlBuilder; name : String; value : TFhirCitationContributorshipEntryAffiliationInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationContributorshipEntryAffiliationInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipEntryAffiliationInfoChildren(xml : TXmlBuilder; value : TFhirCitationContributorshipEntryAffiliationInfo);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'affiliation', value.affiliationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'role', value.roleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
end;

function TFHIRXmlParser.ParseCitationContributorshipSummary(element : TMXmlElement; path : string) : TFhirCitationContributorshipSummary;
var
  child : TMXmlElement;
begin
  result := TFhirCitationContributorshipSummary.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationContributorshipSummaryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationContributorshipSummaryChild(value : TFhirCitationContributorshipSummary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'style') then
        value.style := ParseCodeableConcept(child, path+'/style') {L740}
      else if (child.localName = 'source') then
        value.source := ParseCodeableConcept(child, path+'/source') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseMarkdown(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipSummary(xml : TXmlBuilder; name : String; value : TFhirCitationContributorshipSummary);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationContributorshipSummaryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationContributorshipSummaryChildren(xml : TXmlBuilder; value : TFhirCitationContributorshipSummary);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'style', value.style); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'source', value.source); {L741}
  ComposeMarkdown(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseCitationAlternativeForm(element : TMXmlElement; path : string) : TFhirCitationAlternativeForm;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeForm.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeFormChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeFormChild(value : TFhirCitationAlternativeForm; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'publishingModel') then
        value.publishingModel := ParseCodeableConcept(child, path+'/publishingModel') {L740}
      else if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if (child.localName = 'journalIssue') then
        value.journalIssue := ParseCitationAlternativeFormJournalIssue(child, path+'/journalIssue') {L740}
      else if (child.localName = 'pagination') then
        value.pagination := ParseCitationAlternativeFormPagination(child, path+'/pagination') {L740}
      else if (child.localName = 'publicationInfo') then
        value.publicationInfo := ParseCitationAlternativeFormPublicationInfo(child, path+'/publicationInfo') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeForm(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeForm);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeFormChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeForm);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'publishingModel', value.publishingModel); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', value.language); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationAlternativeFormJournalIssue(xml, 'journalIssue', value.journalIssue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationAlternativeFormPagination(xml, 'pagination', value.pagination); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationAlternativeFormPublicationInfo(xml, 'publicationInfo', value.publicationInfo); {L741}
end;

function TFHIRXmlParser.ParseCitationAlternativeFormJournalIssue(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormJournalIssue;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeFormJournalIssue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeFormJournalIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeFormJournalIssueChild(value : TFhirCitationAlternativeFormJournalIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'citedMedium') then
        value.citedMedium := ParseCodeableConcept(child, path+'/citedMedium') {L740}
      else if (child.localName = 'volume') then
        value.volumeElement := ParseString(child, path+'/volume') {L737}
      else if (child.localName = 'issue') then
        value.issueElement := ParseString(child, path+'/issue') {L737}
      else if (child.localName = 'publicationDate') then
        value.publicationDate := ParseCitationAlternativeFormJournalIssuePublicationDate(child, path+'/publicationDate') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormJournalIssue(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeFormJournalIssue);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeFormJournalIssueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormJournalIssueChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormJournalIssue);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'citedMedium', value.citedMedium); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'volume', value.volumeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'issue', value.issueElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationAlternativeFormJournalIssuePublicationDate(xml, 'publicationDate', value.publicationDate); {L741}
end;

function TFHIRXmlParser.ParseCitationAlternativeFormJournalIssuePublicationDate(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormJournalIssuePublicationDate;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeFormJournalIssuePublicationDate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeFormJournalIssuePublicationDateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeFormJournalIssuePublicationDateChild(value : TFhirCitationAlternativeFormJournalIssuePublicationDate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'year') then
        value.yearElement := ParseString(child, path+'/year') {L737}
      else if (child.localName = 'month') then
        value.monthElement := ParseString(child, path+'/month') {L737}
      else if (child.localName = 'day') then
        value.dayElement := ParseString(child, path+'/day') {L737}
      else if (child.localName = 'season') then
        value.seasonElement := ParseString(child, path+'/season') {L737}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormJournalIssuePublicationDate(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeFormJournalIssuePublicationDate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeFormJournalIssuePublicationDateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormJournalIssuePublicationDateChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormJournalIssuePublicationDate);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'year', value.yearElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'month', value.monthElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'day', value.dayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'season', value.seasonElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseCitationAlternativeFormPagination(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormPagination;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeFormPagination.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeFormPaginationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeFormPaginationChild(value : TFhirCitationAlternativeFormPagination; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'pageString') then
        value.pageStringElement := ParseString(child, path+'/pageString') {L737}
      else if (child.localName = 'firstPage') then
        value.firstPageElement := ParseString(child, path+'/firstPage') {L737}
      else if (child.localName = 'lastPage') then
        value.lastPageElement := ParseString(child, path+'/lastPage') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormPagination(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeFormPagination);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeFormPaginationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormPaginationChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormPagination);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'pageString', value.pageStringElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'firstPage', value.firstPageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lastPage', value.lastPageElement); {L738}
end;

function TFHIRXmlParser.ParseCitationAlternativeFormPublicationInfo(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormPublicationInfo;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeFormPublicationInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeFormPublicationInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeFormPublicationInfoChild(value : TFhirCitationAlternativeFormPublicationInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'publishedIn') then
        value.publishedIn := ParseCitationAlternativeFormPublicationInfoPublishedIn(child, path+'/publishedIn') {L740}
      else if (child.localName = 'entryDate') then
        value.entryDateElement := ParseDateTime(child, path+'/entryDate') {L737}
      else if (child.localName = 'revisionDate') then
        value.revisionDateElement := ParseDateTime(child, path+'/revisionDate') {L737}
      else if (child.localName = 'pageCount') then
        value.pageCountElement := ParseString(child, path+'/pageCount') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormPublicationInfo(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeFormPublicationInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeFormPublicationInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormPublicationInfoChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormPublicationInfo);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationAlternativeFormPublicationInfoPublishedIn(xml, 'publishedIn', value.publishedIn); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'entryDate', value.entryDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'revisionDate', value.revisionDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'pageCount', value.pageCountElement); {L738}
end;

function TFHIRXmlParser.ParseCitationAlternativeFormPublicationInfoPublishedIn(element : TMXmlElement; path : string) : TFhirCitationAlternativeFormPublicationInfoPublishedIn;
var
  child : TMXmlElement;
begin
  result := TFhirCitationAlternativeFormPublicationInfoPublishedIn.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationAlternativeFormPublicationInfoPublishedInChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationAlternativeFormPublicationInfoPublishedInChild(value : TFhirCitationAlternativeFormPublicationInfoPublishedIn; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'publisher') then
        value.publisher := ParseReference(child, path+'/publisher') {L740}
      else if (child.localName = 'publisherLocation') then
        value.publisherLocationElement := ParseString(child, path+'/publisherLocation') {L737}
      else if (child.localName = 'startDate') then
        value.startDateElement := ParseDate(child, path+'/startDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormPublicationInfoPublishedIn(xml : TXmlBuilder; name : String; value : TFhirCitationAlternativeFormPublicationInfoPublishedIn);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationAlternativeFormPublicationInfoPublishedInChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationAlternativeFormPublicationInfoPublishedInChildren(xml : TXmlBuilder; value : TFhirCitationAlternativeFormPublicationInfoPublishedIn);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'publisher', value.publisher); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'publisherLocation', value.publisherLocationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'startDate', value.startDateElement); {L738}
end;

function TFHIRXmlParser.ParseCitationKeywordList(element : TMXmlElement; path : string) : TFhirCitationKeywordList;
var
  child : TMXmlElement;
begin
  result := TFhirCitationKeywordList.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationKeywordListChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationKeywordListChild(value : TFhirCitationKeywordList; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'owner') then
        value.ownerElement := ParseString(child, path+'/owner') {L737}
      else if (child.localName = 'keyword') then
        value.keywordList.Add(ParseCitationKeywordListKeyword(child, path+'/keyword')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationKeywordList(xml : TXmlBuilder; name : String; value : TFhirCitationKeywordList);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationKeywordListChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationKeywordListChildren(xml : TXmlBuilder; value : TFhirCitationKeywordList);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'owner', value.ownerElement); {L738}
  for i := 0 to value.keywordList.Count - 1 do
      ComposeCitationKeywordListKeyword(xml, 'keyword', value.keywordList[i]);
end;

function TFHIRXmlParser.ParseCitationKeywordListKeyword(element : TMXmlElement; path : string) : TFhirCitationKeywordListKeyword;
var
  child : TMXmlElement;
begin
  result := TFhirCitationKeywordListKeyword.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationKeywordListKeywordChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationKeywordListKeywordChild(value : TFhirCitationKeywordListKeyword; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'majorTopic') then
        value.majorTopicElement := ParseBoolean(child, path+'/majorTopic') {L737}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationKeywordListKeyword(xml : TXmlBuilder; name : String; value : TFhirCitationKeywordListKeyword);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationKeywordListKeywordChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationKeywordListKeywordChildren(xml : TXmlBuilder; value : TFhirCitationKeywordListKeyword);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'majorTopic', value.majorTopicElement); {L738}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseCitationMedlinePubMed(element : TMXmlElement; path : string) : TFhirCitationMedlinePubMed;
var
  child : TMXmlElement;
begin
  result := TFhirCitationMedlinePubMed.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationMedlinePubMedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationMedlinePubMedChild(value : TFhirCitationMedlinePubMed; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'medlineState') then
        value.medlineState := ParseCodeableConcept(child, path+'/medlineState') {L740}
      else if (child.localName = 'owner') then
        value.owner := ParseCodeableConcept(child, path+'/owner') {L740}
      else if (child.localName = 'pmid') then
        value.pmidElement := ParsePositiveInt(child, path+'/pmid') {L737}
      else if (child.localName = 'pmidVersion') then
        value.pmidVersionElement := ParsePositiveInt(child, path+'/pmidVersion') {L737}
      else if (child.localName = 'dateCreated') then
        value.dateCreatedElement := ParseDate(child, path+'/dateCreated') {L737}
      else if (child.localName = 'dateCompleted') then
        value.dateCompletedElement := ParseDate(child, path+'/dateCompleted') {L737}
      else if (child.localName = 'dateRevised') then
        value.dateRevisedElement := ParseDate(child, path+'/dateRevised') {L737}
      else if (child.localName = 'pubMedPubDate') then
        value.pubMedPubDateList.Add(ParseCitationMedlinePubMedPubMedPubDate(child, path+'/pubMedPubDate')) {L631}
      else if (child.localName = 'publicationState') then
        value.publicationState := ParseCodeableConcept(child, path+'/publicationState') {L740}
      else if (child.localName = 'relatedArticle') then
        value.relatedArticleList.Add(ParseCitationMedlinePubMedRelatedArticle(child, path+'/relatedArticle')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationMedlinePubMed(xml : TXmlBuilder; name : String; value : TFhirCitationMedlinePubMed);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationMedlinePubMedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationMedlinePubMedChildren(xml : TXmlBuilder; value : TFhirCitationMedlinePubMed);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'medlineState', value.medlineState); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'owner', value.owner); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'pmid', value.pmidElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'pmidVersion', value.pmidVersionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'dateCreated', value.dateCreatedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'dateCompleted', value.dateCompletedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'dateRevised', value.dateRevisedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.pubMedPubDateList.Count - 1 do
      ComposeCitationMedlinePubMedPubMedPubDate(xml, 'pubMedPubDate', value.pubMedPubDateList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'publicationState', value.publicationState); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArticleList.Count - 1 do
      ComposeCitationMedlinePubMedRelatedArticle(xml, 'relatedArticle', value.relatedArticleList[i]);
end;

function TFHIRXmlParser.ParseCitationMedlinePubMedPubMedPubDate(element : TMXmlElement; path : string) : TFhirCitationMedlinePubMedPubMedPubDate;
var
  child : TMXmlElement;
begin
  result := TFhirCitationMedlinePubMedPubMedPubDate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationMedlinePubMedPubMedPubDateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationMedlinePubMedPubMedPubDateChild(value : TFhirCitationMedlinePubMedPubMedPubDate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'publicationState') then
        value.publicationState := ParseCodeableConcept(child, path+'/publicationState') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationMedlinePubMedPubMedPubDate(xml : TXmlBuilder; name : String; value : TFhirCitationMedlinePubMedPubMedPubDate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationMedlinePubMedPubMedPubDateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationMedlinePubMedPubMedPubDateChildren(xml : TXmlBuilder; value : TFhirCitationMedlinePubMedPubMedPubDate);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'publicationState', value.publicationState); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
end;

function TFHIRXmlParser.ParseCitationMedlinePubMedRelatedArticle(element : TMXmlElement; path : string) : TFhirCitationMedlinePubMedRelatedArticle;
var
  child : TMXmlElement;
begin
  result := TFhirCitationMedlinePubMedRelatedArticle.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationMedlinePubMedRelatedArticleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationMedlinePubMedRelatedArticleChild(value : TFhirCitationMedlinePubMedRelatedArticle; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'citationReference') then
        value.citationReference := ParseReference(child, path+'/citationReference') {L740}
      else if (child.localName = 'citationMarkdown') then
        value.citationMarkdownElement := ParseMarkdown(child, path+'/citationMarkdown') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitationMedlinePubMedRelatedArticle(xml : TXmlBuilder; name : String; value : TFhirCitationMedlinePubMedRelatedArticle);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationMedlinePubMedRelatedArticleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationMedlinePubMedRelatedArticleChildren(xml : TXmlBuilder; value : TFhirCitationMedlinePubMedRelatedArticle);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'citationReference', value.citationReference); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'citationMarkdown', value.citationMarkdownElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
end;

function TFHIRXmlParser.ParseCitation(element : TMXmlElement; path : string) : TFhirCitation;
var
  child : TMXmlElement;
begin
  result := TFhirCitation.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCitationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCitationChild(value : TFhirCitation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'relatedIdentifier') then
        value.relatedIdentifierList.Add(ParseIdentifier(child, path+'/relatedIdentifier')) {L631}
      else if (child.localName = 'summary') then
        value.summaryList.Add(ParseCitationSummary(child, path+'/summary')) {L631}
      else if (child.localName = 'dateCited') then
        value.dateCitedElement := ParseDateTime(child, path+'/dateCited') {L737}
      else if (child.localName = 'variantCitation') then
        value.variantCitation := ParseCitationVariantCitation(child, path+'/variantCitation') {L740}
      else if (child.localName = 'publishingModel') then
        value.publishingModel := ParseCodeableConcept(child, path+'/publishingModel') {L740}
      else if (child.localName = 'journal') then
        value.journal := ParseCitationJournal(child, path+'/journal') {L740}
      else if (child.localName = 'publicationInfo') then
        value.publicationInfo := ParseCitationPublicationInfo(child, path+'/publicationInfo') {L740}
      else if (child.localName = 'articleTitle') then
        value.articleTitleElement := ParseMarkdown(child, path+'/articleTitle') {L737}
      else if (child.localName = 'alternativeTitle') then
        value.alternativeTitleList.Add(ParseCitationAlternativeTitle(child, path+'/alternativeTitle')) {L631}
      else if (child.localName = 'pagination') then
        value.pagination := ParseCitationPagination(child, path+'/pagination') {L740}
      else if (child.localName = 'articleUrl') then
        value.articleUrlList.Add(ParseCitationArticleUrl(child, path+'/articleUrl')) {L631}
      else if (child.localName = 'abstract') then
        value.abstractElement := ParseMarkdown(child, path+'/abstract') {L737}
      else if (child.localName = 'abstractCopyright') then
        value.abstractCopyrightElement := ParseMarkdown(child, path+'/abstractCopyright') {L737}
      else if (child.localName = 'alternativeAbstract') then
        value.alternativeAbstractList.Add(ParseCitationAlternativeAbstract(child, path+'/alternativeAbstract')) {L631}
      else if (child.localName = 'contributorship') then
        value.contributorship := ParseCitationContributorship(child, path+'/contributorship') {L740}
      else if (child.localName = 'articleLanguage') then
        value.articleLanguage := ParseCodeableConcept(child, path+'/articleLanguage') {L740}
      else if (child.localName = 'alternativeForm') then
        value.alternativeFormList.Add(ParseCitationAlternativeForm(child, path+'/alternativeForm')) {L631}
      else if (child.localName = 'classifier') then
        value.classifierList.Add(ParseCodeableConcept(child, path+'/classifier')) {L631}
      else if (child.localName = 'keywordList') then
        value.keywordListList.Add(ParseCitationKeywordList(child, path+'/keywordList')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'medlinePubMed') then
        value.medlinePubMed := ParseCitationMedlinePubMed(child, path+'/medlinePubMed') {L740}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCitation(xml : TXmlBuilder; name : String; value : TFhirCitation);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCitationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCitationChildren(xml : TXmlBuilder; value : TFhirCitation);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.relatedIdentifierList.Count - 1 do
      ComposeIdentifier(xml, 'relatedIdentifier', value.relatedIdentifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.summaryList.Count - 1 do
      ComposeCitationSummary(xml, 'summary', value.summaryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'dateCited', value.dateCitedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationVariantCitation(xml, 'variantCitation', value.variantCitation); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'publishingModel', value.publishingModel); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationJournal(xml, 'journal', value.journal); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationPublicationInfo(xml, 'publicationInfo', value.publicationInfo); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'articleTitle', value.articleTitleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.alternativeTitleList.Count - 1 do
      ComposeCitationAlternativeTitle(xml, 'alternativeTitle', value.alternativeTitleList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationPagination(xml, 'pagination', value.pagination); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.articleUrlList.Count - 1 do
      ComposeCitationArticleUrl(xml, 'articleUrl', value.articleUrlList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'abstract', value.abstractElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'abstractCopyright', value.abstractCopyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.alternativeAbstractList.Count - 1 do
      ComposeCitationAlternativeAbstract(xml, 'alternativeAbstract', value.alternativeAbstractList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationContributorship(xml, 'contributorship', value.contributorship); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'articleLanguage', value.articleLanguage); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.alternativeFormList.Count - 1 do
      ComposeCitationAlternativeForm(xml, 'alternativeForm', value.alternativeFormList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.classifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'classifier', value.classifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.keywordListList.Count - 1 do
      ComposeCitationKeywordList(xml, 'keywordList', value.keywordListList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCitationMedlinePubMed(xml, 'medlinePubMed', value.medlinePubMed); {L741}
end;

{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
function TFHIRXmlParser.ParseClaimRelated(element : TMXmlElement; path : string) : TFhirClaimRelated;
var
  child : TMXmlElement;
begin
  result := TFhirClaimRelated.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimRelatedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimRelatedChild(value : TFhirClaimRelated; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'claim') then
        value.claim := ParseReference(child, path+'/claim') {L740}
      else if (child.localName = 'relationship') then
        value.relationship := ParseCodeableConcept(child, path+'/relationship') {L740}
      else if (child.localName = 'reference') then
        value.reference := ParseIdentifier(child, path+'/reference') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimRelated(xml : TXmlBuilder; name : String; value : TFhirClaimRelated);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimRelatedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimRelatedChildren(xml : TXmlBuilder; value : TFhirClaimRelated);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'claim', value.claim); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'relationship', value.relationship); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseClaimPayee(element : TMXmlElement; path : string) : TFhirClaimPayee;
var
  child : TMXmlElement;
begin
  result := TFhirClaimPayee.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimPayeeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimPayeeChild(value : TFhirClaimPayee; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'party') then
        value.party := ParseReference(child, path+'/party') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimPayee(xml : TXmlBuilder; name : String; value : TFhirClaimPayee);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimPayeeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimPayeeChildren(xml : TXmlBuilder; value : TFhirClaimPayee);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'party', value.party); {L741}
end;

function TFHIRXmlParser.ParseClaimCareTeam(element : TMXmlElement; path : string) : TFhirClaimCareTeam;
var
  child : TMXmlElement;
begin
  result := TFhirClaimCareTeam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimCareTeamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimCareTeamChild(value : TFhirClaimCareTeam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'responsible') then
        value.responsibleElement := ParseBoolean(child, path+'/responsible') {L737}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'qualification') then
        value.qualification := ParseCodeableConcept(child, path+'/qualification') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimCareTeam(xml : TXmlBuilder; name : String; value : TFhirClaimCareTeam);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimCareTeamChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimCareTeamChildren(xml : TXmlBuilder; value : TFhirClaimCareTeam);
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeReference(xml, 'provider', value.provider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'responsible', value.responsibleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'qualification', value.qualification); {L741}
end;

function TFHIRXmlParser.ParseClaimSupportingInfo(element : TMXmlElement; path : string) : TFhirClaimSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirClaimSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimSupportingInfoChild(value : TFhirClaimSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'timingPeriod') then
        value.timing := ParsePeriod(child, path+'/timingPeriod') {L891}
      else if (child.localName = 'timingDate') then
        value.timing := ParseDate(child, path+'/timingDate') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'reason') then
        value.reason := ParseCodeableConcept(child, path+'/reason') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimSupportingInfo(xml : TXmlBuilder; name : String; value : TFhirClaimSupportingInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimSupportingInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimSupportingInfoChildren(xml : TXmlBuilder; value : TFhirClaimSupportingInfo);
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDate) {6} then
    ComposeDate(xml, 'timingDate', TFhirDate(value.timing));
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', value.reason); {L741}
end;

function TFHIRXmlParser.ParseClaimDiagnosis(element : TMXmlElement; path : string) : TFhirClaimDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirClaimDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimDiagnosisChild(value : TFhirClaimDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'diagnosisCodeableConcept') then
        value.diagnosis := ParseCodeableConcept(child, path+'/diagnosisCodeableConcept') {L891}
      else if (child.localName = 'diagnosisReference') then
        value.diagnosis := ParseReference(child, path+'/diagnosisReference') {L881}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'onAdmission') then
        value.onAdmission := ParseCodeableConcept(child, path+'/onAdmission') {L740}
      else if (child.localName = 'packageCode') then
        value.packageCode := ParseCodeableConcept(child, path+'/packageCode') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimDiagnosis(xml : TXmlBuilder; name : String; value : TFhirClaimDiagnosis);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimDiagnosisChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimDiagnosisChildren(xml : TXmlBuilder; value : TFhirClaimDiagnosis);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (value.diagnosis is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'diagnosisCodeableConcept', TFhirCodeableConcept(value.diagnosis))
  else if (value.diagnosis is TFhirReference) {2} then
    ComposeReference(xml, 'diagnosisReference', TFhirReference(value.diagnosis));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'onAdmission', value.onAdmission); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'packageCode', value.packageCode); {L741}
end;

function TFHIRXmlParser.ParseClaimProcedure(element : TMXmlElement; path : string) : TFhirClaimProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirClaimProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimProcedureChild(value : TFhirClaimProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'procedureCodeableConcept') then
        value.procedure_ := ParseCodeableConcept(child, path+'/procedureCodeableConcept') {L891}
      else if (child.localName = 'procedureReference') then
        value.procedure_ := ParseReference(child, path+'/procedureReference') {L881}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimProcedure(xml : TXmlBuilder; name : String; value : TFhirClaimProcedure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimProcedureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimProcedureChildren(xml : TXmlBuilder; value : TFhirClaimProcedure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (value.procedure_ is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'procedureCodeableConcept', TFhirCodeableConcept(value.procedure_))
  else if (value.procedure_ is TFhirReference) {2} then
    ComposeReference(xml, 'procedureReference', TFhirReference(value.procedure_));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
end;

function TFHIRXmlParser.ParseClaimInsurance(element : TMXmlElement; path : string) : TFhirClaimInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirClaimInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimInsuranceChild(value : TFhirClaimInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'focal') then
        value.focalElement := ParseBoolean(child, path+'/focal') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if (child.localName = 'businessArrangement') then
        value.businessArrangementElement := ParseString(child, path+'/businessArrangement') {L737}
      else if (child.localName = 'preAuthRef') then
        value.preAuthRefList.Add(ParseString(child, path+'/preAuthRef')) {L631}
      else if (child.localName = 'claimResponse') then
        value.claimResponse := ParseReference(child, path+'/claimResponse') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimInsurance(xml : TXmlBuilder; name : String; value : TFhirClaimInsurance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimInsuranceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimInsuranceChildren(xml : TXmlBuilder; value : TFhirClaimInsurance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeBoolean(xml, 'focal', value.focalElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  ComposeReference(xml, 'coverage', value.coverage); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'businessArrangement', value.businessArrangementElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.preAuthRefList.Count - 1 do
      ComposeString(xml, 'preAuthRef', value.preAuthRefList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'claimResponse', value.claimResponse); {L741}
end;

function TFHIRXmlParser.ParseClaimAccident(element : TMXmlElement; path : string) : TFhirClaimAccident;
var
  child : TMXmlElement;
begin
  result := TFhirClaimAccident.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimAccidentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimAccidentChild(value : TFhirClaimAccident; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'locationAddress') then
        value.location := ParseAddress(child, path+'/locationAddress') {L891}
      else if (child.localName = 'locationReference') then
        value.location := ParseReference(child, path+'/locationReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimAccident(xml : TXmlBuilder; name : String; value : TFhirClaimAccident);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimAccidentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimAccidentChildren(xml : TXmlBuilder; value : TFhirClaimAccident);
begin
  composeBackboneElementChildren(xml, value);
  ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(value.location));
end;

function TFHIRXmlParser.ParseClaimItem(element : TMXmlElement; path : string) : TFhirClaimItem;
var
  child : TMXmlElement;
begin
  result := TFhirClaimItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimItemChild(value : TFhirClaimItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'careTeamSequence') then
        value.careTeamSequenceList.Add(ParsePositiveInt(child, path+'/careTeamSequence')) {L631}
      else if (child.localName = 'diagnosisSequence') then
        value.diagnosisSequenceList.Add(ParsePositiveInt(child, path+'/diagnosisSequence')) {L631}
      else if (child.localName = 'procedureSequence') then
        value.procedureSequenceList.Add(ParsePositiveInt(child, path+'/procedureSequence')) {L631}
      else if (child.localName = 'informationSequence') then
        value.informationSequenceList.Add(ParsePositiveInt(child, path+'/informationSequence')) {L631}
      else if (child.localName = 'revenue') then
        value.revenue := ParseCodeableConcept(child, path+'/revenue') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'servicedPeriod') then
        value.serviced := ParsePeriod(child, path+'/servicedPeriod') {L891}
      else if (child.localName = 'servicedDate') then
        value.serviced := ParseDate(child, path+'/servicedDate') {L891}
      else if (child.localName = 'locationCodeableConcept') then
        value.location := ParseCodeableConcept(child, path+'/locationCodeableConcept') {L891}
      else if (child.localName = 'locationAddress') then
        value.location := ParseAddress(child, path+'/locationAddress') {L891}
      else if (child.localName = 'locationReference') then
        value.location := ParseReference(child, path+'/locationReference') {L881}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'subSite') then
        value.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')) {L631}
      else if (child.localName = 'encounter') then
        value.encounterList.Add(ParseReference(child, path+'/encounter')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseClaimItemDetail(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimItem(xml : TXmlBuilder; name : String; value : TFhirClaimItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimItemChildren(xml : TXmlBuilder; value : TFhirClaimItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.careTeamSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'careTeamSequence', value.careTeamSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.diagnosisSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'diagnosisSequence', value.diagnosisSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.procedureSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'procedureSequence', value.procedureSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.informationSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'informationSequence', value.informationSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', value.revenue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(value.serviced))
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(value.serviced));
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', value.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.encounterList.Count - 1 do
      ComposeReference(xml, 'encounter', value.encounterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeClaimItemDetail(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseClaimItemDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimItemDetailChild(value : TFhirClaimItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'revenue') then
        value.revenue := ParseCodeableConcept(child, path+'/revenue') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if (child.localName = 'subDetail') then
        value.subDetailList.Add(ParseClaimItemDetailSubDetail(child, path+'/subDetail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetail(xml : TXmlBuilder; name : String; value : TFhirClaimItemDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimItemDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetailChildren(xml : TXmlBuilder; value : TFhirClaimItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', value.revenue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeClaimItemDetailSubDetail(xml, 'subDetail', value.subDetailList[i]);
end;

function TFHIRXmlParser.ParseClaimItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimItemDetailSubDetailChild(value : TFhirClaimItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'revenue') then
        value.revenue := ParseCodeableConcept(child, path+'/revenue') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetailSubDetail(xml : TXmlBuilder; name : String; value : TFhirClaimItemDetailSubDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimItemDetailSubDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirClaimItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', value.revenue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
end;

function TFHIRXmlParser.ParseClaim(element : TMXmlElement; path : string) : TFhirClaim;
var
  child : TMXmlElement;
begin
  result := TFhirClaim.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimChild(value : TFhirClaim; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subType') then
        value.subType := ParseCodeableConcept(child, path+'/subType') {L740}
      else if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirUseEnum, SYSTEMS_TFhirUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'billablePeriod') then
        value.billablePeriod := ParsePeriod(child, path+'/billablePeriod') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'enterer') then
        value.enterer := ParseReference(child, path+'/enterer') {L740}
      else if (child.localName = 'insurer') then
        value.insurer := ParseReference(child, path+'/insurer') {L740}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'priority') then
        value.priority := ParseCodeableConcept(child, path+'/priority') {L740}
      else if (child.localName = 'fundsReserve') then
        value.fundsReserve := ParseCodeableConcept(child, path+'/fundsReserve') {L740}
      else if (child.localName = 'related') then
        value.relatedList.Add(ParseClaimRelated(child, path+'/related')) {L631}
      else if (child.localName = 'prescription') then
        value.prescription := ParseReference(child, path+'/prescription') {L740}
      else if (child.localName = 'originalPrescription') then
        value.originalPrescription := ParseReference(child, path+'/originalPrescription') {L740}
      else if (child.localName = 'payee') then
        value.payee := ParseClaimPayee(child, path+'/payee') {L740}
      else if (child.localName = 'referral') then
        value.referral := ParseReference(child, path+'/referral') {L740}
      else if (child.localName = 'facility') then
        value.facility := ParseReference(child, path+'/facility') {L740}
      else if (child.localName = 'careTeam') then
        value.careTeamList.Add(ParseClaimCareTeam(child, path+'/careTeam')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseClaimSupportingInfo(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'diagnosis') then
        value.diagnosisList.Add(ParseClaimDiagnosis(child, path+'/diagnosis')) {L631}
      else if (child.localName = 'procedure') then
        value.procedure_List.Add(ParseClaimProcedure(child, path+'/procedure')) {L631}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseClaimInsurance(child, path+'/insurance')) {L631}
      else if (child.localName = 'accident') then
        value.accident := ParseClaimAccident(child, path+'/accident') {L740}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseClaimItem(child, path+'/item')) {L631}
      else if (child.localName = 'total') then
        value.total := ParseMoney(child, path+'/total') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaim(xml : TXmlBuilder; name : String; value : TFhirClaim);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimChildren(xml : TXmlBuilder; value : TFhirClaim);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', value.subType); {L741}
  ComposeEnum(xml, 'use', value.useElement, CODES_TFhirUseEnum); {L735}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'billablePeriod', value.billablePeriod); {L741}
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'enterer', value.enterer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'insurer', value.insurer); {L741}
  ComposeReference(xml, 'provider', value.provider); {L741}
  ComposeCodeableConcept(xml, 'priority', value.priority); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'fundsReserve', value.fundsReserve); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedList.Count - 1 do
      ComposeClaimRelated(xml, 'related', value.relatedList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'prescription', value.prescription); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'originalPrescription', value.originalPrescription); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeClaimPayee(xml, 'payee', value.payee); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'referral', value.referral); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'facility', value.facility); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.careTeamList.Count - 1 do
      ComposeClaimCareTeam(xml, 'careTeam', value.careTeamList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeClaimSupportingInfo(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeClaimDiagnosis(xml, 'diagnosis', value.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.procedure_List.Count - 1 do
      ComposeClaimProcedure(xml, 'procedure', value.procedure_List[i]);
  for i := 0 to value.insuranceList.Count - 1 do
      ComposeClaimInsurance(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeClaimAccident(xml, 'accident', value.accident); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeClaimItem(xml, 'item', value.itemList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'total', value.total); {L741}
end;

{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
function TFHIRXmlParser.ParseClaimResponseItem(element : TMXmlElement; path : string) : TFhirClaimResponseItem;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemChild(value : TFhirClaimResponseItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        value.itemSequenceElement := ParsePositiveInt(child, path+'/itemSequence') {L737}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseClaimResponseItemDetail(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItem(xml : TXmlBuilder; name : String; value : TFhirClaimResponseItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemChildren(xml : TXmlBuilder; value : TFhirClaimResponseItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'itemSequence', value.itemSequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeClaimResponseItemDetail(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseItemAdjudication(element : TMXmlElement; path : string) : TFhirClaimResponseItemAdjudication;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItemAdjudication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemAdjudicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemAdjudicationChild(value : TFhirClaimResponseItemAdjudication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'reason') then
        value.reason := ParseCodeableConcept(child, path+'/reason') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseDecimal(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemAdjudication(xml : TXmlBuilder; name : String; value : TFhirClaimResponseItemAdjudication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseItemAdjudicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemAdjudicationChildren(xml : TXmlBuilder; value : TFhirClaimResponseItemAdjudication);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', value.reason); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseClaimResponseItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemDetailChild(value : TFhirClaimResponseItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'detailSequence') then
        value.detailSequenceElement := ParsePositiveInt(child, path+'/detailSequence') {L737}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'subDetail') then
        value.subDetailList.Add(ParseClaimResponseItemDetailSubDetail(child, path+'/subDetail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetail(xml : TXmlBuilder; name : String; value : TFhirClaimResponseItemDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseItemDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'detailSequence', value.detailSequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeClaimResponseItemDetailSubDetail(xml, 'subDetail', value.subDetailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseItemDetailSubDetailChild(value : TFhirClaimResponseItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subDetailSequence') then
        value.subDetailSequenceElement := ParsePositiveInt(child, path+'/subDetailSequence') {L737}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetailSubDetail(xml : TXmlBuilder; name : String; value : TFhirClaimResponseItemDetailSubDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseItemDetailSubDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'subDetailSequence', value.subDetailSequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseAddItem(element : TMXmlElement; path : string) : TFhirClaimResponseAddItem;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseAddItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseAddItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseAddItemChild(value : TFhirClaimResponseAddItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        value.itemSequenceList.Add(ParsePositiveInt(child, path+'/itemSequence')) {L631}
      else if (child.localName = 'detailSequence') then
        value.detailSequenceList.Add(ParsePositiveInt(child, path+'/detailSequence')) {L631}
      else if (child.localName = 'subdetailSequence') then
        value.subdetailSequenceList.Add(ParsePositiveInt(child, path+'/subdetailSequence')) {L631}
      else if (child.localName = 'provider') then
        value.providerList.Add(ParseReference(child, path+'/provider')) {L631}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'servicedPeriod') then
        value.serviced := ParsePeriod(child, path+'/servicedPeriod') {L891}
      else if (child.localName = 'servicedDate') then
        value.serviced := ParseDate(child, path+'/servicedDate') {L891}
      else if (child.localName = 'locationCodeableConcept') then
        value.location := ParseCodeableConcept(child, path+'/locationCodeableConcept') {L891}
      else if (child.localName = 'locationAddress') then
        value.location := ParseAddress(child, path+'/locationAddress') {L891}
      else if (child.localName = 'locationReference') then
        value.location := ParseReference(child, path+'/locationReference') {L881}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'subSite') then
        value.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')) {L631}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseClaimResponseAddItemDetail(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItem(xml : TXmlBuilder; name : String; value : TFhirClaimResponseAddItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseAddItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemChildren(xml : TXmlBuilder; value : TFhirClaimResponseAddItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'itemSequence', value.itemSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'detailSequence', value.detailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subdetailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'subdetailSequence', value.subdetailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.providerList.Count - 1 do
      ComposeReference(xml, 'provider', value.providerList[i]);
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(value.serviced))
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(value.serviced));
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', value.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeClaimResponseAddItemDetail(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseAddItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseAddItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetailChild(value : TFhirClaimResponseAddItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'subDetail') then
        value.subDetailList.Add(ParseClaimResponseAddItemDetailSubDetail(child, path+'/subDetail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetail(xml : TXmlBuilder; name : String; value : TFhirClaimResponseAddItemDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseAddItemDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseAddItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeClaimResponseAddItemDetailSubDetail(xml, 'subDetail', value.subDetailList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirClaimResponseAddItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseAddItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseAddItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseAddItemDetailSubDetailChild(value : TFhirClaimResponseAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetailSubDetail(xml : TXmlBuilder; name : String; value : TFhirClaimResponseAddItemDetailSubDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseAddItemDetailSubDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseAddItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirClaimResponseAddItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseClaimResponseTotal(element : TMXmlElement; path : string) : TFhirClaimResponseTotal;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseTotal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseTotalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseTotalChild(value : TFhirClaimResponseTotal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseTotal(xml : TXmlBuilder; name : String; value : TFhirClaimResponseTotal);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseTotalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseTotalChildren(xml : TXmlBuilder; value : TFhirClaimResponseTotal);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeMoney(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseClaimResponsePayment(element : TMXmlElement; path : string) : TFhirClaimResponsePayment;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponsePayment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponsePaymentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponsePaymentChild(value : TFhirClaimResponsePayment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'adjustment') then
        value.adjustment := ParseMoney(child, path+'/adjustment') {L740}
      else if (child.localName = 'adjustmentReason') then
        value.adjustmentReason := ParseCodeableConcept(child, path+'/adjustmentReason') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponsePayment(xml : TXmlBuilder; name : String; value : TFhirClaimResponsePayment);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponsePaymentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponsePaymentChildren(xml : TXmlBuilder; value : TFhirClaimResponsePayment);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'adjustment', value.adjustment); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'adjustmentReason', value.adjustmentReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  ComposeMoney(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
end;

function TFHIRXmlParser.ParseClaimResponseProcessNote(element : TMXmlElement; path : string) : TFhirClaimResponseProcessNote;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseProcessNote.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseProcessNoteChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseProcessNoteChild(value : TFhirClaimResponseProcessNote; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        value.numberElement := ParsePositiveInt(child, path+'/number') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseProcessNote(xml : TXmlBuilder; name : String; value : TFhirClaimResponseProcessNote);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseProcessNoteChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseProcessNoteChildren(xml : TXmlBuilder; value : TFhirClaimResponseProcessNote);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'number', value.numberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirNoteTypeEnum); {L735}
  ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', value.language); {L741}
end;

function TFHIRXmlParser.ParseClaimResponseInsurance(element : TMXmlElement; path : string) : TFhirClaimResponseInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseInsuranceChild(value : TFhirClaimResponseInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'focal') then
        value.focalElement := ParseBoolean(child, path+'/focal') {L737}
      else if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if (child.localName = 'businessArrangement') then
        value.businessArrangementElement := ParseString(child, path+'/businessArrangement') {L737}
      else if (child.localName = 'claimResponse') then
        value.claimResponse := ParseReference(child, path+'/claimResponse') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseInsurance(xml : TXmlBuilder; name : String; value : TFhirClaimResponseInsurance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseInsuranceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseInsuranceChildren(xml : TXmlBuilder; value : TFhirClaimResponseInsurance);
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeBoolean(xml, 'focal', value.focalElement); {L738}
  ComposeReference(xml, 'coverage', value.coverage); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'businessArrangement', value.businessArrangementElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'claimResponse', value.claimResponse); {L741}
end;

function TFHIRXmlParser.ParseClaimResponseError(element : TMXmlElement; path : string) : TFhirClaimResponseError;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponseError.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseErrorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseErrorChild(value : TFhirClaimResponseError; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        value.itemSequenceElement := ParsePositiveInt(child, path+'/itemSequence') {L737}
      else if (child.localName = 'detailSequence') then
        value.detailSequenceElement := ParsePositiveInt(child, path+'/detailSequence') {L737}
      else if (child.localName = 'subDetailSequence') then
        value.subDetailSequenceElement := ParsePositiveInt(child, path+'/subDetailSequence') {L737}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseError(xml : TXmlBuilder; name : String; value : TFhirClaimResponseError);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseErrorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseErrorChildren(xml : TXmlBuilder; value : TFhirClaimResponseError);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'itemSequence', value.itemSequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'detailSequence', value.detailSequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'subDetailSequence', value.subDetailSequenceElement); {L738}
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
end;

function TFHIRXmlParser.ParseClaimResponse(element : TMXmlElement; path : string) : TFhirClaimResponse;
var
  child : TMXmlElement;
begin
  result := TFhirClaimResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClaimResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClaimResponseChild(value : TFhirClaimResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subType') then
        value.subType := ParseCodeableConcept(child, path+'/subType') {L740}
      else if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirUseEnum, SYSTEMS_TFhirUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'insurer') then
        value.insurer := ParseReference(child, path+'/insurer') {L740}
      else if (child.localName = 'requestor') then
        value.requestor := ParseReference(child, path+'/requestor') {L740}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'outcome') then
        value.outcomeElement := ParseEnum(CODES_TFhirClaimProcessingCodesEnum, SYSTEMS_TFhirClaimProcessingCodesEnum, child, path+'/outcome') {L734}
      else if (child.localName = 'disposition') then
        value.dispositionElement := ParseString(child, path+'/disposition') {L737}
      else if (child.localName = 'preAuthRef') then
        value.preAuthRefElement := ParseString(child, path+'/preAuthRef') {L737}
      else if (child.localName = 'preAuthPeriod') then
        value.preAuthPeriod := ParsePeriod(child, path+'/preAuthPeriod') {L740}
      else if (child.localName = 'payeeType') then
        value.payeeType := ParseCodeableConcept(child, path+'/payeeType') {L740}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseClaimResponseItem(child, path+'/item')) {L631}
      else if (child.localName = 'addItem') then
        value.addItemList.Add(ParseClaimResponseAddItem(child, path+'/addItem')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseClaimResponseItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'total') then
        value.totalList.Add(ParseClaimResponseTotal(child, path+'/total')) {L631}
      else if (child.localName = 'payment') then
        value.payment := ParseClaimResponsePayment(child, path+'/payment') {L740}
      else if (child.localName = 'fundsReserve') then
        value.fundsReserve := ParseCodeableConcept(child, path+'/fundsReserve') {L740}
      else if (child.localName = 'formCode') then
        value.formCode := ParseCodeableConcept(child, path+'/formCode') {L740}
      else if (child.localName = 'form') then
        value.form := ParseAttachment(child, path+'/form') {L740}
      else if (child.localName = 'processNote') then
        value.processNoteList.Add(ParseClaimResponseProcessNote(child, path+'/processNote')) {L631}
      else if (child.localName = 'communicationRequest') then
        value.communicationRequestList.Add(ParseReference(child, path+'/communicationRequest')) {L631}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseClaimResponseInsurance(child, path+'/insurance')) {L631}
      else if (child.localName = 'error') then
        value.errorList.Add(ParseClaimResponseError(child, path+'/error')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClaimResponse(xml : TXmlBuilder; name : String; value : TFhirClaimResponse);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClaimResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClaimResponseChildren(xml : TXmlBuilder; value : TFhirClaimResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', value.subType); {L741}
  ComposeEnum(xml, 'use', value.useElement, CODES_TFhirUseEnum); {L735}
  ComposeReference(xml, 'patient', value.patient); {L741}
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  ComposeReference(xml, 'insurer', value.insurer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'requestor', value.requestor); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'request', value.request); {L741}
  ComposeEnum(xml, 'outcome', value.outcomeElement, CODES_TFhirClaimProcessingCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'disposition', value.dispositionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'preAuthRef', value.preAuthRefElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'preAuthPeriod', value.preAuthPeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'payeeType', value.payeeType); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeClaimResponseItem(xml, 'item', value.itemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addItemList.Count - 1 do
      ComposeClaimResponseAddItem(xml, 'addItem', value.addItemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeClaimResponseItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.totalList.Count - 1 do
      ComposeClaimResponseTotal(xml, 'total', value.totalList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeClaimResponsePayment(xml, 'payment', value.payment); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'fundsReserve', value.fundsReserve); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'formCode', value.formCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeAttachment(xml, 'form', value.form); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processNoteList.Count - 1 do
      ComposeClaimResponseProcessNote(xml, 'processNote', value.processNoteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.communicationRequestList.Count - 1 do
      ComposeReference(xml, 'communicationRequest', value.communicationRequestList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeClaimResponseInsurance(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.errorList.Count - 1 do
      ComposeClaimResponseError(xml, 'error', value.errorList[i]);
end;

{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
function TFHIRXmlParser.ParseClinicalImpressionFinding(element : TMXmlElement; path : string) : TFhirClinicalImpressionFinding;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalImpressionFinding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalImpressionFindingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalImpressionFindingChild(value : TFhirClinicalImpressionFinding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'item') then
        value.item := ParseCodeableReference(child, path+'/item') {L740}
      else if (child.localName = 'basis') then
        value.basisElement := ParseString(child, path+'/basis') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionFinding(xml : TXmlBuilder; name : String; value : TFhirClinicalImpressionFinding);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalImpressionFindingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionFindingChildren(xml : TXmlBuilder; value : TFhirClinicalImpressionFinding);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableReference(xml, 'item', value.item); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'basis', value.basisElement); {L738}
end;

function TFHIRXmlParser.ParseClinicalImpression(element : TMXmlElement; path : string) : TFhirClinicalImpression;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalImpression.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalImpressionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalImpressionChild(value : TFhirClinicalImpression; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'effectivePeriod') then
        value.effective := ParsePeriod(child, path+'/effectivePeriod') {L891}
      else if (child.localName = 'effectiveDateTime') then
        value.effective := ParseDateTime(child, path+'/effectiveDateTime') {L891}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'previous') then
        value.previous := ParseReference(child, path+'/previous') {L740}
      else if (child.localName = 'problem') then
        value.problemList.Add(ParseReference(child, path+'/problem')) {L631}
      else if (child.localName = 'protocol') then
        value.protocolList.Add(ParseUri(child, path+'/protocol')) {L631}
      else if (child.localName = 'summary') then
        value.summaryElement := ParseString(child, path+'/summary') {L737}
      else if (child.localName = 'finding') then
        value.findingList.Add(ParseClinicalImpressionFinding(child, path+'/finding')) {L631}
      else if (child.localName = 'prognosisCodeableConcept') then
        value.prognosisCodeableConceptList.Add(ParseCodeableConcept(child, path+'/prognosisCodeableConcept')) {L631}
      else if (child.localName = 'prognosisReference') then
        value.prognosisReferenceList.Add(ParseReference(child, path+'/prognosisReference')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseReference(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpression(xml : TXmlBuilder; name : String; value : TFhirClinicalImpression);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalImpressionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalImpressionChildren(xml : TXmlBuilder; value : TFhirClinicalImpression);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEventStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(value.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(value.effective));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'previous', value.previous); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.problemList.Count - 1 do
      ComposeReference(xml, 'problem', value.problemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.protocolList.Count - 1 do
      ComposeUri(xml, 'protocol', value.protocolList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'summary', value.summaryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.findingList.Count - 1 do
      ComposeClinicalImpressionFinding(xml, 'finding', value.findingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.prognosisCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(xml, 'prognosisCodeableConcept', value.prognosisCodeableConceptList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.prognosisReferenceList.Count - 1 do
      ComposeReference(xml, 'prognosisReference', value.prognosisReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEISSUE}
function TFHIRXmlParser.ParseClinicalUseIssueContraindication(element : TMXmlElement; path : string) : TFhirClinicalUseIssueContraindication;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssueContraindication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueContraindicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueContraindicationChild(value : TFhirClinicalUseIssueContraindication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'diseaseSymptomProcedure') then
        value.diseaseSymptomProcedure := ParseCodeableConcept(child, path+'/diseaseSymptomProcedure') {L740}
      else if (child.localName = 'diseaseStatus') then
        value.diseaseStatus := ParseCodeableConcept(child, path+'/diseaseStatus') {L740}
      else if (child.localName = 'comorbidity') then
        value.comorbidityList.Add(ParseCodeableConcept(child, path+'/comorbidity')) {L631}
      else if (child.localName = 'indication') then
        value.indicationList.Add(ParseReference(child, path+'/indication')) {L631}
      else if (child.localName = 'otherTherapy') then
        value.otherTherapyList.Add(ParseClinicalUseIssueContraindicationOtherTherapy(child, path+'/otherTherapy')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueContraindication(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssueContraindication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueContraindicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueContraindicationChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueContraindication);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'diseaseSymptomProcedure', value.diseaseSymptomProcedure); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'diseaseStatus', value.diseaseStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.comorbidityList.Count - 1 do
      ComposeCodeableConcept(xml, 'comorbidity', value.comorbidityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.indicationList.Count - 1 do
      ComposeReference(xml, 'indication', value.indicationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.otherTherapyList.Count - 1 do
      ComposeClinicalUseIssueContraindicationOtherTherapy(xml, 'otherTherapy', value.otherTherapyList[i]);
end;

function TFHIRXmlParser.ParseClinicalUseIssueContraindicationOtherTherapy(element : TMXmlElement; path : string) : TFhirClinicalUseIssueContraindicationOtherTherapy;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssueContraindicationOtherTherapy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueContraindicationOtherTherapyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueContraindicationOtherTherapyChild(value : TFhirClinicalUseIssueContraindicationOtherTherapy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'therapyRelationshipType') then
        value.therapyRelationshipType := ParseCodeableConcept(child, path+'/therapyRelationshipType') {L740}
      else if (child.localName = 'medicationCodeableConcept') then
        value.medication := ParseCodeableConcept(child, path+'/medicationCodeableConcept') {L891}
      else if (child.localName = 'medicationReference') then
        value.medication := ParseReference(child, path+'/medicationReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueContraindicationOtherTherapy(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssueContraindicationOtherTherapy);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueContraindicationOtherTherapyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueContraindicationOtherTherapyChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueContraindicationOtherTherapy);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'therapyRelationshipType', value.therapyRelationshipType); {L741}
  if (value.medication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'medicationCodeableConcept', TFhirCodeableConcept(value.medication))
  else if (value.medication is TFhirReference) {2} then
    ComposeReference(xml, 'medicationReference', TFhirReference(value.medication));
end;

function TFHIRXmlParser.ParseClinicalUseIssueIndication(element : TMXmlElement; path : string) : TFhirClinicalUseIssueIndication;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssueIndication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueIndicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueIndicationChild(value : TFhirClinicalUseIssueIndication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'diseaseSymptomProcedure') then
        value.diseaseSymptomProcedure := ParseCodeableConcept(child, path+'/diseaseSymptomProcedure') {L740}
      else if (child.localName = 'diseaseStatus') then
        value.diseaseStatus := ParseCodeableConcept(child, path+'/diseaseStatus') {L740}
      else if (child.localName = 'comorbidity') then
        value.comorbidityList.Add(ParseCodeableConcept(child, path+'/comorbidity')) {L631}
      else if (child.localName = 'intendedEffect') then
        value.intendedEffect := ParseCodeableConcept(child, path+'/intendedEffect') {L740}
      else if (child.localName = 'duration') then
        value.duration := ParseQuantity(child, path+'/duration') {L740}
      else if (child.localName = 'undesirableEffect') then
        value.undesirableEffectList.Add(ParseReference(child, path+'/undesirableEffect')) {L631}
      else if (child.localName = 'otherTherapy') then
        value.otherTherapyList.Add(ParseClinicalUseIssueContraindicationOtherTherapy(child, path+'/otherTherapy')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueIndication(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssueIndication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueIndicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueIndicationChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueIndication);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'diseaseSymptomProcedure', value.diseaseSymptomProcedure); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'diseaseStatus', value.diseaseStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.comorbidityList.Count - 1 do
      ComposeCodeableConcept(xml, 'comorbidity', value.comorbidityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'intendedEffect', value.intendedEffect); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'duration', value.duration); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.undesirableEffectList.Count - 1 do
      ComposeReference(xml, 'undesirableEffect', value.undesirableEffectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.otherTherapyList.Count - 1 do
      ComposeClinicalUseIssueContraindicationOtherTherapy(xml, 'otherTherapy', value.otherTherapyList[i]);
end;

function TFHIRXmlParser.ParseClinicalUseIssueInteraction(element : TMXmlElement; path : string) : TFhirClinicalUseIssueInteraction;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssueInteraction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueInteractionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueInteractionChild(value : TFhirClinicalUseIssueInteraction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'interactant') then
        value.interactantList.Add(ParseClinicalUseIssueInteractionInteractant(child, path+'/interactant')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'effect') then
        value.effect := ParseCodeableConcept(child, path+'/effect') {L740}
      else if (child.localName = 'incidence') then
        value.incidence := ParseCodeableConcept(child, path+'/incidence') {L740}
      else if (child.localName = 'management') then
        value.management := ParseCodeableConcept(child, path+'/management') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueInteraction(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssueInteraction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueInteractionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueInteractionChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueInteraction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.interactantList.Count - 1 do
      ComposeClinicalUseIssueInteractionInteractant(xml, 'interactant', value.interactantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'effect', value.effect); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'incidence', value.incidence); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'management', value.management); {L741}
end;

function TFHIRXmlParser.ParseClinicalUseIssueInteractionInteractant(element : TMXmlElement; path : string) : TFhirClinicalUseIssueInteractionInteractant;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssueInteractionInteractant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueInteractionInteractantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueInteractionInteractantChild(value : TFhirClinicalUseIssueInteractionInteractant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemReference') then
        value.item := ParseReference(child, path+'/itemReference') {L881}
      else if (child.localName = 'itemCodeableConcept') then
        value.item := ParseCodeableConcept(child, path+'/itemCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueInteractionInteractant(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssueInteractionInteractant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueInteractionInteractantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueInteractionInteractantChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueInteractionInteractant);
begin
  composeBackboneElementChildren(xml, value);
  if (value.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(value.item))
  else if (value.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(value.item));
end;

function TFHIRXmlParser.ParseClinicalUseIssueUndesirableEffect(element : TMXmlElement; path : string) : TFhirClinicalUseIssueUndesirableEffect;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssueUndesirableEffect.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueUndesirableEffectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueUndesirableEffectChild(value : TFhirClinicalUseIssueUndesirableEffect; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'symptomConditionEffect') then
        value.symptomConditionEffect := ParseCodeableConcept(child, path+'/symptomConditionEffect') {L740}
      else if (child.localName = 'classification') then
        value.classification := ParseCodeableConcept(child, path+'/classification') {L740}
      else if (child.localName = 'frequencyOfOccurrence') then
        value.frequencyOfOccurrence := ParseCodeableConcept(child, path+'/frequencyOfOccurrence') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueUndesirableEffect(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssueUndesirableEffect);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueUndesirableEffectChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueUndesirableEffectChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssueUndesirableEffect);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'symptomConditionEffect', value.symptomConditionEffect); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'classification', value.classification); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'frequencyOfOccurrence', value.frequencyOfOccurrence); {L741}
end;

function TFHIRXmlParser.ParseClinicalUseIssue(element : TMXmlElement; path : string) : TFhirClinicalUseIssue;
var
  child : TMXmlElement;
begin
  result := TFhirClinicalUseIssue.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseClinicalUseIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseClinicalUseIssueChild(value : TFhirClinicalUseIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirClinicalUseIssueTypeEnum, SYSTEMS_TFhirClinicalUseIssueTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'subject') then
        value.subjectList.Add(ParseReference(child, path+'/subject')) {L631}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'contraindication') then
        value.contraindication := ParseClinicalUseIssueContraindication(child, path+'/contraindication') {L740}
      else if (child.localName = 'indication') then
        value.indication := ParseClinicalUseIssueIndication(child, path+'/indication') {L740}
      else if (child.localName = 'interaction') then
        value.interaction := ParseClinicalUseIssueInteraction(child, path+'/interaction') {L740}
      else if (child.localName = 'population') then
        value.populationList.Add(ParsePopulation(child, path+'/population')) {L631}
      else if (child.localName = 'undesirableEffect') then
        value.undesirableEffect := ParseClinicalUseIssueUndesirableEffect(child, path+'/undesirableEffect') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssue(xml : TXmlBuilder; name : String; value : TFhirClinicalUseIssue);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeClinicalUseIssueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeClinicalUseIssueChildren(xml : TXmlBuilder; value : TFhirClinicalUseIssue);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirClinicalUseIssueTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(xml, 'subject', value.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseIssueContraindication(xml, 'contraindication', value.contraindication); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseIssueIndication(xml, 'indication', value.indication); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseIssueInteraction(xml, 'interaction', value.interaction); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.populationList.Count - 1 do
      ComposePopulation(xml, 'population', value.populationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeClinicalUseIssueUndesirableEffect(xml, 'undesirableEffect', value.undesirableEffect); {L741}
end;

{$ENDIF FHIR_CLINICALUSEISSUE}
{$IFDEF FHIR_CODESYSTEM}
function TFHIRXmlParser.ParseCodeSystemFilter(element : TMXmlElement; path : string) : TFhirCodeSystemFilter;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemFilterChild(value : TFhirCodeSystemFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'operator') then
        value.operatorList.Add(ParseEnum(CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum, child, path+'/operator')){y.1}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemFilter(xml : TXmlBuilder; name : String; value : TFhirCodeSystemFilter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeSystemFilterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemFilterChildren(xml : TXmlBuilder; value : TFhirCodeSystemFilter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  for i := 0 to value.operatorList.Count - 1 do
      ComposeEnum(xml, 'operator', value.operatorList[i], CODES_TFhirFilterOperatorEnum);
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseCodeSystemProperty(element : TMXmlElement; path : string) : TFhirCodeSystemProperty;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemPropertyChild(value : TFhirCodeSystemProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'uri') then
        value.uriElement := ParseUri(child, path+'/uri') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirConceptPropertyTypeEnum, SYSTEMS_TFhirConceptPropertyTypeEnum, child, path+'/type') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemProperty(xml : TXmlBuilder; name : String; value : TFhirCodeSystemProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeSystemPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemPropertyChildren(xml : TXmlBuilder; value : TFhirCodeSystemProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'uri', value.uriElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirConceptPropertyTypeEnum); {L735}
end;

function TFHIRXmlParser.ParseCodeSystemConcept(element : TMXmlElement; path : string) : TFhirCodeSystemConcept;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemConcept.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemConceptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemConceptChild(value : TFhirCodeSystemConcept; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseString(child, path+'/definition') {L737}
      else if (child.localName = 'designation') then
        value.designationList.Add(ParseCodeSystemConceptDesignation(child, path+'/designation')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseCodeSystemConceptProperty(child, path+'/property')) {L631}
      else if (child.localName = 'concept') then
        value.conceptList.Add(ParseCodeSystemConcept(child, path+'/concept')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConcept(xml : TXmlBuilder; name : String; value : TFhirCodeSystemConcept);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeSystemConceptChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptChildren(xml : TXmlBuilder; value : TFhirCodeSystemConcept);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'definition', value.definitionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.designationList.Count - 1 do
      ComposeCodeSystemConceptDesignation(xml, 'designation', value.designationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeCodeSystemConceptProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conceptList.Count - 1 do
      ComposeCodeSystemConcept(xml, 'concept', value.conceptList[i]);
end;

function TFHIRXmlParser.ParseCodeSystemConceptDesignation(element : TMXmlElement; path : string) : TFhirCodeSystemConceptDesignation;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemConceptDesignation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemConceptDesignationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemConceptDesignationChild(value : TFhirCodeSystemConceptDesignation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        value.languageElement := ParseCode(child, path+'/language') {L737}
      else if (child.localName = 'use') then
        value.use := ParseCoding(child, path+'/use') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptDesignation(xml : TXmlBuilder; name : String; value : TFhirCodeSystemConceptDesignation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeSystemConceptDesignationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptDesignationChildren(xml : TXmlBuilder; value : TFhirCodeSystemConceptDesignation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'language', value.languageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'use', value.use); {L741}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseCodeSystemConceptProperty(element : TMXmlElement; path : string) : TFhirCodeSystemConceptProperty;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystemConceptProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemConceptPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemConceptPropertyChild(value : TFhirCodeSystemConceptProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptProperty(xml : TXmlBuilder; name : String; value : TFhirCodeSystemConceptProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeSystemConceptPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemConceptPropertyChildren(xml : TXmlBuilder; value : TFhirCodeSystemConceptProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value));
end;

function TFHIRXmlParser.ParseCodeSystem(element : TMXmlElement; path : string) : TFhirCodeSystem;
var
  child : TMXmlElement;
begin
  result := TFhirCodeSystem.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCodeSystemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCodeSystemChild(value : TFhirCodeSystem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'caseSensitive') then
        value.caseSensitiveElement := ParseBoolean(child, path+'/caseSensitive') {L737}
      else if (child.localName = 'valueSet') then
        value.valueSetElement := ParseCanonical(child, path+'/valueSet') {L737}
      else if (child.localName = 'hierarchyMeaning') then
        value.hierarchyMeaningElement := ParseEnum(CODES_TFhirCodeSystemHierarchyMeaningEnum, SYSTEMS_TFhirCodeSystemHierarchyMeaningEnum, child, path+'/hierarchyMeaning') {L734}
      else if (child.localName = 'compositional') then
        value.compositionalElement := ParseBoolean(child, path+'/compositional') {L737}
      else if (child.localName = 'versionNeeded') then
        value.versionNeededElement := ParseBoolean(child, path+'/versionNeeded') {L737}
      else if (child.localName = 'content') then
        value.contentElement := ParseEnum(CODES_TFhirCodeSystemContentModeEnum, SYSTEMS_TFhirCodeSystemContentModeEnum, child, path+'/content') {L734}
      else if (child.localName = 'supplements') then
        value.supplementsElement := ParseCanonical(child, path+'/supplements') {L737}
      else if (child.localName = 'count') then
        value.countElement := ParseUnsignedInt(child, path+'/count') {L737}
      else if (child.localName = 'filter') then
        value.filterList.Add(ParseCodeSystemFilter(child, path+'/filter')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseCodeSystemProperty(child, path+'/property')) {L631}
      else if (child.localName = 'concept') then
        value.conceptList.Add(ParseCodeSystemConcept(child, path+'/concept')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCodeSystem(xml : TXmlBuilder; name : String; value : TFhirCodeSystem);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCodeSystemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCodeSystemChildren(xml : TXmlBuilder; value : TFhirCodeSystem);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'caseSensitive', value.caseSensitiveElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'valueSet', value.valueSetElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'hierarchyMeaning', value.hierarchyMeaningElement, CODES_TFhirCodeSystemHierarchyMeaningEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'compositional', value.compositionalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'versionNeeded', value.versionNeededElement); {L738}
  ComposeEnum(xml, 'content', value.contentElement, CODES_TFhirCodeSystemContentModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'supplements', value.supplementsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'count', value.countElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.filterList.Count - 1 do
      ComposeCodeSystemFilter(xml, 'filter', value.filterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeCodeSystemProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conceptList.Count - 1 do
      ComposeCodeSystemConcept(xml, 'concept', value.conceptList[i]);
end;

{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
function TFHIRXmlParser.ParseCommunicationPayload(element : TMXmlElement; path : string) : TFhirCommunicationPayload;
var
  child : TMXmlElement;
begin
  result := TFhirCommunicationPayload.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationPayloadChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationPayloadChild(value : TFhirCommunicationPayload; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        value.content := ParseAttachment(child, path+'/contentAttachment') {L891}
      else if (child.localName = 'contentReference') then
        value.content := ParseReference(child, path+'/contentReference') {L881}
      else if (child.localName = 'contentCodeableConcept') then
        value.content := ParseCodeableConcept(child, path+'/contentCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunicationPayload(xml : TXmlBuilder; name : String; value : TFhirCommunicationPayload);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCommunicationPayloadChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCommunicationPayloadChildren(xml : TXmlBuilder; value : TFhirCommunicationPayload);
begin
  composeBackboneElementChildren(xml, value);
  if (value.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(value.content))
  else if (value.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(value.content))
  else if (value.content is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'contentCodeableConcept', TFhirCodeableConcept(value.content));
end;

function TFHIRXmlParser.ParseCommunication(element : TMXmlElement; path : string) : TFhirCommunication;
var
  child : TMXmlElement;
begin
  result := TFhirCommunication.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationChild(value : TFhirCommunication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'inResponseTo') then
        value.inResponseToList.Add(ParseReference(child, path+'/inResponseTo')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'medium') then
        value.mediumList.Add(ParseCodeableConcept(child, path+'/medium')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'topic') then
        value.topic := ParseCodeableConcept(child, path+'/topic') {L740}
      else if (child.localName = 'about') then
        value.aboutList.Add(ParseReference(child, path+'/about')) {L631}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'sent') then
        value.sentElement := ParseDateTime(child, path+'/sent') {L737}
      else if (child.localName = 'received') then
        value.receivedElement := ParseDateTime(child, path+'/received') {L737}
      else if (child.localName = 'recipient') then
        value.recipientList.Add(ParseReference(child, path+'/recipient')) {L631}
      else if (child.localName = 'sender') then
        value.sender := ParseReference(child, path+'/sender') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'payload') then
        value.payloadList.Add(ParseCommunicationPayload(child, path+'/payload')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunication(xml : TXmlBuilder; name : String; value : TFhirCommunication);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCommunicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCommunicationChildren(xml : TXmlBuilder; value : TFhirCommunication);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.inResponseToList.Count - 1 do
      ComposeReference(xml, 'inResponseTo', value.inResponseToList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEventStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.mediumList.Count - 1 do
      ComposeCodeableConcept(xml, 'medium', value.mediumList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'topic', value.topic); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.aboutList.Count - 1 do
      ComposeReference(xml, 'about', value.aboutList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'sent', value.sentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'received', value.receivedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(xml, 'recipient', value.recipientList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'sender', value.sender); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.payloadList.Count - 1 do
      ComposeCommunicationPayload(xml, 'payload', value.payloadList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
function TFHIRXmlParser.ParseCommunicationRequestPayload(element : TMXmlElement; path : string) : TFhirCommunicationRequestPayload;
var
  child : TMXmlElement;
begin
  result := TFhirCommunicationRequestPayload.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationRequestPayloadChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationRequestPayloadChild(value : TFhirCommunicationRequestPayload; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        value.content := ParseAttachment(child, path+'/contentAttachment') {L891}
      else if (child.localName = 'contentReference') then
        value.content := ParseReference(child, path+'/contentReference') {L881}
      else if (child.localName = 'contentCodeableConcept') then
        value.content := ParseCodeableConcept(child, path+'/contentCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequestPayload(xml : TXmlBuilder; name : String; value : TFhirCommunicationRequestPayload);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCommunicationRequestPayloadChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequestPayloadChildren(xml : TXmlBuilder; value : TFhirCommunicationRequestPayload);
begin
  composeBackboneElementChildren(xml, value);
  if (value.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(value.content))
  else if (value.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(value.content))
  else if (value.content is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'contentCodeableConcept', TFhirCodeableConcept(value.content));
end;

function TFHIRXmlParser.ParseCommunicationRequest(element : TMXmlElement; path : string) : TFhirCommunicationRequest;
var
  child : TMXmlElement;
begin
  result := TFhirCommunicationRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCommunicationRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCommunicationRequestChild(value : TFhirCommunicationRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'replaces') then
        value.replacesList.Add(ParseReference(child, path+'/replaces')) {L631}
      else if (child.localName = 'groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'doNotPerform') then
        value.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {L737}
      else if (child.localName = 'medium') then
        value.mediumList.Add(ParseCodeableConcept(child, path+'/medium')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'about') then
        value.aboutList.Add(ParseReference(child, path+'/about')) {L631}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'payload') then
        value.payloadList.Add(ParseCommunicationRequestPayload(child, path+'/payload')) {L631}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'requester') then
        value.requester := ParseReference(child, path+'/requester') {L740}
      else if (child.localName = 'recipient') then
        value.recipientList.Add(ParseReference(child, path+'/recipient')) {L631}
      else if (child.localName = 'informationProvider') then
        value.informationProviderList.Add(ParseReference(child, path+'/informationProvider')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequest(xml : TXmlBuilder; name : String; value : TFhirCommunicationRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCommunicationRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCommunicationRequestChildren(xml : TXmlBuilder; value : TFhirCommunicationRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(xml, 'replaces', value.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'groupIdentifier', value.groupIdentifier); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirRequestStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'doNotPerform', value.doNotPerformElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.mediumList.Count - 1 do
      ComposeCodeableConcept(xml, 'medium', value.mediumList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.aboutList.Count - 1 do
      ComposeReference(xml, 'about', value.aboutList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.payloadList.Count - 1 do
      ComposeCommunicationRequestPayload(xml, 'payload', value.payloadList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'requester', value.requester); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(xml, 'recipient', value.recipientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.informationProviderList.Count - 1 do
      ComposeReference(xml, 'informationProvider', value.informationProviderList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
function TFHIRXmlParser.ParseCompartmentDefinitionResource(element : TMXmlElement; path : string) : TFhirCompartmentDefinitionResource;
var
  child : TMXmlElement;
begin
  result := TFhirCompartmentDefinitionResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompartmentDefinitionResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompartmentDefinitionResourceChild(value : TFhirCompartmentDefinitionResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/code') {L734}
      else if (child.localName = 'param') then
        value.paramList.Add(ParseString(child, path+'/param')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinitionResource(xml : TXmlBuilder; name : String; value : TFhirCompartmentDefinitionResource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompartmentDefinitionResourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinitionResourceChildren(xml : TXmlBuilder; value : TFhirCompartmentDefinitionResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.paramList.Count - 1 do
      ComposeString(xml, 'param', value.paramList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseCompartmentDefinition(element : TMXmlElement; path : string) : TFhirCompartmentDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirCompartmentDefinition.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompartmentDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompartmentDefinitionChild(value : TFhirCompartmentDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'search') then
        value.searchElement := ParseBoolean(child, path+'/search') {L737}
      else if (child.localName = 'resource') then
        value.resourceList.Add(ParseCompartmentDefinitionResource(child, path+'/resource')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinition(xml : TXmlBuilder; name : String; value : TFhirCompartmentDefinition);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompartmentDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompartmentDefinitionChildren(xml : TXmlBuilder; value : TFhirCompartmentDefinition);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirCompartmentTypeEnum); {L735}
  ComposeBoolean(xml, 'search', value.searchElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resourceList.Count - 1 do
      ComposeCompartmentDefinitionResource(xml, 'resource', value.resourceList[i]);
end;

{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
function TFHIRXmlParser.ParseCompositionAttester(element : TMXmlElement; path : string) : TFhirCompositionAttester;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionAttester.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionAttesterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionAttesterChild(value : TFhirCompositionAttester; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirCompositionAttestationModeEnum, SYSTEMS_TFhirCompositionAttestationModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'time') then
        value.timeElement := ParseDateTime(child, path+'/time') {L737}
      else if (child.localName = 'party') then
        value.party := ParseReference(child, path+'/party') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionAttester(xml : TXmlBuilder; name : String; value : TFhirCompositionAttester);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompositionAttesterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompositionAttesterChildren(xml : TXmlBuilder; value : TFhirCompositionAttester);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirCompositionAttestationModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'time', value.timeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'party', value.party); {L741}
end;

function TFHIRXmlParser.ParseCompositionRelatesTo(element : TMXmlElement; path : string) : TFhirCompositionRelatesTo;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionRelatesTo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionRelatesToChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionRelatesToChild(value : TFhirCompositionRelatesTo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'targetIdentifier') then
        value.target := ParseIdentifier(child, path+'/targetIdentifier') {L891}
      else if (child.localName = 'targetReference') then
        value.target := ParseReference(child, path+'/targetReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionRelatesTo(xml : TXmlBuilder; name : String; value : TFhirCompositionRelatesTo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompositionRelatesToChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompositionRelatesToChildren(xml : TXmlBuilder; value : TFhirCompositionRelatesTo);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirDocumentRelationshipTypeEnum); {L735}
  if (value.target is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'targetIdentifier', TFhirIdentifier(value.target))
  else if (value.target is TFhirReference) {2} then
    ComposeReference(xml, 'targetReference', TFhirReference(value.target));
end;

function TFHIRXmlParser.ParseCompositionEvent(element : TMXmlElement; path : string) : TFhirCompositionEvent;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionEvent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionEventChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionEventChild(value : TFhirCompositionEvent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseReference(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionEvent(xml : TXmlBuilder; name : String; value : TFhirCompositionEvent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompositionEventChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompositionEventChildren(xml : TXmlBuilder; value : TFhirCompositionEvent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseCompositionSection(element : TMXmlElement; path : string) : TFhirCompositionSection;
var
  child : TMXmlElement;
begin
  result := TFhirCompositionSection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionSectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionSectionChild(value : TFhirCompositionSection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseReference(child, path+'/author')) {L631}
      else if (child.localName = 'focus') then
        value.focus := ParseReference(child, path+'/focus') {L740}
      else if (child.localName = 'text') then
        value.text := ParseNarrative(child, path+'/text') {L740}
      else if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'orderedBy') then
        value.orderedBy := ParseCodeableConcept(child, path+'/orderedBy') {L740}
      else if (child.localName = 'entry') then
        value.entryList.Add(ParseReference(child, path+'/entry')) {L631}
      else if (child.localName = 'emptyReason') then
        value.emptyReason := ParseCodeableConcept(child, path+'/emptyReason') {L740}
      else if (child.localName = 'section') then
        value.sectionList.Add(ParseCompositionSection(child, path+'/section')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCompositionSection(xml : TXmlBuilder; name : String; value : TFhirCompositionSection);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompositionSectionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompositionSectionChildren(xml : TXmlBuilder; value : TFhirCompositionSection);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'focus', value.focus); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(xml, 'text', value.text); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirListModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'orderedBy', value.orderedBy); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entryList.Count - 1 do
      ComposeReference(xml, 'entry', value.entryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'emptyReason', value.emptyReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.sectionList.Count - 1 do
      ComposeCompositionSection(xml, 'section', value.sectionList[i]);
end;

function TFHIRXmlParser.ParseComposition(element : TMXmlElement; path : string) : TFhirComposition;
var
  child : TMXmlElement;
begin
  result := TFhirComposition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCompositionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCompositionChild(value : TFhirComposition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseReference(child, path+'/author')) {L631}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'confidentiality') then
        value.confidentialityElement := ParseCode(child, path+'/confidentiality') {L737}
      else if (child.localName = 'attester') then
        value.attesterList.Add(ParseCompositionAttester(child, path+'/attester')) {L631}
      else if (child.localName = 'custodian') then
        value.custodian := ParseReference(child, path+'/custodian') {L740}
      else if (child.localName = 'relatesTo') then
        value.relatesToList.Add(ParseCompositionRelatesTo(child, path+'/relatesTo')) {L631}
      else if (child.localName = 'event') then
        value.eventList.Add(ParseCompositionEvent(child, path+'/event')) {L631}
      else if (child.localName = 'section') then
        value.sectionList.Add(ParseCompositionSection(child, path+'/section')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeComposition(xml : TXmlBuilder; name : String; value : TFhirComposition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCompositionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCompositionChildren(xml : TXmlBuilder; value : TFhirComposition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirCompositionStatusEnum); {L735}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  for i := 0 to value.authorList.Count - 1 do
      ComposeReference(xml, 'author', value.authorList[i]);
  ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'confidentiality', value.confidentialityElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.attesterList.Count - 1 do
      ComposeCompositionAttester(xml, 'attester', value.attesterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'custodian', value.custodian); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeCompositionRelatesTo(xml, 'relatesTo', value.relatesToList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.eventList.Count - 1 do
      ComposeCompositionEvent(xml, 'event', value.eventList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.sectionList.Count - 1 do
      ComposeCompositionSection(xml, 'section', value.sectionList[i]);
end;

{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
function TFHIRXmlParser.ParseConceptMapGroup(element : TMXmlElement; path : string) : TFhirConceptMapGroup;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupChild(value : TFhirConceptMapGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'source') then
        value.sourceElement := ParseUri(child, path+'/source') {L737}
      else if (child.localName = 'sourceVersion') then
        value.sourceVersionElement := ParseString(child, path+'/sourceVersion') {L737}
      else if (child.localName = 'target') then
        value.targetElement := ParseUri(child, path+'/target') {L737}
      else if (child.localName = 'targetVersion') then
        value.targetVersionElement := ParseString(child, path+'/targetVersion') {L737}
      else if (child.localName = 'element') then
        value.elementList.Add(ParseConceptMapGroupElement(child, path+'/element')) {L631}
      else if (child.localName = 'unmapped') then
        value.unmapped := ParseConceptMapGroupUnmapped(child, path+'/unmapped') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroup(xml : TXmlBuilder; name : String; value : TFhirConceptMapGroup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConceptMapGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupChildren(xml : TXmlBuilder; value : TFhirConceptMapGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'source', value.sourceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sourceVersion', value.sourceVersionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'target', value.targetElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'targetVersion', value.targetVersionElement); {L738}
  for i := 0 to value.elementList.Count - 1 do
      ComposeConceptMapGroupElement(xml, 'element', value.elementList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeConceptMapGroupUnmapped(xml, 'unmapped', value.unmapped); {L741}
end;

function TFHIRXmlParser.ParseConceptMapGroupElement(element : TMXmlElement; path : string) : TFhirConceptMapGroupElement;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupElement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupElementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupElementChild(value : TFhirConceptMapGroupElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'noMap') then
        value.noMapElement := ParseBoolean(child, path+'/noMap') {L737}
      else if (child.localName = 'target') then
        value.targetList.Add(ParseConceptMapGroupElementTarget(child, path+'/target')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElement(xml : TXmlBuilder; name : String; value : TFhirConceptMapGroupElement);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConceptMapGroupElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupElement);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'noMap', value.noMapElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposeConceptMapGroupElementTarget(xml, 'target', value.targetList[i]);
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTarget(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTarget;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupElementTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupElementTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTargetChild(value : TFhirConceptMapGroupElementTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'relationship') then
        value.relationshipElement := ParseEnum(CODES_TFhirConceptMapRelationshipEnum, SYSTEMS_TFhirConceptMapRelationshipEnum, child, path+'/relationship') {L734}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if (child.localName = 'dependsOn') then
        value.dependsOnList.Add(ParseConceptMapGroupElementTargetDependsOn(child, path+'/dependsOn')) {L631}
      else if (child.localName = 'product') then
        value.productList.Add(ParseConceptMapGroupElementTargetDependsOn(child, path+'/product')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTarget(xml : TXmlBuilder; name : String; value : TFhirConceptMapGroupElementTarget);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConceptMapGroupElementTargetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTargetChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupElementTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  ComposeEnum(xml, 'relationship', value.relationshipElement, CODES_TFhirConceptMapRelationshipEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dependsOnList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(xml, 'dependsOn', value.dependsOnList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.productList.Count - 1 do
      ComposeConceptMapGroupElementTargetDependsOn(xml, 'product', value.productList[i]);
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTargetDependsOn(element : TMXmlElement; path : string) : TFhirConceptMapGroupElementTargetDependsOn;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupElementTargetDependsOn.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupElementTargetDependsOnChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupElementTargetDependsOnChild(value : TFhirConceptMapGroupElementTargetDependsOn; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'property') then
        value.property_Element := ParseUri(child, path+'/property') {L737}
      else if (child.localName = 'system') then
        value.systemElement := ParseCanonical(child, path+'/system') {L737}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTargetDependsOn(xml : TXmlBuilder; name : String; value : TFhirConceptMapGroupElementTargetDependsOn);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConceptMapGroupElementTargetDependsOnChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupElementTargetDependsOnChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupElementTargetDependsOn);
begin
  composeBackboneElementChildren(xml, value);
  ComposeUri(xml, 'property', value.property_Element); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'system', value.systemElement); {L738}
  ComposeString(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
end;

function TFHIRXmlParser.ParseConceptMapGroupUnmapped(element : TMXmlElement; path : string) : TFhirConceptMapGroupUnmapped;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMapGroupUnmapped.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapGroupUnmappedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapGroupUnmappedChild(value : TFhirConceptMapGroupUnmapped; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirConceptMapGroupUnmappedModeEnum, SYSTEMS_TFhirConceptMapGroupUnmappedModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseCanonical(child, path+'/url') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupUnmapped(xml : TXmlBuilder; name : String; value : TFhirConceptMapGroupUnmapped);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConceptMapGroupUnmappedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConceptMapGroupUnmappedChildren(xml : TXmlBuilder; value : TFhirConceptMapGroupUnmapped);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirConceptMapGroupUnmappedModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'url', value.urlElement); {L738}
end;

function TFHIRXmlParser.ParseConceptMap(element : TMXmlElement; path : string) : TFhirConceptMap;
var
  child : TMXmlElement;
begin
  result := TFhirConceptMap.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConceptMapChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConceptMapChild(value : TFhirConceptMap; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'sourceCanonical') then
        value.source := ParseCanonical(child, path+'/sourceCanonical') {L891}
      else if (child.localName = 'sourceUri') then
        value.source := ParseUri(child, path+'/sourceUri') {L891}
      else if (child.localName = 'targetCanonical') then
        value.target := ParseCanonical(child, path+'/targetCanonical') {L891}
      else if (child.localName = 'targetUri') then
        value.target := ParseUri(child, path+'/targetUri') {L891}
      else if (child.localName = 'group') then
        value.groupList.Add(ParseConceptMapGroup(child, path+'/group')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConceptMap(xml : TXmlBuilder; name : String; value : TFhirConceptMap);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConceptMapChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConceptMapChildren(xml : TXmlBuilder; value : TFhirConceptMap);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.source is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'sourceCanonical', TFhirCanonical(value.source))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.source is TFhirUri) {6} then
    ComposeUri(xml, 'sourceUri', TFhirUri(value.source));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.target is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'targetCanonical', TFhirCanonical(value.target))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.target is TFhirUri) {6} then
    ComposeUri(xml, 'targetUri', TFhirUri(value.target));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.groupList.Count - 1 do
      ComposeConceptMapGroup(xml, 'group', value.groupList[i]);
end;

{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
function TFHIRXmlParser.ParseConditionStage(element : TMXmlElement; path : string) : TFhirConditionStage;
var
  child : TMXmlElement;
begin
  result := TFhirConditionStage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionStageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionStageChild(value : TFhirConditionStage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'summary') then
        value.summary := ParseCodeableConcept(child, path+'/summary') {L740}
      else if (child.localName = 'assessment') then
        value.assessmentList.Add(ParseReference(child, path+'/assessment')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionStage(xml : TXmlBuilder; name : String; value : TFhirConditionStage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionStageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionStageChildren(xml : TXmlBuilder; value : TFhirConditionStage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'summary', value.summary); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.assessmentList.Count - 1 do
      ComposeReference(xml, 'assessment', value.assessmentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
end;

function TFHIRXmlParser.ParseConditionEvidence(element : TMXmlElement; path : string) : TFhirConditionEvidence;
var
  child : TMXmlElement;
begin
  result := TFhirConditionEvidence.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionEvidenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionEvidenceChild(value : TFhirConditionEvidence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseReference(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionEvidence(xml : TXmlBuilder; name : String; value : TFhirConditionEvidence);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionEvidenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionEvidenceChildren(xml : TXmlBuilder; value : TFhirConditionEvidence);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseCondition(element : TMXmlElement; path : string) : TFhirCondition;
var
  child : TMXmlElement;
begin
  result := TFhirCondition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionChild(value : TFhirCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'clinicalStatus') then
        value.clinicalStatus := ParseCodeableConcept(child, path+'/clinicalStatus') {L740}
      else if (child.localName = 'verificationStatus') then
        value.verificationStatus := ParseCodeableConcept(child, path+'/verificationStatus') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'severity') then
        value.severity := ParseCodeableConcept(child, path+'/severity') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'bodySite') then
        value.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'onsetAge') then
        value.onset := ParseAge(child, path+'/onsetAge') {L891}
      else if (child.localName = 'onsetPeriod') then
        value.onset := ParsePeriod(child, path+'/onsetPeriod') {L891}
      else if (child.localName = 'onsetRange') then
        value.onset := ParseRange(child, path+'/onsetRange') {L891}
      else if (child.localName = 'onsetDateTime') then
        value.onset := ParseDateTime(child, path+'/onsetDateTime') {L891}
      else if (child.localName = 'onsetString') then
        value.onset := ParseString(child, path+'/onsetString') {L891}
      else if (child.localName = 'abatementAge') then
        value.abatement := ParseAge(child, path+'/abatementAge') {L891}
      else if (child.localName = 'abatementPeriod') then
        value.abatement := ParsePeriod(child, path+'/abatementPeriod') {L891}
      else if (child.localName = 'abatementRange') then
        value.abatement := ParseRange(child, path+'/abatementRange') {L891}
      else if (child.localName = 'abatementDateTime') then
        value.abatement := ParseDateTime(child, path+'/abatementDateTime') {L891}
      else if (child.localName = 'abatementString') then
        value.abatement := ParseString(child, path+'/abatementString') {L891}
      else if (child.localName = 'recordedDate') then
        value.recordedDateElement := ParseDateTime(child, path+'/recordedDate') {L737}
      else if (child.localName = 'recorder') then
        value.recorder := ParseReference(child, path+'/recorder') {L740}
      else if (child.localName = 'asserter') then
        value.asserter := ParseReference(child, path+'/asserter') {L740}
      else if (child.localName = 'stage') then
        value.stageList.Add(ParseConditionStage(child, path+'/stage')) {L631}
      else if (child.localName = 'evidence') then
        value.evidenceList.Add(ParseConditionEvidence(child, path+'/evidence')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCondition(xml : TXmlBuilder; name : String; value : TFhirCondition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionChildren(xml : TXmlBuilder; value : TFhirCondition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'clinicalStatus', value.clinicalStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'verificationStatus', value.verificationStatus); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'severity', value.severity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', value.bodySiteList[i]);
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirAge) {6} then
    ComposeAge(xml, 'onsetAge', TFhirAge(value.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirPeriod) {6} then
    ComposePeriod(xml, 'onsetPeriod', TFhirPeriod(value.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirRange) {6} then
    ComposeRange(xml, 'onsetRange', TFhirRange(value.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'onsetDateTime', TFhirDateTime(value.onset))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.onset is TFhirString) {6} then
    ComposeString(xml, 'onsetString', TFhirString(value.onset));
  if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirAge) {6} then
    ComposeAge(xml, 'abatementAge', TFhirAge(value.abatement))
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirPeriod) {6} then
    ComposePeriod(xml, 'abatementPeriod', TFhirPeriod(value.abatement))
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirRange) {6} then
    ComposeRange(xml, 'abatementRange', TFhirRange(value.abatement))
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'abatementDateTime', TFhirDateTime(value.abatement))
  else if (SummaryOption in [soFull, soData]) and (value.abatement is TFhirString) {6} then
    ComposeString(xml, 'abatementString', TFhirString(value.abatement));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'recordedDate', value.recordedDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'recorder', value.recorder); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'asserter', value.asserter); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.stageList.Count - 1 do
      ComposeConditionStage(xml, 'stage', value.stageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.evidenceList.Count - 1 do
      ComposeConditionEvidence(xml, 'evidence', value.evidenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONDITIONDEFINITION}
function TFHIRXmlParser.ParseConditionDefinitionObservation(element : TMXmlElement; path : string) : TFhirConditionDefinitionObservation;
var
  child : TMXmlElement;
begin
  result := TFhirConditionDefinitionObservation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionDefinitionObservationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionDefinitionObservationChild(value : TFhirConditionDefinitionObservation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionObservation(xml : TXmlBuilder; name : String; value : TFhirConditionDefinitionObservation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionDefinitionObservationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionObservationChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionObservation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
end;

function TFHIRXmlParser.ParseConditionDefinitionMedication(element : TMXmlElement; path : string) : TFhirConditionDefinitionMedication;
var
  child : TMXmlElement;
begin
  result := TFhirConditionDefinitionMedication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionDefinitionMedicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionDefinitionMedicationChild(value : TFhirConditionDefinitionMedication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionMedication(xml : TXmlBuilder; name : String; value : TFhirConditionDefinitionMedication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionDefinitionMedicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionMedicationChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionMedication);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
end;

function TFHIRXmlParser.ParseConditionDefinitionPrecondition(element : TMXmlElement; path : string) : TFhirConditionDefinitionPrecondition;
var
  child : TMXmlElement;
begin
  result := TFhirConditionDefinitionPrecondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionDefinitionPreconditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionDefinitionPreconditionChild(value : TFhirConditionDefinitionPrecondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirConditionPreconditionTypeEnum, SYSTEMS_TFhirConditionPreconditionTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionPrecondition(xml : TXmlBuilder; name : String; value : TFhirConditionDefinitionPrecondition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionDefinitionPreconditionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionPreconditionChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionPrecondition);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirConditionPreconditionTypeEnum); {L735}
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value));
end;

function TFHIRXmlParser.ParseConditionDefinitionQuestionnaire(element : TMXmlElement; path : string) : TFhirConditionDefinitionQuestionnaire;
var
  child : TMXmlElement;
begin
  result := TFhirConditionDefinitionQuestionnaire.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionDefinitionQuestionnaireChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionDefinitionQuestionnaireChild(value : TFhirConditionDefinitionQuestionnaire; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'purpose') then
        value.purposeElement := ParseEnum(CODES_TFhirConditionQuestionnairePurposeEnum, SYSTEMS_TFhirConditionQuestionnairePurposeEnum, child, path+'/purpose') {L734}
      else if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionQuestionnaire(xml : TXmlBuilder; name : String; value : TFhirConditionDefinitionQuestionnaire);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionDefinitionQuestionnaireChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionQuestionnaireChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionQuestionnaire);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'purpose', value.purposeElement, CODES_TFhirConditionQuestionnairePurposeEnum); {L735}
  ComposeReference(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseConditionDefinitionPlan(element : TMXmlElement; path : string) : TFhirConditionDefinitionPlan;
var
  child : TMXmlElement;
begin
  result := TFhirConditionDefinitionPlan.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionDefinitionPlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionDefinitionPlanChild(value : TFhirConditionDefinitionPlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionPlan(xml : TXmlBuilder; name : String; value : TFhirConditionDefinitionPlan);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionDefinitionPlanChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionPlanChildren(xml : TXmlBuilder; value : TFhirConditionDefinitionPlan);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  ComposeReference(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseConditionDefinition(element : TMXmlElement; path : string) : TFhirConditionDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirConditionDefinition.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConditionDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConditionDefinitionChild(value : TFhirConditionDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'severity') then
        value.severity := ParseCodeableConcept(child, path+'/severity') {L740}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'stage') then
        value.stage := ParseCodeableConcept(child, path+'/stage') {L740}
      else if (child.localName = 'hasSeverity') then
        value.hasSeverityElement := ParseBoolean(child, path+'/hasSeverity') {L737}
      else if (child.localName = 'hasBodySite') then
        value.hasBodySiteElement := ParseBoolean(child, path+'/hasBodySite') {L737}
      else if (child.localName = 'hasStage') then
        value.hasStageElement := ParseBoolean(child, path+'/hasStage') {L737}
      else if (child.localName = 'definition') then
        value.definitionList.Add(ParseUri(child, path+'/definition')) {L631}
      else if (child.localName = 'observation') then
        value.observationList.Add(ParseConditionDefinitionObservation(child, path+'/observation')) {L631}
      else if (child.localName = 'medication') then
        value.medicationList.Add(ParseConditionDefinitionMedication(child, path+'/medication')) {L631}
      else if (child.localName = 'precondition') then
        value.preconditionList.Add(ParseConditionDefinitionPrecondition(child, path+'/precondition')) {L631}
      else if (child.localName = 'team') then
        value.teamList.Add(ParseReference(child, path+'/team')) {L631}
      else if (child.localName = 'questionnaire') then
        value.questionnaireList.Add(ParseConditionDefinitionQuestionnaire(child, path+'/questionnaire')) {L631}
      else if (child.localName = 'plan') then
        value.planList.Add(ParseConditionDefinitionPlan(child, path+'/plan')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinition(xml : TXmlBuilder; name : String; value : TFhirConditionDefinition);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConditionDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConditionDefinitionChildren(xml : TXmlBuilder; value : TFhirConditionDefinition);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'severity', value.severity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'stage', value.stage); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'hasSeverity', value.hasSeverityElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'hasBodySite', value.hasBodySiteElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'hasStage', value.hasStageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.definitionList.Count - 1 do
      ComposeUri(xml, 'definition', value.definitionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.observationList.Count - 1 do
      ComposeConditionDefinitionObservation(xml, 'observation', value.observationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.medicationList.Count - 1 do
      ComposeConditionDefinitionMedication(xml, 'medication', value.medicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.preconditionList.Count - 1 do
      ComposeConditionDefinitionPrecondition(xml, 'precondition', value.preconditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.teamList.Count - 1 do
      ComposeReference(xml, 'team', value.teamList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.questionnaireList.Count - 1 do
      ComposeConditionDefinitionQuestionnaire(xml, 'questionnaire', value.questionnaireList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.planList.Count - 1 do
      ComposeConditionDefinitionPlan(xml, 'plan', value.planList[i]);
end;

{$ENDIF FHIR_CONDITIONDEFINITION}
{$IFDEF FHIR_CONSENT}
function TFHIRXmlParser.ParseConsentPolicy(element : TMXmlElement; path : string) : TFhirConsentPolicy;
var
  child : TMXmlElement;
begin
  result := TFhirConsentPolicy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentPolicyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentPolicyChild(value : TFhirConsentPolicy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authority') then
        value.authorityElement := ParseUri(child, path+'/authority') {L737}
      else if (child.localName = 'uri') then
        value.uriElement := ParseUri(child, path+'/uri') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentPolicy(xml : TXmlBuilder; name : String; value : TFhirConsentPolicy);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConsentPolicyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConsentPolicyChildren(xml : TXmlBuilder; value : TFhirConsentPolicy);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'authority', value.authorityElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'uri', value.uriElement); {L738}
end;

function TFHIRXmlParser.ParseConsentVerification(element : TMXmlElement; path : string) : TFhirConsentVerification;
var
  child : TMXmlElement;
begin
  result := TFhirConsentVerification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentVerificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentVerificationChild(value : TFhirConsentVerification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'verified') then
        value.verifiedElement := ParseBoolean(child, path+'/verified') {L737}
      else if (child.localName = 'verificationType') then
        value.verificationType := ParseCodeableConcept(child, path+'/verificationType') {L740}
      else if (child.localName = 'verifiedBy') then
        value.verifiedBy := ParseReference(child, path+'/verifiedBy') {L740}
      else if (child.localName = 'verifiedWith') then
        value.verifiedWith := ParseReference(child, path+'/verifiedWith') {L740}
      else if (child.localName = 'verificationDate') then
        value.verificationDateList.Add(ParseDateTime(child, path+'/verificationDate')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentVerification(xml : TXmlBuilder; name : String; value : TFhirConsentVerification);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConsentVerificationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConsentVerificationChildren(xml : TXmlBuilder; value : TFhirConsentVerification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'verified', value.verifiedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'verificationType', value.verificationType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'verifiedBy', value.verifiedBy); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'verifiedWith', value.verifiedWith); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.verificationDateList.Count - 1 do
      ComposeDateTime(xml, 'verificationDate', value.verificationDateList[i]);
end;

function TFHIRXmlParser.ParseConsentProvision(element : TMXmlElement; path : string) : TFhirConsentProvision;
var
  child : TMXmlElement;
begin
  result := TFhirConsentProvision.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentProvisionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentProvisionChild(value : TFhirConsentProvision; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirConsentProvisionTypeEnum, SYSTEMS_TFhirConsentProvisionTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'actor') then
        value.actorList.Add(ParseConsentProvisionActor(child, path+'/actor')) {L631}
      else if (child.localName = 'action') then
        value.actionList.Add(ParseCodeableConcept(child, path+'/action')) {L631}
      else if (child.localName = 'securityLabel') then
        value.securityLabelList.Add(ParseCoding(child, path+'/securityLabel')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeList.Add(ParseCoding(child, path+'/purpose')) {L631}
      else if (child.localName = 'class') then
        value.class_List.Add(ParseCoding(child, path+'/class')) {L631}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'dataPeriod') then
        value.dataPeriod := ParsePeriod(child, path+'/dataPeriod') {L740}
      else if (child.localName = 'data') then
        value.dataList.Add(ParseConsentProvisionData(child, path+'/data')) {L631}
      else if (child.localName = 'provision') then
        value.provisionList.Add(ParseConsentProvision(child, path+'/provision')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentProvision(xml : TXmlBuilder; name : String; value : TFhirConsentProvision);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConsentProvisionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionChildren(xml : TXmlBuilder; value : TFhirConsentProvision);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirConsentProvisionTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actorList.Count - 1 do
      ComposeConsentProvisionActor(xml, 'actor', value.actorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.actionList.Count - 1 do
      ComposeCodeableConcept(xml, 'action', value.actionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeCoding(xml, 'securityLabel', value.securityLabelList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.purposeList.Count - 1 do
      ComposeCoding(xml, 'purpose', value.purposeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.class_List.Count - 1 do
      ComposeCoding(xml, 'class', value.class_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'dataPeriod', value.dataPeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dataList.Count - 1 do
      ComposeConsentProvisionData(xml, 'data', value.dataList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.provisionList.Count - 1 do
      ComposeConsentProvision(xml, 'provision', value.provisionList[i]);
end;

function TFHIRXmlParser.ParseConsentProvisionActor(element : TMXmlElement; path : string) : TFhirConsentProvisionActor;
var
  child : TMXmlElement;
begin
  result := TFhirConsentProvisionActor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentProvisionActorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentProvisionActorChild(value : TFhirConsentProvisionActor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionActor(xml : TXmlBuilder; name : String; value : TFhirConsentProvisionActor);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConsentProvisionActorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionActorChildren(xml : TXmlBuilder; value : TFhirConsentProvisionActor);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'role', value.role); {L741}
  ComposeReference(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseConsentProvisionData(element : TMXmlElement; path : string) : TFhirConsentProvisionData;
var
  child : TMXmlElement;
begin
  result := TFhirConsentProvisionData.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentProvisionDataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentProvisionDataChild(value : TFhirConsentProvisionData; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'meaning') then
        value.meaningElement := ParseEnum(CODES_TFhirConsentDataMeaningEnum, SYSTEMS_TFhirConsentDataMeaningEnum, child, path+'/meaning') {L734}
      else if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionData(xml : TXmlBuilder; name : String; value : TFhirConsentProvisionData);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConsentProvisionDataChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConsentProvisionDataChildren(xml : TXmlBuilder; value : TFhirConsentProvisionData);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'meaning', value.meaningElement, CODES_TFhirConsentDataMeaningEnum); {L735}
  ComposeReference(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseConsent(element : TMXmlElement; path : string) : TFhirConsent;
var
  child : TMXmlElement;
begin
  result := TFhirConsent.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseConsentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseConsentChild(value : TFhirConsent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirConsentStateEnum, SYSTEMS_TFhirConsentStateEnum, child, path+'/status') {L734}
      else if (child.localName = 'scope') then
        value.scope := ParseCodeableConcept(child, path+'/scope') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'dateTime') then
        value.dateTimeElement := ParseDateTime(child, path+'/dateTime') {L737}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseReference(child, path+'/performer')) {L631}
      else if (child.localName = 'manager') then
        value.managerList.Add(ParseReference(child, path+'/manager')) {L631}
      else if (child.localName = 'controller') then
        value.controllerList.Add(ParseReference(child, path+'/controller')) {L631}
      else if (child.localName = 'sourceAttachment') then
        value.sourceAttachmentList.Add(ParseAttachment(child, path+'/sourceAttachment')) {L631}
      else if (child.localName = 'sourceReference') then
        value.sourceReferenceList.Add(ParseReference(child, path+'/sourceReference')) {L631}
      else if (child.localName = 'policy') then
        value.policyList.Add(ParseConsentPolicy(child, path+'/policy')) {L631}
      else if (child.localName = 'policyRule') then
        value.policyRule := ParseCodeableConcept(child, path+'/policyRule') {L740}
      else if (child.localName = 'verification') then
        value.verificationList.Add(ParseConsentVerification(child, path+'/verification')) {L631}
      else if (child.localName = 'provision') then
        value.provision := ParseConsentProvision(child, path+'/provision') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeConsent(xml : TXmlBuilder; name : String; value : TFhirConsent);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeConsentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeConsentChildren(xml : TXmlBuilder; value : TFhirConsent);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirConsentStateEnum); {L735}
  ComposeCodeableConcept(xml, 'scope', value.scope); {L741}
  for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'dateTime', value.dateTimeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.managerList.Count - 1 do
      ComposeReference(xml, 'manager', value.managerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.controllerList.Count - 1 do
      ComposeReference(xml, 'controller', value.controllerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.sourceAttachmentList.Count - 1 do
      ComposeAttachment(xml, 'sourceAttachment', value.sourceAttachmentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.sourceReferenceList.Count - 1 do
      ComposeReference(xml, 'sourceReference', value.sourceReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.policyList.Count - 1 do
      ComposeConsentPolicy(xml, 'policy', value.policyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'policyRule', value.policyRule); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.verificationList.Count - 1 do
      ComposeConsentVerification(xml, 'verification', value.verificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeConsentProvision(xml, 'provision', value.provision); {L741}
end;

{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
function TFHIRXmlParser.ParseContractContentDefinition(element : TMXmlElement; path : string) : TFhirContractContentDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirContractContentDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractContentDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractContentDefinitionChild(value : TFhirContractContentDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subType') then
        value.subType := ParseCodeableConcept(child, path+'/subType') {L740}
      else if (child.localName = 'publisher') then
        value.publisher := ParseReference(child, path+'/publisher') {L740}
      else if (child.localName = 'publicationDate') then
        value.publicationDateElement := ParseDateTime(child, path+'/publicationDate') {L737}
      else if (child.localName = 'publicationStatus') then
        value.publicationStatusElement := ParseEnum(CODES_TFhirContractResourcePublicationStatusCodesEnum, SYSTEMS_TFhirContractResourcePublicationStatusCodesEnum, child, path+'/publicationStatus') {L734}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractContentDefinition(xml : TXmlBuilder; name : String; value : TFhirContractContentDefinition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractContentDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractContentDefinitionChildren(xml : TXmlBuilder; value : TFhirContractContentDefinition);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', value.subType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'publisher', value.publisher); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'publicationDate', value.publicationDateElement); {L738}
  ComposeEnum(xml, 'publicationStatus', value.publicationStatusElement, CODES_TFhirContractResourcePublicationStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
end;

function TFHIRXmlParser.ParseContractTerm(element : TMXmlElement; path : string) : TFhirContractTerm;
var
  child : TMXmlElement;
begin
  result := TFhirContractTerm.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermChild(value : TFhirContractTerm; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'issued') then
        value.issuedElement := ParseDateTime(child, path+'/issued') {L737}
      else if (child.localName = 'applies') then
        value.applies := ParsePeriod(child, path+'/applies') {L740}
      else if (child.localName = 'topicCodeableConcept') then
        value.topic := ParseCodeableConcept(child, path+'/topicCodeableConcept') {L891}
      else if (child.localName = 'topicReference') then
        value.topic := ParseReference(child, path+'/topicReference') {L881}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subType') then
        value.subType := ParseCodeableConcept(child, path+'/subType') {L740}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'securityLabel') then
        value.securityLabelList.Add(ParseContractTermSecurityLabel(child, path+'/securityLabel')) {L631}
      else if (child.localName = 'offer') then
        value.offer := ParseContractTermOffer(child, path+'/offer') {L740}
      else if (child.localName = 'asset') then
        value.assetList.Add(ParseContractTermAsset(child, path+'/asset')) {L631}
      else if (child.localName = 'action') then
        value.actionList.Add(ParseContractTermAction(child, path+'/action')) {L631}
      else if (child.localName = 'group') then
        value.groupList.Add(ParseContractTerm(child, path+'/group')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTerm(xml : TXmlBuilder; name : String; value : TFhirContractTerm);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermChildren(xml : TXmlBuilder; value : TFhirContractTerm);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'issued', value.issuedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'applies', value.applies); {L741}
  if (SummaryOption in [soFull, soData]) and (value.topic is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'topicCodeableConcept', TFhirCodeableConcept(value.topic))
  else if (SummaryOption in [soFull, soData]) and (value.topic is TFhirReference) {2} then
    ComposeReference(xml, 'topicReference', TFhirReference(value.topic));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', value.subType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeContractTermSecurityLabel(xml, 'securityLabel', value.securityLabelList[i]);
  ComposeContractTermOffer(xml, 'offer', value.offer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.assetList.Count - 1 do
      ComposeContractTermAsset(xml, 'asset', value.assetList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actionList.Count - 1 do
      ComposeContractTermAction(xml, 'action', value.actionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.groupList.Count - 1 do
      ComposeContractTerm(xml, 'group', value.groupList[i]);
end;

function TFHIRXmlParser.ParseContractTermSecurityLabel(element : TMXmlElement; path : string) : TFhirContractTermSecurityLabel;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermSecurityLabel.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermSecurityLabelChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermSecurityLabelChild(value : TFhirContractTermSecurityLabel; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        value.numberList.Add(ParseUnsignedInt(child, path+'/number')) {L631}
      else if (child.localName = 'classification') then
        value.classification := ParseCoding(child, path+'/classification') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCoding(child, path+'/category')) {L631}
      else if (child.localName = 'control') then
        value.controlList.Add(ParseCoding(child, path+'/control')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermSecurityLabel(xml : TXmlBuilder; name : String; value : TFhirContractTermSecurityLabel);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermSecurityLabelChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermSecurityLabelChildren(xml : TXmlBuilder; value : TFhirContractTermSecurityLabel);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.numberList.Count - 1 do
      ComposeUnsignedInt(xml, 'number', value.numberList[i]);
  ComposeCoding(xml, 'classification', value.classification); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCoding(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.controlList.Count - 1 do
      ComposeCoding(xml, 'control', value.controlList[i]);
end;

function TFHIRXmlParser.ParseContractTermOffer(element : TMXmlElement; path : string) : TFhirContractTermOffer;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermOffer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermOfferChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermOfferChild(value : TFhirContractTermOffer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'party') then
        value.partyList.Add(ParseContractTermOfferParty(child, path+'/party')) {L631}
      else if (child.localName = 'topic') then
        value.topic := ParseReference(child, path+'/topic') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'decision') then
        value.decision := ParseCodeableConcept(child, path+'/decision') {L740}
      else if (child.localName = 'decisionMode') then
        value.decisionModeList.Add(ParseCodeableConcept(child, path+'/decisionMode')) {L631}
      else if (child.localName = 'answer') then
        value.answerList.Add(ParseContractTermOfferAnswer(child, path+'/answer')) {L631}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'linkId') then
        value.linkIdList.Add(ParseString(child, path+'/linkId')) {L631}
      else if (child.localName = 'securityLabelNumber') then
        value.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermOffer(xml : TXmlBuilder; name : String; value : TFhirContractTermOffer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermOfferChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferChildren(xml : TXmlBuilder; value : TFhirContractTermOffer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.partyList.Count - 1 do
      ComposeContractTermOfferParty(xml, 'party', value.partyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'topic', value.topic); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'decision', value.decision); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.decisionModeList.Count - 1 do
      ComposeCodeableConcept(xml, 'decisionMode', value.decisionModeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.answerList.Count - 1 do
      ComposeContractTermOfferAnswer(xml, 'answer', value.answerList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', value.linkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', value.securityLabelNumberList[i]);
end;

function TFHIRXmlParser.ParseContractTermOfferParty(element : TMXmlElement; path : string) : TFhirContractTermOfferParty;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermOfferParty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermOfferPartyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermOfferPartyChild(value : TFhirContractTermOfferParty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        value.referenceList.Add(ParseReference(child, path+'/reference')) {L631}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferParty(xml : TXmlBuilder; name : String; value : TFhirContractTermOfferParty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermOfferPartyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferPartyChildren(xml : TXmlBuilder; value : TFhirContractTermOfferParty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.referenceList.Count - 1 do
      ComposeReference(xml, 'reference', value.referenceList[i]);
  ComposeCodeableConcept(xml, 'role', value.role); {L741}
end;

function TFHIRXmlParser.ParseContractTermOfferAnswer(element : TMXmlElement; path : string) : TFhirContractTermOfferAnswer;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermOfferAnswer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermOfferAnswerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermOfferAnswerChild(value : TFhirContractTermOfferAnswer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferAnswer(xml : TXmlBuilder; name : String; value : TFhirContractTermOfferAnswer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermOfferAnswerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermOfferAnswerChildren(xml : TXmlBuilder; value : TFhirContractTermOfferAnswer);
begin
  composeBackboneElementChildren(xml, value);
  if (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
end;

function TFHIRXmlParser.ParseContractTermAsset(element : TMXmlElement; path : string) : TFhirContractTermAsset;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAsset.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermAssetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermAssetChild(value : TFhirContractTermAsset; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'scope') then
        value.scope := ParseCodeableConcept(child, path+'/scope') {L740}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'typeReference') then
        value.typeReferenceList.Add(ParseReference(child, path+'/typeReference')) {L631}
      else if (child.localName = 'subtype') then
        value.subtypeList.Add(ParseCodeableConcept(child, path+'/subtype')) {L631}
      else if (child.localName = 'relationship') then
        value.relationship := ParseCoding(child, path+'/relationship') {L740}
      else if (child.localName = 'context') then
        value.contextList.Add(ParseContractTermAssetContext(child, path+'/context')) {L631}
      else if (child.localName = 'condition') then
        value.conditionElement := ParseString(child, path+'/condition') {L737}
      else if (child.localName = 'periodType') then
        value.periodTypeList.Add(ParseCodeableConcept(child, path+'/periodType')) {L631}
      else if (child.localName = 'period') then
        value.periodList.Add(ParsePeriod(child, path+'/period')) {L631}
      else if (child.localName = 'usePeriod') then
        value.usePeriodList.Add(ParsePeriod(child, path+'/usePeriod')) {L631}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'linkId') then
        value.linkIdList.Add(ParseString(child, path+'/linkId')) {L631}
      else if (child.localName = 'answer') then
        value.answerList.Add(ParseContractTermOfferAnswer(child, path+'/answer')) {L631}
      else if (child.localName = 'securityLabelNumber') then
        value.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')) {L631}
      else if (child.localName = 'valuedItem') then
        value.valuedItemList.Add(ParseContractTermAssetValuedItem(child, path+'/valuedItem')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAsset(xml : TXmlBuilder; name : String; value : TFhirContractTermAsset);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermAssetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetChildren(xml : TXmlBuilder; value : TFhirContractTermAsset);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'scope', value.scope); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.typeReferenceList.Count - 1 do
      ComposeReference(xml, 'typeReference', value.typeReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subtypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'subtype', value.subtypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'relationship', value.relationship); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contextList.Count - 1 do
      ComposeContractTermAssetContext(xml, 'context', value.contextList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'condition', value.conditionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.periodTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'periodType', value.periodTypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.periodList.Count - 1 do
      ComposePeriod(xml, 'period', value.periodList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.usePeriodList.Count - 1 do
      ComposePeriod(xml, 'usePeriod', value.usePeriodList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', value.linkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.answerList.Count - 1 do
      ComposeContractTermOfferAnswer(xml, 'answer', value.answerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', value.securityLabelNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.valuedItemList.Count - 1 do
      ComposeContractTermAssetValuedItem(xml, 'valuedItem', value.valuedItemList[i]);
end;

function TFHIRXmlParser.ParseContractTermAssetContext(element : TMXmlElement; path : string) : TFhirContractTermAssetContext;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAssetContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermAssetContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermAssetContextChild(value : TFhirContractTermAssetContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetContext(xml : TXmlBuilder; name : String; value : TFhirContractTermAssetContext);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermAssetContextChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetContextChildren(xml : TXmlBuilder; value : TFhirContractTermAssetContext);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'reference', value.reference); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseContractTermAssetValuedItem(element : TMXmlElement; path : string) : TFhirContractTermAssetValuedItem;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAssetValuedItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermAssetValuedItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermAssetValuedItemChild(value : TFhirContractTermAssetValuedItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'entityCodeableConcept') then
        value.entity := ParseCodeableConcept(child, path+'/entityCodeableConcept') {L891}
      else if (child.localName = 'entityReference') then
        value.entity := ParseReference(child, path+'/entityReference') {L881}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'effectiveTime') then
        value.effectiveTimeElement := ParseDateTime(child, path+'/effectiveTime') {L737}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'points') then
        value.pointsElement := ParseDecimal(child, path+'/points') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'payment') then
        value.paymentElement := ParseString(child, path+'/payment') {L737}
      else if (child.localName = 'paymentDate') then
        value.paymentDateElement := ParseDateTime(child, path+'/paymentDate') {L737}
      else if (child.localName = 'responsible') then
        value.responsible := ParseReference(child, path+'/responsible') {L740}
      else if (child.localName = 'recipient') then
        value.recipient := ParseReference(child, path+'/recipient') {L740}
      else if (child.localName = 'linkId') then
        value.linkIdList.Add(ParseString(child, path+'/linkId')) {L631}
      else if (child.localName = 'securityLabelNumber') then
        value.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetValuedItem(xml : TXmlBuilder; name : String; value : TFhirContractTermAssetValuedItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermAssetValuedItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermAssetValuedItemChildren(xml : TXmlBuilder; value : TFhirContractTermAssetValuedItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) and (value.entity is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'entityCodeableConcept', TFhirCodeableConcept(value.entity))
  else if (SummaryOption in [soFull, soData]) and (value.entity is TFhirReference) {2} then
    ComposeReference(xml, 'entityReference', TFhirReference(value.entity));
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'effectiveTime', value.effectiveTimeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'points', value.pointsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'payment', value.paymentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'paymentDate', value.paymentDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'responsible', value.responsible); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'recipient', value.recipient); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', value.linkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', value.securityLabelNumberList[i]);
end;

function TFHIRXmlParser.ParseContractTermAction(element : TMXmlElement; path : string) : TFhirContractTermAction;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermActionChild(value : TFhirContractTermAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'doNotPerform') then
        value.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subject') then
        value.subjectList.Add(ParseContractTermActionSubject(child, path+'/subject')) {L631}
      else if (child.localName = 'intent') then
        value.intent := ParseCodeableConcept(child, path+'/intent') {L740}
      else if (child.localName = 'linkId') then
        value.linkIdList.Add(ParseString(child, path+'/linkId')) {L631}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'context') then
        value.context := ParseReference(child, path+'/context') {L740}
      else if (child.localName = 'contextLinkId') then
        value.contextLinkIdList.Add(ParseString(child, path+'/contextLinkId')) {L631}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'requester') then
        value.requesterList.Add(ParseReference(child, path+'/requester')) {L631}
      else if (child.localName = 'requesterLinkId') then
        value.requesterLinkIdList.Add(ParseString(child, path+'/requesterLinkId')) {L631}
      else if (child.localName = 'performerType') then
        value.performerTypeList.Add(ParseCodeableConcept(child, path+'/performerType')) {L631}
      else if (child.localName = 'performerRole') then
        value.performerRole := ParseCodeableConcept(child, path+'/performerRole') {L740}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'performerLinkId') then
        value.performerLinkIdList.Add(ParseString(child, path+'/performerLinkId')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'reasonLinkId') then
        value.reasonLinkIdList.Add(ParseString(child, path+'/reasonLinkId')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'securityLabelNumber') then
        value.securityLabelNumberList.Add(ParseUnsignedInt(child, path+'/securityLabelNumber')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermAction(xml : TXmlBuilder; name : String; value : TFhirContractTermAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermActionChildren(xml : TXmlBuilder; value : TFhirContractTermAction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'doNotPerform', value.doNotPerformElement); {L738}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subjectList.Count - 1 do
      ComposeContractTermActionSubject(xml, 'subject', value.subjectList[i]);
  ComposeCodeableConcept(xml, 'intent', value.intent); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.linkIdList.Count - 1 do
      ComposeString(xml, 'linkId', value.linkIdList[i]);
  ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'context', value.context); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contextLinkIdList.Count - 1 do
      ComposeString(xml, 'contextLinkId', value.contextLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.requesterList.Count - 1 do
      ComposeReference(xml, 'requester', value.requesterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.requesterLinkIdList.Count - 1 do
      ComposeString(xml, 'requesterLinkId', value.requesterLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'performerType', value.performerTypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'performerRole', value.performerRole); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerLinkIdList.Count - 1 do
      ComposeString(xml, 'performerLinkId', value.performerLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonLinkIdList.Count - 1 do
      ComposeString(xml, 'reasonLinkId', value.reasonLinkIdList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.securityLabelNumberList.Count - 1 do
      ComposeUnsignedInt(xml, 'securityLabelNumber', value.securityLabelNumberList[i]);
end;

function TFHIRXmlParser.ParseContractTermActionSubject(element : TMXmlElement; path : string) : TFhirContractTermActionSubject;
var
  child : TMXmlElement;
begin
  result := TFhirContractTermActionSubject.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractTermActionSubjectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractTermActionSubjectChild(value : TFhirContractTermActionSubject; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        value.referenceList.Add(ParseReference(child, path+'/reference')) {L631}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractTermActionSubject(xml : TXmlBuilder; name : String; value : TFhirContractTermActionSubject);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractTermActionSubjectChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractTermActionSubjectChildren(xml : TXmlBuilder; value : TFhirContractTermActionSubject);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.referenceList.Count - 1 do
      ComposeReference(xml, 'reference', value.referenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
end;

function TFHIRXmlParser.ParseContractSigner(element : TMXmlElement; path : string) : TFhirContractSigner;
var
  child : TMXmlElement;
begin
  result := TFhirContractSigner.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractSignerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractSignerChild(value : TFhirContractSigner; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCoding(child, path+'/type') {L740}
      else if (child.localName = 'party') then
        value.party := ParseReference(child, path+'/party') {L740}
      else if (child.localName = 'signature') then
        value.signatureList.Add(ParseSignature(child, path+'/signature')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractSigner(xml : TXmlBuilder; name : String; value : TFhirContractSigner);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractSignerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractSignerChildren(xml : TXmlBuilder; value : TFhirContractSigner);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCoding(xml, 'type', value.type_); {L741}
  ComposeReference(xml, 'party', value.party); {L741}
  for i := 0 to value.signatureList.Count - 1 do
      ComposeSignature(xml, 'signature', value.signatureList[i]);
end;

function TFHIRXmlParser.ParseContractFriendly(element : TMXmlElement; path : string) : TFhirContractFriendly;
var
  child : TMXmlElement;
begin
  result := TFhirContractFriendly.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractFriendlyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractFriendlyChild(value : TFhirContractFriendly; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        value.content := ParseAttachment(child, path+'/contentAttachment') {L891}
      else if (child.localName = 'contentReference') then
        value.content := ParseReference(child, path+'/contentReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractFriendly(xml : TXmlBuilder; name : String; value : TFhirContractFriendly);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractFriendlyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractFriendlyChildren(xml : TXmlBuilder; value : TFhirContractFriendly);
begin
  composeBackboneElementChildren(xml, value);
  if (value.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(value.content))
  else if (value.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(value.content));
end;

function TFHIRXmlParser.ParseContractLegal(element : TMXmlElement; path : string) : TFhirContractLegal;
var
  child : TMXmlElement;
begin
  result := TFhirContractLegal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractLegalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractLegalChild(value : TFhirContractLegal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        value.content := ParseAttachment(child, path+'/contentAttachment') {L891}
      else if (child.localName = 'contentReference') then
        value.content := ParseReference(child, path+'/contentReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractLegal(xml : TXmlBuilder; name : String; value : TFhirContractLegal);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractLegalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractLegalChildren(xml : TXmlBuilder; value : TFhirContractLegal);
begin
  composeBackboneElementChildren(xml, value);
  if (value.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(value.content))
  else if (value.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(value.content));
end;

function TFHIRXmlParser.ParseContractRule(element : TMXmlElement; path : string) : TFhirContractRule;
var
  child : TMXmlElement;
begin
  result := TFhirContractRule.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractRuleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractRuleChild(value : TFhirContractRule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'contentAttachment') then
        value.content := ParseAttachment(child, path+'/contentAttachment') {L891}
      else if (child.localName = 'contentReference') then
        value.content := ParseReference(child, path+'/contentReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContractRule(xml : TXmlBuilder; name : String; value : TFhirContractRule);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractRuleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractRuleChildren(xml : TXmlBuilder; value : TFhirContractRule);
begin
  composeBackboneElementChildren(xml, value);
  if (value.content is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'contentAttachment', TFhirAttachment(value.content))
  else if (value.content is TFhirReference) {2} then
    ComposeReference(xml, 'contentReference', TFhirReference(value.content));
end;

function TFHIRXmlParser.ParseContract(element : TMXmlElement; path : string) : TFhirContract;
var
  child : TMXmlElement;
begin
  result := TFhirContract.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseContractChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseContractChild(value : TFhirContract; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirContractResourceStatusCodesEnum, SYSTEMS_TFhirContractResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'legalState') then
        value.legalState := ParseCodeableConcept(child, path+'/legalState') {L740}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonical := ParseReference(child, path+'/instantiatesCanonical') {L740}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriElement := ParseUri(child, path+'/instantiatesUri') {L737}
      else if (child.localName = 'contentDerivative') then
        value.contentDerivative := ParseCodeableConcept(child, path+'/contentDerivative') {L740}
      else if (child.localName = 'issued') then
        value.issuedElement := ParseDateTime(child, path+'/issued') {L737}
      else if (child.localName = 'applies') then
        value.applies := ParsePeriod(child, path+'/applies') {L740}
      else if (child.localName = 'expirationType') then
        value.expirationType := ParseCodeableConcept(child, path+'/expirationType') {L740}
      else if (child.localName = 'subject') then
        value.subjectList.Add(ParseReference(child, path+'/subject')) {L631}
      else if (child.localName = 'authority') then
        value.authorityList.Add(ParseReference(child, path+'/authority')) {L631}
      else if (child.localName = 'domain') then
        value.domainList.Add(ParseReference(child, path+'/domain')) {L631}
      else if (child.localName = 'site') then
        value.siteList.Add(ParseReference(child, path+'/site')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'alias') then
        value.aliasList.Add(ParseString(child, path+'/alias')) {L631}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'scope') then
        value.scope := ParseCodeableConcept(child, path+'/scope') {L740}
      else if (child.localName = 'topicCodeableConcept') then
        value.topic := ParseCodeableConcept(child, path+'/topicCodeableConcept') {L891}
      else if (child.localName = 'topicReference') then
        value.topic := ParseReference(child, path+'/topicReference') {L881}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subType') then
        value.subTypeList.Add(ParseCodeableConcept(child, path+'/subType')) {L631}
      else if (child.localName = 'contentDefinition') then
        value.contentDefinition := ParseContractContentDefinition(child, path+'/contentDefinition') {L740}
      else if (child.localName = 'term') then
        value.termList.Add(ParseContractTerm(child, path+'/term')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseReference(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'relevantHistory') then
        value.relevantHistoryList.Add(ParseReference(child, path+'/relevantHistory')) {L631}
      else if (child.localName = 'signer') then
        value.signerList.Add(ParseContractSigner(child, path+'/signer')) {L631}
      else if (child.localName = 'friendly') then
        value.friendlyList.Add(ParseContractFriendly(child, path+'/friendly')) {L631}
      else if (child.localName = 'legal') then
        value.legalList.Add(ParseContractLegal(child, path+'/legal')) {L631}
      else if (child.localName = 'rule') then
        value.ruleList.Add(ParseContractRule(child, path+'/rule')) {L631}
      else if (child.localName = 'legallyBindingAttachment') then
        value.legallyBinding := ParseAttachment(child, path+'/legallyBindingAttachment') {L891}
      else if (child.localName = 'legallyBindingReference') then
        value.legallyBinding := ParseReference(child, path+'/legallyBindingReference') {L881}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeContract(xml : TXmlBuilder; name : String; value : TFhirContract);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeContractChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeContractChildren(xml : TXmlBuilder; value : TFhirContract);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirContractResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'legalState', value.legalState); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'instantiatesCanonical', value.instantiatesCanonical); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'instantiatesUri', value.instantiatesUriElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'contentDerivative', value.contentDerivative); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'issued', value.issuedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'applies', value.applies); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'expirationType', value.expirationType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(xml, 'subject', value.subjectList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorityList.Count - 1 do
      ComposeReference(xml, 'authority', value.authorityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.domainList.Count - 1 do
      ComposeReference(xml, 'domain', value.domainList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.siteList.Count - 1 do
      ComposeReference(xml, 'site', value.siteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.aliasList.Count - 1 do
      ComposeString(xml, 'alias', value.aliasList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'scope', value.scope); {L741}
  if (SummaryOption in [soFull, soData]) and (value.topic is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'topicCodeableConcept', TFhirCodeableConcept(value.topic))
  else if (SummaryOption in [soFull, soData]) and (value.topic is TFhirReference) {2} then
    ComposeReference(xml, 'topicReference', TFhirReference(value.topic));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'subType', value.subTypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeContractContentDefinition(xml, 'contentDefinition', value.contentDefinition); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.termList.Count - 1 do
      ComposeContractTerm(xml, 'term', value.termList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(xml, 'relevantHistory', value.relevantHistoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.signerList.Count - 1 do
      ComposeContractSigner(xml, 'signer', value.signerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.friendlyList.Count - 1 do
      ComposeContractFriendly(xml, 'friendly', value.friendlyList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.legalList.Count - 1 do
      ComposeContractLegal(xml, 'legal', value.legalList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.ruleList.Count - 1 do
      ComposeContractRule(xml, 'rule', value.ruleList[i]);
  if (SummaryOption in [soFull, soData]) and (value.legallyBinding is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'legallyBindingAttachment', TFhirAttachment(value.legallyBinding))
  else if (SummaryOption in [soFull, soData]) and (value.legallyBinding is TFhirReference) {2} then
    ComposeReference(xml, 'legallyBindingReference', TFhirReference(value.legallyBinding));
end;

{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
function TFHIRXmlParser.ParseCoverageClass(element : TMXmlElement; path : string) : TFhirCoverageClass;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageClass.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageClassChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageClassChild(value : TFhirCoverageClass; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageClass(xml : TXmlBuilder; name : String; value : TFhirCoverageClass);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageClassChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageClassChildren(xml : TXmlBuilder; value : TFhirCoverageClass);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  ComposeString(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiary(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiary;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageCostToBeneficiary.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageCostToBeneficiaryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiaryChild(value : TFhirCoverageCostToBeneficiary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueMoney') then
        value.value := ParseMoney(child, path+'/valueMoney') {L891}
      else if (child.localName = 'exception') then
        value.exceptionList.Add(ParseCoverageCostToBeneficiaryException(child, path+'/exception')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiary(xml : TXmlBuilder; name : String; value : TFhirCoverageCostToBeneficiary);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageCostToBeneficiaryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiaryChildren(xml : TXmlBuilder; value : TFhirCoverageCostToBeneficiary);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(value.value));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.exceptionList.Count - 1 do
      ComposeCoverageCostToBeneficiaryException(xml, 'exception', value.exceptionList[i]);
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiaryException(element : TMXmlElement; path : string) : TFhirCoverageCostToBeneficiaryException;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageCostToBeneficiaryException.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageCostToBeneficiaryExceptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageCostToBeneficiaryExceptionChild(value : TFhirCoverageCostToBeneficiaryException; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiaryException(xml : TXmlBuilder; name : String; value : TFhirCoverageCostToBeneficiaryException);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageCostToBeneficiaryExceptionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageCostToBeneficiaryExceptionChildren(xml : TXmlBuilder; value : TFhirCoverageCostToBeneficiaryException);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseCoverage(element : TMXmlElement; path : string) : TFhirCoverage;
var
  child : TMXmlElement;
begin
  result := TFhirCoverage.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageChild(value : TFhirCoverage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'policyHolder') then
        value.policyHolder := ParseReference(child, path+'/policyHolder') {L740}
      else if (child.localName = 'subscriber') then
        value.subscriber := ParseReference(child, path+'/subscriber') {L740}
      else if (child.localName = 'subscriberId') then
        value.subscriberId := ParseIdentifier(child, path+'/subscriberId') {L740}
      else if (child.localName = 'beneficiary') then
        value.beneficiary := ParseReference(child, path+'/beneficiary') {L740}
      else if (child.localName = 'dependent') then
        value.dependentElement := ParseString(child, path+'/dependent') {L737}
      else if (child.localName = 'relationship') then
        value.relationship := ParseCodeableConcept(child, path+'/relationship') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'payor') then
        value.payorList.Add(ParseReference(child, path+'/payor')) {L631}
      else if (child.localName = 'class') then
        value.class_List.Add(ParseCoverageClass(child, path+'/class')) {L631}
      else if (child.localName = 'order') then
        value.orderElement := ParsePositiveInt(child, path+'/order') {L737}
      else if (child.localName = 'network') then
        value.networkElement := ParseString(child, path+'/network') {L737}
      else if (child.localName = 'costToBeneficiary') then
        value.costToBeneficiaryList.Add(ParseCoverageCostToBeneficiary(child, path+'/costToBeneficiary')) {L631}
      else if (child.localName = 'subrogation') then
        value.subrogationElement := ParseBoolean(child, path+'/subrogation') {L737}
      else if (child.localName = 'contract') then
        value.contractList.Add(ParseReference(child, path+'/contract')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverage(xml : TXmlBuilder; name : String; value : TFhirCoverage);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageChildren(xml : TXmlBuilder; value : TFhirCoverage);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'policyHolder', value.policyHolder); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subscriber', value.subscriber); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'subscriberId', value.subscriberId); {L741}
  ComposeReference(xml, 'beneficiary', value.beneficiary); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'dependent', value.dependentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'relationship', value.relationship); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  for i := 0 to value.payorList.Count - 1 do
      ComposeReference(xml, 'payor', value.payorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.class_List.Count - 1 do
      ComposeCoverageClass(xml, 'class', value.class_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'order', value.orderElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'network', value.networkElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.costToBeneficiaryList.Count - 1 do
      ComposeCoverageCostToBeneficiary(xml, 'costToBeneficiary', value.costToBeneficiaryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'subrogation', value.subrogationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contractList.Count - 1 do
      ComposeReference(xml, 'contract', value.contractList[i]);
end;

{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
function TFHIRXmlParser.ParseCoverageEligibilityRequestSupportingInfo(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestSupportingInfoChild(value : TFhirCoverageEligibilityRequestSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'information') then
        value.information := ParseReference(child, path+'/information') {L740}
      else if (child.localName = 'appliesToAll') then
        value.appliesToAllElement := ParseBoolean(child, path+'/appliesToAll') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestSupportingInfo(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityRequestSupportingInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityRequestSupportingInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestSupportingInfoChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestSupportingInfo);
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeReference(xml, 'information', value.information); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'appliesToAll', value.appliesToAllElement); {L738}
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestInsuranceChild(value : TFhirCoverageEligibilityRequestInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'focal') then
        value.focalElement := ParseBoolean(child, path+'/focal') {L737}
      else if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if (child.localName = 'businessArrangement') then
        value.businessArrangementElement := ParseString(child, path+'/businessArrangement') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestInsurance(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityRequestInsurance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityRequestInsuranceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestInsuranceChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestInsurance);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'focal', value.focalElement); {L738}
  ComposeReference(xml, 'coverage', value.coverage); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'businessArrangement', value.businessArrangementElement); {L738}
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItem;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItemChild(value : TFhirCoverageEligibilityRequestItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'supportingInfoSequence') then
        value.supportingInfoSequenceList.Add(ParsePositiveInt(child, path+'/supportingInfoSequence')) {L631}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'facility') then
        value.facility := ParseReference(child, path+'/facility') {L740}
      else if (child.localName = 'diagnosis') then
        value.diagnosisList.Add(ParseCoverageEligibilityRequestItemDiagnosis(child, path+'/diagnosis')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseReference(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItem(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityRequestItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityRequestItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItemChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'supportingInfoSequence', value.supportingInfoSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'provider', value.provider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'facility', value.facility); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeCoverageEligibilityRequestItemDiagnosis(xml, 'diagnosis', value.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItemDiagnosis(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequestItemDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequestItemDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestItemDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestItemDiagnosisChild(value : TFhirCoverageEligibilityRequestItemDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'diagnosisCodeableConcept') then
        value.diagnosis := ParseCodeableConcept(child, path+'/diagnosisCodeableConcept') {L891}
      else if (child.localName = 'diagnosisReference') then
        value.diagnosis := ParseReference(child, path+'/diagnosisReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItemDiagnosis(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityRequestItemDiagnosis);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityRequestItemDiagnosisChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestItemDiagnosisChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequestItemDiagnosis);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) and (value.diagnosis is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'diagnosisCodeableConcept', TFhirCodeableConcept(value.diagnosis))
  else if (SummaryOption in [soFull, soData]) and (value.diagnosis is TFhirReference) {2} then
    ComposeReference(xml, 'diagnosisReference', TFhirReference(value.diagnosis));
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequest(element : TMXmlElement; path : string) : TFhirCoverageEligibilityRequest;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityRequestChild(value : TFhirCoverageEligibilityRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'priority') then
        value.priority := ParseCodeableConcept(child, path+'/priority') {L740}
      else if (child.localName = 'purpose') then
        value.purposeList.Add(ParseEnum(CODES_TFhirEligibilityRequestPurposeEnum, SYSTEMS_TFhirEligibilityRequestPurposeEnum, child, path+'/purpose')){y.1}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'servicedPeriod') then
        value.serviced := ParsePeriod(child, path+'/servicedPeriod') {L891}
      else if (child.localName = 'servicedDate') then
        value.serviced := ParseDate(child, path+'/servicedDate') {L891}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'enterer') then
        value.enterer := ParseReference(child, path+'/enterer') {L740}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'insurer') then
        value.insurer := ParseReference(child, path+'/insurer') {L740}
      else if (child.localName = 'facility') then
        value.facility := ParseReference(child, path+'/facility') {L740}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseCoverageEligibilityRequestSupportingInfo(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseCoverageEligibilityRequestInsurance(child, path+'/insurance')) {L631}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseCoverageEligibilityRequestItem(child, path+'/item')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequest(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityRequestChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'priority', value.priority); {L741}
  for i := 0 to value.purposeList.Count - 1 do
      ComposeEnum(xml, 'purpose', value.purposeList[i], CODES_TFhirEligibilityRequestPurposeEnum);
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(value.serviced))
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(value.serviced));
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'enterer', value.enterer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'provider', value.provider); {L741}
  ComposeReference(xml, 'insurer', value.insurer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'facility', value.facility); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeCoverageEligibilityRequestSupportingInfo(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeCoverageEligibilityRequestInsurance(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeCoverageEligibilityRequestItem(xml, 'item', value.itemList[i]);
end;

{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
function TFHIRXmlParser.ParseCoverageEligibilityResponseInsurance(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceChild(value : TFhirCoverageEligibilityResponseInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if (child.localName = 'inforce') then
        value.inforceElement := ParseBoolean(child, path+'/inforce') {L737}
      else if (child.localName = 'benefitPeriod') then
        value.benefitPeriod := ParsePeriod(child, path+'/benefitPeriod') {L740}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseCoverageEligibilityResponseInsuranceItem(child, path+'/item')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsurance(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityResponseInsurance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityResponseInsuranceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseInsurance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'coverage', value.coverage); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'inforce', value.inforceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'benefitPeriod', value.benefitPeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeCoverageEligibilityResponseInsuranceItem(xml, 'item', value.itemList[i]);
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItem(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItem;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseInsuranceItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseInsuranceItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItemChild(value : TFhirCoverageEligibilityResponseInsuranceItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'excluded') then
        value.excludedElement := ParseBoolean(child, path+'/excluded') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'network') then
        value.network := ParseCodeableConcept(child, path+'/network') {L740}
      else if (child.localName = 'unit') then
        value.unit_ := ParseCodeableConcept(child, path+'/unit') {L740}
      else if (child.localName = 'term') then
        value.term := ParseCodeableConcept(child, path+'/term') {L740}
      else if (child.localName = 'benefit') then
        value.benefitList.Add(ParseCoverageEligibilityResponseInsuranceItemBenefit(child, path+'/benefit')) {L631}
      else if (child.localName = 'authorizationRequired') then
        value.authorizationRequiredElement := ParseBoolean(child, path+'/authorizationRequired') {L737}
      else if (child.localName = 'authorizationSupporting') then
        value.authorizationSupportingList.Add(ParseCodeableConcept(child, path+'/authorizationSupporting')) {L631}
      else if (child.localName = 'authorizationUrl') then
        value.authorizationUrlElement := ParseUri(child, path+'/authorizationUrl') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItem(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityResponseInsuranceItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityResponseInsuranceItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItemChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseInsuranceItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'provider', value.provider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'excluded', value.excludedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'network', value.network); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unit', value.unit_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'term', value.term); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.benefitList.Count - 1 do
      ComposeCoverageEligibilityResponseInsuranceItemBenefit(xml, 'benefit', value.benefitList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'authorizationRequired', value.authorizationRequiredElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorizationSupportingList.Count - 1 do
      ComposeCodeableConcept(xml, 'authorizationSupporting', value.authorizationSupportingList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'authorizationUrl', value.authorizationUrlElement); {L738}
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItemBenefit(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseInsuranceItemBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseInsuranceItemBenefit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseInsuranceItemBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseInsuranceItemBenefitChild(value : TFhirCoverageEligibilityResponseInsuranceItemBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'allowedUnsignedInt') then
        value.allowed := ParseUnsignedInt(child, path+'/allowedUnsignedInt') {L891}
      else if (child.localName = 'allowedMoney') then
        value.allowed := ParseMoney(child, path+'/allowedMoney') {L891}
      else if (child.localName = 'allowedString') then
        value.allowed := ParseString(child, path+'/allowedString') {L891}
      else if (child.localName = 'usedUnsignedInt') then
        value.used := ParseUnsignedInt(child, path+'/usedUnsignedInt') {L891}
      else if (child.localName = 'usedMoney') then
        value.used := ParseMoney(child, path+'/usedMoney') {L891}
      else if (child.localName = 'usedString') then
        value.used := ParseString(child, path+'/usedString') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItemBenefit(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityResponseInsuranceItemBenefitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseInsuranceItemBenefitChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseInsuranceItemBenefit);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'allowedUnsignedInt', TFhirUnsignedInt(value.allowed))
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirMoney) {6} then
    ComposeMoney(xml, 'allowedMoney', TFhirMoney(value.allowed))
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirString) {6} then
    ComposeString(xml, 'allowedString', TFhirString(value.allowed));
  if (SummaryOption in [soFull, soData]) and (value.used is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'usedUnsignedInt', TFhirUnsignedInt(value.used))
  else if (SummaryOption in [soFull, soData]) and (value.used is TFhirMoney) {6} then
    ComposeMoney(xml, 'usedMoney', TFhirMoney(value.used))
  else if (SummaryOption in [soFull, soData]) and (value.used is TFhirString) {6} then
    ComposeString(xml, 'usedString', TFhirString(value.used));
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseError(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponseError;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponseError.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseErrorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseErrorChild(value : TFhirCoverageEligibilityResponseError; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseError(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityResponseError);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityResponseErrorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseErrorChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponseError);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponse(element : TMXmlElement; path : string) : TFhirCoverageEligibilityResponse;
var
  child : TMXmlElement;
begin
  result := TFhirCoverageEligibilityResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseCoverageEligibilityResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseCoverageEligibilityResponseChild(value : TFhirCoverageEligibilityResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'purpose') then
        value.purposeList.Add(ParseEnum(CODES_TFhirEligibilityResponsePurposeEnum, SYSTEMS_TFhirEligibilityResponsePurposeEnum, child, path+'/purpose')){y.1}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'servicedPeriod') then
        value.serviced := ParsePeriod(child, path+'/servicedPeriod') {L891}
      else if (child.localName = 'servicedDate') then
        value.serviced := ParseDate(child, path+'/servicedDate') {L891}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'requestor') then
        value.requestor := ParseReference(child, path+'/requestor') {L740}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'outcome') then
        value.outcomeElement := ParseEnum(CODES_TFhirClaimProcessingCodesEnum, SYSTEMS_TFhirClaimProcessingCodesEnum, child, path+'/outcome') {L734}
      else if (child.localName = 'disposition') then
        value.dispositionElement := ParseString(child, path+'/disposition') {L737}
      else if (child.localName = 'insurer') then
        value.insurer := ParseReference(child, path+'/insurer') {L740}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseCoverageEligibilityResponseInsurance(child, path+'/insurance')) {L631}
      else if (child.localName = 'preAuthRef') then
        value.preAuthRefElement := ParseString(child, path+'/preAuthRef') {L737}
      else if (child.localName = 'form') then
        value.form := ParseCodeableConcept(child, path+'/form') {L740}
      else if (child.localName = 'error') then
        value.errorList.Add(ParseCoverageEligibilityResponseError(child, path+'/error')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponse(xml : TXmlBuilder; name : String; value : TFhirCoverageEligibilityResponse);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeCoverageEligibilityResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeCoverageEligibilityResponseChildren(xml : TXmlBuilder; value : TFhirCoverageEligibilityResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  for i := 0 to value.purposeList.Count - 1 do
      ComposeEnum(xml, 'purpose', value.purposeList[i], CODES_TFhirEligibilityResponsePurposeEnum);
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(value.serviced))
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(value.serviced));
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'requestor', value.requestor); {L741}
  ComposeReference(xml, 'request', value.request); {L741}
  ComposeEnum(xml, 'outcome', value.outcomeElement, CODES_TFhirClaimProcessingCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'disposition', value.dispositionElement); {L738}
  ComposeReference(xml, 'insurer', value.insurer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeCoverageEligibilityResponseInsurance(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'preAuthRef', value.preAuthRefElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'form', value.form); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.errorList.Count - 1 do
      ComposeCoverageEligibilityResponseError(xml, 'error', value.errorList[i]);
end;

{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
function TFHIRXmlParser.ParseDetectedIssueEvidence(element : TMXmlElement; path : string) : TFhirDetectedIssueEvidence;
var
  child : TMXmlElement;
begin
  result := TFhirDetectedIssueEvidence.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDetectedIssueEvidenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDetectedIssueEvidenceChild(value : TFhirDetectedIssueEvidence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseReference(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueEvidence(xml : TXmlBuilder; name : String; value : TFhirDetectedIssueEvidence);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDetectedIssueEvidenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueEvidenceChildren(xml : TXmlBuilder; value : TFhirDetectedIssueEvidence);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeReference(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseDetectedIssueMitigation(element : TMXmlElement; path : string) : TFhirDetectedIssueMitigation;
var
  child : TMXmlElement;
begin
  result := TFhirDetectedIssueMitigation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDetectedIssueMitigationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDetectedIssueMitigationChild(value : TFhirDetectedIssueMitigation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        value.action := ParseCodeableConcept(child, path+'/action') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueMitigation(xml : TXmlBuilder; name : String; value : TFhirDetectedIssueMitigation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDetectedIssueMitigationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueMitigationChildren(xml : TXmlBuilder; value : TFhirDetectedIssueMitigation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'action', value.action); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
end;

function TFHIRXmlParser.ParseDetectedIssue(element : TMXmlElement; path : string) : TFhirDetectedIssue;
var
  child : TMXmlElement;
begin
  result := TFhirDetectedIssue.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDetectedIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDetectedIssueChild(value : TFhirDetectedIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'severity') then
        value.severityElement := ParseEnum(CODES_TFhirDetectedIssueSeverityEnum, SYSTEMS_TFhirDetectedIssueSeverityEnum, child, path+'/severity') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'identifiedPeriod') then
        value.identified := ParsePeriod(child, path+'/identifiedPeriod') {L891}
      else if (child.localName = 'identifiedDateTime') then
        value.identified := ParseDateTime(child, path+'/identifiedDateTime') {L891}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'implicated') then
        value.implicatedList.Add(ParseReference(child, path+'/implicated')) {L631}
      else if (child.localName = 'evidence') then
        value.evidenceList.Add(ParseDetectedIssueEvidence(child, path+'/evidence')) {L631}
      else if (child.localName = 'detail') then
        value.detailElement := ParseString(child, path+'/detail') {L737}
      else if (child.localName = 'reference') then
        value.referenceElement := ParseUri(child, path+'/reference') {L737}
      else if (child.localName = 'mitigation') then
        value.mitigationList.Add(ParseDetectedIssueMitigation(child, path+'/mitigation')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssue(xml : TXmlBuilder; name : String; value : TFhirDetectedIssue);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDetectedIssueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDetectedIssueChildren(xml : TXmlBuilder; value : TFhirDetectedIssue);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirObservationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'severity', value.severityElement, CODES_TFhirDetectedIssueSeverityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.identified is TFhirPeriod) {6} then
    ComposePeriod(xml, 'identifiedPeriod', TFhirPeriod(value.identified))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.identified is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'identifiedDateTime', TFhirDateTime(value.identified));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.implicatedList.Count - 1 do
      ComposeReference(xml, 'implicated', value.implicatedList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.evidenceList.Count - 1 do
      ComposeDetectedIssueEvidence(xml, 'evidence', value.evidenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'detail', value.detailElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'reference', value.referenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.mitigationList.Count - 1 do
      ComposeDetectedIssueMitigation(xml, 'mitigation', value.mitigationList[i]);
end;

{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
function TFHIRXmlParser.ParseDeviceUdiCarrier(element : TMXmlElement; path : string) : TFhirDeviceUdiCarrier;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceUdiCarrier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceUdiCarrierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceUdiCarrierChild(value : TFhirDeviceUdiCarrier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'deviceIdentifier') then
        value.deviceIdentifierElement := ParseString(child, path+'/deviceIdentifier') {L737}
      else if (child.localName = 'issuer') then
        value.issuerElement := ParseUri(child, path+'/issuer') {L737}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionElement := ParseUri(child, path+'/jurisdiction') {L737}
      else if (child.localName = 'carrierAIDC') then
        value.carrierAIDCElement := ParseBase64Binary(child, path+'/carrierAIDC') {L737}
      else if (child.localName = 'carrierHRF') then
        value.carrierHRFElement := ParseString(child, path+'/carrierHRF') {L737}
      else if (child.localName = 'entryType') then
        value.entryTypeElement := ParseEnum(CODES_TFhirUDIEntryTypeEnum, SYSTEMS_TFhirUDIEntryTypeEnum, child, path+'/entryType') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceUdiCarrier(xml : TXmlBuilder; name : String; value : TFhirDeviceUdiCarrier);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceUdiCarrierChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceUdiCarrierChildren(xml : TXmlBuilder; value : TFhirDeviceUdiCarrier);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'deviceIdentifier', value.deviceIdentifierElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'issuer', value.issuerElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'jurisdiction', value.jurisdictionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBase64Binary(xml, 'carrierAIDC', value.carrierAIDCElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'carrierHRF', value.carrierHRFElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'entryType', value.entryTypeElement, CODES_TFhirUDIEntryTypeEnum); {L735}
end;

function TFHIRXmlParser.ParseDeviceDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDeviceName;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDeviceName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDeviceNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDeviceNameChild(value : TFhirDeviceDeviceName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirDeviceNameTypeEnum, SYSTEMS_TFhirDeviceNameTypeEnum, child, path+'/type') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDeviceName(xml : TXmlBuilder; name : String; value : TFhirDeviceDeviceName);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDeviceNameChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDeviceNameChildren(xml : TXmlBuilder; value : TFhirDeviceDeviceName);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirDeviceNameTypeEnum); {L735}
end;

function TFHIRXmlParser.ParseDeviceSpecialization(element : TMXmlElement; path : string) : TFhirDeviceSpecialization;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceSpecialization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceSpecializationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceSpecializationChild(value : TFhirDeviceSpecialization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'systemType') then
        value.systemType := ParseCodeableConcept(child, path+'/systemType') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceSpecialization(xml : TXmlBuilder; name : String; value : TFhirDeviceSpecialization);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceSpecializationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceSpecializationChildren(xml : TXmlBuilder; value : TFhirDeviceSpecialization);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'systemType', value.systemType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
end;

function TFHIRXmlParser.ParseDeviceVersion(element : TMXmlElement; path : string) : TFhirDeviceVersion;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceVersion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceVersionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceVersionChild(value : TFhirDeviceVersion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'component') then
        value.component := ParseIdentifier(child, path+'/component') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceVersion(xml : TXmlBuilder; name : String; value : TFhirDeviceVersion);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceVersionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceVersionChildren(xml : TXmlBuilder; value : TFhirDeviceVersion);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'component', value.component); {L741}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseDeviceProperty(element : TMXmlElement; path : string) : TFhirDeviceProperty;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDevicePropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDevicePropertyChild(value : TFhirDeviceProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueQuantity') then
        value.valueQuantityList.Add(ParseQuantity(child, path+'/valueQuantity')) {L631}
      else if (child.localName = 'valueCode') then
        value.valueCodeList.Add(ParseCodeableConcept(child, path+'/valueCode')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceProperty(xml : TXmlBuilder; name : String; value : TFhirDeviceProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDevicePropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDevicePropertyChildren(xml : TXmlBuilder; value : TFhirDeviceProperty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.valueQuantityList.Count - 1 do
      ComposeQuantity(xml, 'valueQuantity', value.valueQuantityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.valueCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'valueCode', value.valueCodeList[i]);
end;

function TFHIRXmlParser.ParseDeviceOperationalStatus(element : TMXmlElement; path : string) : TFhirDeviceOperationalStatus;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceOperationalStatus.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceOperationalStatusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceOperationalStatusChild(value : TFhirDeviceOperationalStatus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        value.value := ParseCodeableConcept(child, path+'/value') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableConcept(child, path+'/reason')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceOperationalStatus(xml : TXmlBuilder; name : String; value : TFhirDeviceOperationalStatus);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceOperationalStatusChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceOperationalStatusChildren(xml : TXmlBuilder; value : TFhirDeviceOperationalStatus);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'value', value.value); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', value.reasonList[i]);
end;

function TFHIRXmlParser.ParseDeviceAssociationStatus(element : TMXmlElement; path : string) : TFhirDeviceAssociationStatus;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceAssociationStatus.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceAssociationStatusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceAssociationStatusChild(value : TFhirDeviceAssociationStatus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        value.value := ParseCodeableConcept(child, path+'/value') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableConcept(child, path+'/reason')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceAssociationStatus(xml : TXmlBuilder; name : String; value : TFhirDeviceAssociationStatus);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceAssociationStatusChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceAssociationStatusChildren(xml : TXmlBuilder; value : TFhirDeviceAssociationStatus);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'value', value.value); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', value.reasonList[i]);
end;

function TFHIRXmlParser.ParseDevice(element : TMXmlElement; path : string) : TFhirDevice;
var
  child : TMXmlElement;
begin
  result := TFhirDevice.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceChild(value : TFhirDevice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'displayName') then
        value.displayNameElement := ParseString(child, path+'/displayName') {L737}
      else if (child.localName = 'definition') then
        value.definition := ParseReference(child, path+'/definition') {L740}
      else if (child.localName = 'udiCarrier') then
        value.udiCarrierList.Add(ParseDeviceUdiCarrier(child, path+'/udiCarrier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFHIRDeviceStatusEnum, SYSTEMS_TFhirFHIRDeviceStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')) {L631}
      else if (child.localName = 'distinctIdentifier') then
        value.distinctIdentifierElement := ParseString(child, path+'/distinctIdentifier') {L737}
      else if (child.localName = 'manufacturer') then
        value.manufacturerElement := ParseString(child, path+'/manufacturer') {L737}
      else if (child.localName = 'manufactureDate') then
        value.manufactureDateElement := ParseDateTime(child, path+'/manufactureDate') {L737}
      else if (child.localName = 'expirationDate') then
        value.expirationDateElement := ParseDateTime(child, path+'/expirationDate') {L737}
      else if (child.localName = 'lotNumber') then
        value.lotNumberElement := ParseString(child, path+'/lotNumber') {L737}
      else if (child.localName = 'serialNumber') then
        value.serialNumberElement := ParseString(child, path+'/serialNumber') {L737}
      else if (child.localName = 'deviceName') then
        value.deviceNameList.Add(ParseDeviceDeviceName(child, path+'/deviceName')) {L631}
      else if (child.localName = 'modelNumber') then
        value.modelNumberElement := ParseString(child, path+'/modelNumber') {L737}
      else if (child.localName = 'partNumber') then
        value.partNumberElement := ParseString(child, path+'/partNumber') {L737}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'specialization') then
        value.specializationList.Add(ParseDeviceSpecialization(child, path+'/specialization')) {L631}
      else if (child.localName = 'version') then
        value.versionList.Add(ParseDeviceVersion(child, path+'/version')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseDeviceProperty(child, path+'/property')) {L631}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'operationalStatus') then
        value.operationalStatus := ParseDeviceOperationalStatus(child, path+'/operationalStatus') {L740}
      else if (child.localName = 'associationStatus') then
        value.associationStatus := ParseDeviceAssociationStatus(child, path+'/associationStatus') {L740}
      else if (child.localName = 'owner') then
        value.owner := ParseReference(child, path+'/owner') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactPoint(child, path+'/contact')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'safety') then
        value.safetyList.Add(ParseCodeableConcept(child, path+'/safety')) {L631}
      else if (child.localName = 'parent') then
        value.parent := ParseReference(child, path+'/parent') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDevice(xml : TXmlBuilder; name : String; value : TFhirDevice);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceChildren(xml : TXmlBuilder; value : TFhirDevice);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'displayName', value.displayNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'definition', value.definition); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.udiCarrierList.Count - 1 do
      ComposeDeviceUdiCarrier(xml, 'udiCarrier', value.udiCarrierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFHIRDeviceStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', value.statusReasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'distinctIdentifier', value.distinctIdentifierElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'manufacturer', value.manufacturerElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'manufactureDate', value.manufactureDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'expirationDate', value.expirationDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lotNumber', value.lotNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'serialNumber', value.serialNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.deviceNameList.Count - 1 do
      ComposeDeviceDeviceName(xml, 'deviceName', value.deviceNameList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'modelNumber', value.modelNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'partNumber', value.partNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specializationList.Count - 1 do
      ComposeDeviceSpecialization(xml, 'specialization', value.specializationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.versionList.Count - 1 do
      ComposeDeviceVersion(xml, 'version', value.versionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeDeviceProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDeviceOperationalStatus(xml, 'operationalStatus', value.operationalStatus); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDeviceAssociationStatus(xml, 'associationStatus', value.associationStatus); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'owner', value.owner); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.safetyList.Count - 1 do
      ComposeCodeableConcept(xml, 'safety', value.safetyList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'parent', value.parent); {L741}
end;

{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
function TFHIRXmlParser.ParseDeviceDefinitionUdiDeviceIdentifier(element : TMXmlElement; path : string) : TFhirDeviceDefinitionUdiDeviceIdentifier;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionUdiDeviceIdentifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionUdiDeviceIdentifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionUdiDeviceIdentifierChild(value : TFhirDeviceDefinitionUdiDeviceIdentifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'deviceIdentifier') then
        value.deviceIdentifierElement := ParseString(child, path+'/deviceIdentifier') {L737}
      else if (child.localName = 'issuer') then
        value.issuerElement := ParseUri(child, path+'/issuer') {L737}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionElement := ParseUri(child, path+'/jurisdiction') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionUdiDeviceIdentifier(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinitionUdiDeviceIdentifier);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionUdiDeviceIdentifierChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionUdiDeviceIdentifierChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionUdiDeviceIdentifier);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'deviceIdentifier', value.deviceIdentifierElement); {L738}
  ComposeUri(xml, 'issuer', value.issuerElement); {L738}
  ComposeUri(xml, 'jurisdiction', value.jurisdictionElement); {L738}
end;

function TFHIRXmlParser.ParseDeviceDefinitionDeviceName(element : TMXmlElement; path : string) : TFhirDeviceDefinitionDeviceName;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionDeviceName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionDeviceNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionDeviceNameChild(value : TFhirDeviceDefinitionDeviceName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirDeviceNameTypeEnum, SYSTEMS_TFhirDeviceNameTypeEnum, child, path+'/type') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionDeviceName(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinitionDeviceName);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionDeviceNameChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionDeviceNameChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionDeviceName);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirDeviceNameTypeEnum); {L735}
end;

function TFHIRXmlParser.ParseDeviceDefinitionSpecialization(element : TMXmlElement; path : string) : TFhirDeviceDefinitionSpecialization;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionSpecialization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionSpecializationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionSpecializationChild(value : TFhirDeviceDefinitionSpecialization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'systemType') then
        value.systemTypeElement := ParseString(child, path+'/systemType') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionSpecialization(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinitionSpecialization);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionSpecializationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionSpecializationChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionSpecialization);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'systemType', value.systemTypeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
end;

function TFHIRXmlParser.ParseDeviceDefinitionCapability(element : TMXmlElement; path : string) : TFhirDeviceDefinitionCapability;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionCapability.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionCapabilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionCapabilityChild(value : TFhirDeviceDefinitionCapability; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'description') then
        value.descriptionList.Add(ParseCodeableConcept(child, path+'/description')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionCapability(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinitionCapability);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionCapabilityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionCapabilityChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionCapability);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.descriptionList.Count - 1 do
      ComposeCodeableConcept(xml, 'description', value.descriptionList[i]);
end;

function TFHIRXmlParser.ParseDeviceDefinitionProperty(element : TMXmlElement; path : string) : TFhirDeviceDefinitionProperty;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionPropertyChild(value : TFhirDeviceDefinitionProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueQuantity') then
        value.valueQuantityList.Add(ParseQuantity(child, path+'/valueQuantity')) {L631}
      else if (child.localName = 'valueCode') then
        value.valueCodeList.Add(ParseCodeableConcept(child, path+'/valueCode')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionProperty(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinitionProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionProperty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.valueQuantityList.Count - 1 do
      ComposeQuantity(xml, 'valueQuantity', value.valueQuantityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.valueCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'valueCode', value.valueCodeList[i]);
end;

function TFHIRXmlParser.ParseDeviceDefinitionMaterial(element : TMXmlElement; path : string) : TFhirDeviceDefinitionMaterial;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinitionMaterial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionMaterialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionMaterialChild(value : TFhirDeviceDefinitionMaterial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substance') then
        value.substance := ParseCodeableConcept(child, path+'/substance') {L740}
      else if (child.localName = 'alternate') then
        value.alternateElement := ParseBoolean(child, path+'/alternate') {L737}
      else if (child.localName = 'allergenicIndicator') then
        value.allergenicIndicatorElement := ParseBoolean(child, path+'/allergenicIndicator') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionMaterial(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinitionMaterial);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionMaterialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionMaterialChildren(xml : TXmlBuilder; value : TFhirDeviceDefinitionMaterial);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'substance', value.substance); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'alternate', value.alternateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allergenicIndicator', value.allergenicIndicatorElement); {L738}
end;

function TFHIRXmlParser.ParseDeviceDefinition(element : TMXmlElement; path : string) : TFhirDeviceDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceDefinitionChild(value : TFhirDeviceDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'udiDeviceIdentifier') then
        value.udiDeviceIdentifierList.Add(ParseDeviceDefinitionUdiDeviceIdentifier(child, path+'/udiDeviceIdentifier')) {L631}
      else if (child.localName = 'manufacturerReference') then
        value.manufacturer := ParseReference(child, path+'/manufacturerReference') {L881}
      else if (child.localName = 'manufacturerString') then
        value.manufacturer := ParseString(child, path+'/manufacturerString') {L891}
      else if (child.localName = 'deviceName') then
        value.deviceNameList.Add(ParseDeviceDefinitionDeviceName(child, path+'/deviceName')) {L631}
      else if (child.localName = 'modelNumber') then
        value.modelNumberElement := ParseString(child, path+'/modelNumber') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'specialization') then
        value.specializationList.Add(ParseDeviceDefinitionSpecialization(child, path+'/specialization')) {L631}
      else if (child.localName = 'version') then
        value.versionList.Add(ParseString(child, path+'/version')) {L631}
      else if (child.localName = 'safety') then
        value.safetyList.Add(ParseCodeableConcept(child, path+'/safety')) {L631}
      else if (child.localName = 'shelfLifeStorage') then
        value.shelfLifeStorageList.Add(ParseProductShelfLife(child, path+'/shelfLifeStorage')) {L631}
      else if (child.localName = 'physicalCharacteristics') then
        value.physicalCharacteristics := ParseProdCharacteristic(child, path+'/physicalCharacteristics') {L740}
      else if (child.localName = 'languageCode') then
        value.languageCodeList.Add(ParseCodeableConcept(child, path+'/languageCode')) {L631}
      else if (child.localName = 'capability') then
        value.capabilityList.Add(ParseDeviceDefinitionCapability(child, path+'/capability')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseDeviceDefinitionProperty(child, path+'/property')) {L631}
      else if (child.localName = 'owner') then
        value.owner := ParseReference(child, path+'/owner') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactPoint(child, path+'/contact')) {L631}
      else if (child.localName = 'onlineInformation') then
        value.onlineInformationElement := ParseUri(child, path+'/onlineInformation') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'parentDevice') then
        value.parentDevice := ParseReference(child, path+'/parentDevice') {L740}
      else if (child.localName = 'material') then
        value.materialList.Add(ParseDeviceDefinitionMaterial(child, path+'/material')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinition(xml : TXmlBuilder; name : String; value : TFhirDeviceDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceDefinitionChildren(xml : TXmlBuilder; value : TFhirDeviceDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiDeviceIdentifierList.Count - 1 do
      ComposeDeviceDefinitionUdiDeviceIdentifier(xml, 'udiDeviceIdentifier', value.udiDeviceIdentifierList[i]);
  if (SummaryOption in [soFull, soData]) and (value.manufacturer is TFhirReference) {2} then
    ComposeReference(xml, 'manufacturerReference', TFhirReference(value.manufacturer))
  else if (SummaryOption in [soFull, soData]) and (value.manufacturer is TFhirString) {6} then
    ComposeString(xml, 'manufacturerString', TFhirString(value.manufacturer));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.deviceNameList.Count - 1 do
      ComposeDeviceDefinitionDeviceName(xml, 'deviceName', value.deviceNameList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'modelNumber', value.modelNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specializationList.Count - 1 do
      ComposeDeviceDefinitionSpecialization(xml, 'specialization', value.specializationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.versionList.Count - 1 do
      ComposeString(xml, 'version', value.versionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.safetyList.Count - 1 do
      ComposeCodeableConcept(xml, 'safety', value.safetyList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(xml, 'shelfLifeStorage', value.shelfLifeStorageList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeProdCharacteristic(xml, 'physicalCharacteristics', value.physicalCharacteristics); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.languageCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'languageCode', value.languageCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.capabilityList.Count - 1 do
      ComposeDeviceDefinitionCapability(xml, 'capability', value.capabilityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeDeviceDefinitionProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'owner', value.owner); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'onlineInformation', value.onlineInformationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'parentDevice', value.parentDevice); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.materialList.Count - 1 do
      ComposeDeviceDefinitionMaterial(xml, 'material', value.materialList[i]);
end;

{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
function TFHIRXmlParser.ParseDeviceMetricCalibration(element : TMXmlElement; path : string) : TFhirDeviceMetricCalibration;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceMetricCalibration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceMetricCalibrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceMetricCalibrationChild(value : TFhirDeviceMetricCalibration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirDeviceMetricCalibrationTypeEnum, SYSTEMS_TFhirDeviceMetricCalibrationTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'state') then
        value.stateElement := ParseEnum(CODES_TFhirDeviceMetricCalibrationStateEnum, SYSTEMS_TFhirDeviceMetricCalibrationStateEnum, child, path+'/state') {L734}
      else if (child.localName = 'time') then
        value.timeElement := ParseInstant(child, path+'/time') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceMetricCalibration(xml : TXmlBuilder; name : String; value : TFhirDeviceMetricCalibration);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceMetricCalibrationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceMetricCalibrationChildren(xml : TXmlBuilder; value : TFhirDeviceMetricCalibration);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirDeviceMetricCalibrationTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'state', value.stateElement, CODES_TFhirDeviceMetricCalibrationStateEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'time', value.timeElement); {L738}
end;

function TFHIRXmlParser.ParseDeviceMetric(element : TMXmlElement; path : string) : TFhirDeviceMetric;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceMetric.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceMetricChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceMetricChild(value : TFhirDeviceMetric; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'unit') then
        value.unit_ := ParseCodeableConcept(child, path+'/unit') {L740}
      else if (child.localName = 'source') then
        value.source := ParseReference(child, path+'/source') {L740}
      else if (child.localName = 'parent') then
        value.parent := ParseReference(child, path+'/parent') {L740}
      else if (child.localName = 'operationalStatus') then
        value.operationalStatusElement := ParseEnum(CODES_TFhirDeviceMetricOperationalStatusEnum, SYSTEMS_TFhirDeviceMetricOperationalStatusEnum, child, path+'/operationalStatus') {L734}
      else if (child.localName = 'color') then
        value.colorElement := ParseEnum(CODES_TFhirDeviceMetricColorEnum, SYSTEMS_TFhirDeviceMetricColorEnum, child, path+'/color') {L734}
      else if (child.localName = 'category') then
        value.categoryElement := ParseEnum(CODES_TFhirDeviceMetricCategoryEnum, SYSTEMS_TFhirDeviceMetricCategoryEnum, child, path+'/category') {L734}
      else if (child.localName = 'measurementPeriod') then
        value.measurementPeriod := ParseTiming(child, path+'/measurementPeriod') {L740}
      else if (child.localName = 'calibration') then
        value.calibrationList.Add(ParseDeviceMetricCalibration(child, path+'/calibration')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceMetric(xml : TXmlBuilder; name : String; value : TFhirDeviceMetric);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceMetricChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceMetricChildren(xml : TXmlBuilder; value : TFhirDeviceMetric);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'unit', value.unit_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'source', value.source); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'parent', value.parent); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'operationalStatus', value.operationalStatusElement, CODES_TFhirDeviceMetricOperationalStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'color', value.colorElement, CODES_TFhirDeviceMetricColorEnum); {L735}
  ComposeEnum(xml, 'category', value.categoryElement, CODES_TFhirDeviceMetricCategoryEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTiming(xml, 'measurementPeriod', value.measurementPeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.calibrationList.Count - 1 do
      ComposeDeviceMetricCalibration(xml, 'calibration', value.calibrationList[i]);
end;

{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
function TFHIRXmlParser.ParseDeviceRequestParameter(element : TMXmlElement; path : string) : TFhirDeviceRequestParameter;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceRequestParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceRequestParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceRequestParameterChild(value : TFhirDeviceRequestParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceRequestParameter(xml : TXmlBuilder; name : String; value : TFhirDeviceRequestParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceRequestParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceRequestParameterChildren(xml : TXmlBuilder; value : TFhirDeviceRequestParameter);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
end;

function TFHIRXmlParser.ParseDeviceRequest(element : TMXmlElement; path : string) : TFhirDeviceRequest;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceRequestChild(value : TFhirDeviceRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'priorRequest') then
        value.priorRequestList.Add(ParseReference(child, path+'/priorRequest')) {L631}
      else if (child.localName = 'groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableReference(child, path+'/code') {L740}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseDeviceRequestParameter(child, path+'/parameter')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'requester') then
        value.requester := ParseReference(child, path+'/requester') {L740}
      else if (child.localName = 'performerType') then
        value.performerType := ParseCodeableConcept(child, path+'/performerType') {L740}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseReference(child, path+'/insurance')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseReference(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'relevantHistory') then
        value.relevantHistoryList.Add(ParseReference(child, path+'/relevantHistory')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceRequest(xml : TXmlBuilder; name : String; value : TFhirDeviceRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceRequestChildren(xml : TXmlBuilder; value : TFhirDeviceRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.priorRequestList.Count - 1 do
      ComposeReference(xml, 'priorRequest', value.priorRequestList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'groupIdentifier', value.groupIdentifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirRequestStatusEnum); {L735}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  ComposeCodeableReference(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeDeviceRequestParameter(xml, 'parameter', value.parameterList[i]);
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'requester', value.requester); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'performerType', value.performerType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(xml, 'relevantHistory', value.relevantHistoryList[i]);
end;

{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
function TFHIRXmlParser.ParseDeviceUseStatement(element : TMXmlElement; path : string) : TFhirDeviceUseStatement;
var
  child : TMXmlElement;
begin
  result := TFhirDeviceUseStatement.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDeviceUseStatementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDeviceUseStatementChild(value : TFhirDeviceUseStatement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirDeviceUseStatementStatusEnum, SYSTEMS_TFhirDeviceUseStatementStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromList.Add(ParseReference(child, path+'/derivedFrom')) {L631}
      else if (child.localName = 'context') then
        value.context := ParseReference(child, path+'/context') {L740}
      else if (child.localName = 'timingTiming') then
        value.timing := ParseTiming(child, path+'/timingTiming') {L891}
      else if (child.localName = 'timingPeriod') then
        value.timing := ParsePeriod(child, path+'/timingPeriod') {L891}
      else if (child.localName = 'timingDateTime') then
        value.timing := ParseDateTime(child, path+'/timingDateTime') {L891}
      else if (child.localName = 'dateAsserted') then
        value.dateAssertedElement := ParseDateTime(child, path+'/dateAsserted') {L737}
      else if (child.localName = 'usageStatus') then
        value.usageStatus := ParseCodeableConcept(child, path+'/usageStatus') {L740}
      else if (child.localName = 'usageReason') then
        value.usageReasonList.Add(ParseCodeableConcept(child, path+'/usageReason')) {L631}
      else if (child.localName = 'informationSource') then
        value.informationSource := ParseReference(child, path+'/informationSource') {L740}
      else if (child.localName = 'device') then
        value.device := ParseCodeableReference(child, path+'/device') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableReference(child, path+'/bodySite') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDeviceUseStatement(xml : TXmlBuilder; name : String; value : TFhirDeviceUseStatement);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDeviceUseStatementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDeviceUseStatementChildren(xml : TXmlBuilder; value : TFhirDeviceUseStatement);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirDeviceUseStatementStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(xml, 'derivedFrom', value.derivedFromList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'context', value.context); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(value.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(value.timing))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(value.timing));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'dateAsserted', value.dateAssertedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'usageStatus', value.usageStatus); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.usageReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'usageReason', value.usageReasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'informationSource', value.informationSource); {L741}
  ComposeCodeableReference(xml, 'device', value.device); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
function TFHIRXmlParser.ParseDiagnosticReportMedia(element : TMXmlElement; path : string) : TFhirDiagnosticReportMedia;
var
  child : TMXmlElement;
begin
  result := TFhirDiagnosticReportMedia.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDiagnosticReportMediaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDiagnosticReportMediaChild(value : TFhirDiagnosticReportMedia; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if (child.localName = 'link') then
        value.link_ := ParseReference(child, path+'/link') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReportMedia(xml : TXmlBuilder; name : String; value : TFhirDiagnosticReportMedia);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDiagnosticReportMediaChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReportMediaChildren(xml : TXmlBuilder; value : TFhirDiagnosticReportMedia);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
  ComposeReference(xml, 'link', value.link_); {L741}
end;

function TFHIRXmlParser.ParseDiagnosticReport(element : TMXmlElement; path : string) : TFhirDiagnosticReport;
var
  child : TMXmlElement;
begin
  result := TFhirDiagnosticReport.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDiagnosticReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDiagnosticReportChild(value : TFhirDiagnosticReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirDiagnosticReportStatusEnum, SYSTEMS_TFhirDiagnosticReportStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'effectivePeriod') then
        value.effective := ParsePeriod(child, path+'/effectivePeriod') {L891}
      else if (child.localName = 'effectiveDateTime') then
        value.effective := ParseDateTime(child, path+'/effectiveDateTime') {L891}
      else if (child.localName = 'issued') then
        value.issuedElement := ParseInstant(child, path+'/issued') {L737}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseReference(child, path+'/performer')) {L631}
      else if (child.localName = 'resultsInterpreter') then
        value.resultsInterpreterList.Add(ParseReference(child, path+'/resultsInterpreter')) {L631}
      else if (child.localName = 'specimen') then
        value.specimenList.Add(ParseReference(child, path+'/specimen')) {L631}
      else if (child.localName = 'result') then
        value.resultList.Add(ParseReference(child, path+'/result')) {L631}
      else if (child.localName = 'imagingStudy') then
        value.imagingStudyList.Add(ParseReference(child, path+'/imagingStudy')) {L631}
      else if (child.localName = 'media') then
        value.mediaList.Add(ParseDiagnosticReportMedia(child, path+'/media')) {L631}
      else if (child.localName = 'conclusion') then
        value.conclusionElement := ParseString(child, path+'/conclusion') {L737}
      else if (child.localName = 'conclusionCode') then
        value.conclusionCodeList.Add(ParseCodeableConcept(child, path+'/conclusionCode')) {L631}
      else if (child.localName = 'presentedForm') then
        value.presentedFormList.Add(ParseAttachment(child, path+'/presentedForm')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReport(xml : TXmlBuilder; name : String; value : TFhirDiagnosticReport);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDiagnosticReportChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDiagnosticReportChildren(xml : TXmlBuilder; value : TFhirDiagnosticReport);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirDiagnosticReportStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(value.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(value.effective));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'issued', value.issuedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resultsInterpreterList.Count - 1 do
      ComposeReference(xml, 'resultsInterpreter', value.resultsInterpreterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specimenList.Count - 1 do
      ComposeReference(xml, 'specimen', value.specimenList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.resultList.Count - 1 do
      ComposeReference(xml, 'result', value.resultList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.imagingStudyList.Count - 1 do
      ComposeReference(xml, 'imagingStudy', value.imagingStudyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.mediaList.Count - 1 do
      ComposeDiagnosticReportMedia(xml, 'media', value.mediaList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'conclusion', value.conclusionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conclusionCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'conclusionCode', value.conclusionCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.presentedFormList.Count - 1 do
      ComposeAttachment(xml, 'presentedForm', value.presentedFormList[i]);
end;

{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
function TFHIRXmlParser.ParseDocumentManifestRelated(element : TMXmlElement; path : string) : TFhirDocumentManifestRelated;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentManifestRelated.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentManifestRelatedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentManifestRelatedChild(value : TFhirDocumentManifestRelated; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'ref') then
        value.ref := ParseReference(child, path+'/ref') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentManifestRelated(xml : TXmlBuilder; name : String; value : TFhirDocumentManifestRelated);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDocumentManifestRelatedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDocumentManifestRelatedChildren(xml : TXmlBuilder; value : TFhirDocumentManifestRelated);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'ref', value.ref); {L741}
end;

function TFHIRXmlParser.ParseDocumentManifest(element : TMXmlElement; path : string) : TFhirDocumentManifest;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentManifest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentManifestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentManifestChild(value : TFhirDocumentManifest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'masterIdentifier') then
        value.masterIdentifier := ParseIdentifier(child, path+'/masterIdentifier') {L740}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseReference(child, path+'/author')) {L631}
      else if (child.localName = 'recipient') then
        value.recipientList.Add(ParseReference(child, path+'/recipient')) {L631}
      else if (child.localName = 'source') then
        value.sourceElement := ParseUri(child, path+'/source') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'content') then
        value.contentList.Add(ParseReference(child, path+'/content')) {L631}
      else if (child.localName = 'related') then
        value.relatedList.Add(ParseDocumentManifestRelated(child, path+'/related')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentManifest(xml : TXmlBuilder; name : String; value : TFhirDocumentManifest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDocumentManifestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDocumentManifestChildren(xml : TXmlBuilder; value : TFhirDocumentManifest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'masterIdentifier', value.masterIdentifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirDocumentReferenceStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(xml, 'recipient', value.recipientList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'source', value.sourceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  for i := 0 to value.contentList.Count - 1 do
      ComposeReference(xml, 'content', value.contentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedList.Count - 1 do
      ComposeDocumentManifestRelated(xml, 'related', value.relatedList[i]);
end;

{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
function TFHIRXmlParser.ParseDocumentReferenceAttester(element : TMXmlElement; path : string) : TFhirDocumentReferenceAttester;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReferenceAttester.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceAttesterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceAttesterChild(value : TFhirDocumentReferenceAttester; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirDocumentAttestationModeEnum, SYSTEMS_TFhirDocumentAttestationModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'time') then
        value.timeElement := ParseDateTime(child, path+'/time') {L737}
      else if (child.localName = 'party') then
        value.party := ParseReference(child, path+'/party') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceAttester(xml : TXmlBuilder; name : String; value : TFhirDocumentReferenceAttester);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDocumentReferenceAttesterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceAttesterChildren(xml : TXmlBuilder; value : TFhirDocumentReferenceAttester);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirDocumentAttestationModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'time', value.timeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'party', value.party); {L741}
end;

function TFHIRXmlParser.ParseDocumentReferenceRelatesTo(element : TMXmlElement; path : string) : TFhirDocumentReferenceRelatesTo;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReferenceRelatesTo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceRelatesToChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceRelatesToChild(value : TFhirDocumentReferenceRelatesTo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirDocumentRelationshipTypeEnum, SYSTEMS_TFhirDocumentRelationshipTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'target') then
        value.target := ParseReference(child, path+'/target') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceRelatesTo(xml : TXmlBuilder; name : String; value : TFhirDocumentReferenceRelatesTo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDocumentReferenceRelatesToChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceRelatesToChildren(xml : TXmlBuilder; value : TFhirDocumentReferenceRelatesTo);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirDocumentRelationshipTypeEnum); {L735}
  ComposeReference(xml, 'target', value.target); {L741}
end;

function TFHIRXmlParser.ParseDocumentReferenceContent(element : TMXmlElement; path : string) : TFhirDocumentReferenceContent;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReferenceContent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceContentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceContentChild(value : TFhirDocumentReferenceContent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'attachment') then
        value.attachment := ParseAttachment(child, path+'/attachment') {L740}
      else if (child.localName = 'format') then
        value.format := ParseCoding(child, path+'/format') {L740}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceContent(xml : TXmlBuilder; name : String; value : TFhirDocumentReferenceContent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDocumentReferenceContentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceContentChildren(xml : TXmlBuilder; value : TFhirDocumentReferenceContent);
begin
  composeBackboneElementChildren(xml, value);
  ComposeAttachment(xml, 'attachment', value.attachment); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'format', value.format); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
end;

function TFHIRXmlParser.ParseDocumentReference(element : TMXmlElement; path : string) : TFhirDocumentReference;
var
  child : TMXmlElement;
begin
  result := TFhirDocumentReference.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseDocumentReferenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseDocumentReferenceChild(value : TFhirDocumentReference; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirDocumentReferenceStatusEnum, SYSTEMS_TFhirDocumentReferenceStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'docStatus') then
        value.docStatusElement := ParseEnum(CODES_TFhirCompositionStatusEnum, SYSTEMS_TFhirCompositionStatusEnum, child, path+'/docStatus') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounterList.Add(ParseReference(child, path+'/encounter')) {L631}
      else if (child.localName = 'event') then
        value.eventList.Add(ParseCodeableConcept(child, path+'/event')) {L631}
      else if (child.localName = 'facilityType') then
        value.facilityType := ParseCodeableConcept(child, path+'/facilityType') {L740}
      else if (child.localName = 'practiceSetting') then
        value.practiceSetting := ParseCodeableConcept(child, path+'/practiceSetting') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseInstant(child, path+'/date') {L737}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseReference(child, path+'/author')) {L631}
      else if (child.localName = 'attester') then
        value.attesterList.Add(ParseDocumentReferenceAttester(child, path+'/attester')) {L631}
      else if (child.localName = 'custodian') then
        value.custodian := ParseReference(child, path+'/custodian') {L740}
      else if (child.localName = 'relatesTo') then
        value.relatesToList.Add(ParseDocumentReferenceRelatesTo(child, path+'/relatesTo')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'securityLabel') then
        value.securityLabelList.Add(ParseCodeableConcept(child, path+'/securityLabel')) {L631}
      else if (child.localName = 'content') then
        value.contentList.Add(ParseDocumentReferenceContent(child, path+'/content')) {L631}
      else if (child.localName = 'sourcePatientInfo') then
        value.sourcePatientInfo := ParseReference(child, path+'/sourcePatientInfo') {L740}
      else if (child.localName = 'related') then
        value.relatedList.Add(ParseReference(child, path+'/related')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeDocumentReference(xml : TXmlBuilder; name : String; value : TFhirDocumentReference);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeDocumentReferenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeDocumentReferenceChildren(xml : TXmlBuilder; value : TFhirDocumentReference);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirDocumentReferenceStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'docStatus', value.docStatusElement, CODES_TFhirCompositionStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.encounterList.Count - 1 do
      ComposeReference(xml, 'encounter', value.encounterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.eventList.Count - 1 do
      ComposeCodeableConcept(xml, 'event', value.eventList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'facilityType', value.facilityType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'practiceSetting', value.practiceSetting); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.attesterList.Count - 1 do
      ComposeDocumentReferenceAttester(xml, 'attester', value.attesterList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'custodian', value.custodian); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeDocumentReferenceRelatesTo(xml, 'relatesTo', value.relatesToList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.securityLabelList.Count - 1 do
      ComposeCodeableConcept(xml, 'securityLabel', value.securityLabelList[i]);
  for i := 0 to value.contentList.Count - 1 do
      ComposeDocumentReferenceContent(xml, 'content', value.contentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'sourcePatientInfo', value.sourcePatientInfo); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedList.Count - 1 do
      ComposeReference(xml, 'related', value.relatedList[i]);
end;

{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
function TFHIRXmlParser.ParseEncounterStatusHistory(element : TMXmlElement; path : string) : TFhirEncounterStatusHistory;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterStatusHistory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterStatusHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterStatusHistoryChild(value : TFhirEncounterStatusHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterStatusHistory(xml : TXmlBuilder; name : String; value : TFhirEncounterStatusHistory);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterStatusHistoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterStatusHistoryChildren(xml : TXmlBuilder; value : TFhirEncounterStatusHistory);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEncounterStatusEnum); {L735}
  ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseEncounterClassHistory(element : TMXmlElement; path : string) : TFhirEncounterClassHistory;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterClassHistory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterClassHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterClassHistoryChild(value : TFhirEncounterClassHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'class') then
        value.class_ := ParseCoding(child, path+'/class') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterClassHistory(xml : TXmlBuilder; name : String; value : TFhirEncounterClassHistory);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterClassHistoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterClassHistoryChildren(xml : TXmlBuilder; value : TFhirEncounterClassHistory);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCoding(xml, 'class', value.class_); {L741}
  ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseEncounterParticipant(element : TMXmlElement; path : string) : TFhirEncounterParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterParticipantChild(value : TFhirEncounterParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'individual') then
        value.individual := ParseReference(child, path+'/individual') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterParticipant(xml : TXmlBuilder; name : String; value : TFhirEncounterParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterParticipantChildren(xml : TXmlBuilder; value : TFhirEncounterParticipant);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'individual', value.individual); {L741}
end;

function TFHIRXmlParser.ParseEncounterDiagnosis(element : TMXmlElement; path : string) : TFhirEncounterDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterDiagnosisChild(value : TFhirEncounterDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'condition') then
        value.condition := ParseReference(child, path+'/condition') {L740}
      else if (child.localName = 'use') then
        value.use := ParseCodeableConcept(child, path+'/use') {L740}
      else if (child.localName = 'rank') then
        value.rankElement := ParsePositiveInt(child, path+'/rank') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterDiagnosis(xml : TXmlBuilder; name : String; value : TFhirEncounterDiagnosis);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterDiagnosisChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterDiagnosisChildren(xml : TXmlBuilder; value : TFhirEncounterDiagnosis);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'condition', value.condition); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'use', value.use); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'rank', value.rankElement); {L738}
end;

function TFHIRXmlParser.ParseEncounterHospitalization(element : TMXmlElement; path : string) : TFhirEncounterHospitalization;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterHospitalization.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterHospitalizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterHospitalizationChild(value : TFhirEncounterHospitalization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'preAdmissionIdentifier') then
        value.preAdmissionIdentifier := ParseIdentifier(child, path+'/preAdmissionIdentifier') {L740}
      else if (child.localName = 'origin') then
        value.origin := ParseReference(child, path+'/origin') {L740}
      else if (child.localName = 'admitSource') then
        value.admitSource := ParseCodeableConcept(child, path+'/admitSource') {L740}
      else if (child.localName = 'reAdmission') then
        value.reAdmission := ParseCodeableConcept(child, path+'/reAdmission') {L740}
      else if (child.localName = 'dietPreference') then
        value.dietPreferenceList.Add(ParseCodeableConcept(child, path+'/dietPreference')) {L631}
      else if (child.localName = 'specialCourtesy') then
        value.specialCourtesyList.Add(ParseCodeableConcept(child, path+'/specialCourtesy')) {L631}
      else if (child.localName = 'specialArrangement') then
        value.specialArrangementList.Add(ParseCodeableConcept(child, path+'/specialArrangement')) {L631}
      else if (child.localName = 'destination') then
        value.destination := ParseReference(child, path+'/destination') {L740}
      else if (child.localName = 'dischargeDisposition') then
        value.dischargeDisposition := ParseCodeableConcept(child, path+'/dischargeDisposition') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterHospitalization(xml : TXmlBuilder; name : String; value : TFhirEncounterHospitalization);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterHospitalizationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterHospitalizationChildren(xml : TXmlBuilder; value : TFhirEncounterHospitalization);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'preAdmissionIdentifier', value.preAdmissionIdentifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'origin', value.origin); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'admitSource', value.admitSource); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reAdmission', value.reAdmission); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dietPreferenceList.Count - 1 do
      ComposeCodeableConcept(xml, 'dietPreference', value.dietPreferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specialCourtesyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialCourtesy', value.specialCourtesyList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specialArrangementList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialArrangement', value.specialArrangementList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'destination', value.destination); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'dischargeDisposition', value.dischargeDisposition); {L741}
end;

function TFHIRXmlParser.ParseEncounterLocation(element : TMXmlElement; path : string) : TFhirEncounterLocation;
var
  child : TMXmlElement;
begin
  result := TFhirEncounterLocation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterLocationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterLocationChild(value : TFhirEncounterLocation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEncounterLocationStatusEnum, SYSTEMS_TFhirEncounterLocationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'physicalType') then
        value.physicalType := ParseCodeableConcept(child, path+'/physicalType') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounterLocation(xml : TXmlBuilder; name : String; value : TFhirEncounterLocation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterLocationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterLocationChildren(xml : TXmlBuilder; value : TFhirEncounterLocation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEncounterLocationStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'physicalType', value.physicalType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseEncounter(element : TMXmlElement; path : string) : TFhirEncounter;
var
  child : TMXmlElement;
begin
  result := TFhirEncounter.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEncounterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEncounterChild(value : TFhirEncounter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEncounterStatusEnum, SYSTEMS_TFhirEncounterStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusHistory') then
        value.statusHistoryList.Add(ParseEncounterStatusHistory(child, path+'/statusHistory')) {L631}
      else if (child.localName = 'class') then
        value.class_ := ParseCoding(child, path+'/class') {L740}
      else if (child.localName = 'classHistory') then
        value.classHistoryList.Add(ParseEncounterClassHistory(child, path+'/classHistory')) {L631}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'serviceType') then
        value.serviceType := ParseCodeableConcept(child, path+'/serviceType') {L740}
      else if (child.localName = 'priority') then
        value.priority := ParseCodeableConcept(child, path+'/priority') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'subjectStatus') then
        value.subjectStatus := ParseCodeableConcept(child, path+'/subjectStatus') {L740}
      else if (child.localName = 'episodeOfCare') then
        value.episodeOfCareList.Add(ParseReference(child, path+'/episodeOfCare')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseEncounterParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'appointment') then
        value.appointmentList.Add(ParseReference(child, path+'/appointment')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'length') then
        value.length := ParseDuration(child, path+'/length') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'diagnosis') then
        value.diagnosisList.Add(ParseEncounterDiagnosis(child, path+'/diagnosis')) {L631}
      else if (child.localName = 'account') then
        value.accountList.Add(ParseReference(child, path+'/account')) {L631}
      else if (child.localName = 'hospitalization') then
        value.hospitalization := ParseEncounterHospitalization(child, path+'/hospitalization') {L740}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseEncounterLocation(child, path+'/location')) {L631}
      else if (child.localName = 'serviceProvider') then
        value.serviceProvider := ParseReference(child, path+'/serviceProvider') {L740}
      else if (child.localName = 'partOf') then
        value.partOf := ParseReference(child, path+'/partOf') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEncounter(xml : TXmlBuilder; name : String; value : TFhirEncounter);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEncounterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEncounterChildren(xml : TXmlBuilder; value : TFhirEncounter);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEncounterStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statusHistoryList.Count - 1 do
      ComposeEncounterStatusHistory(xml, 'statusHistory', value.statusHistoryList[i]);
  ComposeCoding(xml, 'class', value.class_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.classHistoryList.Count - 1 do
      ComposeEncounterClassHistory(xml, 'classHistory', value.classHistoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'serviceType', value.serviceType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'priority', value.priority); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subjectStatus', value.subjectStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.episodeOfCareList.Count - 1 do
      ComposeReference(xml, 'episodeOfCare', value.episodeOfCareList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeEncounterParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.appointmentList.Count - 1 do
      ComposeReference(xml, 'appointment', value.appointmentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'length', value.length); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeEncounterDiagnosis(xml, 'diagnosis', value.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.accountList.Count - 1 do
      ComposeReference(xml, 'account', value.accountList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEncounterHospitalization(xml, 'hospitalization', value.hospitalization); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeEncounterLocation(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'serviceProvider', value.serviceProvider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'partOf', value.partOf); {L741}
end;

{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
function TFHIRXmlParser.ParseEndpoint(element : TMXmlElement; path : string) : TFhirEndpoint;
var
  child : TMXmlElement;
begin
  result := TFhirEndpoint.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEndpointChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEndpointChild(value : TFhirEndpoint; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEndpointStatusEnum, SYSTEMS_TFhirEndpointStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'connectionType') then
        value.connectionType := ParseCoding(child, path+'/connectionType') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'managingOrganization') then
        value.managingOrganization := ParseReference(child, path+'/managingOrganization') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactPoint(child, path+'/contact')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'payloadType') then
        value.payloadTypeList.Add(ParseCodeableConcept(child, path+'/payloadType')) {L631}
      else if (child.localName = 'payloadMimeType') then
        value.payloadMimeTypeList.Add(ParseCode(child, path+'/payloadMimeType')) {L631}
      else if (child.localName = 'address') then
        value.addressElement := ParseUrl(child, path+'/address') {L737}
      else if (child.localName = 'header') then
        value.headerList.Add(ParseString(child, path+'/header')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEndpoint(xml : TXmlBuilder; name : String; value : TFhirEndpoint);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEndpointChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEndpointChildren(xml : TXmlBuilder; value : TFhirEndpoint);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEndpointStatusEnum); {L735}
  ComposeCoding(xml, 'connectionType', value.connectionType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'managingOrganization', value.managingOrganization); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  for i := 0 to value.payloadTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'payloadType', value.payloadTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.payloadMimeTypeList.Count - 1 do
      ComposeCode(xml, 'payloadMimeType', value.payloadMimeTypeList[i]);
  ComposeUrl(xml, 'address', value.addressElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.headerList.Count - 1 do
      ComposeString(xml, 'header', value.headerList[i]);
end;

{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
function TFHIRXmlParser.ParseEnrollmentRequest(element : TMXmlElement; path : string) : TFhirEnrollmentRequest;
var
  child : TMXmlElement;
begin
  result := TFhirEnrollmentRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEnrollmentRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEnrollmentRequestChild(value : TFhirEnrollmentRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'insurer') then
        value.insurer := ParseReference(child, path+'/insurer') {L740}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'candidate') then
        value.candidate := ParseReference(child, path+'/candidate') {L740}
      else if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEnrollmentRequest(xml : TXmlBuilder; name : String; value : TFhirEnrollmentRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEnrollmentRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEnrollmentRequestChildren(xml : TXmlBuilder; value : TFhirEnrollmentRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'insurer', value.insurer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'provider', value.provider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'candidate', value.candidate); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'coverage', value.coverage); {L741}
end;

{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
function TFHIRXmlParser.ParseEnrollmentResponse(element : TMXmlElement; path : string) : TFhirEnrollmentResponse;
var
  child : TMXmlElement;
begin
  result := TFhirEnrollmentResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEnrollmentResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEnrollmentResponseChild(value : TFhirEnrollmentResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'outcome') then
        value.outcomeElement := ParseEnum(CODES_TFhirClaimProcessingCodesEnum, SYSTEMS_TFhirClaimProcessingCodesEnum, child, path+'/outcome') {L734}
      else if (child.localName = 'disposition') then
        value.dispositionElement := ParseString(child, path+'/disposition') {L737}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'organization') then
        value.organization := ParseReference(child, path+'/organization') {L740}
      else if (child.localName = 'requestProvider') then
        value.requestProvider := ParseReference(child, path+'/requestProvider') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEnrollmentResponse(xml : TXmlBuilder; name : String; value : TFhirEnrollmentResponse);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEnrollmentResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEnrollmentResponseChildren(xml : TXmlBuilder; value : TFhirEnrollmentResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'outcome', value.outcomeElement, CODES_TFhirClaimProcessingCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'disposition', value.dispositionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'organization', value.organization); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'requestProvider', value.requestProvider); {L741}
end;

{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
function TFHIRXmlParser.ParseEpisodeOfCareStatusHistory(element : TMXmlElement; path : string) : TFhirEpisodeOfCareStatusHistory;
var
  child : TMXmlElement;
begin
  result := TFhirEpisodeOfCareStatusHistory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEpisodeOfCareStatusHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEpisodeOfCareStatusHistoryChild(value : TFhirEpisodeOfCareStatusHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareStatusHistory(xml : TXmlBuilder; name : String; value : TFhirEpisodeOfCareStatusHistory);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEpisodeOfCareStatusHistoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareStatusHistoryChildren(xml : TXmlBuilder; value : TFhirEpisodeOfCareStatusHistory);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEpisodeOfCareStatusEnum); {L735}
  ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseEpisodeOfCareDiagnosis(element : TMXmlElement; path : string) : TFhirEpisodeOfCareDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirEpisodeOfCareDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEpisodeOfCareDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEpisodeOfCareDiagnosisChild(value : TFhirEpisodeOfCareDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'condition') then
        value.condition := ParseReference(child, path+'/condition') {L740}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'rank') then
        value.rankElement := ParsePositiveInt(child, path+'/rank') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareDiagnosis(xml : TXmlBuilder; name : String; value : TFhirEpisodeOfCareDiagnosis);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEpisodeOfCareDiagnosisChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareDiagnosisChildren(xml : TXmlBuilder; value : TFhirEpisodeOfCareDiagnosis);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'condition', value.condition); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePositiveInt(xml, 'rank', value.rankElement); {L738}
end;

function TFHIRXmlParser.ParseEpisodeOfCare(element : TMXmlElement; path : string) : TFhirEpisodeOfCare;
var
  child : TMXmlElement;
begin
  result := TFhirEpisodeOfCare.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEpisodeOfCareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEpisodeOfCareChild(value : TFhirEpisodeOfCare; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEpisodeOfCareStatusEnum, SYSTEMS_TFhirEpisodeOfCareStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusHistory') then
        value.statusHistoryList.Add(ParseEpisodeOfCareStatusHistory(child, path+'/statusHistory')) {L631}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'diagnosis') then
        value.diagnosisList.Add(ParseEpisodeOfCareDiagnosis(child, path+'/diagnosis')) {L631}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'managingOrganization') then
        value.managingOrganization := ParseReference(child, path+'/managingOrganization') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'referralRequest') then
        value.referralRequestList.Add(ParseReference(child, path+'/referralRequest')) {L631}
      else if (child.localName = 'careManager') then
        value.careManager := ParseReference(child, path+'/careManager') {L740}
      else if (child.localName = 'team') then
        value.teamList.Add(ParseReference(child, path+'/team')) {L631}
      else if (child.localName = 'account') then
        value.accountList.Add(ParseReference(child, path+'/account')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCare(xml : TXmlBuilder; name : String; value : TFhirEpisodeOfCare);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEpisodeOfCareChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEpisodeOfCareChildren(xml : TXmlBuilder; value : TFhirEpisodeOfCare);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEpisodeOfCareStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statusHistoryList.Count - 1 do
      ComposeEpisodeOfCareStatusHistory(xml, 'statusHistory', value.statusHistoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeEpisodeOfCareDiagnosis(xml, 'diagnosis', value.diagnosisList[i]);
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'managingOrganization', value.managingOrganization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.referralRequestList.Count - 1 do
      ComposeReference(xml, 'referralRequest', value.referralRequestList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'careManager', value.careManager); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.teamList.Count - 1 do
      ComposeReference(xml, 'team', value.teamList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.accountList.Count - 1 do
      ComposeReference(xml, 'account', value.accountList[i]);
end;

{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
function TFHIRXmlParser.ParseEventDefinition(element : TMXmlElement; path : string) : TFhirEventDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirEventDefinition.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEventDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEventDefinitionChild(value : TFhirEventDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'usage') then
        value.usageElement := ParseString(child, path+'/usage') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'topic') then
        value.topicList.Add(ParseCodeableConcept(child, path+'/topic')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'trigger') then
        value.triggerList.Add(ParseTriggerDefinition(child, path+'/trigger')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEventDefinition(xml : TXmlBuilder; name : String; value : TFhirEventDefinition);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEventDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEventDefinitionChildren(xml : TXmlBuilder; value : TFhirEventDefinition);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'usage', value.usageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', value.topicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  for i := 0 to value.triggerList.Count - 1 do
      ComposeTriggerDefinition(xml, 'trigger', value.triggerList[i]);
end;

{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
function TFHIRXmlParser.ParseEvidenceVariableDefinition(element : TMXmlElement; path : string) : TFhirEvidenceVariableDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariableDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableDefinitionChild(value : TFhirEvidenceVariableDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'variableRole') then
        value.variableRole := ParseCodeableConcept(child, path+'/variableRole') {L740}
      else if (child.localName = 'observed') then
        value.observed := ParseReference(child, path+'/observed') {L740}
      else if (child.localName = 'intended') then
        value.intended := ParseReference(child, path+'/intended') {L740}
      else if (child.localName = 'directnessMatch') then
        value.directnessMatch := ParseCodeableConcept(child, path+'/directnessMatch') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableDefinition(xml : TXmlBuilder; name : String; value : TFhirEvidenceVariableDefinition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceVariableDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableDefinitionChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableDefinition);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  ComposeCodeableConcept(xml, 'variableRole', value.variableRole); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'observed', value.observed); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'intended', value.intended); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'directnessMatch', value.directnessMatch); {L741}
end;

function TFHIRXmlParser.ParseEvidenceCertainty(element : TMXmlElement; path : string) : TFhirEvidenceCertainty;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceCertainty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceCertaintyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceCertaintyChild(value : TFhirEvidenceCertainty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'rating') then
        value.ratingList.Add(ParseCodeableConcept(child, path+'/rating')) {L631}
      else if (child.localName = 'certaintySubcomponent') then
        value.certaintySubcomponentList.Add(ParseEvidenceCertaintyCertaintySubcomponent(child, path+'/certaintySubcomponent')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceCertainty(xml : TXmlBuilder; name : String; value : TFhirEvidenceCertainty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceCertaintyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceCertaintyChildren(xml : TXmlBuilder; value : TFhirEvidenceCertainty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.ratingList.Count - 1 do
      ComposeCodeableConcept(xml, 'rating', value.ratingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.certaintySubcomponentList.Count - 1 do
      ComposeEvidenceCertaintyCertaintySubcomponent(xml, 'certaintySubcomponent', value.certaintySubcomponentList[i]);
end;

function TFHIRXmlParser.ParseEvidenceCertaintyCertaintySubcomponent(element : TMXmlElement; path : string) : TFhirEvidenceCertaintyCertaintySubcomponent;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceCertaintyCertaintySubcomponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceCertaintyCertaintySubcomponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceCertaintyCertaintySubcomponentChild(value : TFhirEvidenceCertaintyCertaintySubcomponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'rating') then
        value.ratingList.Add(ParseCodeableConcept(child, path+'/rating')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceCertaintyCertaintySubcomponent(xml : TXmlBuilder; name : String; value : TFhirEvidenceCertaintyCertaintySubcomponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceCertaintyCertaintySubcomponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceCertaintyCertaintySubcomponentChildren(xml : TXmlBuilder; value : TFhirEvidenceCertaintyCertaintySubcomponent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.ratingList.Count - 1 do
      ComposeCodeableConcept(xml, 'rating', value.ratingList[i]);
end;

function TFHIRXmlParser.ParseEvidence(element : TMXmlElement; path : string) : TFhirEvidence;
var
  child : TMXmlElement;
begin
  result := TFhirEvidence.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceChild(value : TFhirEvidence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'assertion') then
        value.assertionElement := ParseMarkdown(child, path+'/assertion') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'variableDefinition') then
        value.variableDefinitionList.Add(ParseEvidenceVariableDefinition(child, path+'/variableDefinition')) {L631}
      else if (child.localName = 'synthesisType') then
        value.synthesisType := ParseCodeableConcept(child, path+'/synthesisType') {L740}
      else if (child.localName = 'studyType') then
        value.studyType := ParseCodeableConcept(child, path+'/studyType') {L740}
      else if (child.localName = 'statistic') then
        value.statisticList.Add(ParseStatistic(child, path+'/statistic')) {L631}
      else if (child.localName = 'distribution') then
        value.distributionList.Add(ParseOrderedDistribution(child, path+'/distribution')) {L631}
      else if (child.localName = 'certainty') then
        value.certaintyList.Add(ParseEvidenceCertainty(child, path+'/certainty')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidence(xml : TXmlBuilder; name : String; value : TFhirEvidence);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceChildren(xml : TXmlBuilder; value : TFhirEvidence);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'assertion', value.assertionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  for i := 0 to value.variableDefinitionList.Count - 1 do
      ComposeEvidenceVariableDefinition(xml, 'variableDefinition', value.variableDefinitionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'synthesisType', value.synthesisType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'studyType', value.studyType); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statisticList.Count - 1 do
      ComposeStatistic(xml, 'statistic', value.statisticList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.distributionList.Count - 1 do
      ComposeOrderedDistribution(xml, 'distribution', value.distributionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.certaintyList.Count - 1 do
      ComposeEvidenceCertainty(xml, 'certainty', value.certaintyList[i]);
end;

{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
function TFHIRXmlParser.ParseEvidenceReportSubject(element : TMXmlElement; path : string) : TFhirEvidenceReportSubject;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceReportSubject.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceReportSubjectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceReportSubjectChild(value : TFhirEvidenceReportSubject; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'characteristic') then
        value.characteristicList.Add(ParseEvidenceReportSubjectCharacteristic(child, path+'/characteristic')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportSubject(xml : TXmlBuilder; name : String; value : TFhirEvidenceReportSubject);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceReportSubjectChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportSubjectChildren(xml : TXmlBuilder; value : TFhirEvidenceReportSubject);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeEvidenceReportSubjectCharacteristic(xml, 'characteristic', value.characteristicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

function TFHIRXmlParser.ParseEvidenceReportSubjectCharacteristic(element : TMXmlElement; path : string) : TFhirEvidenceReportSubjectCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceReportSubjectCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceReportSubjectCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceReportSubjectCharacteristicChild(value : TFhirEvidenceReportSubjectCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'exclude') then
        value.excludeElement := ParseBoolean(child, path+'/exclude') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportSubjectCharacteristic(xml : TXmlBuilder; name : String; value : TFhirEvidenceReportSubjectCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceReportSubjectCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportSubjectCharacteristicChildren(xml : TXmlBuilder; value : TFhirEvidenceReportSubjectCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'exclude', value.excludeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseEvidenceReportRelatesTo(element : TMXmlElement; path : string) : TFhirEvidenceReportRelatesTo;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceReportRelatesTo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceReportRelatesToChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceReportRelatesToChild(value : TFhirEvidenceReportRelatesTo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirReportRelationshipTypeEnum, SYSTEMS_TFhirReportRelationshipTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'targetIdentifier') then
        value.target := ParseIdentifier(child, path+'/targetIdentifier') {L891}
      else if (child.localName = 'targetReference') then
        value.target := ParseReference(child, path+'/targetReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportRelatesTo(xml : TXmlBuilder; name : String; value : TFhirEvidenceReportRelatesTo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceReportRelatesToChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportRelatesToChildren(xml : TXmlBuilder; value : TFhirEvidenceReportRelatesTo);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirReportRelationshipTypeEnum); {L735}
  if (value.target is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'targetIdentifier', TFhirIdentifier(value.target))
  else if (value.target is TFhirReference) {2} then
    ComposeReference(xml, 'targetReference', TFhirReference(value.target));
end;

function TFHIRXmlParser.ParseEvidenceReportSection(element : TMXmlElement; path : string) : TFhirEvidenceReportSection;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceReportSection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceReportSectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceReportSectionChild(value : TFhirEvidenceReportSection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'focus') then
        value.focus := ParseCodeableConcept(child, path+'/focus') {L740}
      else if (child.localName = 'focusReference') then
        value.focusReference := ParseReference(child, path+'/focusReference') {L740}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseReference(child, path+'/author')) {L631}
      else if (child.localName = 'text') then
        value.text := ParseNarrative(child, path+'/text') {L740}
      else if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'orderedBy') then
        value.orderedBy := ParseCodeableConcept(child, path+'/orderedBy') {L740}
      else if (child.localName = 'entryClassifier') then
        value.entryClassifierList.Add(ParseCodeableConcept(child, path+'/entryClassifier')) {L631}
      else if (child.localName = 'entryReference') then
        value.entryReferenceList.Add(ParseReference(child, path+'/entryReference')) {L631}
      else if (child.localName = 'emptyReason') then
        value.emptyReason := ParseCodeableConcept(child, path+'/emptyReason') {L740}
      else if (child.localName = 'section') then
        value.sectionList.Add(ParseEvidenceReportSection(child, path+'/section')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportSection(xml : TXmlBuilder; name : String; value : TFhirEvidenceReportSection);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceReportSectionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportSectionChildren(xml : TXmlBuilder; value : TFhirEvidenceReportSection);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'focus', value.focus); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'focusReference', value.focusReference); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeReference(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeNarrative(xml, 'text', value.text); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirListModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'orderedBy', value.orderedBy); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entryClassifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'entryClassifier', value.entryClassifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entryReferenceList.Count - 1 do
      ComposeReference(xml, 'entryReference', value.entryReferenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'emptyReason', value.emptyReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.sectionList.Count - 1 do
      ComposeEvidenceReportSection(xml, 'section', value.sectionList[i]);
end;

function TFHIRXmlParser.ParseEvidenceReport(element : TMXmlElement; path : string) : TFhirEvidenceReport;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceReport.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceReportChild(value : TFhirEvidenceReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'relatedIdentifier') then
        value.relatedIdentifierList.Add(ParseIdentifier(child, path+'/relatedIdentifier')) {L631}
      else if (child.localName = 'citeAs') then
        value.citeAs := ParseReference(child, path+'/citeAs') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseEvidenceReportSubject(child, path+'/subject') {L740}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatesTo') then
        value.relatesToList.Add(ParseEvidenceReportRelatesTo(child, path+'/relatesTo')) {L631}
      else if (child.localName = 'section') then
        value.sectionList.Add(ParseEvidenceReportSection(child, path+'/section')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReport(xml : TXmlBuilder; name : String; value : TFhirEvidenceReport);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceReportChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceReportChildren(xml : TXmlBuilder; value : TFhirEvidenceReport);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.relatedIdentifierList.Count - 1 do
      ComposeIdentifier(xml, 'relatedIdentifier', value.relatedIdentifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'citeAs', value.citeAs); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  ComposeEvidenceReportSubject(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatesToList.Count - 1 do
      ComposeEvidenceReportRelatesTo(xml, 'relatesTo', value.relatesToList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.sectionList.Count - 1 do
      ComposeEvidenceReportSection(xml, 'section', value.sectionList[i]);
end;

{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
function TFHIRXmlParser.ParseEvidenceVariableCharacteristic(element : TMXmlElement; path : string) : TFhirEvidenceVariableCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariableCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableCharacteristicChild(value : TFhirEvidenceVariableCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'definitionReference') then
        value.definition := ParseReference(child, path+'/definitionReference') {L881}
      else if (child.localName = 'definitionCanonical') then
        value.definition := ParseCanonical(child, path+'/definitionCanonical') {L891}
      else if (child.localName = 'definitionCodeableConcept') then
        value.definition := ParseCodeableConcept(child, path+'/definitionCodeableConcept') {L891}
      else if (child.localName = 'definitionExpression') then
        value.definition := ParseExpression(child, path+'/definitionExpression') {L891}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'device') then
        value.device := ParseReference(child, path+'/device') {L740}
      else if (child.localName = 'exclude') then
        value.excludeElement := ParseBoolean(child, path+'/exclude') {L737}
      else if (child.localName = 'timeFromStart') then
        value.timeFromStart := ParseEvidenceVariableCharacteristicTimeFromStart(child, path+'/timeFromStart') {L740}
      else if (child.localName = 'groupMeasure') then
        value.groupMeasureElement := ParseEnum(CODES_TFhirGroupMeasureEnum, SYSTEMS_TFhirGroupMeasureEnum, child, path+'/groupMeasure') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCharacteristic(xml : TXmlBuilder; name : String; value : TFhirEvidenceVariableCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceVariableCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCharacteristicChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (value.definition is TFhirReference) {2} then
    ComposeReference(xml, 'definitionReference', TFhirReference(value.definition))
  else if (value.definition is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'definitionCanonical', TFhirCanonical(value.definition))
  else if (value.definition is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'definitionCodeableConcept', TFhirCodeableConcept(value.definition))
  else if (value.definition is TFhirExpression) {6} then
    ComposeExpression(xml, 'definitionExpression', TFhirExpression(value.definition));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'device', value.device); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'exclude', value.excludeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEvidenceVariableCharacteristicTimeFromStart(xml, 'timeFromStart', value.timeFromStart); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'groupMeasure', value.groupMeasureElement, CODES_TFhirGroupMeasureEnum); {L735}
end;

function TFHIRXmlParser.ParseEvidenceVariableCharacteristicTimeFromStart(element : TMXmlElement; path : string) : TFhirEvidenceVariableCharacteristicTimeFromStart;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariableCharacteristicTimeFromStart.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableCharacteristicTimeFromStartChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableCharacteristicTimeFromStartChild(value : TFhirEvidenceVariableCharacteristicTimeFromStart; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'range') then
        value.range := ParseRange(child, path+'/range') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCharacteristicTimeFromStart(xml : TXmlBuilder; name : String; value : TFhirEvidenceVariableCharacteristicTimeFromStart);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceVariableCharacteristicTimeFromStartChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCharacteristicTimeFromStartChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableCharacteristicTimeFromStart);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'range', value.range); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

function TFHIRXmlParser.ParseEvidenceVariableCategory(element : TMXmlElement; path : string) : TFhirEvidenceVariableCategory;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariableCategory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableCategoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableCategoryChild(value : TFhirEvidenceVariableCategory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCategory(xml : TXmlBuilder; name : String; value : TFhirEvidenceVariableCategory);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceVariableCategoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableCategoryChildren(xml : TXmlBuilder; value : TFhirEvidenceVariableCategory);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value));
end;

function TFHIRXmlParser.ParseEvidenceVariable(element : TMXmlElement; path : string) : TFhirEvidenceVariable;
var
  child : TMXmlElement;
begin
  result := TFhirEvidenceVariable.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseEvidenceVariableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseEvidenceVariableChild(value : TFhirEvidenceVariable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'shortTitle') then
        value.shortTitleElement := ParseString(child, path+'/shortTitle') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'actual') then
        value.actualElement := ParseBoolean(child, path+'/actual') {L737}
      else if (child.localName = 'characteristicCombination') then
        value.characteristicCombinationElement := ParseEnum(CODES_TFhirCharacteristicCombinationEnum, SYSTEMS_TFhirCharacteristicCombinationEnum, child, path+'/characteristicCombination') {L734}
      else if (child.localName = 'characteristic') then
        value.characteristicList.Add(ParseEvidenceVariableCharacteristic(child, path+'/characteristic')) {L631}
      else if (child.localName = 'handling') then
        value.handlingElement := ParseEnum(CODES_TFhirEvidenceVariableHandlingEnum, SYSTEMS_TFhirEvidenceVariableHandlingEnum, child, path+'/handling') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseEvidenceVariableCategory(child, path+'/category')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariable(xml : TXmlBuilder; name : String; value : TFhirEvidenceVariable);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeEvidenceVariableChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeEvidenceVariableChildren(xml : TXmlBuilder; value : TFhirEvidenceVariable);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'shortTitle', value.shortTitleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'actual', value.actualElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'characteristicCombination', value.characteristicCombinationElement, CODES_TFhirCharacteristicCombinationEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeEvidenceVariableCharacteristic(xml, 'characteristic', value.characteristicList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'handling', value.handlingElement, CODES_TFhirEvidenceVariableHandlingEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeEvidenceVariableCategory(xml, 'category', value.categoryList[i]);
end;

{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
function TFHIRXmlParser.ParseExampleScenarioActor(element : TMXmlElement; path : string) : TFhirExampleScenarioActor;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioActor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioActorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioActorChild(value : TFhirExampleScenarioActor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'actorId') then
        value.actorIdElement := ParseString(child, path+'/actorId') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirExampleScenarioActorTypeEnum, SYSTEMS_TFhirExampleScenarioActorTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioActor(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioActor);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioActorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioActorChildren(xml : TXmlBuilder; value : TFhirExampleScenarioActor);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'actorId', value.actorIdElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirExampleScenarioActorTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseExampleScenarioInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstance;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceChild(value : TFhirExampleScenarioInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'resourceId') then
        value.resourceIdElement := ParseString(child, path+'/resourceId') {L737}
      else if (child.localName = 'resourceType') then
        value.resourceTypeElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/resourceType') {L734}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'version') then
        value.versionList.Add(ParseExampleScenarioInstanceVersion(child, path+'/version')) {L631}
      else if (child.localName = 'containedInstance') then
        value.containedInstanceList.Add(ParseExampleScenarioInstanceContainedInstance(child, path+'/containedInstance')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstance(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioInstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioInstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceChildren(xml : TXmlBuilder; value : TFhirExampleScenarioInstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'resourceId', value.resourceIdElement); {L738}
  ComposeEnum(xml, 'resourceType', value.resourceTypeElement, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.versionList.Count - 1 do
      ComposeExampleScenarioInstanceVersion(xml, 'version', value.versionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.containedInstanceList.Count - 1 do
      ComposeExampleScenarioInstanceContainedInstance(xml, 'containedInstance', value.containedInstanceList[i]);
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceVersion(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceVersion;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioInstanceVersion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioInstanceVersionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceVersionChild(value : TFhirExampleScenarioInstanceVersion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'versionId') then
        value.versionIdElement := ParseString(child, path+'/versionId') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceVersion(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioInstanceVersion);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioInstanceVersionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceVersionChildren(xml : TXmlBuilder; value : TFhirExampleScenarioInstanceVersion);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'versionId', value.versionIdElement); {L738}
  ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceContainedInstance(element : TMXmlElement; path : string) : TFhirExampleScenarioInstanceContainedInstance;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioInstanceContainedInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioInstanceContainedInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioInstanceContainedInstanceChild(value : TFhirExampleScenarioInstanceContainedInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'resourceId') then
        value.resourceIdElement := ParseString(child, path+'/resourceId') {L737}
      else if (child.localName = 'versionId') then
        value.versionIdElement := ParseString(child, path+'/versionId') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceContainedInstance(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioInstanceContainedInstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioInstanceContainedInstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioInstanceContainedInstanceChildren(xml : TXmlBuilder; value : TFhirExampleScenarioInstanceContainedInstance);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'resourceId', value.resourceIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'versionId', value.versionIdElement); {L738}
end;

function TFHIRXmlParser.ParseExampleScenarioProcess(element : TMXmlElement; path : string) : TFhirExampleScenarioProcess;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcess.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessChild(value : TFhirExampleScenarioProcess; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'preConditions') then
        value.preConditionsElement := ParseMarkdown(child, path+'/preConditions') {L737}
      else if (child.localName = 'postConditions') then
        value.postConditionsElement := ParseMarkdown(child, path+'/postConditions') {L737}
      else if (child.localName = 'step') then
        value.stepList.Add(ParseExampleScenarioProcessStep(child, path+'/step')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcess(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioProcess);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioProcessChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcess);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'preConditions', value.preConditionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'postConditions', value.postConditionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(xml, 'step', value.stepList[i]);
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStep(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStep;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcessStep.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessStepChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepChild(value : TFhirExampleScenarioProcessStep; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'process') then
        value.processList.Add(ParseExampleScenarioProcess(child, path+'/process')) {L631}
      else if (child.localName = 'pause') then
        value.pauseElement := ParseBoolean(child, path+'/pause') {L737}
      else if (child.localName = 'operation') then
        value.operation := ParseExampleScenarioProcessStepOperation(child, path+'/operation') {L740}
      else if (child.localName = 'alternative') then
        value.alternativeList.Add(ParseExampleScenarioProcessStepAlternative(child, path+'/alternative')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStep(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioProcessStep);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioProcessStepChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcessStep);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processList.Count - 1 do
      ComposeExampleScenarioProcess(xml, 'process', value.processList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'pause', value.pauseElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioProcessStepOperation(xml, 'operation', value.operation); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.alternativeList.Count - 1 do
      ComposeExampleScenarioProcessStepAlternative(xml, 'alternative', value.alternativeList[i]);
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepOperation(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepOperation;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcessStepOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessStepOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepOperationChild(value : TFhirExampleScenarioProcessStepOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        value.numberElement := ParseString(child, path+'/number') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseString(child, path+'/type') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'initiator') then
        value.initiatorElement := ParseString(child, path+'/initiator') {L737}
      else if (child.localName = 'receiver') then
        value.receiverElement := ParseString(child, path+'/receiver') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'initiatorActive') then
        value.initiatorActiveElement := ParseBoolean(child, path+'/initiatorActive') {L737}
      else if (child.localName = 'receiverActive') then
        value.receiverActiveElement := ParseBoolean(child, path+'/receiverActive') {L737}
      else if (child.localName = 'request') then
        value.request := ParseExampleScenarioInstanceContainedInstance(child, path+'/request') {L740}
      else if (child.localName = 'response') then
        value.response := ParseExampleScenarioInstanceContainedInstance(child, path+'/response') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepOperation(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioProcessStepOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioProcessStepOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepOperationChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcessStepOperation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'number', value.numberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'type', value.type_Element); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'initiator', value.initiatorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'receiver', value.receiverElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'initiatorActive', value.initiatorActiveElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'receiverActive', value.receiverActiveElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeExampleScenarioInstanceContainedInstance(xml, 'response', value.response); {L741}
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepAlternative(element : TMXmlElement; path : string) : TFhirExampleScenarioProcessStepAlternative;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenarioProcessStepAlternative.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioProcessStepAlternativeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioProcessStepAlternativeChild(value : TFhirExampleScenarioProcessStepAlternative; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'step') then
        value.stepList.Add(ParseExampleScenarioProcessStep(child, path+'/step')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepAlternative(xml : TXmlBuilder; name : String; value : TFhirExampleScenarioProcessStepAlternative);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioProcessStepAlternativeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioProcessStepAlternativeChildren(xml : TXmlBuilder; value : TFhirExampleScenarioProcessStepAlternative);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.stepList.Count - 1 do
      ComposeExampleScenarioProcessStep(xml, 'step', value.stepList[i]);
end;

function TFHIRXmlParser.ParseExampleScenario(element : TMXmlElement; path : string) : TFhirExampleScenario;
var
  child : TMXmlElement;
begin
  result := TFhirExampleScenario.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExampleScenarioChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExampleScenarioChild(value : TFhirExampleScenario; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'actor') then
        value.actorList.Add(ParseExampleScenarioActor(child, path+'/actor')) {L631}
      else if (child.localName = 'instance') then
        value.instanceList.Add(ParseExampleScenarioInstance(child, path+'/instance')) {L631}
      else if (child.localName = 'process') then
        value.processList.Add(ParseExampleScenarioProcess(child, path+'/process')) {L631}
      else if (child.localName = 'workflow') then
        value.workflowList.Add(ParseCanonical(child, path+'/workflow')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExampleScenario(xml : TXmlBuilder; name : String; value : TFhirExampleScenario);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExampleScenarioChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExampleScenarioChildren(xml : TXmlBuilder; value : TFhirExampleScenario);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actorList.Count - 1 do
      ComposeExampleScenarioActor(xml, 'actor', value.actorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instanceList.Count - 1 do
      ComposeExampleScenarioInstance(xml, 'instance', value.instanceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processList.Count - 1 do
      ComposeExampleScenarioProcess(xml, 'process', value.processList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.workflowList.Count - 1 do
      ComposeCanonical(xml, 'workflow', value.workflowList[i]);
end;

{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
function TFHIRXmlParser.ParseExplanationOfBenefitRelated(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitRelated;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitRelated.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitRelatedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitRelatedChild(value : TFhirExplanationOfBenefitRelated; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'claim') then
        value.claim := ParseReference(child, path+'/claim') {L740}
      else if (child.localName = 'relationship') then
        value.relationship := ParseCodeableConcept(child, path+'/relationship') {L740}
      else if (child.localName = 'reference') then
        value.reference := ParseIdentifier(child, path+'/reference') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitRelated(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitRelated);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitRelatedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitRelatedChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitRelated);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'claim', value.claim); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'relationship', value.relationship); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'reference', value.reference); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPayee(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayee;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitPayee.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitPayeeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPayeeChild(value : TFhirExplanationOfBenefitPayee; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'party') then
        value.party := ParseReference(child, path+'/party') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPayee(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitPayee);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitPayeeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPayeeChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitPayee);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'party', value.party); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitCareTeam(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitCareTeam;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitCareTeam.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitCareTeamChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitCareTeamChild(value : TFhirExplanationOfBenefitCareTeam; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'responsible') then
        value.responsibleElement := ParseBoolean(child, path+'/responsible') {L737}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'qualification') then
        value.qualification := ParseCodeableConcept(child, path+'/qualification') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitCareTeam(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitCareTeam);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitCareTeamChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitCareTeamChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitCareTeam);
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeReference(xml, 'provider', value.provider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'responsible', value.responsibleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'qualification', value.qualification); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitSupportingInfo(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitSupportingInfo;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitSupportingInfo.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitSupportingInfoChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitSupportingInfoChild(value : TFhirExplanationOfBenefitSupportingInfo; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'timingPeriod') then
        value.timing := ParsePeriod(child, path+'/timingPeriod') {L891}
      else if (child.localName = 'timingDate') then
        value.timing := ParseDate(child, path+'/timingDate') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'reason') then
        value.reason := ParseCoding(child, path+'/reason') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitSupportingInfo(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitSupportingInfo);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitSupportingInfoChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitSupportingInfoChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitSupportingInfo);
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDate) {6} then
    ComposeDate(xml, 'timingDate', TFhirDate(value.timing));
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'reason', value.reason); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitDiagnosis(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitDiagnosis;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitDiagnosis.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitDiagnosisChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitDiagnosisChild(value : TFhirExplanationOfBenefitDiagnosis; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'diagnosisCodeableConcept') then
        value.diagnosis := ParseCodeableConcept(child, path+'/diagnosisCodeableConcept') {L891}
      else if (child.localName = 'diagnosisReference') then
        value.diagnosis := ParseReference(child, path+'/diagnosisReference') {L881}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'onAdmission') then
        value.onAdmission := ParseCodeableConcept(child, path+'/onAdmission') {L740}
      else if (child.localName = 'packageCode') then
        value.packageCode := ParseCodeableConcept(child, path+'/packageCode') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitDiagnosis(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitDiagnosis);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitDiagnosisChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitDiagnosisChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitDiagnosis);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (value.diagnosis is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'diagnosisCodeableConcept', TFhirCodeableConcept(value.diagnosis))
  else if (value.diagnosis is TFhirReference) {2} then
    ComposeReference(xml, 'diagnosisReference', TFhirReference(value.diagnosis));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'onAdmission', value.onAdmission); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'packageCode', value.packageCode); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcedure(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcedureChild(value : TFhirExplanationOfBenefitProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'procedureCodeableConcept') then
        value.procedure_ := ParseCodeableConcept(child, path+'/procedureCodeableConcept') {L891}
      else if (child.localName = 'procedureReference') then
        value.procedure_ := ParseReference(child, path+'/procedureReference') {L881}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcedure(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitProcedure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitProcedureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcedureChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitProcedure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (value.procedure_ is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'procedureCodeableConcept', TFhirCodeableConcept(value.procedure_))
  else if (value.procedure_ is TFhirReference) {2} then
    ComposeReference(xml, 'procedureReference', TFhirReference(value.procedure_));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitInsurance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitInsurance;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitInsurance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitInsuranceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitInsuranceChild(value : TFhirExplanationOfBenefitInsurance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'focal') then
        value.focalElement := ParseBoolean(child, path+'/focal') {L737}
      else if (child.localName = 'coverage') then
        value.coverage := ParseReference(child, path+'/coverage') {L740}
      else if (child.localName = 'preAuthRef') then
        value.preAuthRefList.Add(ParseString(child, path+'/preAuthRef')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitInsurance(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitInsurance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitInsuranceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitInsuranceChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitInsurance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'focal', value.focalElement); {L738}
  ComposeReference(xml, 'coverage', value.coverage); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.preAuthRefList.Count - 1 do
      ComposeString(xml, 'preAuthRef', value.preAuthRefList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAccident(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAccident;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAccident.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAccidentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAccidentChild(value : TFhirExplanationOfBenefitAccident; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'locationAddress') then
        value.location := ParseAddress(child, path+'/locationAddress') {L891}
      else if (child.localName = 'locationReference') then
        value.location := ParseReference(child, path+'/locationReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAccident(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitAccident);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitAccidentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAccidentChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAccident);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(value.location));
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItem;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemChild(value : TFhirExplanationOfBenefitItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'careTeamSequence') then
        value.careTeamSequenceList.Add(ParsePositiveInt(child, path+'/careTeamSequence')) {L631}
      else if (child.localName = 'diagnosisSequence') then
        value.diagnosisSequenceList.Add(ParsePositiveInt(child, path+'/diagnosisSequence')) {L631}
      else if (child.localName = 'procedureSequence') then
        value.procedureSequenceList.Add(ParsePositiveInt(child, path+'/procedureSequence')) {L631}
      else if (child.localName = 'informationSequence') then
        value.informationSequenceList.Add(ParsePositiveInt(child, path+'/informationSequence')) {L631}
      else if (child.localName = 'revenue') then
        value.revenue := ParseCodeableConcept(child, path+'/revenue') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'servicedPeriod') then
        value.serviced := ParsePeriod(child, path+'/servicedPeriod') {L891}
      else if (child.localName = 'servicedDate') then
        value.serviced := ParseDate(child, path+'/servicedDate') {L891}
      else if (child.localName = 'locationCodeableConcept') then
        value.location := ParseCodeableConcept(child, path+'/locationCodeableConcept') {L891}
      else if (child.localName = 'locationAddress') then
        value.location := ParseAddress(child, path+'/locationAddress') {L891}
      else if (child.localName = 'locationReference') then
        value.location := ParseReference(child, path+'/locationReference') {L881}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'subSite') then
        value.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')) {L631}
      else if (child.localName = 'encounter') then
        value.encounterList.Add(ParseReference(child, path+'/encounter')) {L631}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseExplanationOfBenefitItemDetail(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItem(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.careTeamSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'careTeamSequence', value.careTeamSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.diagnosisSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'diagnosisSequence', value.diagnosisSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.procedureSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'procedureSequence', value.procedureSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.informationSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'informationSequence', value.informationSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', value.revenue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(value.serviced))
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(value.serviced));
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', value.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.encounterList.Count - 1 do
      ComposeReference(xml, 'encounter', value.encounterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetail(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemAdjudication(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemAdjudication;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItemAdjudication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemAdjudicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemAdjudicationChild(value : TFhirExplanationOfBenefitItemAdjudication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'reason') then
        value.reason := ParseCodeableConcept(child, path+'/reason') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseDecimal(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemAdjudication(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitItemAdjudication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitItemAdjudicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemAdjudicationChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItemAdjudication);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', value.reason); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetailChild(value : TFhirExplanationOfBenefitItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'revenue') then
        value.revenue := ParseCodeableConcept(child, path+'/revenue') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'subDetail') then
        value.subDetailList.Add(ParseExplanationOfBenefitItemDetailSubDetail(child, path+'/subDetail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetail(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitItemDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitItemDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', value.revenue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitItemDetailSubDetail(xml, 'subDetail', value.subDetailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitItemDetailSubDetailChild(value : TFhirExplanationOfBenefitItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'revenue') then
        value.revenue := ParseCodeableConcept(child, path+'/revenue') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'udi') then
        value.udiList.Add(ParseReference(child, path+'/udi')) {L631}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetailSubDetail(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitItemDetailSubDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitItemDetailSubDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'revenue', value.revenue); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.udiList.Count - 1 do
      ComposeReference(xml, 'udi', value.udiList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItem(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItem;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAddItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAddItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemChild(value : TFhirExplanationOfBenefitAddItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'itemSequence') then
        value.itemSequenceList.Add(ParsePositiveInt(child, path+'/itemSequence')) {L631}
      else if (child.localName = 'detailSequence') then
        value.detailSequenceList.Add(ParsePositiveInt(child, path+'/detailSequence')) {L631}
      else if (child.localName = 'subDetailSequence') then
        value.subDetailSequenceList.Add(ParsePositiveInt(child, path+'/subDetailSequence')) {L631}
      else if (child.localName = 'provider') then
        value.providerList.Add(ParseReference(child, path+'/provider')) {L631}
      else if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'programCode') then
        value.programCodeList.Add(ParseCodeableConcept(child, path+'/programCode')) {L631}
      else if (child.localName = 'servicedPeriod') then
        value.serviced := ParsePeriod(child, path+'/servicedPeriod') {L891}
      else if (child.localName = 'servicedDate') then
        value.serviced := ParseDate(child, path+'/servicedDate') {L891}
      else if (child.localName = 'locationCodeableConcept') then
        value.location := ParseCodeableConcept(child, path+'/locationCodeableConcept') {L891}
      else if (child.localName = 'locationAddress') then
        value.location := ParseAddress(child, path+'/locationAddress') {L891}
      else if (child.localName = 'locationReference') then
        value.location := ParseReference(child, path+'/locationReference') {L881}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'subSite') then
        value.subSiteList.Add(ParseCodeableConcept(child, path+'/subSite')) {L631}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParseExplanationOfBenefitAddItemDetail(child, path+'/detail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItem(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitAddItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitAddItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAddItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'itemSequence', value.itemSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'detailSequence', value.detailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subDetailSequenceList.Count - 1 do
      ComposePositiveInt(xml, 'subDetailSequence', value.subDetailSequenceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.providerList.Count - 1 do
      ComposeReference(xml, 'provider', value.providerList[i]);
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'programCode', value.programCodeList[i]);
  if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirPeriod) {6} then
    ComposePeriod(xml, 'servicedPeriod', TFhirPeriod(value.serviced))
  else if (SummaryOption in [soFull, soData]) and (value.serviced is TFhirDate) {6} then
    ComposeDate(xml, 'servicedDate', TFhirDate(value.serviced));
  if (SummaryOption in [soFull, soData]) and (value.location is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'locationCodeableConcept', TFhirCodeableConcept(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirAddress) {6} then
    ComposeAddress(xml, 'locationAddress', TFhirAddress(value.location))
  else if (SummaryOption in [soFull, soData]) and (value.location is TFhirReference) {2} then
    ComposeReference(xml, 'locationReference', TFhirReference(value.location));
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subSiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'subSite', value.subSiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetail(xml, 'detail', value.detailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAddItemDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAddItemDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetailChild(value : TFhirExplanationOfBenefitAddItemDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'subDetail') then
        value.subDetailList.Add(ParseExplanationOfBenefitAddItemDetailSubDetail(child, path+'/subDetail')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetail(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitAddItemDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitAddItemDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAddItemDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subDetailList.Count - 1 do
      ComposeExplanationOfBenefitAddItemDetailSubDetail(xml, 'subDetail', value.subDetailList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetailSubDetail(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitAddItemDetailSubDetail;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitAddItemDetailSubDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitAddItemDetailSubDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitAddItemDetailSubDetailChild(value : TFhirExplanationOfBenefitAddItemDetailSubDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productOrService') then
        value.productOrService := ParseCodeableConcept(child, path+'/productOrService') {L740}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseCodeableConcept(child, path+'/modifier')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'unitPrice') then
        value.unitPrice := ParseMoney(child, path+'/unitPrice') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'net') then
        value.net := ParseMoney(child, path+'/net') {L740}
      else if (child.localName = 'noteNumber') then
        value.noteNumberList.Add(ParsePositiveInt(child, path+'/noteNumber')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetailSubDetail(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitAddItemDetailSubDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitAddItemDetailSubDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitAddItemDetailSubDetailChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitAddItemDetailSubDetail);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'productOrService', value.productOrService); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'modifier', value.modifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'unitPrice', value.unitPrice); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'net', value.net); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteNumberList.Count - 1 do
      ComposePositiveInt(xml, 'noteNumber', value.noteNumberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitTotal(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitTotal;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitTotal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitTotalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitTotalChild(value : TFhirExplanationOfBenefitTotal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitTotal(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitTotal);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitTotalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitTotalChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitTotal);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeMoney(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPayment(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitPayment;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitPayment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitPaymentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitPaymentChild(value : TFhirExplanationOfBenefitPayment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'adjustment') then
        value.adjustment := ParseMoney(child, path+'/adjustment') {L740}
      else if (child.localName = 'adjustmentReason') then
        value.adjustmentReason := ParseCodeableConcept(child, path+'/adjustmentReason') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPayment(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitPayment);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitPaymentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitPaymentChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitPayment);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'adjustment', value.adjustment); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'adjustmentReason', value.adjustmentReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcessNote(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitProcessNote;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitProcessNote.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitProcessNoteChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitProcessNoteChild(value : TFhirExplanationOfBenefitProcessNote; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'number') then
        value.numberElement := ParsePositiveInt(child, path+'/number') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcessNote(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitProcessNote);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitProcessNoteChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitProcessNoteChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitProcessNote);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'number', value.numberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirNoteTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'language', value.language); {L741}
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalance(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalance;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitBenefitBalance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitBenefitBalanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalanceChild(value : TFhirExplanationOfBenefitBenefitBalance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'excluded') then
        value.excludedElement := ParseBoolean(child, path+'/excluded') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'network') then
        value.network := ParseCodeableConcept(child, path+'/network') {L740}
      else if (child.localName = 'unit') then
        value.unit_ := ParseCodeableConcept(child, path+'/unit') {L740}
      else if (child.localName = 'term') then
        value.term := ParseCodeableConcept(child, path+'/term') {L740}
      else if (child.localName = 'financial') then
        value.financialList.Add(ParseExplanationOfBenefitBenefitBalanceFinancial(child, path+'/financial')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalance(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitBenefitBalance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitBenefitBalanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalanceChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitBenefitBalance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'excluded', value.excludedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'network', value.network); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unit', value.unit_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'term', value.term); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.financialList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalanceFinancial(xml, 'financial', value.financialList[i]);
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalanceFinancial(element : TMXmlElement; path : string) : TFhirExplanationOfBenefitBenefitBalanceFinancial;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefitBenefitBalanceFinancial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitBenefitBalanceFinancialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitBenefitBalanceFinancialChild(value : TFhirExplanationOfBenefitBenefitBalanceFinancial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'allowedUnsignedInt') then
        value.allowed := ParseUnsignedInt(child, path+'/allowedUnsignedInt') {L891}
      else if (child.localName = 'allowedMoney') then
        value.allowed := ParseMoney(child, path+'/allowedMoney') {L891}
      else if (child.localName = 'allowedString') then
        value.allowed := ParseString(child, path+'/allowedString') {L891}
      else if (child.localName = 'usedUnsignedInt') then
        value.used := ParseUnsignedInt(child, path+'/usedUnsignedInt') {L891}
      else if (child.localName = 'usedMoney') then
        value.used := ParseMoney(child, path+'/usedMoney') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalanceFinancial(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitBenefitBalanceFinancialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitBenefitBalanceFinancialChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefitBenefitBalanceFinancial);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'allowedUnsignedInt', TFhirUnsignedInt(value.allowed))
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirMoney) {6} then
    ComposeMoney(xml, 'allowedMoney', TFhirMoney(value.allowed))
  else if (SummaryOption in [soFull, soData]) and (value.allowed is TFhirString) {6} then
    ComposeString(xml, 'allowedString', TFhirString(value.allowed));
  if (SummaryOption in [soFull, soData]) and (value.used is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'usedUnsignedInt', TFhirUnsignedInt(value.used))
  else if (SummaryOption in [soFull, soData]) and (value.used is TFhirMoney) {6} then
    ComposeMoney(xml, 'usedMoney', TFhirMoney(value.used));
end;

function TFHIRXmlParser.ParseExplanationOfBenefit(element : TMXmlElement; path : string) : TFhirExplanationOfBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirExplanationOfBenefit.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseExplanationOfBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseExplanationOfBenefitChild(value : TFhirExplanationOfBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirExplanationOfBenefitStatusEnum, SYSTEMS_TFhirExplanationOfBenefitStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subType') then
        value.subType := ParseCodeableConcept(child, path+'/subType') {L740}
      else if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirUseEnum, SYSTEMS_TFhirUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'billablePeriod') then
        value.billablePeriod := ParsePeriod(child, path+'/billablePeriod') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'enterer') then
        value.enterer := ParseReference(child, path+'/enterer') {L740}
      else if (child.localName = 'insurer') then
        value.insurer := ParseReference(child, path+'/insurer') {L740}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'priority') then
        value.priority := ParseCodeableConcept(child, path+'/priority') {L740}
      else if (child.localName = 'fundsReserveRequested') then
        value.fundsReserveRequested := ParseCodeableConcept(child, path+'/fundsReserveRequested') {L740}
      else if (child.localName = 'fundsReserve') then
        value.fundsReserve := ParseCodeableConcept(child, path+'/fundsReserve') {L740}
      else if (child.localName = 'related') then
        value.relatedList.Add(ParseExplanationOfBenefitRelated(child, path+'/related')) {L631}
      else if (child.localName = 'prescription') then
        value.prescription := ParseReference(child, path+'/prescription') {L740}
      else if (child.localName = 'originalPrescription') then
        value.originalPrescription := ParseReference(child, path+'/originalPrescription') {L740}
      else if (child.localName = 'payee') then
        value.payee := ParseExplanationOfBenefitPayee(child, path+'/payee') {L740}
      else if (child.localName = 'referral') then
        value.referral := ParseReference(child, path+'/referral') {L740}
      else if (child.localName = 'facility') then
        value.facility := ParseReference(child, path+'/facility') {L740}
      else if (child.localName = 'claim') then
        value.claim := ParseReference(child, path+'/claim') {L740}
      else if (child.localName = 'claimResponse') then
        value.claimResponse := ParseReference(child, path+'/claimResponse') {L740}
      else if (child.localName = 'outcome') then
        value.outcomeElement := ParseEnum(CODES_TFhirClaimProcessingCodesEnum, SYSTEMS_TFhirClaimProcessingCodesEnum, child, path+'/outcome') {L734}
      else if (child.localName = 'disposition') then
        value.dispositionElement := ParseString(child, path+'/disposition') {L737}
      else if (child.localName = 'preAuthRef') then
        value.preAuthRefList.Add(ParseString(child, path+'/preAuthRef')) {L631}
      else if (child.localName = 'preAuthRefPeriod') then
        value.preAuthRefPeriodList.Add(ParsePeriod(child, path+'/preAuthRefPeriod')) {L631}
      else if (child.localName = 'careTeam') then
        value.careTeamList.Add(ParseExplanationOfBenefitCareTeam(child, path+'/careTeam')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseExplanationOfBenefitSupportingInfo(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'diagnosis') then
        value.diagnosisList.Add(ParseExplanationOfBenefitDiagnosis(child, path+'/diagnosis')) {L631}
      else if (child.localName = 'procedure') then
        value.procedure_List.Add(ParseExplanationOfBenefitProcedure(child, path+'/procedure')) {L631}
      else if (child.localName = 'precedence') then
        value.precedenceElement := ParsePositiveInt(child, path+'/precedence') {L737}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseExplanationOfBenefitInsurance(child, path+'/insurance')) {L631}
      else if (child.localName = 'accident') then
        value.accident := ParseExplanationOfBenefitAccident(child, path+'/accident') {L740}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseExplanationOfBenefitItem(child, path+'/item')) {L631}
      else if (child.localName = 'addItem') then
        value.addItemList.Add(ParseExplanationOfBenefitAddItem(child, path+'/addItem')) {L631}
      else if (child.localName = 'adjudication') then
        value.adjudicationList.Add(ParseExplanationOfBenefitItemAdjudication(child, path+'/adjudication')) {L631}
      else if (child.localName = 'total') then
        value.totalList.Add(ParseExplanationOfBenefitTotal(child, path+'/total')) {L631}
      else if (child.localName = 'payment') then
        value.payment := ParseExplanationOfBenefitPayment(child, path+'/payment') {L740}
      else if (child.localName = 'formCode') then
        value.formCode := ParseCodeableConcept(child, path+'/formCode') {L740}
      else if (child.localName = 'form') then
        value.form := ParseAttachment(child, path+'/form') {L740}
      else if (child.localName = 'processNote') then
        value.processNoteList.Add(ParseExplanationOfBenefitProcessNote(child, path+'/processNote')) {L631}
      else if (child.localName = 'benefitPeriod') then
        value.benefitPeriod := ParsePeriod(child, path+'/benefitPeriod') {L740}
      else if (child.localName = 'benefitBalance') then
        value.benefitBalanceList.Add(ParseExplanationOfBenefitBenefitBalance(child, path+'/benefitBalance')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefit(xml : TXmlBuilder; name : String; value : TFhirExplanationOfBenefit);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeExplanationOfBenefitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeExplanationOfBenefitChildren(xml : TXmlBuilder; value : TFhirExplanationOfBenefit);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirExplanationOfBenefitStatusEnum); {L735}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'subType', value.subType); {L741}
  ComposeEnum(xml, 'use', value.useElement, CODES_TFhirUseEnum); {L735}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'billablePeriod', value.billablePeriod); {L741}
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'enterer', value.enterer); {L741}
  ComposeReference(xml, 'insurer', value.insurer); {L741}
  ComposeReference(xml, 'provider', value.provider); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'priority', value.priority); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'fundsReserveRequested', value.fundsReserveRequested); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'fundsReserve', value.fundsReserve); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedList.Count - 1 do
      ComposeExplanationOfBenefitRelated(xml, 'related', value.relatedList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'prescription', value.prescription); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'originalPrescription', value.originalPrescription); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitPayee(xml, 'payee', value.payee); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'referral', value.referral); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'facility', value.facility); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'claim', value.claim); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'claimResponse', value.claimResponse); {L741}
  ComposeEnum(xml, 'outcome', value.outcomeElement, CODES_TFhirClaimProcessingCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'disposition', value.dispositionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.preAuthRefList.Count - 1 do
      ComposeString(xml, 'preAuthRef', value.preAuthRefList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.preAuthRefPeriodList.Count - 1 do
      ComposePeriod(xml, 'preAuthRefPeriod', value.preAuthRefPeriodList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.careTeamList.Count - 1 do
      ComposeExplanationOfBenefitCareTeam(xml, 'careTeam', value.careTeamList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeExplanationOfBenefitSupportingInfo(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.diagnosisList.Count - 1 do
      ComposeExplanationOfBenefitDiagnosis(xml, 'diagnosis', value.diagnosisList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.procedure_List.Count - 1 do
      ComposeExplanationOfBenefitProcedure(xml, 'procedure', value.procedure_List[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'precedence', value.precedenceElement); {L738}
  for i := 0 to value.insuranceList.Count - 1 do
      ComposeExplanationOfBenefitInsurance(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitAccident(xml, 'accident', value.accident); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeExplanationOfBenefitItem(xml, 'item', value.itemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addItemList.Count - 1 do
      ComposeExplanationOfBenefitAddItem(xml, 'addItem', value.addItemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.adjudicationList.Count - 1 do
      ComposeExplanationOfBenefitItemAdjudication(xml, 'adjudication', value.adjudicationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.totalList.Count - 1 do
      ComposeExplanationOfBenefitTotal(xml, 'total', value.totalList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeExplanationOfBenefitPayment(xml, 'payment', value.payment); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'formCode', value.formCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeAttachment(xml, 'form', value.form); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processNoteList.Count - 1 do
      ComposeExplanationOfBenefitProcessNote(xml, 'processNote', value.processNoteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'benefitPeriod', value.benefitPeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.benefitBalanceList.Count - 1 do
      ComposeExplanationOfBenefitBenefitBalance(xml, 'benefitBalance', value.benefitBalanceList[i]);
end;

{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
function TFHIRXmlParser.ParseFamilyMemberHistoryCondition(element : TMXmlElement; path : string) : TFhirFamilyMemberHistoryCondition;
var
  child : TMXmlElement;
begin
  result := TFhirFamilyMemberHistoryCondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFamilyMemberHistoryConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFamilyMemberHistoryConditionChild(value : TFhirFamilyMemberHistoryCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'outcome') then
        value.outcome := ParseCodeableConcept(child, path+'/outcome') {L740}
      else if (child.localName = 'contributedToDeath') then
        value.contributedToDeathElement := ParseBoolean(child, path+'/contributedToDeath') {L737}
      else if (child.localName = 'onsetAge') then
        value.onset := ParseAge(child, path+'/onsetAge') {L891}
      else if (child.localName = 'onsetRange') then
        value.onset := ParseRange(child, path+'/onsetRange') {L891}
      else if (child.localName = 'onsetPeriod') then
        value.onset := ParsePeriod(child, path+'/onsetPeriod') {L891}
      else if (child.localName = 'onsetString') then
        value.onset := ParseString(child, path+'/onsetString') {L891}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryCondition(xml : TXmlBuilder; name : String; value : TFhirFamilyMemberHistoryCondition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeFamilyMemberHistoryConditionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryConditionChildren(xml : TXmlBuilder; value : TFhirFamilyMemberHistoryCondition);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'outcome', value.outcome); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'contributedToDeath', value.contributedToDeathElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.onset is TFhirAge) {6} then
    ComposeAge(xml, 'onsetAge', TFhirAge(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirRange) {6} then
    ComposeRange(xml, 'onsetRange', TFhirRange(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirPeriod) {6} then
    ComposePeriod(xml, 'onsetPeriod', TFhirPeriod(value.onset))
  else if (SummaryOption in [soFull, soData]) and (value.onset is TFhirString) {6} then
    ComposeString(xml, 'onsetString', TFhirString(value.onset));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

function TFHIRXmlParser.ParseFamilyMemberHistoryProcedure(element : TMXmlElement; path : string) : TFhirFamilyMemberHistoryProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirFamilyMemberHistoryProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFamilyMemberHistoryProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFamilyMemberHistoryProcedureChild(value : TFhirFamilyMemberHistoryProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'outcome') then
        value.outcome := ParseCodeableConcept(child, path+'/outcome') {L740}
      else if (child.localName = 'contributedToDeath') then
        value.contributedToDeathElement := ParseBoolean(child, path+'/contributedToDeath') {L737}
      else if (child.localName = 'performedAge') then
        value.performed := ParseAge(child, path+'/performedAge') {L891}
      else if (child.localName = 'performedRange') then
        value.performed := ParseRange(child, path+'/performedRange') {L891}
      else if (child.localName = 'performedPeriod') then
        value.performed := ParsePeriod(child, path+'/performedPeriod') {L891}
      else if (child.localName = 'performedString') then
        value.performed := ParseString(child, path+'/performedString') {L891}
      else if (child.localName = 'performedDateTime') then
        value.performed := ParseDateTime(child, path+'/performedDateTime') {L891}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryProcedure(xml : TXmlBuilder; name : String; value : TFhirFamilyMemberHistoryProcedure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeFamilyMemberHistoryProcedureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryProcedureChildren(xml : TXmlBuilder; value : TFhirFamilyMemberHistoryProcedure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'outcome', value.outcome); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'contributedToDeath', value.contributedToDeathElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.performed is TFhirAge) {6} then
    ComposeAge(xml, 'performedAge', TFhirAge(value.performed))
  else if (SummaryOption in [soFull, soData]) and (value.performed is TFhirRange) {6} then
    ComposeRange(xml, 'performedRange', TFhirRange(value.performed))
  else if (SummaryOption in [soFull, soData]) and (value.performed is TFhirPeriod) {6} then
    ComposePeriod(xml, 'performedPeriod', TFhirPeriod(value.performed))
  else if (SummaryOption in [soFull, soData]) and (value.performed is TFhirString) {6} then
    ComposeString(xml, 'performedString', TFhirString(value.performed))
  else if (SummaryOption in [soFull, soData]) and (value.performed is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'performedDateTime', TFhirDateTime(value.performed));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

function TFHIRXmlParser.ParseFamilyMemberHistory(element : TMXmlElement; path : string) : TFhirFamilyMemberHistory;
var
  child : TMXmlElement;
begin
  result := TFhirFamilyMemberHistory.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFamilyMemberHistoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFamilyMemberHistoryChild(value : TFhirFamilyMemberHistory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFamilyHistoryStatusEnum, SYSTEMS_TFhirFamilyHistoryStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'dataAbsentReason') then
        value.dataAbsentReason := ParseCodeableConcept(child, path+'/dataAbsentReason') {L740}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'relationship') then
        value.relationship := ParseCodeableConcept(child, path+'/relationship') {L740}
      else if (child.localName = 'sex') then
        value.sex := ParseCodeableConcept(child, path+'/sex') {L740}
      else if (child.localName = 'bornPeriod') then
        value.born := ParsePeriod(child, path+'/bornPeriod') {L891}
      else if (child.localName = 'bornDate') then
        value.born := ParseDate(child, path+'/bornDate') {L891}
      else if (child.localName = 'bornString') then
        value.born := ParseString(child, path+'/bornString') {L891}
      else if (child.localName = 'ageAge') then
        value.age := ParseAge(child, path+'/ageAge') {L891}
      else if (child.localName = 'ageRange') then
        value.age := ParseRange(child, path+'/ageRange') {L891}
      else if (child.localName = 'ageString') then
        value.age := ParseString(child, path+'/ageString') {L891}
      else if (child.localName = 'estimatedAge') then
        value.estimatedAgeElement := ParseBoolean(child, path+'/estimatedAge') {L737}
      else if (child.localName = 'deceasedAge') then
        value.deceased := ParseAge(child, path+'/deceasedAge') {L891}
      else if (child.localName = 'deceasedRange') then
        value.deceased := ParseRange(child, path+'/deceasedRange') {L891}
      else if (child.localName = 'deceasedBoolean') then
        value.deceased := ParseBoolean(child, path+'/deceasedBoolean') {L891}
      else if (child.localName = 'deceasedDate') then
        value.deceased := ParseDate(child, path+'/deceasedDate') {L891}
      else if (child.localName = 'deceasedString') then
        value.deceased := ParseString(child, path+'/deceasedString') {L891}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'condition') then
        value.conditionList.Add(ParseFamilyMemberHistoryCondition(child, path+'/condition')) {L631}
      else if (child.localName = 'procedure') then
        value.procedure_List.Add(ParseFamilyMemberHistoryProcedure(child, path+'/procedure')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistory(xml : TXmlBuilder; name : String; value : TFhirFamilyMemberHistory);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeFamilyMemberHistoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeFamilyMemberHistoryChildren(xml : TXmlBuilder; value : TFhirFamilyMemberHistory);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFamilyHistoryStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'dataAbsentReason', value.dataAbsentReason); {L741}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeCodeableConcept(xml, 'relationship', value.relationship); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'sex', value.sex); {L741}
  if (SummaryOption in [soFull, soData]) and (value.born is TFhirPeriod) {6} then
    ComposePeriod(xml, 'bornPeriod', TFhirPeriod(value.born))
  else if (SummaryOption in [soFull, soData]) and (value.born is TFhirDate) {6} then
    ComposeDate(xml, 'bornDate', TFhirDate(value.born))
  else if (SummaryOption in [soFull, soData]) and (value.born is TFhirString) {6} then
    ComposeString(xml, 'bornString', TFhirString(value.born));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirAge) {6} then
    ComposeAge(xml, 'ageAge', TFhirAge(value.age))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirRange) {6} then
    ComposeRange(xml, 'ageRange', TFhirRange(value.age))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.age is TFhirString) {6} then
    ComposeString(xml, 'ageString', TFhirString(value.age));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'estimatedAge', value.estimatedAgeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirAge) {6} then
    ComposeAge(xml, 'deceasedAge', TFhirAge(value.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirRange) {6} then
    ComposeRange(xml, 'deceasedRange', TFhirRange(value.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'deceasedBoolean', TFhirBoolean(value.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirDate) {6} then
    ComposeDate(xml, 'deceasedDate', TFhirDate(value.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirString) {6} then
    ComposeString(xml, 'deceasedString', TFhirString(value.deceased));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conditionList.Count - 1 do
      ComposeFamilyMemberHistoryCondition(xml, 'condition', value.conditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.procedure_List.Count - 1 do
      ComposeFamilyMemberHistoryProcedure(xml, 'procedure', value.procedure_List[i]);
end;

{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
function TFHIRXmlParser.ParseFlag(element : TMXmlElement; path : string) : TFhirFlag;
var
  child : TMXmlElement;
begin
  result := TFhirFlag.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseFlagChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseFlagChild(value : TFhirFlag; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFlagStatusEnum, SYSTEMS_TFhirFlagStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeFlag(xml : TXmlBuilder; name : String; value : TFhirFlag);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeFlagChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeFlagChildren(xml : TXmlBuilder; value : TFhirFlag);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFlagStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
end;

{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
function TFHIRXmlParser.ParseGoalTarget(element : TMXmlElement; path : string) : TFhirGoalTarget;
var
  child : TMXmlElement;
begin
  result := TFhirGoalTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGoalTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGoalTargetChild(value : TFhirGoalTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'measure') then
        value.measure := ParseCodeableConcept(child, path+'/measure') {L740}
      else if (child.localName = 'detailQuantity') then
        value.detail := ParseQuantity(child, path+'/detailQuantity') {L891}
      else if (child.localName = 'detailRange') then
        value.detail := ParseRange(child, path+'/detailRange') {L891}
      else if (child.localName = 'detailCodeableConcept') then
        value.detail := ParseCodeableConcept(child, path+'/detailCodeableConcept') {L891}
      else if (child.localName = 'detailRatio') then
        value.detail := ParseRatio(child, path+'/detailRatio') {L891}
      else if (child.localName = 'detailString') then
        value.detail := ParseString(child, path+'/detailString') {L891}
      else if (child.localName = 'detailBoolean') then
        value.detail := ParseBoolean(child, path+'/detailBoolean') {L891}
      else if (child.localName = 'detailInteger') then
        value.detail := ParseInteger(child, path+'/detailInteger') {L891}
      else if (child.localName = 'dueDuration') then
        value.due := ParseDuration(child, path+'/dueDuration') {L891}
      else if (child.localName = 'dueDate') then
        value.due := ParseDate(child, path+'/dueDate') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGoalTarget(xml : TXmlBuilder; name : String; value : TFhirGoalTarget);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGoalTargetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGoalTargetChildren(xml : TXmlBuilder; value : TFhirGoalTarget);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'measure', value.measure); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'detailQuantity', TFhirQuantity(value.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirRange) {6} then
    ComposeRange(xml, 'detailRange', TFhirRange(value.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'detailCodeableConcept', TFhirCodeableConcept(value.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirRatio) {6} then
    ComposeRatio(xml, 'detailRatio', TFhirRatio(value.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirString) {6} then
    ComposeString(xml, 'detailString', TFhirString(value.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'detailBoolean', TFhirBoolean(value.detail))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.detail is TFhirInteger) {6} then
    ComposeInteger(xml, 'detailInteger', TFhirInteger(value.detail));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.due is TFhirDuration) {6} then
    ComposeDuration(xml, 'dueDuration', TFhirDuration(value.due))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.due is TFhirDate) {6} then
    ComposeDate(xml, 'dueDate', TFhirDate(value.due));
end;

function TFHIRXmlParser.ParseGoal(element : TMXmlElement; path : string) : TFhirGoal;
var
  child : TMXmlElement;
begin
  result := TFhirGoal.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGoalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGoalChild(value : TFhirGoal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'lifecycleStatus') then
        value.lifecycleStatusElement := ParseEnum(CODES_TFhirGoalLifecycleStatusEnum, SYSTEMS_TFhirGoalLifecycleStatusEnum, child, path+'/lifecycleStatus') {L734}
      else if (child.localName = 'achievementStatus') then
        value.achievementStatus := ParseCodeableConcept(child, path+'/achievementStatus') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'continuous') then
        value.continuousElement := ParseBoolean(child, path+'/continuous') {L737}
      else if (child.localName = 'priority') then
        value.priority := ParseCodeableConcept(child, path+'/priority') {L740}
      else if (child.localName = 'description') then
        value.description := ParseCodeableConcept(child, path+'/description') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'startCodeableConcept') then
        value.start := ParseCodeableConcept(child, path+'/startCodeableConcept') {L891}
      else if (child.localName = 'startDate') then
        value.start := ParseDate(child, path+'/startDate') {L891}
      else if (child.localName = 'target') then
        value.targetList.Add(ParseGoalTarget(child, path+'/target')) {L631}
      else if (child.localName = 'statusDate') then
        value.statusDateElement := ParseDate(child, path+'/statusDate') {L737}
      else if (child.localName = 'statusReason') then
        value.statusReasonElement := ParseString(child, path+'/statusReason') {L737}
      else if (child.localName = 'expressedBy') then
        value.expressedBy := ParseReference(child, path+'/expressedBy') {L740}
      else if (child.localName = 'addresses') then
        value.addressesList.Add(ParseReference(child, path+'/addresses')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'outcome') then
        value.outcomeList.Add(ParseCodeableReference(child, path+'/outcome')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGoal(xml : TXmlBuilder; name : String; value : TFhirGoal);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGoalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGoalChildren(xml : TXmlBuilder; value : TFhirGoal);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'lifecycleStatus', value.lifecycleStatusElement, CODES_TFhirGoalLifecycleStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'achievementStatus', value.achievementStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'continuous', value.continuousElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'priority', value.priority); {L741}
  ComposeCodeableConcept(xml, 'description', value.description); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.start is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'startCodeableConcept', TFhirCodeableConcept(value.start))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.start is TFhirDate) {6} then
    ComposeDate(xml, 'startDate', TFhirDate(value.start));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposeGoalTarget(xml, 'target', value.targetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'statusDate', value.statusDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'statusReason', value.statusReasonElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'expressedBy', value.expressedBy); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addressesList.Count - 1 do
      ComposeReference(xml, 'addresses', value.addressesList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.outcomeList.Count - 1 do
      ComposeCodeableReference(xml, 'outcome', value.outcomeList[i]);
end;

{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
function TFHIRXmlParser.ParseGraphDefinitionLink(element : TMXmlElement; path : string) : TFhirGraphDefinitionLink;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinitionLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkChild(value : TFhirGraphDefinitionLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'sliceName') then
        value.sliceNameElement := ParseString(child, path+'/sliceName') {L737}
      else if (child.localName = 'min') then
        value.minElement := ParseInteger(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'target') then
        value.targetList.Add(ParseGraphDefinitionLinkTarget(child, path+'/target')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLink(xml : TXmlBuilder; name : String; value : TFhirGraphDefinitionLink);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGraphDefinitionLinkChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkChildren(xml : TXmlBuilder; value : TFhirGraphDefinitionLink);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sliceName', value.sliceNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'min', value.minElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'max', value.maxElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposeGraphDefinitionLinkTarget(xml, 'target', value.targetList[i]);
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTarget(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTarget;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinitionLinkTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionLinkTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTargetChild(value : TFhirGraphDefinitionLinkTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'params') then
        value.paramsElement := ParseString(child, path+'/params') {L737}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if (child.localName = 'compartment') then
        value.compartmentList.Add(ParseGraphDefinitionLinkTargetCompartment(child, path+'/compartment')) {L631}
      else if (child.localName = 'link') then
        value.link_List.Add(ParseGraphDefinitionLink(child, path+'/link')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTarget(xml : TXmlBuilder; name : String; value : TFhirGraphDefinitionLinkTarget);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGraphDefinitionLinkTargetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTargetChildren(xml : TXmlBuilder; value : TFhirGraphDefinitionLinkTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'params', value.paramsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.compartmentList.Count - 1 do
      ComposeGraphDefinitionLinkTargetCompartment(xml, 'compartment', value.compartmentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposeGraphDefinitionLink(xml, 'link', value.link_List[i]);
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTargetCompartment(element : TMXmlElement; path : string) : TFhirGraphDefinitionLinkTargetCompartment;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinitionLinkTargetCompartment.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionLinkTargetCompartmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionLinkTargetCompartmentChild(value : TFhirGraphDefinitionLinkTargetCompartment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirGraphCompartmentUseEnum, SYSTEMS_TFhirGraphCompartmentUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirCompartmentTypeEnum, SYSTEMS_TFhirCompartmentTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'rule') then
        value.ruleElement := ParseEnum(CODES_TFhirGraphCompartmentRuleEnum, SYSTEMS_TFhirGraphCompartmentRuleEnum, child, path+'/rule') {L734}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTargetCompartment(xml : TXmlBuilder; name : String; value : TFhirGraphDefinitionLinkTargetCompartment);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGraphDefinitionLinkTargetCompartmentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionLinkTargetCompartmentChildren(xml : TXmlBuilder; value : TFhirGraphDefinitionLinkTargetCompartment);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'use', value.useElement, CODES_TFhirGraphCompartmentUseEnum); {L735}
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirCompartmentTypeEnum); {L735}
  ComposeEnum(xml, 'rule', value.ruleElement, CODES_TFhirGraphCompartmentRuleEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseGraphDefinition(element : TMXmlElement; path : string) : TFhirGraphDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirGraphDefinition.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGraphDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGraphDefinitionChild(value : TFhirGraphDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'start') then
        value.startElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/start') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if (child.localName = 'link') then
        value.link_List.Add(ParseGraphDefinitionLink(child, path+'/link')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinition(xml : TXmlBuilder; name : String; value : TFhirGraphDefinition);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGraphDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGraphDefinitionChildren(xml : TXmlBuilder; value : TFhirGraphDefinition);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  ComposeEnum(xml, 'start', value.startElement, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposeGraphDefinitionLink(xml, 'link', value.link_List[i]);
end;

{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
function TFHIRXmlParser.ParseGroupCharacteristic(element : TMXmlElement; path : string) : TFhirGroupCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirGroupCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGroupCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGroupCharacteristicChild(value : TFhirGroupCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'exclude') then
        value.excludeElement := ParseBoolean(child, path+'/exclude') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGroupCharacteristic(xml : TXmlBuilder; name : String; value : TFhirGroupCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGroupCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGroupCharacteristicChildren(xml : TXmlBuilder; value : TFhirGroupCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (value.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
  ComposeBoolean(xml, 'exclude', value.excludeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseGroupMember(element : TMXmlElement; path : string) : TFhirGroupMember;
var
  child : TMXmlElement;
begin
  result := TFhirGroupMember.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGroupMemberChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGroupMemberChild(value : TFhirGroupMember; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'entity') then
        value.entity := ParseReference(child, path+'/entity') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'inactive') then
        value.inactiveElement := ParseBoolean(child, path+'/inactive') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGroupMember(xml : TXmlBuilder; name : String; value : TFhirGroupMember);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGroupMemberChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGroupMemberChildren(xml : TXmlBuilder; value : TFhirGroupMember);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'entity', value.entity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'inactive', value.inactiveElement); {L738}
end;

function TFHIRXmlParser.ParseGroup(element : TMXmlElement; path : string) : TFhirGroup;
var
  child : TMXmlElement;
begin
  result := TFhirGroup.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGroupChild(value : TFhirGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirGroupTypeEnum, SYSTEMS_TFhirGroupTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'actual') then
        value.actualElement := ParseBoolean(child, path+'/actual') {L737}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'quantity') then
        value.quantityElement := ParseUnsignedInt(child, path+'/quantity') {L737}
      else if (child.localName = 'managingEntity') then
        value.managingEntity := ParseReference(child, path+'/managingEntity') {L740}
      else if (child.localName = 'characteristic') then
        value.characteristicList.Add(ParseGroupCharacteristic(child, path+'/characteristic')) {L631}
      else if (child.localName = 'member') then
        value.memberList.Add(ParseGroupMember(child, path+'/member')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGroup(xml : TXmlBuilder; name : String; value : TFhirGroup);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGroupChildren(xml : TXmlBuilder; value : TFhirGroup);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirGroupTypeEnum); {L735}
  ComposeBoolean(xml, 'actual', value.actualElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'quantity', value.quantityElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'managingEntity', value.managingEntity); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeGroupCharacteristic(xml, 'characteristic', value.characteristicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.memberList.Count - 1 do
      ComposeGroupMember(xml, 'member', value.memberList[i]);
end;

{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
function TFHIRXmlParser.ParseGuidanceResponse(element : TMXmlElement; path : string) : TFhirGuidanceResponse;
var
  child : TMXmlElement;
begin
  result := TFhirGuidanceResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseGuidanceResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseGuidanceResponseChild(value : TFhirGuidanceResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'requestIdentifier') then
        value.requestIdentifier := ParseIdentifier(child, path+'/requestIdentifier') {L740}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'moduleCanonical') then
        value.module := ParseCanonical(child, path+'/moduleCanonical') {L891}
      else if (child.localName = 'moduleCodeableConcept') then
        value.module := ParseCodeableConcept(child, path+'/moduleCodeableConcept') {L891}
      else if (child.localName = 'moduleUri') then
        value.module := ParseUri(child, path+'/moduleUri') {L891}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirGuidanceResponseStatusEnum, SYSTEMS_TFhirGuidanceResponseStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrenceDateTimeElement := ParseDateTime(child, path+'/occurrenceDateTime') {L737}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'evaluationMessage') then
        value.evaluationMessageList.Add(ParseReference(child, path+'/evaluationMessage')) {L631}
      else if (child.localName = 'outputParameters') then
        value.outputParameters := ParseReference(child, path+'/outputParameters') {L740}
      else if (child.localName = 'result') then
        value.result := ParseReference(child, path+'/result') {L740}
      else if (child.localName = 'dataRequirement') then
        value.dataRequirementList.Add(ParseDataRequirement(child, path+'/dataRequirement')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeGuidanceResponse(xml : TXmlBuilder; name : String; value : TFhirGuidanceResponse);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeGuidanceResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeGuidanceResponseChildren(xml : TXmlBuilder; value : TFhirGuidanceResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'requestIdentifier', value.requestIdentifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (value.module is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'moduleCanonical', TFhirCanonical(value.module))
  else if (value.module is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'moduleCodeableConcept', TFhirCodeableConcept(value.module))
  else if (value.module is TFhirUri) {6} then
    ComposeUri(xml, 'moduleUri', TFhirUri(value.module));
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirGuidanceResponseStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'occurrenceDateTime', value.occurrenceDateTimeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.evaluationMessageList.Count - 1 do
      ComposeReference(xml, 'evaluationMessage', value.evaluationMessageList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'outputParameters', value.outputParameters); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'result', value.result); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dataRequirementList.Count - 1 do
      ComposeDataRequirement(xml, 'dataRequirement', value.dataRequirementList[i]);
end;

{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
function TFHIRXmlParser.ParseHealthcareServiceEligibility(element : TMXmlElement; path : string) : TFhirHealthcareServiceEligibility;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareServiceEligibility.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceEligibilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceEligibilityChild(value : TFhirHealthcareServiceEligibility; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'comment') then
        value.commentElement := ParseMarkdown(child, path+'/comment') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceEligibility(xml : TXmlBuilder; name : String; value : TFhirHealthcareServiceEligibility);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeHealthcareServiceEligibilityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceEligibilityChildren(xml : TXmlBuilder; value : TFhirHealthcareServiceEligibility);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'comment', value.commentElement); {L738}
end;

function TFHIRXmlParser.ParseHealthcareServiceAvailableTime(element : TMXmlElement; path : string) : TFhirHealthcareServiceAvailableTime;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareServiceAvailableTime.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceAvailableTimeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceAvailableTimeChild(value : TFhirHealthcareServiceAvailableTime; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'daysOfWeek') then
        value.daysOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, child, path+'/daysOfWeek')){y.1}
      else if (child.localName = 'allDay') then
        value.allDayElement := ParseBoolean(child, path+'/allDay') {L737}
      else if (child.localName = 'availableStartTime') then
        value.availableStartTimeElement := ParseTime(child, path+'/availableStartTime') {L737}
      else if (child.localName = 'availableEndTime') then
        value.availableEndTimeElement := ParseTime(child, path+'/availableEndTime') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceAvailableTime(xml : TXmlBuilder; name : String; value : TFhirHealthcareServiceAvailableTime);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeHealthcareServiceAvailableTimeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceAvailableTimeChildren(xml : TXmlBuilder; value : TFhirHealthcareServiceAvailableTime);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.daysOfWeekList.Count - 1 do
      ComposeEnum(xml, 'daysOfWeek', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allDay', value.allDayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableStartTime', value.availableStartTimeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableEndTime', value.availableEndTimeElement); {L738}
end;

function TFHIRXmlParser.ParseHealthcareServiceNotAvailable(element : TMXmlElement; path : string) : TFhirHealthcareServiceNotAvailable;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareServiceNotAvailable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceNotAvailableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceNotAvailableChild(value : TFhirHealthcareServiceNotAvailable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'during') then
        value.during := ParsePeriod(child, path+'/during') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceNotAvailable(xml : TXmlBuilder; name : String; value : TFhirHealthcareServiceNotAvailable);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeHealthcareServiceNotAvailableChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceNotAvailableChildren(xml : TXmlBuilder; value : TFhirHealthcareServiceNotAvailable);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'during', value.during); {L741}
end;

function TFHIRXmlParser.ParseHealthcareService(element : TMXmlElement; path : string) : TFhirHealthcareService;
var
  child : TMXmlElement;
begin
  result := TFhirHealthcareService.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseHealthcareServiceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseHealthcareServiceChild(value : TFhirHealthcareService; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'providedBy') then
        value.providedBy := ParseReference(child, path+'/providedBy') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'specialty') then
        value.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')) {L631}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseReference(child, path+'/location')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if (child.localName = 'extraDetails') then
        value.extraDetailsElement := ParseMarkdown(child, path+'/extraDetails') {L737}
      else if (child.localName = 'photo') then
        value.photo := ParseAttachment(child, path+'/photo') {L740}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'coverageArea') then
        value.coverageAreaList.Add(ParseReference(child, path+'/coverageArea')) {L631}
      else if (child.localName = 'serviceProvisionCode') then
        value.serviceProvisionCodeList.Add(ParseCodeableConcept(child, path+'/serviceProvisionCode')) {L631}
      else if (child.localName = 'eligibility') then
        value.eligibilityList.Add(ParseHealthcareServiceEligibility(child, path+'/eligibility')) {L631}
      else if (child.localName = 'program') then
        value.program_List.Add(ParseCodeableConcept(child, path+'/program')) {L631}
      else if (child.localName = 'characteristic') then
        value.characteristicList.Add(ParseCodeableConcept(child, path+'/characteristic')) {L631}
      else if (child.localName = 'communication') then
        value.communicationList.Add(ParseCodeableConcept(child, path+'/communication')) {L631}
      else if (child.localName = 'referralMethod') then
        value.referralMethodList.Add(ParseCodeableConcept(child, path+'/referralMethod')) {L631}
      else if (child.localName = 'appointmentRequired') then
        value.appointmentRequiredElement := ParseBoolean(child, path+'/appointmentRequired') {L737}
      else if (child.localName = 'availableTime') then
        value.availableTimeList.Add(ParseHealthcareServiceAvailableTime(child, path+'/availableTime')) {L631}
      else if (child.localName = 'notAvailable') then
        value.notAvailableList.Add(ParseHealthcareServiceNotAvailable(child, path+'/notAvailable')) {L631}
      else if (child.localName = 'availabilityExceptions') then
        value.availabilityExceptionsElement := ParseString(child, path+'/availabilityExceptions') {L737}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeHealthcareService(xml : TXmlBuilder; name : String; value : TFhirHealthcareService);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeHealthcareServiceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeHealthcareServiceChildren(xml : TXmlBuilder; value : TFhirHealthcareService);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'providedBy', value.providedBy); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', value.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeReference(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'extraDetails', value.extraDetailsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'photo', value.photo); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.coverageAreaList.Count - 1 do
      ComposeReference(xml, 'coverageArea', value.coverageAreaList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.serviceProvisionCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceProvisionCode', value.serviceProvisionCodeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.eligibilityList.Count - 1 do
      ComposeHealthcareServiceEligibility(xml, 'eligibility', value.eligibilityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.program_List.Count - 1 do
      ComposeCodeableConcept(xml, 'program', value.program_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeCodeableConcept(xml, 'characteristic', value.characteristicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.communicationList.Count - 1 do
      ComposeCodeableConcept(xml, 'communication', value.communicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.referralMethodList.Count - 1 do
      ComposeCodeableConcept(xml, 'referralMethod', value.referralMethodList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'appointmentRequired', value.appointmentRequiredElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.availableTimeList.Count - 1 do
      ComposeHealthcareServiceAvailableTime(xml, 'availableTime', value.availableTimeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.notAvailableList.Count - 1 do
      ComposeHealthcareServiceNotAvailable(xml, 'notAvailable', value.notAvailableList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'availabilityExceptions', value.availabilityExceptionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
end;

{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
function TFHIRXmlParser.ParseImagingStudyProcedure(element : TMXmlElement; path : string) : TFhirImagingStudyProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudyProcedure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudyProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudyProcedureChild(value : TFhirImagingStudyProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudyProcedure(xml : TXmlBuilder; name : String; value : TFhirImagingStudyProcedure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImagingStudyProcedureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImagingStudyProcedureChildren(xml : TXmlBuilder; value : TFhirImagingStudyProcedure);
begin
  composeBackboneElementChildren(xml, value);
  if (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value));
end;

function TFHIRXmlParser.ParseImagingStudySeries(element : TMXmlElement; path : string) : TFhirImagingStudySeries;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudySeries.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudySeriesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudySeriesChild(value : TFhirImagingStudySeries; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uid') then
        value.uidElement := ParseId(child, path+'/uid') {L737}
      else if (child.localName = 'number') then
        value.numberElement := ParseUnsignedInt(child, path+'/number') {L737}
      else if (child.localName = 'modality') then
        value.modality := ParseCoding(child, path+'/modality') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'numberOfInstances') then
        value.numberOfInstancesElement := ParseUnsignedInt(child, path+'/numberOfInstances') {L737}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCoding(child, path+'/bodySite') {L740}
      else if (child.localName = 'laterality') then
        value.laterality := ParseCoding(child, path+'/laterality') {L740}
      else if (child.localName = 'specimen') then
        value.specimenList.Add(ParseReference(child, path+'/specimen')) {L631}
      else if (child.localName = 'started') then
        value.startedElement := ParseDateTime(child, path+'/started') {L737}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseImagingStudySeriesPerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'instance') then
        value.instanceList.Add(ParseImagingStudySeriesInstance(child, path+'/instance')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeries(xml : TXmlBuilder; name : String; value : TFhirImagingStudySeries);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImagingStudySeriesChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesChildren(xml : TXmlBuilder; value : TFhirImagingStudySeries);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'uid', value.uidElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'number', value.numberElement); {L738}
  ComposeCoding(xml, 'modality', value.modality); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'numberOfInstances', value.numberOfInstancesElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'laterality', value.laterality); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specimenList.Count - 1 do
      ComposeReference(xml, 'specimen', value.specimenList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'started', value.startedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeImagingStudySeriesPerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instanceList.Count - 1 do
      ComposeImagingStudySeriesInstance(xml, 'instance', value.instanceList[i]);
end;

function TFHIRXmlParser.ParseImagingStudySeriesPerformer(element : TMXmlElement; path : string) : TFhirImagingStudySeriesPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudySeriesPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudySeriesPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudySeriesPerformerChild(value : TFhirImagingStudySeriesPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesPerformer(xml : TXmlBuilder; name : String; value : TFhirImagingStudySeriesPerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImagingStudySeriesPerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesPerformerChildren(xml : TXmlBuilder; value : TFhirImagingStudySeriesPerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseImagingStudySeriesInstance(element : TMXmlElement; path : string) : TFhirImagingStudySeriesInstance;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudySeriesInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudySeriesInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudySeriesInstanceChild(value : TFhirImagingStudySeriesInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uid') then
        value.uidElement := ParseId(child, path+'/uid') {L737}
      else if (child.localName = 'sopClass') then
        value.sopClass := ParseCoding(child, path+'/sopClass') {L740}
      else if (child.localName = 'number') then
        value.numberElement := ParseUnsignedInt(child, path+'/number') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesInstance(xml : TXmlBuilder; name : String; value : TFhirImagingStudySeriesInstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImagingStudySeriesInstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImagingStudySeriesInstanceChildren(xml : TXmlBuilder; value : TFhirImagingStudySeriesInstance);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'uid', value.uidElement); {L738}
  ComposeCoding(xml, 'sopClass', value.sopClass); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'number', value.numberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
end;

function TFHIRXmlParser.ParseImagingStudy(element : TMXmlElement; path : string) : TFhirImagingStudy;
var
  child : TMXmlElement;
begin
  result := TFhirImagingStudy.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImagingStudyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImagingStudyChild(value : TFhirImagingStudy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirImagingStudyStatusEnum, SYSTEMS_TFhirImagingStudyStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'modality') then
        value.modalityList.Add(ParseCoding(child, path+'/modality')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'started') then
        value.startedElement := ParseDateTime(child, path+'/started') {L737}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'referrer') then
        value.referrer := ParseReference(child, path+'/referrer') {L740}
      else if (child.localName = 'interpreter') then
        value.interpreterList.Add(ParseReference(child, path+'/interpreter')) {L631}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if (child.localName = 'numberOfSeries') then
        value.numberOfSeriesElement := ParseUnsignedInt(child, path+'/numberOfSeries') {L737}
      else if (child.localName = 'numberOfInstances') then
        value.numberOfInstancesElement := ParseUnsignedInt(child, path+'/numberOfInstances') {L737}
      else if (child.localName = 'procedure') then
        value.procedure_List.Add(ParseImagingStudyProcedure(child, path+'/procedure')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'series') then
        value.seriesList.Add(ParseImagingStudySeries(child, path+'/series')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImagingStudy(xml : TXmlBuilder; name : String; value : TFhirImagingStudy);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImagingStudyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImagingStudyChildren(xml : TXmlBuilder; value : TFhirImagingStudy);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirImagingStudyStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.modalityList.Count - 1 do
      ComposeCoding(xml, 'modality', value.modalityList[i]);
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'started', value.startedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'referrer', value.referrer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.interpreterList.Count - 1 do
      ComposeReference(xml, 'interpreter', value.interpreterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'numberOfSeries', value.numberOfSeriesElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'numberOfInstances', value.numberOfInstancesElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.procedure_List.Count - 1 do
      ComposeImagingStudyProcedure(xml, 'procedure', value.procedure_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.seriesList.Count - 1 do
      ComposeImagingStudySeries(xml, 'series', value.seriesList[i]);
end;

{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
function TFHIRXmlParser.ParseImmunizationPerformer(element : TMXmlElement; path : string) : TFhirImmunizationPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationPerformerChild(value : TFhirImmunizationPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationPerformer(xml : TXmlBuilder; name : String; value : TFhirImmunizationPerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationPerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationPerformerChildren(xml : TXmlBuilder; value : TFhirImmunizationPerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseImmunizationEducation(element : TMXmlElement; path : string) : TFhirImmunizationEducation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationEducation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationEducationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationEducationChild(value : TFhirImmunizationEducation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'documentType') then
        value.documentTypeElement := ParseString(child, path+'/documentType') {L737}
      else if (child.localName = 'reference') then
        value.referenceElement := ParseUri(child, path+'/reference') {L737}
      else if (child.localName = 'publicationDate') then
        value.publicationDateElement := ParseDateTime(child, path+'/publicationDate') {L737}
      else if (child.localName = 'presentationDate') then
        value.presentationDateElement := ParseDateTime(child, path+'/presentationDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationEducation(xml : TXmlBuilder; name : String; value : TFhirImmunizationEducation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationEducationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationEducationChildren(xml : TXmlBuilder; value : TFhirImmunizationEducation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentType', value.documentTypeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'reference', value.referenceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'publicationDate', value.publicationDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'presentationDate', value.presentationDateElement); {L738}
end;

function TFHIRXmlParser.ParseImmunizationReaction(element : TMXmlElement; path : string) : TFhirImmunizationReaction;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationReaction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationReactionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationReactionChild(value : TFhirImmunizationReaction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'detail') then
        value.detail := ParseReference(child, path+'/detail') {L740}
      else if (child.localName = 'reported') then
        value.reportedElement := ParseBoolean(child, path+'/reported') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationReaction(xml : TXmlBuilder; name : String; value : TFhirImmunizationReaction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationReactionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationReactionChildren(xml : TXmlBuilder; value : TFhirImmunizationReaction);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'detail', value.detail); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'reported', value.reportedElement); {L738}
end;

function TFHIRXmlParser.ParseImmunizationProtocolApplied(element : TMXmlElement; path : string) : TFhirImmunizationProtocolApplied;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationProtocolApplied.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationProtocolAppliedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationProtocolAppliedChild(value : TFhirImmunizationProtocolApplied; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'series') then
        value.seriesElement := ParseString(child, path+'/series') {L737}
      else if (child.localName = 'authority') then
        value.authority := ParseReference(child, path+'/authority') {L740}
      else if (child.localName = 'targetDisease') then
        value.targetDiseaseList.Add(ParseCodeableConcept(child, path+'/targetDisease')) {L631}
      else if (child.localName = 'doseNumber') then
        value.doseNumberElement := ParseString(child, path+'/doseNumber') {L737}
      else if (child.localName = 'seriesDoses') then
        value.seriesDosesElement := ParseString(child, path+'/seriesDoses') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationProtocolApplied(xml : TXmlBuilder; name : String; value : TFhirImmunizationProtocolApplied);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationProtocolAppliedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationProtocolAppliedChildren(xml : TXmlBuilder; value : TFhirImmunizationProtocolApplied);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'series', value.seriesElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'authority', value.authority); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.targetDiseaseList.Count - 1 do
      ComposeCodeableConcept(xml, 'targetDisease', value.targetDiseaseList[i]);
  ComposeString(xml, 'doseNumber', value.doseNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'seriesDoses', value.seriesDosesElement); {L738}
end;

function TFHIRXmlParser.ParseImmunization(element : TMXmlElement; path : string) : TFhirImmunization;
var
  child : TMXmlElement;
begin
  result := TFhirImmunization.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationChild(value : TFhirImmunization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirImmunizationStatusCodesEnum, SYSTEMS_TFhirImmunizationStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'vaccineCode') then
        value.vaccineCode := ParseCodeableConcept(child, path+'/vaccineCode') {L740}
      else if (child.localName = 'manufacturer') then
        value.manufacturer := ParseReference(child, path+'/manufacturer') {L740}
      else if (child.localName = 'lotNumber') then
        value.lotNumberElement := ParseString(child, path+'/lotNumber') {L737}
      else if (child.localName = 'expirationDate') then
        value.expirationDateElement := ParseDate(child, path+'/expirationDate') {L737}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'occurrenceString') then
        value.occurrence := ParseString(child, path+'/occurrenceString') {L891}
      else if (child.localName = 'recorded') then
        value.recordedElement := ParseDateTime(child, path+'/recorded') {L737}
      else if (child.localName = 'primarySource') then
        value.primarySourceElement := ParseBoolean(child, path+'/primarySource') {L737}
      else if (child.localName = 'informationSourceCodeableConcept') then
        value.informationSource := ParseCodeableConcept(child, path+'/informationSourceCodeableConcept') {L891}
      else if (child.localName = 'informationSourceReference') then
        value.informationSource := ParseReference(child, path+'/informationSourceReference') {L881}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'site') then
        value.site := ParseCodeableConcept(child, path+'/site') {L740}
      else if (child.localName = 'route') then
        value.route := ParseCodeableConcept(child, path+'/route') {L740}
      else if (child.localName = 'doseQuantity') then
        value.doseQuantity := ParseQuantity(child, path+'/doseQuantity') {L740}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseImmunizationPerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'isSubpotent') then
        value.isSubpotentElement := ParseBoolean(child, path+'/isSubpotent') {L737}
      else if (child.localName = 'subpotentReason') then
        value.subpotentReasonList.Add(ParseCodeableConcept(child, path+'/subpotentReason')) {L631}
      else if (child.localName = 'education') then
        value.educationList.Add(ParseImmunizationEducation(child, path+'/education')) {L631}
      else if (child.localName = 'programEligibility') then
        value.programEligibilityList.Add(ParseCodeableConcept(child, path+'/programEligibility')) {L631}
      else if (child.localName = 'fundingSource') then
        value.fundingSource := ParseCodeableConcept(child, path+'/fundingSource') {L740}
      else if (child.localName = 'reaction') then
        value.reactionList.Add(ParseImmunizationReaction(child, path+'/reaction')) {L631}
      else if (child.localName = 'protocolApplied') then
        value.protocolAppliedList.Add(ParseImmunizationProtocolApplied(child, path+'/protocolApplied')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunization(xml : TXmlBuilder; name : String; value : TFhirImmunization);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationChildren(xml : TXmlBuilder; value : TFhirImmunization);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirImmunizationStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  ComposeCodeableConcept(xml, 'vaccineCode', value.vaccineCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'manufacturer', value.manufacturer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lotNumber', value.lotNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'expirationDate', value.expirationDateElement); {L738}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence))
  else if (value.occurrence is TFhirString) {6} then
    ComposeString(xml, 'occurrenceString', TFhirString(value.occurrence));
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'recorded', value.recordedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'primarySource', value.primarySourceElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.informationSource is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'informationSourceCodeableConcept', TFhirCodeableConcept(value.informationSource))
  else if (SummaryOption in [soFull, soData]) and (value.informationSource is TFhirReference) {2} then
    ComposeReference(xml, 'informationSourceReference', TFhirReference(value.informationSource));
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'site', value.site); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'route', value.route); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'doseQuantity', value.doseQuantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeImmunizationPerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isSubpotent', value.isSubpotentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.subpotentReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'subpotentReason', value.subpotentReasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.educationList.Count - 1 do
      ComposeImmunizationEducation(xml, 'education', value.educationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.programEligibilityList.Count - 1 do
      ComposeCodeableConcept(xml, 'programEligibility', value.programEligibilityList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'fundingSource', value.fundingSource); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reactionList.Count - 1 do
      ComposeImmunizationReaction(xml, 'reaction', value.reactionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.protocolAppliedList.Count - 1 do
      ComposeImmunizationProtocolApplied(xml, 'protocolApplied', value.protocolAppliedList[i]);
end;

{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
function TFHIRXmlParser.ParseImmunizationEvaluation(element : TMXmlElement; path : string) : TFhirImmunizationEvaluation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationEvaluation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationEvaluationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationEvaluationChild(value : TFhirImmunizationEvaluation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirImmunizationEvaluationStatusCodesEnum, SYSTEMS_TFhirImmunizationEvaluationStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'authority') then
        value.authority := ParseReference(child, path+'/authority') {L740}
      else if (child.localName = 'targetDisease') then
        value.targetDisease := ParseCodeableConcept(child, path+'/targetDisease') {L740}
      else if (child.localName = 'immunizationEvent') then
        value.immunizationEvent := ParseReference(child, path+'/immunizationEvent') {L740}
      else if (child.localName = 'doseStatus') then
        value.doseStatus := ParseCodeableConcept(child, path+'/doseStatus') {L740}
      else if (child.localName = 'doseStatusReason') then
        value.doseStatusReasonList.Add(ParseCodeableConcept(child, path+'/doseStatusReason')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'series') then
        value.seriesElement := ParseString(child, path+'/series') {L737}
      else if (child.localName = 'doseNumber') then
        value.doseNumberElement := ParseString(child, path+'/doseNumber') {L737}
      else if (child.localName = 'seriesDoses') then
        value.seriesDosesElement := ParseString(child, path+'/seriesDoses') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationEvaluation(xml : TXmlBuilder; name : String; value : TFhirImmunizationEvaluation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationEvaluationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationEvaluationChildren(xml : TXmlBuilder; value : TFhirImmunizationEvaluation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirImmunizationEvaluationStatusCodesEnum); {L735}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'authority', value.authority); {L741}
  ComposeCodeableConcept(xml, 'targetDisease', value.targetDisease); {L741}
  ComposeReference(xml, 'immunizationEvent', value.immunizationEvent); {L741}
  ComposeCodeableConcept(xml, 'doseStatus', value.doseStatus); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.doseStatusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'doseStatusReason', value.doseStatusReasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'series', value.seriesElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'doseNumber', value.doseNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'seriesDoses', value.seriesDosesElement); {L738}
end;

{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
function TFHIRXmlParser.ParseImmunizationRecommendationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationRecommendationRecommendation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationRecommendationRecommendationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationRecommendationRecommendationChild(value : TFhirImmunizationRecommendationRecommendation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'vaccineCode') then
        value.vaccineCodeList.Add(ParseCodeableConcept(child, path+'/vaccineCode')) {L631}
      else if (child.localName = 'targetDisease') then
        value.targetDiseaseList.Add(ParseCodeableConcept(child, path+'/targetDisease')) {L631}
      else if (child.localName = 'contraindicatedVaccineCode') then
        value.contraindicatedVaccineCodeList.Add(ParseCodeableConcept(child, path+'/contraindicatedVaccineCode')) {L631}
      else if (child.localName = 'forecastStatus') then
        value.forecastStatus := ParseCodeableConcept(child, path+'/forecastStatus') {L740}
      else if (child.localName = 'forecastReason') then
        value.forecastReasonList.Add(ParseCodeableConcept(child, path+'/forecastReason')) {L631}
      else if (child.localName = 'dateCriterion') then
        value.dateCriterionList.Add(ParseImmunizationRecommendationRecommendationDateCriterion(child, path+'/dateCriterion')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'series') then
        value.seriesElement := ParseString(child, path+'/series') {L737}
      else if (child.localName = 'doseNumber') then
        value.doseNumberElement := ParseString(child, path+'/doseNumber') {L737}
      else if (child.localName = 'seriesDoses') then
        value.seriesDosesElement := ParseString(child, path+'/seriesDoses') {L737}
      else if (child.localName = 'supportingImmunization') then
        value.supportingImmunizationList.Add(ParseReference(child, path+'/supportingImmunization')) {L631}
      else if (child.localName = 'supportingPatientInformation') then
        value.supportingPatientInformationList.Add(ParseReference(child, path+'/supportingPatientInformation')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendation(xml : TXmlBuilder; name : String; value : TFhirImmunizationRecommendationRecommendation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationRecommendationRecommendationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendationChildren(xml : TXmlBuilder; value : TFhirImmunizationRecommendationRecommendation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.vaccineCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'vaccineCode', value.vaccineCodeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetDiseaseList.Count - 1 do
      ComposeCodeableConcept(xml, 'targetDisease', value.targetDiseaseList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contraindicatedVaccineCodeList.Count - 1 do
      ComposeCodeableConcept(xml, 'contraindicatedVaccineCode', value.contraindicatedVaccineCodeList[i]);
  ComposeCodeableConcept(xml, 'forecastStatus', value.forecastStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.forecastReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'forecastReason', value.forecastReasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dateCriterionList.Count - 1 do
      ComposeImmunizationRecommendationRecommendationDateCriterion(xml, 'dateCriterion', value.dateCriterionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'series', value.seriesElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'doseNumber', value.doseNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'seriesDoses', value.seriesDosesElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingImmunizationList.Count - 1 do
      ComposeReference(xml, 'supportingImmunization', value.supportingImmunizationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingPatientInformationList.Count - 1 do
      ComposeReference(xml, 'supportingPatientInformation', value.supportingPatientInformationList[i]);
end;

function TFHIRXmlParser.ParseImmunizationRecommendationRecommendationDateCriterion(element : TMXmlElement; path : string) : TFhirImmunizationRecommendationRecommendationDateCriterion;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationRecommendationRecommendationDateCriterion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationRecommendationRecommendationDateCriterionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationRecommendationRecommendationDateCriterionChild(value : TFhirImmunizationRecommendationRecommendationDateCriterion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseDateTime(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendationDateCriterion(xml : TXmlBuilder; name : String; value : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationRecommendationRecommendationDateCriterionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationRecommendationDateCriterionChildren(xml : TXmlBuilder; value : TFhirImmunizationRecommendationRecommendationDateCriterion);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeDateTime(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseImmunizationRecommendation(element : TMXmlElement; path : string) : TFhirImmunizationRecommendation;
var
  child : TMXmlElement;
begin
  result := TFhirImmunizationRecommendation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImmunizationRecommendationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImmunizationRecommendationChild(value : TFhirImmunizationRecommendation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'authority') then
        value.authority := ParseReference(child, path+'/authority') {L740}
      else if (child.localName = 'recommendation') then
        value.recommendationList.Add(ParseImmunizationRecommendationRecommendation(child, path+'/recommendation')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendation(xml : TXmlBuilder; name : String; value : TFhirImmunizationRecommendation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImmunizationRecommendationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImmunizationRecommendationChildren(xml : TXmlBuilder; value : TFhirImmunizationRecommendation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  ComposeReference(xml, 'patient', value.patient); {L741}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'authority', value.authority); {L741}
  for i := 0 to value.recommendationList.Count - 1 do
      ComposeImmunizationRecommendationRecommendation(xml, 'recommendation', value.recommendationList[i]);
end;

{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
function TFHIRXmlParser.ParseImplementationGuideDependsOn(element : TMXmlElement; path : string) : TFhirImplementationGuideDependsOn;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDependsOn.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDependsOnChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDependsOnChild(value : TFhirImplementationGuideDependsOn; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uri') then
        value.uriElement := ParseCanonical(child, path+'/uri') {L737}
      else if (child.localName = 'packageId') then
        value.packageIdElement := ParseId(child, path+'/packageId') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDependsOn(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDependsOn);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDependsOnChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDependsOnChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDependsOn);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCanonical(xml, 'uri', value.uriElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'packageId', value.packageIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideGlobal(element : TMXmlElement; path : string) : TFhirImplementationGuideGlobal;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideGlobal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideGlobalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideGlobalChild(value : TFhirImplementationGuideGlobal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideGlobal(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideGlobal);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideGlobalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideGlobalChildren(xml : TXmlBuilder; value : TFhirImplementationGuideGlobal);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirResourceTypesEnum); {L735}
  ComposeCanonical(xml, 'profile', value.profileElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinition(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionChild(value : TFhirImplementationGuideDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'grouping') then
        value.groupingList.Add(ParseImplementationGuideDefinitionGrouping(child, path+'/grouping')) {L631}
      else if (child.localName = 'resource') then
        value.resourceList.Add(ParseImplementationGuideDefinitionResource(child, path+'/resource')) {L631}
      else if (child.localName = 'page') then
        value.page := ParseImplementationGuideDefinitionPage(child, path+'/page') {L740}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseImplementationGuideDefinitionParameter(child, path+'/parameter')) {L631}
      else if (child.localName = 'template') then
        value.templateList.Add(ParseImplementationGuideDefinitionTemplate(child, path+'/template')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinition(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDefinition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinition);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.groupingList.Count - 1 do
      ComposeImplementationGuideDefinitionGrouping(xml, 'grouping', value.groupingList[i]);
  for i := 0 to value.resourceList.Count - 1 do
      ComposeImplementationGuideDefinitionResource(xml, 'resource', value.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideDefinitionPage(xml, 'page', value.page); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeImplementationGuideDefinitionParameter(xml, 'parameter', value.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.templateList.Count - 1 do
      ComposeImplementationGuideDefinitionTemplate(xml, 'template', value.templateList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionGrouping(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionGrouping;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionGrouping.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionGroupingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionGroupingChild(value : TFhirImplementationGuideDefinitionGrouping; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionGrouping(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDefinitionGrouping);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDefinitionGroupingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionGroupingChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionGrouping);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionResource(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionResource;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionResourceChild(value : TFhirImplementationGuideDefinitionResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if (child.localName = 'fhirVersion') then
        value.fhirVersionList.Add(ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, child, path+'/fhirVersion')){y.1}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'exampleCanonical') then
        value.example := ParseCanonical(child, path+'/exampleCanonical') {L891}
      else if (child.localName = 'exampleBoolean') then
        value.example := ParseBoolean(child, path+'/exampleBoolean') {L891}
      else if (child.localName = 'groupingId') then
        value.groupingIdElement := ParseId(child, path+'/groupingId') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionResource(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDefinitionResource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDefinitionResourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionResourceChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionResource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'reference', value.reference); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.fhirVersionList.Count - 1 do
      ComposeEnum(xml, 'fhirVersion', value.fhirVersionList[i], CODES_TFhirFHIRVersionEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.example is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'exampleCanonical', TFhirCanonical(value.example))
  else if (SummaryOption in [soFull, soData]) and (value.example is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'exampleBoolean', TFhirBoolean(value.example));
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'groupingId', value.groupingIdElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionPage(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionPage;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionPage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionPageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionPageChild(value : TFhirImplementationGuideDefinitionPage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'nameUrl') then
        value.name := ParseUrl(child, path+'/nameUrl') {L891}
      else if (child.localName = 'nameReference') then
        value.name := ParseReference(child, path+'/nameReference') {L881}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'generation') then
        value.generationElement := ParseEnum(CODES_TFhirGuidePageGenerationEnum, SYSTEMS_TFhirGuidePageGenerationEnum, child, path+'/generation') {L734}
      else if (child.localName = 'page') then
        value.pageList.Add(ParseImplementationGuideDefinitionPage(child, path+'/page')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionPage(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDefinitionPage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDefinitionPageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionPageChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionPage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (value.name is TFhirUrl) {6} then
    ComposeUrl(xml, 'nameUrl', TFhirUrl(value.name))
  else if (value.name is TFhirReference) {2} then
    ComposeReference(xml, 'nameReference', TFhirReference(value.name));
  ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'generation', value.generationElement, CODES_TFhirGuidePageGenerationEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.pageList.Count - 1 do
      ComposeImplementationGuideDefinitionPage(xml, 'page', value.pageList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionParameter(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionParameterChild(value : TFhirImplementationGuideDefinitionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseString(child, path+'/code') {L737}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionParameter(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDefinitionParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDefinitionParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionParameterChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionParameter);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'code', value.codeElement); {L738}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionTemplate(element : TMXmlElement; path : string) : TFhirImplementationGuideDefinitionTemplate;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideDefinitionTemplate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideDefinitionTemplateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideDefinitionTemplateChild(value : TFhirImplementationGuideDefinitionTemplate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'source') then
        value.sourceElement := ParseString(child, path+'/source') {L737}
      else if (child.localName = 'scope') then
        value.scopeElement := ParseString(child, path+'/scope') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionTemplate(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideDefinitionTemplate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideDefinitionTemplateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideDefinitionTemplateChildren(xml : TXmlBuilder; value : TFhirImplementationGuideDefinitionTemplate);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  ComposeString(xml, 'source', value.sourceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'scope', value.scopeElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideManifest(element : TMXmlElement; path : string) : TFhirImplementationGuideManifest;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideManifest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideManifestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideManifestChild(value : TFhirImplementationGuideManifest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'rendering') then
        value.renderingElement := ParseUrl(child, path+'/rendering') {L737}
      else if (child.localName = 'resource') then
        value.resourceList.Add(ParseImplementationGuideManifestResource(child, path+'/resource')) {L631}
      else if (child.localName = 'page') then
        value.pageList.Add(ParseImplementationGuideManifestPage(child, path+'/page')) {L631}
      else if (child.localName = 'image') then
        value.imageList.Add(ParseString(child, path+'/image')) {L631}
      else if (child.localName = 'other') then
        value.otherList.Add(ParseString(child, path+'/other')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifest(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideManifest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideManifestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestChildren(xml : TXmlBuilder; value : TFhirImplementationGuideManifest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'rendering', value.renderingElement); {L738}
  for i := 0 to value.resourceList.Count - 1 do
      ComposeImplementationGuideManifestResource(xml, 'resource', value.resourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.pageList.Count - 1 do
      ComposeImplementationGuideManifestPage(xml, 'page', value.pageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.imageList.Count - 1 do
      ComposeString(xml, 'image', value.imageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.otherList.Count - 1 do
      ComposeString(xml, 'other', value.otherList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuideManifestResource(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestResource;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideManifestResource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideManifestResourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideManifestResourceChild(value : TFhirImplementationGuideManifestResource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'reference') then
        value.reference := ParseReference(child, path+'/reference') {L740}
      else if (child.localName = 'exampleCanonical') then
        value.example := ParseCanonical(child, path+'/exampleCanonical') {L891}
      else if (child.localName = 'exampleBoolean') then
        value.example := ParseBoolean(child, path+'/exampleBoolean') {L891}
      else if (child.localName = 'relativePath') then
        value.relativePathElement := ParseUrl(child, path+'/relativePath') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestResource(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideManifestResource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideManifestResourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestResourceChildren(xml : TXmlBuilder; value : TFhirImplementationGuideManifestResource);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'reference', value.reference); {L741}
  if (SummaryOption in [soFull, soData]) and (value.example is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'exampleCanonical', TFhirCanonical(value.example))
  else if (SummaryOption in [soFull, soData]) and (value.example is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'exampleBoolean', TFhirBoolean(value.example));
  if (SummaryOption in [soFull, soData]) then
    ComposeUrl(xml, 'relativePath', value.relativePathElement); {L738}
end;

function TFHIRXmlParser.ParseImplementationGuideManifestPage(element : TMXmlElement; path : string) : TFhirImplementationGuideManifestPage;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuideManifestPage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideManifestPageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideManifestPageChild(value : TFhirImplementationGuideManifestPage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'anchor') then
        value.anchorList.Add(ParseString(child, path+'/anchor')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestPage(xml : TXmlBuilder; name : String; value : TFhirImplementationGuideManifestPage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideManifestPageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideManifestPageChildren(xml : TXmlBuilder; value : TFhirImplementationGuideManifestPage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.anchorList.Count - 1 do
      ComposeString(xml, 'anchor', value.anchorList[i]);
end;

function TFHIRXmlParser.ParseImplementationGuide(element : TMXmlElement; path : string) : TFhirImplementationGuide;
var
  child : TMXmlElement;
begin
  result := TFhirImplementationGuide.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseImplementationGuideChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseImplementationGuideChild(value : TFhirImplementationGuide; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'packageId') then
        value.packageIdElement := ParseId(child, path+'/packageId') {L737}
      else if (child.localName = 'license') then
        value.licenseElement := ParseEnum(CODES_TFhirSPDXLicenseEnum, SYSTEMS_TFhirSPDXLicenseEnum, child, path+'/license') {L734}
      else if (child.localName = 'fhirVersion') then
        value.fhirVersionList.Add(ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, child, path+'/fhirVersion')){y.1}
      else if (child.localName = 'dependsOn') then
        value.dependsOnList.Add(ParseImplementationGuideDependsOn(child, path+'/dependsOn')) {L631}
      else if (child.localName = 'global') then
        value.globalList.Add(ParseImplementationGuideGlobal(child, path+'/global')) {L631}
      else if (child.localName = 'definition') then
        value.definition := ParseImplementationGuideDefinition(child, path+'/definition') {L740}
      else if (child.localName = 'manifest') then
        value.manifest := ParseImplementationGuideManifest(child, path+'/manifest') {L740}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuide(xml : TXmlBuilder; name : String; value : TFhirImplementationGuide);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeImplementationGuideChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeImplementationGuideChildren(xml : TXmlBuilder; value : TFhirImplementationGuide);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  ComposeId(xml, 'packageId', value.packageIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'license', value.licenseElement, CODES_TFhirSPDXLicenseEnum); {L735}
  for i := 0 to value.fhirVersionList.Count - 1 do
      ComposeEnum(xml, 'fhirVersion', value.fhirVersionList[i], CODES_TFhirFHIRVersionEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dependsOnList.Count - 1 do
      ComposeImplementationGuideDependsOn(xml, 'dependsOn', value.dependsOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.globalList.Count - 1 do
      ComposeImplementationGuideGlobal(xml, 'global', value.globalList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideDefinition(xml, 'definition', value.definition); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeImplementationGuideManifest(xml, 'manifest', value.manifest); {L741}
end;

{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
function TFHIRXmlParser.ParseIngredientSubstance(element : TMXmlElement; path : string) : TFhirIngredientSubstance;
var
  child : TMXmlElement;
begin
  result := TFhirIngredientSubstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIngredientSubstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIngredientSubstanceChild(value : TFhirIngredientSubstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'codeCodeableConcept') then
        value.code := ParseCodeableConcept(child, path+'/codeCodeableConcept') {L891}
      else if (child.localName = 'codeReference') then
        value.code := ParseReference(child, path+'/codeReference') {L881}
      else if (child.localName = 'strength') then
        value.strengthList.Add(ParseIngredientSubstanceStrength(child, path+'/strength')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIngredientSubstance(xml : TXmlBuilder; name : String; value : TFhirIngredientSubstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeIngredientSubstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeIngredientSubstanceChildren(xml : TXmlBuilder; value : TFhirIngredientSubstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (value.code is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'codeCodeableConcept', TFhirCodeableConcept(value.code))
  else if (value.code is TFhirReference) {2} then
    ComposeReference(xml, 'codeReference', TFhirReference(value.code));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.strengthList.Count - 1 do
      ComposeIngredientSubstanceStrength(xml, 'strength', value.strengthList[i]);
end;

function TFHIRXmlParser.ParseIngredientSubstanceStrength(element : TMXmlElement; path : string) : TFhirIngredientSubstanceStrength;
var
  child : TMXmlElement;
begin
  result := TFhirIngredientSubstanceStrength.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIngredientSubstanceStrengthChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIngredientSubstanceStrengthChild(value : TFhirIngredientSubstanceStrength; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'presentation') then
        value.presentation := ParseRatio(child, path+'/presentation') {L740}
      else if (child.localName = 'presentationHighLimit') then
        value.presentationHighLimit := ParseRatio(child, path+'/presentationHighLimit') {L740}
      else if (child.localName = 'presentationText') then
        value.presentationTextElement := ParseString(child, path+'/presentationText') {L737}
      else if (child.localName = 'concentration') then
        value.concentration := ParseRatio(child, path+'/concentration') {L740}
      else if (child.localName = 'concentrationHighLimit') then
        value.concentrationHighLimit := ParseRatio(child, path+'/concentrationHighLimit') {L740}
      else if (child.localName = 'concentrationText') then
        value.concentrationTextElement := ParseString(child, path+'/concentrationText') {L737}
      else if (child.localName = 'measurementPoint') then
        value.measurementPointElement := ParseString(child, path+'/measurementPoint') {L737}
      else if (child.localName = 'country') then
        value.countryList.Add(ParseCodeableConcept(child, path+'/country')) {L631}
      else if (child.localName = 'referenceStrength') then
        value.referenceStrengthList.Add(ParseIngredientSubstanceStrengthReferenceStrength(child, path+'/referenceStrength')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIngredientSubstanceStrength(xml : TXmlBuilder; name : String; value : TFhirIngredientSubstanceStrength);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeIngredientSubstanceStrengthChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeIngredientSubstanceStrengthChildren(xml : TXmlBuilder; value : TFhirIngredientSubstanceStrength);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'presentation', value.presentation); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'presentationHighLimit', value.presentationHighLimit); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'presentationText', value.presentationTextElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'concentration', value.concentration); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'concentrationHighLimit', value.concentrationHighLimit); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'concentrationText', value.concentrationTextElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'measurementPoint', value.measurementPointElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.countryList.Count - 1 do
      ComposeCodeableConcept(xml, 'country', value.countryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.referenceStrengthList.Count - 1 do
      ComposeIngredientSubstanceStrengthReferenceStrength(xml, 'referenceStrength', value.referenceStrengthList[i]);
end;

function TFHIRXmlParser.ParseIngredientSubstanceStrengthReferenceStrength(element : TMXmlElement; path : string) : TFhirIngredientSubstanceStrengthReferenceStrength;
var
  child : TMXmlElement;
begin
  result := TFhirIngredientSubstanceStrengthReferenceStrength.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIngredientSubstanceStrengthReferenceStrengthChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIngredientSubstanceStrengthReferenceStrengthChild(value : TFhirIngredientSubstanceStrengthReferenceStrength; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substanceCodeableConcept') then
        value.substance := ParseCodeableConcept(child, path+'/substanceCodeableConcept') {L891}
      else if (child.localName = 'substanceReference') then
        value.substance := ParseReference(child, path+'/substanceReference') {L881}
      else if (child.localName = 'strength') then
        value.strength := ParseRatio(child, path+'/strength') {L740}
      else if (child.localName = 'strengthHighLimit') then
        value.strengthHighLimit := ParseRatio(child, path+'/strengthHighLimit') {L740}
      else if (child.localName = 'measurementPoint') then
        value.measurementPointElement := ParseString(child, path+'/measurementPoint') {L737}
      else if (child.localName = 'country') then
        value.countryList.Add(ParseCodeableConcept(child, path+'/country')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIngredientSubstanceStrengthReferenceStrength(xml : TXmlBuilder; name : String; value : TFhirIngredientSubstanceStrengthReferenceStrength);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeIngredientSubstanceStrengthReferenceStrengthChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeIngredientSubstanceStrengthReferenceStrengthChildren(xml : TXmlBuilder; value : TFhirIngredientSubstanceStrengthReferenceStrength);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.substance is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'substanceCodeableConcept', TFhirCodeableConcept(value.substance))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.substance is TFhirReference) {2} then
    ComposeReference(xml, 'substanceReference', TFhirReference(value.substance));
  ComposeRatio(xml, 'strength', value.strength); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'strengthHighLimit', value.strengthHighLimit); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'measurementPoint', value.measurementPointElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.countryList.Count - 1 do
      ComposeCodeableConcept(xml, 'country', value.countryList[i]);
end;

function TFHIRXmlParser.ParseIngredientSpecifiedSubstance(element : TMXmlElement; path : string) : TFhirIngredientSpecifiedSubstance;
var
  child : TMXmlElement;
begin
  result := TFhirIngredientSpecifiedSubstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIngredientSpecifiedSubstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIngredientSpecifiedSubstanceChild(value : TFhirIngredientSpecifiedSubstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'codeCodeableConcept') then
        value.code := ParseCodeableConcept(child, path+'/codeCodeableConcept') {L891}
      else if (child.localName = 'codeReference') then
        value.code := ParseReference(child, path+'/codeReference') {L881}
      else if (child.localName = 'group') then
        value.group := ParseCodeableConcept(child, path+'/group') {L740}
      else if (child.localName = 'confidentiality') then
        value.confidentiality := ParseCodeableConcept(child, path+'/confidentiality') {L740}
      else if (child.localName = 'strength') then
        value.strengthList.Add(ParseIngredientSubstanceStrength(child, path+'/strength')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIngredientSpecifiedSubstance(xml : TXmlBuilder; name : String; value : TFhirIngredientSpecifiedSubstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeIngredientSpecifiedSubstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeIngredientSpecifiedSubstanceChildren(xml : TXmlBuilder; value : TFhirIngredientSpecifiedSubstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (value.code is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'codeCodeableConcept', TFhirCodeableConcept(value.code))
  else if (value.code is TFhirReference) {2} then
    ComposeReference(xml, 'codeReference', TFhirReference(value.code));
  ComposeCodeableConcept(xml, 'group', value.group); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'confidentiality', value.confidentiality); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.strengthList.Count - 1 do
      ComposeIngredientSubstanceStrength(xml, 'strength', value.strengthList[i]);
end;

function TFHIRXmlParser.ParseIngredient(element : TMXmlElement; path : string) : TFhirIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirIngredient.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseIngredientChild(value : TFhirIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'function') then
        value.function_List.Add(ParseCodeableConcept(child, path+'/function')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'allergenicIndicator') then
        value.allergenicIndicatorElement := ParseBoolean(child, path+'/allergenicIndicator') {L737}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'substance') then
        value.substance := ParseIngredientSubstance(child, path+'/substance') {L740}
      else if (child.localName = 'specifiedSubstance') then
        value.specifiedSubstanceList.Add(ParseIngredientSpecifiedSubstance(child, path+'/specifiedSubstance')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeIngredient(xml : TXmlBuilder; name : String; value : TFhirIngredient);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeIngredientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeIngredientChildren(xml : TXmlBuilder; value : TFhirIngredient);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  ComposeCodeableConcept(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.function_List.Count - 1 do
      ComposeCodeableConcept(xml, 'function', value.function_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'allergenicIndicator', value.allergenicIndicatorElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIngredientSubstance(xml, 'substance', value.substance); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specifiedSubstanceList.Count - 1 do
      ComposeIngredientSpecifiedSubstance(xml, 'specifiedSubstance', value.specifiedSubstanceList[i]);
end;

{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
function TFHIRXmlParser.ParseInsurancePlanContact(element : TMXmlElement; path : string) : TFhirInsurancePlanContact;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanContactChild(value : TFhirInsurancePlanContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'purpose') then
        value.purpose := ParseCodeableConcept(child, path+'/purpose') {L740}
      else if (child.localName = 'name') then
        value.name := ParseHumanName(child, path+'/name') {L740}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'address') then
        value.address := ParseAddress(child, path+'/address') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanContact(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanContact);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanContactChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanContactChildren(xml : TXmlBuilder; value : TFhirInsurancePlanContact);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'purpose', value.purpose); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', value.name); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', value.address); {L741}
end;

function TFHIRXmlParser.ParseInsurancePlanCoverage(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverage;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanCoverage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanCoverageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageChild(value : TFhirInsurancePlanCoverage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'network') then
        value.networkList.Add(ParseReference(child, path+'/network')) {L631}
      else if (child.localName = 'benefit') then
        value.benefitList.Add(ParseInsurancePlanCoverageBenefit(child, path+'/benefit')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverage(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanCoverage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanCoverageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageChildren(xml : TXmlBuilder; value : TFhirInsurancePlanCoverage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(xml, 'network', value.networkList[i]);
  for i := 0 to value.benefitList.Count - 1 do
      ComposeInsurancePlanCoverageBenefit(xml, 'benefit', value.benefitList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanCoverageBenefit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanCoverageBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefitChild(value : TFhirInsurancePlanCoverageBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'requirement') then
        value.requirementElement := ParseString(child, path+'/requirement') {L737}
      else if (child.localName = 'limit') then
        value.limitList.Add(ParseInsurancePlanCoverageBenefitLimit(child, path+'/limit')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefit(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanCoverageBenefit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanCoverageBenefitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefitChildren(xml : TXmlBuilder; value : TFhirInsurancePlanCoverageBenefit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'requirement', value.requirementElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.limitList.Count - 1 do
      ComposeInsurancePlanCoverageBenefitLimit(xml, 'limit', value.limitList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefitLimit(element : TMXmlElement; path : string) : TFhirInsurancePlanCoverageBenefitLimit;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanCoverageBenefitLimit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanCoverageBenefitLimitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanCoverageBenefitLimitChild(value : TFhirInsurancePlanCoverageBenefitLimit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        value.value := ParseQuantity(child, path+'/value') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefitLimit(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanCoverageBenefitLimit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanCoverageBenefitLimitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanCoverageBenefitLimitChildren(xml : TXmlBuilder; value : TFhirInsurancePlanCoverageBenefitLimit);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'value', value.value); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
end;

function TFHIRXmlParser.ParseInsurancePlanPlan(element : TMXmlElement; path : string) : TFhirInsurancePlanPlan;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlan.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanChild(value : TFhirInsurancePlanPlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'coverageArea') then
        value.coverageAreaList.Add(ParseReference(child, path+'/coverageArea')) {L631}
      else if (child.localName = 'network') then
        value.networkList.Add(ParseReference(child, path+'/network')) {L631}
      else if (child.localName = 'generalCost') then
        value.generalCostList.Add(ParseInsurancePlanPlanGeneralCost(child, path+'/generalCost')) {L631}
      else if (child.localName = 'specificCost') then
        value.specificCostList.Add(ParseInsurancePlanPlanSpecificCost(child, path+'/specificCost')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlan(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanPlan);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanPlanChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlan);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.coverageAreaList.Count - 1 do
      ComposeReference(xml, 'coverageArea', value.coverageAreaList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(xml, 'network', value.networkList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.generalCostList.Count - 1 do
      ComposeInsurancePlanPlanGeneralCost(xml, 'generalCost', value.generalCostList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.specificCostList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCost(xml, 'specificCost', value.specificCostList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanPlanGeneralCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanGeneralCost;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanGeneralCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanGeneralCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanGeneralCostChild(value : TFhirInsurancePlanPlanGeneralCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'groupSize') then
        value.groupSizeElement := ParsePositiveInt(child, path+'/groupSize') {L737}
      else if (child.localName = 'cost') then
        value.cost := ParseMoney(child, path+'/cost') {L740}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanGeneralCost(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanPlanGeneralCost);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanPlanGeneralCostChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanGeneralCostChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanGeneralCost);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'groupSize', value.groupSizeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'cost', value.cost); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCost;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanSpecificCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanSpecificCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostChild(value : TFhirInsurancePlanPlanSpecificCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'benefit') then
        value.benefitList.Add(ParseInsurancePlanPlanSpecificCostBenefit(child, path+'/benefit')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCost(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanPlanSpecificCost);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanPlanSpecificCostChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanSpecificCost);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.benefitList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCostBenefit(xml, 'benefit', value.benefitList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefit(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefit;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanSpecificCostBenefit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanSpecificCostBenefitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefitChild(value : TFhirInsurancePlanPlanSpecificCostBenefit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'cost') then
        value.costList.Add(ParseInsurancePlanPlanSpecificCostBenefitCost(child, path+'/cost')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefit(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanPlanSpecificCostBenefit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanPlanSpecificCostBenefitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefitChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanSpecificCostBenefit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.costList.Count - 1 do
      ComposeInsurancePlanPlanSpecificCostBenefitCost(xml, 'cost', value.costList[i]);
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefitCost(element : TMXmlElement; path : string) : TFhirInsurancePlanPlanSpecificCostBenefitCost;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlanPlanSpecificCostBenefitCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanPlanSpecificCostBenefitCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanPlanSpecificCostBenefitCostChild(value : TFhirInsurancePlanPlanSpecificCostBenefitCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'applicability') then
        value.applicability := ParseCodeableConcept(child, path+'/applicability') {L740}
      else if (child.localName = 'qualifiers') then
        value.qualifiersList.Add(ParseCodeableConcept(child, path+'/qualifiers')) {L631}
      else if (child.localName = 'value') then
        value.value := ParseQuantity(child, path+'/value') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefitCost(xml : TXmlBuilder; name : String; value : TFhirInsurancePlanPlanSpecificCostBenefitCost);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanPlanSpecificCostBenefitCostChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanPlanSpecificCostBenefitCostChildren(xml : TXmlBuilder; value : TFhirInsurancePlanPlanSpecificCostBenefitCost);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'applicability', value.applicability); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.qualifiersList.Count - 1 do
      ComposeCodeableConcept(xml, 'qualifiers', value.qualifiersList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'value', value.value); {L741}
end;

function TFHIRXmlParser.ParseInsurancePlan(element : TMXmlElement; path : string) : TFhirInsurancePlan;
var
  child : TMXmlElement;
begin
  result := TFhirInsurancePlan.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInsurancePlanChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInsurancePlanChild(value : TFhirInsurancePlan; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'alias') then
        value.aliasList.Add(ParseString(child, path+'/alias')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'ownedBy') then
        value.ownedBy := ParseReference(child, path+'/ownedBy') {L740}
      else if (child.localName = 'administeredBy') then
        value.administeredBy := ParseReference(child, path+'/administeredBy') {L740}
      else if (child.localName = 'coverageArea') then
        value.coverageAreaList.Add(ParseReference(child, path+'/coverageArea')) {L631}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseInsurancePlanContact(child, path+'/contact')) {L631}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if (child.localName = 'network') then
        value.networkList.Add(ParseReference(child, path+'/network')) {L631}
      else if (child.localName = 'coverage') then
        value.coverageList.Add(ParseInsurancePlanCoverage(child, path+'/coverage')) {L631}
      else if (child.localName = 'plan') then
        value.planList.Add(ParseInsurancePlanPlan(child, path+'/plan')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlan(xml : TXmlBuilder; name : String; value : TFhirInsurancePlan);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInsurancePlanChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInsurancePlanChildren(xml : TXmlBuilder; value : TFhirInsurancePlan);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.aliasList.Count - 1 do
      ComposeString(xml, 'alias', value.aliasList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'ownedBy', value.ownedBy); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'administeredBy', value.administeredBy); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.coverageAreaList.Count - 1 do
      ComposeReference(xml, 'coverageArea', value.coverageAreaList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeInsurancePlanContact(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(xml, 'network', value.networkList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.coverageList.Count - 1 do
      ComposeInsurancePlanCoverage(xml, 'coverage', value.coverageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.planList.Count - 1 do
      ComposeInsurancePlanPlan(xml, 'plan', value.planList[i]);
end;

{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
function TFHIRXmlParser.ParseInvoiceParticipant(element : TMXmlElement; path : string) : TFhirInvoiceParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirInvoiceParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceParticipantChild(value : TFhirInvoiceParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoiceParticipant(xml : TXmlBuilder; name : String; value : TFhirInvoiceParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInvoiceParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInvoiceParticipantChildren(xml : TXmlBuilder; value : TFhirInvoiceParticipant);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseInvoiceLineItem(element : TMXmlElement; path : string) : TFhirInvoiceLineItem;
var
  child : TMXmlElement;
begin
  result := TFhirInvoiceLineItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceLineItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceLineItemChild(value : TFhirInvoiceLineItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequence') then
        value.sequenceElement := ParsePositiveInt(child, path+'/sequence') {L737}
      else if (child.localName = 'chargeItemReference') then
        value.chargeItem := ParseReference(child, path+'/chargeItemReference') {L881}
      else if (child.localName = 'chargeItemCodeableConcept') then
        value.chargeItem := ParseCodeableConcept(child, path+'/chargeItemCodeableConcept') {L891}
      else if (child.localName = 'priceComponent') then
        value.priceComponentList.Add(ParseInvoiceLineItemPriceComponent(child, path+'/priceComponent')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItem(xml : TXmlBuilder; name : String; value : TFhirInvoiceLineItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInvoiceLineItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItemChildren(xml : TXmlBuilder; value : TFhirInvoiceLineItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'sequence', value.sequenceElement); {L738}
  if (value.chargeItem is TFhirReference) {2} then
    ComposeReference(xml, 'chargeItemReference', TFhirReference(value.chargeItem))
  else if (value.chargeItem is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'chargeItemCodeableConcept', TFhirCodeableConcept(value.chargeItem));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.priceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(xml, 'priceComponent', value.priceComponentList[i]);
end;

function TFHIRXmlParser.ParseInvoiceLineItemPriceComponent(element : TMXmlElement; path : string) : TFhirInvoiceLineItemPriceComponent;
var
  child : TMXmlElement;
begin
  result := TFhirInvoiceLineItemPriceComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceLineItemPriceComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceLineItemPriceComponentChild(value : TFhirInvoiceLineItemPriceComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirInvoicePriceComponentTypeEnum, SYSTEMS_TFhirInvoicePriceComponentTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'factor') then
        value.factorElement := ParseDecimal(child, path+'/factor') {L737}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItemPriceComponent(xml : TXmlBuilder; name : String; value : TFhirInvoiceLineItemPriceComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInvoiceLineItemPriceComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInvoiceLineItemPriceComponentChildren(xml : TXmlBuilder; value : TFhirInvoiceLineItemPriceComponent);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirInvoicePriceComponentTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'factor', value.factorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseInvoice(element : TMXmlElement; path : string) : TFhirInvoice;
var
  child : TMXmlElement;
begin
  result := TFhirInvoice.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseInvoiceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseInvoiceChild(value : TFhirInvoice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirInvoiceStatusEnum, SYSTEMS_TFhirInvoiceStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'cancelledReason') then
        value.cancelledReasonElement := ParseString(child, path+'/cancelledReason') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'recipient') then
        value.recipient := ParseReference(child, path+'/recipient') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseInvoiceParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'issuer') then
        value.issuer := ParseReference(child, path+'/issuer') {L740}
      else if (child.localName = 'account') then
        value.account := ParseReference(child, path+'/account') {L740}
      else if (child.localName = 'lineItem') then
        value.lineItemList.Add(ParseInvoiceLineItem(child, path+'/lineItem')) {L631}
      else if (child.localName = 'totalPriceComponent') then
        value.totalPriceComponentList.Add(ParseInvoiceLineItemPriceComponent(child, path+'/totalPriceComponent')) {L631}
      else if (child.localName = 'totalNet') then
        value.totalNet := ParseMoney(child, path+'/totalNet') {L740}
      else if (child.localName = 'totalGross') then
        value.totalGross := ParseMoney(child, path+'/totalGross') {L740}
      else if (child.localName = 'paymentTerms') then
        value.paymentTermsElement := ParseMarkdown(child, path+'/paymentTerms') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeInvoice(xml : TXmlBuilder; name : String; value : TFhirInvoice);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeInvoiceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeInvoiceChildren(xml : TXmlBuilder; value : TFhirInvoice);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirInvoiceStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'cancelledReason', value.cancelledReasonElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'recipient', value.recipient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeInvoiceParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'issuer', value.issuer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'account', value.account); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.lineItemList.Count - 1 do
      ComposeInvoiceLineItem(xml, 'lineItem', value.lineItemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.totalPriceComponentList.Count - 1 do
      ComposeInvoiceLineItemPriceComponent(xml, 'totalPriceComponent', value.totalPriceComponentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMoney(xml, 'totalNet', value.totalNet); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMoney(xml, 'totalGross', value.totalGross); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'paymentTerms', value.paymentTermsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
function TFHIRXmlParser.ParseLibrary(element : TMXmlElement; path : string) : TFhirLibrary;
var
  child : TMXmlElement;
begin
  result := TFhirLibrary.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLibraryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLibraryChild(value : TFhirLibrary; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'usage') then
        value.usageElement := ParseString(child, path+'/usage') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'topic') then
        value.topicList.Add(ParseCodeableConcept(child, path+'/topic')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseParameterDefinition(child, path+'/parameter')) {L631}
      else if (child.localName = 'dataRequirement') then
        value.dataRequirementList.Add(ParseDataRequirement(child, path+'/dataRequirement')) {L631}
      else if (child.localName = 'content') then
        value.contentList.Add(ParseAttachment(child, path+'/content')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLibrary(xml : TXmlBuilder; name : String; value : TFhirLibrary);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeLibraryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeLibraryChildren(xml : TXmlBuilder; value : TFhirLibrary);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'usage', value.usageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', value.topicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeParameterDefinition(xml, 'parameter', value.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dataRequirementList.Count - 1 do
      ComposeDataRequirement(xml, 'dataRequirement', value.dataRequirementList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contentList.Count - 1 do
      ComposeAttachment(xml, 'content', value.contentList[i]);
end;

{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
function TFHIRXmlParser.ParseLinkageItem(element : TMXmlElement; path : string) : TFhirLinkageItem;
var
  child : TMXmlElement;
begin
  result := TFhirLinkageItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLinkageItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLinkageItemChild(value : TFhirLinkageItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirLinkageTypeEnum, SYSTEMS_TFhirLinkageTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'resource') then
        value.resource := ParseReference(child, path+'/resource') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLinkageItem(xml : TXmlBuilder; name : String; value : TFhirLinkageItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeLinkageItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeLinkageItemChildren(xml : TXmlBuilder; value : TFhirLinkageItem);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirLinkageTypeEnum); {L735}
  ComposeReference(xml, 'resource', value.resource); {L741}
end;

function TFHIRXmlParser.ParseLinkage(element : TMXmlElement; path : string) : TFhirLinkage;
var
  child : TMXmlElement;
begin
  result := TFhirLinkage.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLinkageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLinkageChild(value : TFhirLinkage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseLinkageItem(child, path+'/item')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLinkage(xml : TXmlBuilder; name : String; value : TFhirLinkage);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeLinkageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeLinkageChildren(xml : TXmlBuilder; value : TFhirLinkage);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  for i := 0 to value.itemList.Count - 1 do
      ComposeLinkageItem(xml, 'item', value.itemList[i]);
end;

{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
function TFHIRXmlParser.ParseListEntry(element : TMXmlElement; path : string) : TFhirListEntry;
var
  child : TMXmlElement;
begin
  result := TFhirListEntry.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseListEntryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseListEntryChild(value : TFhirListEntry; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'flag') then
        value.flag := ParseCodeableConcept(child, path+'/flag') {L740}
      else if (child.localName = 'deleted') then
        value.deletedElement := ParseBoolean(child, path+'/deleted') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'item') then
        value.item := ParseReference(child, path+'/item') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeListEntry(xml : TXmlBuilder; name : String; value : TFhirListEntry);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeListEntryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeListEntryChildren(xml : TXmlBuilder; value : TFhirListEntry);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'flag', value.flag); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'deleted', value.deletedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  ComposeReference(xml, 'item', value.item); {L741}
end;

function TFHIRXmlParser.ParseList(element : TMXmlElement; path : string) : TFhirList;
var
  child : TMXmlElement;
begin
  result := TFhirList.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseListChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseListChild(value : TFhirList; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirListStatusEnum, SYSTEMS_TFhirListStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirListModeEnum, SYSTEMS_TFhirListModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'source') then
        value.source := ParseReference(child, path+'/source') {L740}
      else if (child.localName = 'orderedBy') then
        value.orderedBy := ParseCodeableConcept(child, path+'/orderedBy') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'entry') then
        value.entryList.Add(ParseListEntry(child, path+'/entry')) {L631}
      else if (child.localName = 'emptyReason') then
        value.emptyReason := ParseCodeableConcept(child, path+'/emptyReason') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeList(xml : TXmlBuilder; name : String; value : TFhirList);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeListChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeListChildren(xml : TXmlBuilder; value : TFhirList);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirListStatusEnum); {L735}
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirListModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'source', value.source); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'orderedBy', value.orderedBy); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entryList.Count - 1 do
      ComposeListEntry(xml, 'entry', value.entryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'emptyReason', value.emptyReason); {L741}
end;

{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
function TFHIRXmlParser.ParseLocationPosition(element : TMXmlElement; path : string) : TFhirLocationPosition;
var
  child : TMXmlElement;
begin
  result := TFhirLocationPosition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLocationPositionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLocationPositionChild(value : TFhirLocationPosition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'longitude') then
        value.longitudeElement := ParseDecimal(child, path+'/longitude') {L737}
      else if (child.localName = 'latitude') then
        value.latitudeElement := ParseDecimal(child, path+'/latitude') {L737}
      else if (child.localName = 'altitude') then
        value.altitudeElement := ParseDecimal(child, path+'/altitude') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLocationPosition(xml : TXmlBuilder; name : String; value : TFhirLocationPosition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeLocationPositionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeLocationPositionChildren(xml : TXmlBuilder; value : TFhirLocationPosition);
begin
  composeBackboneElementChildren(xml, value);
  ComposeDecimal(xml, 'longitude', value.longitudeElement); {L738}
  ComposeDecimal(xml, 'latitude', value.latitudeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'altitude', value.altitudeElement); {L738}
end;

function TFHIRXmlParser.ParseLocationHoursOfOperation(element : TMXmlElement; path : string) : TFhirLocationHoursOfOperation;
var
  child : TMXmlElement;
begin
  result := TFhirLocationHoursOfOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLocationHoursOfOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLocationHoursOfOperationChild(value : TFhirLocationHoursOfOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'daysOfWeek') then
        value.daysOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, child, path+'/daysOfWeek')){y.1}
      else if (child.localName = 'allDay') then
        value.allDayElement := ParseBoolean(child, path+'/allDay') {L737}
      else if (child.localName = 'openingTime') then
        value.openingTimeElement := ParseTime(child, path+'/openingTime') {L737}
      else if (child.localName = 'closingTime') then
        value.closingTimeElement := ParseTime(child, path+'/closingTime') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLocationHoursOfOperation(xml : TXmlBuilder; name : String; value : TFhirLocationHoursOfOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeLocationHoursOfOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeLocationHoursOfOperationChildren(xml : TXmlBuilder; value : TFhirLocationHoursOfOperation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.daysOfWeekList.Count - 1 do
      ComposeEnum(xml, 'daysOfWeek', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allDay', value.allDayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'openingTime', value.openingTimeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'closingTime', value.closingTimeElement); {L738}
end;

function TFHIRXmlParser.ParseLocation(element : TMXmlElement; path : string) : TFhirLocation;
var
  child : TMXmlElement;
begin
  result := TFhirLocation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseLocationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseLocationChild(value : TFhirLocation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirLocationStatusEnum, SYSTEMS_TFhirLocationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'operationalStatus') then
        value.operationalStatus := ParseCoding(child, path+'/operationalStatus') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'alias') then
        value.aliasList.Add(ParseString(child, path+'/alias')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirLocationModeEnum, SYSTEMS_TFhirLocationModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'address') then
        value.address := ParseAddress(child, path+'/address') {L740}
      else if (child.localName = 'physicalType') then
        value.physicalType := ParseCodeableConcept(child, path+'/physicalType') {L740}
      else if (child.localName = 'position') then
        value.position := ParseLocationPosition(child, path+'/position') {L740}
      else if (child.localName = 'managingOrganization') then
        value.managingOrganization := ParseReference(child, path+'/managingOrganization') {L740}
      else if (child.localName = 'partOf') then
        value.partOf := ParseReference(child, path+'/partOf') {L740}
      else if (child.localName = 'hoursOfOperation') then
        value.hoursOfOperationList.Add(ParseLocationHoursOfOperation(child, path+'/hoursOfOperation')) {L631}
      else if (child.localName = 'availabilityExceptions') then
        value.availabilityExceptionsElement := ParseString(child, path+'/availabilityExceptions') {L737}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeLocation(xml : TXmlBuilder; name : String; value : TFhirLocation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeLocationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeLocationChildren(xml : TXmlBuilder; value : TFhirLocation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirLocationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCoding(xml, 'operationalStatus', value.operationalStatus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.aliasList.Count - 1 do
      ComposeString(xml, 'alias', value.aliasList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirLocationModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', value.address); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'physicalType', value.physicalType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeLocationPosition(xml, 'position', value.position); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'managingOrganization', value.managingOrganization); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'partOf', value.partOf); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.hoursOfOperationList.Count - 1 do
      ComposeLocationHoursOfOperation(xml, 'hoursOfOperation', value.hoursOfOperationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'availabilityExceptions', value.availabilityExceptionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
end;

{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
function TFHIRXmlParser.ParseManufacturedItemDefinitionProperty(element : TMXmlElement; path : string) : TFhirManufacturedItemDefinitionProperty;
var
  child : TMXmlElement;
begin
  result := TFhirManufacturedItemDefinitionProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseManufacturedItemDefinitionPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseManufacturedItemDefinitionPropertyChild(value : TFhirManufacturedItemDefinitionProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeManufacturedItemDefinitionProperty(xml : TXmlBuilder; name : String; value : TFhirManufacturedItemDefinitionProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeManufacturedItemDefinitionPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeManufacturedItemDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirManufacturedItemDefinitionProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
end;

function TFHIRXmlParser.ParseManufacturedItemDefinition(element : TMXmlElement; path : string) : TFhirManufacturedItemDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirManufacturedItemDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseManufacturedItemDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseManufacturedItemDefinitionChild(value : TFhirManufacturedItemDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'manufacturedDoseForm') then
        value.manufacturedDoseForm := ParseCodeableConcept(child, path+'/manufacturedDoseForm') {L740}
      else if (child.localName = 'unitOfPresentation') then
        value.unitOfPresentation := ParseCodeableConcept(child, path+'/unitOfPresentation') {L740}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseReference(child, path+'/ingredient')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseManufacturedItemDefinitionProperty(child, path+'/property')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeManufacturedItemDefinition(xml : TXmlBuilder; name : String; value : TFhirManufacturedItemDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeManufacturedItemDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeManufacturedItemDefinitionChildren(xml : TXmlBuilder; value : TFhirManufacturedItemDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeCodeableConcept(xml, 'manufacturedDoseForm', value.manufacturedDoseForm); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'unitOfPresentation', value.unitOfPresentation); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeReference(xml, 'ingredient', value.ingredientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeManufacturedItemDefinitionProperty(xml, 'property', value.property_List[i]);
end;

{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
function TFHIRXmlParser.ParseMeasureGroup(element : TMXmlElement; path : string) : TFhirMeasureGroup;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupChild(value : TFhirMeasureGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'population') then
        value.populationList.Add(ParseMeasureGroupPopulation(child, path+'/population')) {L631}
      else if (child.localName = 'stratifier') then
        value.stratifierList.Add(ParseMeasureGroupStratifier(child, path+'/stratifier')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroup(xml : TXmlBuilder; name : String; value : TFhirMeasureGroup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupChildren(xml : TXmlBuilder; value : TFhirMeasureGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.populationList.Count - 1 do
      ComposeMeasureGroupPopulation(xml, 'population', value.populationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.stratifierList.Count - 1 do
      ComposeMeasureGroupStratifier(xml, 'stratifier', value.stratifierList[i]);
end;

function TFHIRXmlParser.ParseMeasureGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureGroupPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroupPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupPopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupPopulationChild(value : TFhirMeasureGroupPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'criteria') then
        value.criteria := ParseExpression(child, path+'/criteria') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupPopulation(xml : TXmlBuilder; name : String; value : TFhirMeasureGroupPopulation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureGroupPopulationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupPopulationChildren(xml : TXmlBuilder; value : TFhirMeasureGroupPopulation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  ComposeExpression(xml, 'criteria', value.criteria); {L741}
end;

function TFHIRXmlParser.ParseMeasureGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifier;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroupStratifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupStratifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupStratifierChild(value : TFhirMeasureGroupStratifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'criteria') then
        value.criteria := ParseExpression(child, path+'/criteria') {L740}
      else if (child.localName = 'component') then
        value.componentList.Add(ParseMeasureGroupStratifierComponent(child, path+'/component')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifier(xml : TXmlBuilder; name : String; value : TFhirMeasureGroupStratifier);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureGroupStratifierChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifierChildren(xml : TXmlBuilder; value : TFhirMeasureGroupStratifier);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'criteria', value.criteria); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.componentList.Count - 1 do
      ComposeMeasureGroupStratifierComponent(xml, 'component', value.componentList[i]);
end;

function TFHIRXmlParser.ParseMeasureGroupStratifierComponent(element : TMXmlElement; path : string) : TFhirMeasureGroupStratifierComponent;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureGroupStratifierComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureGroupStratifierComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureGroupStratifierComponentChild(value : TFhirMeasureGroupStratifierComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'criteria') then
        value.criteria := ParseExpression(child, path+'/criteria') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifierComponent(xml : TXmlBuilder; name : String; value : TFhirMeasureGroupStratifierComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureGroupStratifierComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureGroupStratifierComponentChildren(xml : TXmlBuilder; value : TFhirMeasureGroupStratifierComponent);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  ComposeExpression(xml, 'criteria', value.criteria); {L741}
end;

function TFHIRXmlParser.ParseMeasureSupplementalData(element : TMXmlElement; path : string) : TFhirMeasureSupplementalData;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureSupplementalData.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureSupplementalDataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureSupplementalDataChild(value : TFhirMeasureSupplementalData; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'usage') then
        value.usageList.Add(ParseCodeableConcept(child, path+'/usage')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'criteria') then
        value.criteria := ParseExpression(child, path+'/criteria') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureSupplementalData(xml : TXmlBuilder; name : String; value : TFhirMeasureSupplementalData);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureSupplementalDataChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureSupplementalDataChildren(xml : TXmlBuilder; value : TFhirMeasureSupplementalData);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.usageList.Count - 1 do
      ComposeCodeableConcept(xml, 'usage', value.usageList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  ComposeExpression(xml, 'criteria', value.criteria); {L741}
end;

function TFHIRXmlParser.ParseMeasure(element : TMXmlElement; path : string) : TFhirMeasure;
var
  child : TMXmlElement;
begin
  result := TFhirMeasure.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureChild(value : TFhirMeasure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'usage') then
        value.usageElement := ParseString(child, path+'/usage') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'topic') then
        value.topicList.Add(ParseCodeableConcept(child, path+'/topic')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'library') then
        value.library_List.Add(ParseCanonical(child, path+'/library')) {L631}
      else if (child.localName = 'disclaimer') then
        value.disclaimerElement := ParseMarkdown(child, path+'/disclaimer') {L737}
      else if (child.localName = 'scoring') then
        value.scoring := ParseCodeableConcept(child, path+'/scoring') {L740}
      else if (child.localName = 'compositeScoring') then
        value.compositeScoring := ParseCodeableConcept(child, path+'/compositeScoring') {L740}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'riskAdjustment') then
        value.riskAdjustmentElement := ParseString(child, path+'/riskAdjustment') {L737}
      else if (child.localName = 'rateAggregation') then
        value.rateAggregationElement := ParseString(child, path+'/rateAggregation') {L737}
      else if (child.localName = 'rationale') then
        value.rationaleElement := ParseMarkdown(child, path+'/rationale') {L737}
      else if (child.localName = 'clinicalRecommendationStatement') then
        value.clinicalRecommendationStatementElement := ParseMarkdown(child, path+'/clinicalRecommendationStatement') {L737}
      else if (child.localName = 'improvementNotation') then
        value.improvementNotation := ParseCodeableConcept(child, path+'/improvementNotation') {L740}
      else if (child.localName = 'definition') then
        value.definitionList.Add(ParseMarkdown(child, path+'/definition')) {L631}
      else if (child.localName = 'guidance') then
        value.guidanceElement := ParseMarkdown(child, path+'/guidance') {L737}
      else if (child.localName = 'group') then
        value.groupList.Add(ParseMeasureGroup(child, path+'/group')) {L631}
      else if (child.localName = 'supplementalData') then
        value.supplementalDataList.Add(ParseMeasureSupplementalData(child, path+'/supplementalData')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasure(xml : TXmlBuilder; name : String; value : TFhirMeasure);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureChildren(xml : TXmlBuilder; value : TFhirMeasure);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'usage', value.usageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', value.topicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', value.library_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'disclaimer', value.disclaimerElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'scoring', value.scoring); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'compositeScoring', value.compositeScoring); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'riskAdjustment', value.riskAdjustmentElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'rateAggregation', value.rateAggregationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'rationale', value.rationaleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'clinicalRecommendationStatement', value.clinicalRecommendationStatementElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'improvementNotation', value.improvementNotation); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.definitionList.Count - 1 do
      ComposeMarkdown(xml, 'definition', value.definitionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'guidance', value.guidanceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.groupList.Count - 1 do
      ComposeMeasureGroup(xml, 'group', value.groupList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supplementalDataList.Count - 1 do
      ComposeMeasureSupplementalData(xml, 'supplementalData', value.supplementalDataList[i]);
end;

{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
function TFHIRXmlParser.ParseMeasureReportGroup(element : TMXmlElement; path : string) : TFhirMeasureReportGroup;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupChild(value : TFhirMeasureReportGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'population') then
        value.populationList.Add(ParseMeasureReportGroupPopulation(child, path+'/population')) {L631}
      else if (child.localName = 'measureScore') then
        value.measureScore := ParseQuantity(child, path+'/measureScore') {L740}
      else if (child.localName = 'stratifier') then
        value.stratifierList.Add(ParseMeasureReportGroupStratifier(child, path+'/stratifier')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroup(xml : TXmlBuilder; name : String; value : TFhirMeasureReportGroup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.populationList.Count - 1 do
      ComposeMeasureReportGroupPopulation(xml, 'population', value.populationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'measureScore', value.measureScore); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.stratifierList.Count - 1 do
      ComposeMeasureReportGroupStratifier(xml, 'stratifier', value.stratifierList[i]);
end;

function TFHIRXmlParser.ParseMeasureReportGroupPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupPopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupPopulationChild(value : TFhirMeasureReportGroupPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'count') then
        value.countElement := ParseInteger(child, path+'/count') {L737}
      else if (child.localName = 'subjectResults') then
        value.subjectResults := ParseReference(child, path+'/subjectResults') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupPopulation(xml : TXmlBuilder; name : String; value : TFhirMeasureReportGroupPopulation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportGroupPopulationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupPopulationChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupPopulation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'count', value.countElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'subjectResults', value.subjectResults); {L741}
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifier(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifier;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierChild(value : TFhirMeasureReportGroupStratifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'stratum') then
        value.stratumList.Add(ParseMeasureReportGroupStratifierStratum(child, path+'/stratum')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifier(xml : TXmlBuilder; name : String; value : TFhirMeasureReportGroupStratifier);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportGroupStratifierChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifier);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.stratumList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratum(xml, 'stratum', value.stratumList[i]);
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratum(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratum;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifierStratum.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierStratumChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumChild(value : TFhirMeasureReportGroupStratifierStratum; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'value') then
        value.value := ParseCodeableConcept(child, path+'/value') {L740}
      else if (child.localName = 'component') then
        value.componentList.Add(ParseMeasureReportGroupStratifierStratumComponent(child, path+'/component')) {L631}
      else if (child.localName = 'population') then
        value.populationList.Add(ParseMeasureReportGroupStratifierStratumPopulation(child, path+'/population')) {L631}
      else if (child.localName = 'measureScore') then
        value.measureScore := ParseQuantity(child, path+'/measureScore') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratum(xml : TXmlBuilder; name : String; value : TFhirMeasureReportGroupStratifierStratum);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportGroupStratifierStratumChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifierStratum);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'value', value.value); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.componentList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumComponent(xml, 'component', value.componentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.populationList.Count - 1 do
      ComposeMeasureReportGroupStratifierStratumPopulation(xml, 'population', value.populationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'measureScore', value.measureScore); {L741}
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumComponent(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumComponent;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifierStratumComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierStratumComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumComponentChild(value : TFhirMeasureReportGroupStratifierStratumComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'value') then
        value.value := ParseCodeableConcept(child, path+'/value') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumComponent(xml : TXmlBuilder; name : String; value : TFhirMeasureReportGroupStratifierStratumComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportGroupStratifierStratumComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumComponentChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifierStratumComponent);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeCodeableConcept(xml, 'value', value.value); {L741}
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumPopulation(element : TMXmlElement; path : string) : TFhirMeasureReportGroupStratifierStratumPopulation;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReportGroupStratifierStratumPopulation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportGroupStratifierStratumPopulationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportGroupStratifierStratumPopulationChild(value : TFhirMeasureReportGroupStratifierStratumPopulation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'count') then
        value.countElement := ParseInteger(child, path+'/count') {L737}
      else if (child.localName = 'subjectResults') then
        value.subjectResults := ParseReference(child, path+'/subjectResults') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumPopulation(xml : TXmlBuilder; name : String; value : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportGroupStratifierStratumPopulationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportGroupStratifierStratumPopulationChildren(xml : TXmlBuilder; value : TFhirMeasureReportGroupStratifierStratumPopulation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'count', value.countElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'subjectResults', value.subjectResults); {L741}
end;

function TFHIRXmlParser.ParseMeasureReport(element : TMXmlElement; path : string) : TFhirMeasureReport;
var
  child : TMXmlElement;
begin
  result := TFhirMeasureReport.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMeasureReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMeasureReportChild(value : TFhirMeasureReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMeasureReportStatusEnum, SYSTEMS_TFhirMeasureReportStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirMeasureReportTypeEnum, SYSTEMS_TFhirMeasureReportTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'measure') then
        value.measureElement := ParseCanonical(child, path+'/measure') {L737}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'reporter') then
        value.reporter := ParseReference(child, path+'/reporter') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'improvementNotation') then
        value.improvementNotation := ParseCodeableConcept(child, path+'/improvementNotation') {L740}
      else if (child.localName = 'group') then
        value.groupList.Add(ParseMeasureReportGroup(child, path+'/group')) {L631}
      else if (child.localName = 'evaluatedResource') then
        value.evaluatedResourceList.Add(ParseReference(child, path+'/evaluatedResource')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMeasureReport(xml : TXmlBuilder; name : String; value : TFhirMeasureReport);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMeasureReportChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMeasureReportChildren(xml : TXmlBuilder; value : TFhirMeasureReport);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMeasureReportStatusEnum); {L735}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirMeasureReportTypeEnum); {L735}
  ComposeCanonical(xml, 'measure', value.measureElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'reporter', value.reporter); {L741}
  ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'improvementNotation', value.improvementNotation); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.groupList.Count - 1 do
      ComposeMeasureReportGroup(xml, 'group', value.groupList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.evaluatedResourceList.Count - 1 do
      ComposeReference(xml, 'evaluatedResource', value.evaluatedResourceList[i]);
end;

{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDICATION}
function TFHIRXmlParser.ParseMedicationIngredient(element : TMXmlElement; path : string) : TFhirMedicationIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationIngredientChild(value : TFhirMedicationIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'item') then
        value.item := ParseCodeableReference(child, path+'/item') {L740}
      else if (child.localName = 'isActive') then
        value.isActiveElement := ParseBoolean(child, path+'/isActive') {L737}
      else if (child.localName = 'strengthRatio') then
        value.strength := ParseRatio(child, path+'/strengthRatio') {L891}
      else if (child.localName = 'strengthCodeableConcept') then
        value.strength := ParseCodeableConcept(child, path+'/strengthCodeableConcept') {L891}
      else if (child.localName = 'strengthQuantity') then
        value.strength := ParseQuantity(child, path+'/strengthQuantity') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationIngredient(xml : TXmlBuilder; name : String; value : TFhirMedicationIngredient);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationIngredientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationIngredientChildren(xml : TXmlBuilder; value : TFhirMedicationIngredient);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableReference(xml, 'item', value.item); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'isActive', value.isActiveElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.strength is TFhirRatio) {6} then
    ComposeRatio(xml, 'strengthRatio', TFhirRatio(value.strength))
  else if (SummaryOption in [soFull, soData]) and (value.strength is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'strengthCodeableConcept', TFhirCodeableConcept(value.strength))
  else if (SummaryOption in [soFull, soData]) and (value.strength is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'strengthQuantity', TFhirQuantity(value.strength));
end;

function TFHIRXmlParser.ParseMedicationBatch(element : TMXmlElement; path : string) : TFhirMedicationBatch;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationBatch.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationBatchChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationBatchChild(value : TFhirMedicationBatch; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'lotNumber') then
        value.lotNumberElement := ParseString(child, path+'/lotNumber') {L737}
      else if (child.localName = 'expirationDate') then
        value.expirationDateElement := ParseDateTime(child, path+'/expirationDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationBatch(xml : TXmlBuilder; name : String; value : TFhirMedicationBatch);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationBatchChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationBatchChildren(xml : TXmlBuilder; value : TFhirMedicationBatch);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lotNumber', value.lotNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'expirationDate', value.expirationDateElement); {L738}
end;

function TFHIRXmlParser.ParseMedication(element : TMXmlElement; path : string) : TFhirMedication;
var
  child : TMXmlElement;
begin
  result := TFhirMedication.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationChild(value : TFhirMedication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMedicationStatusCodesEnum, SYSTEMS_TFhirMedicationStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'manufacturer') then
        value.manufacturer := ParseReference(child, path+'/manufacturer') {L740}
      else if (child.localName = 'doseForm') then
        value.doseForm := ParseCodeableConcept(child, path+'/doseForm') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseRatio(child, path+'/amount') {L740}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseMedicationIngredient(child, path+'/ingredient')) {L631}
      else if (child.localName = 'batch') then
        value.batch := ParseMedicationBatch(child, path+'/batch') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedication(xml : TXmlBuilder; name : String; value : TFhirMedication);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationChildren(xml : TXmlBuilder; value : TFhirMedication);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMedicationStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'manufacturer', value.manufacturer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'doseForm', value.doseForm); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeMedicationIngredient(xml, 'ingredient', value.ingredientList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationBatch(xml, 'batch', value.batch); {L741}
end;

{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
function TFHIRXmlParser.ParseMedicationAdministrationPerformer(element : TMXmlElement; path : string) : TFhirMedicationAdministrationPerformer;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationAdministrationPerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationAdministrationPerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationAdministrationPerformerChild(value : TFhirMedicationAdministrationPerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationPerformer(xml : TXmlBuilder; name : String; value : TFhirMedicationAdministrationPerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationAdministrationPerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationPerformerChildren(xml : TXmlBuilder; value : TFhirMedicationAdministrationPerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseMedicationAdministrationDosage(element : TMXmlElement; path : string) : TFhirMedicationAdministrationDosage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationAdministrationDosage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationAdministrationDosageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationAdministrationDosageChild(value : TFhirMedicationAdministrationDosage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'site') then
        value.site := ParseCodeableConcept(child, path+'/site') {L740}
      else if (child.localName = 'route') then
        value.route := ParseCodeableConcept(child, path+'/route') {L740}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'dose') then
        value.dose := ParseQuantity(child, path+'/dose') {L740}
      else if (child.localName = 'rateRatio') then
        value.rate := ParseRatio(child, path+'/rateRatio') {L891}
      else if (child.localName = 'rateQuantity') then
        value.rate := ParseQuantity(child, path+'/rateQuantity') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationDosage(xml : TXmlBuilder; name : String; value : TFhirMedicationAdministrationDosage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationAdministrationDosageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationDosageChildren(xml : TXmlBuilder; value : TFhirMedicationAdministrationDosage);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'site', value.site); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'route', value.route); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'dose', value.dose); {L741}
  if (SummaryOption in [soFull, soData]) and (value.rate is TFhirRatio) {6} then
    ComposeRatio(xml, 'rateRatio', TFhirRatio(value.rate))
  else if (SummaryOption in [soFull, soData]) and (value.rate is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'rateQuantity', TFhirQuantity(value.rate));
end;

function TFHIRXmlParser.ParseMedicationAdministration(element : TMXmlElement; path : string) : TFhirMedicationAdministration;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationAdministration.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationAdministrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationAdministrationChild(value : TFhirMedicationAdministration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMedicationAdministrationStatusCodesEnum, SYSTEMS_TFhirMedicationAdministrationStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')) {L631}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'medication') then
        value.medication := ParseCodeableReference(child, path+'/medication') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'supportingInformation') then
        value.supportingInformationList.Add(ParseReference(child, path+'/supportingInformation')) {L631}
      else if (child.localName = 'occurencePeriod') then
        value.occurence := ParsePeriod(child, path+'/occurencePeriod') {L891}
      else if (child.localName = 'occurenceDateTime') then
        value.occurence := ParseDateTime(child, path+'/occurenceDateTime') {L891}
      else if (child.localName = 'recorded') then
        value.recordedElement := ParseDateTime(child, path+'/recorded') {L737}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseMedicationAdministrationPerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'device') then
        value.deviceList.Add(ParseReference(child, path+'/device')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'dosage') then
        value.dosage := ParseMedicationAdministrationDosage(child, path+'/dosage') {L740}
      else if (child.localName = 'eventHistory') then
        value.eventHistoryList.Add(ParseReference(child, path+'/eventHistory')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministration(xml : TXmlBuilder; name : String; value : TFhirMedicationAdministration);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationAdministrationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationAdministrationChildren(xml : TXmlBuilder; value : TFhirMedicationAdministration);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMedicationAdministrationStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', value.statusReasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableReference(xml, 'medication', value.medication); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(xml, 'supportingInformation', value.supportingInformationList[i]);
  if (value.occurence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurencePeriod', TFhirPeriod(value.occurence))
  else if (value.occurence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurenceDateTime', TFhirDateTime(value.occurence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'recorded', value.recordedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeMedicationAdministrationPerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.deviceList.Count - 1 do
      ComposeReference(xml, 'device', value.deviceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationAdministrationDosage(xml, 'dosage', value.dosage); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.eventHistoryList.Count - 1 do
      ComposeReference(xml, 'eventHistory', value.eventHistoryList[i]);
end;

{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
function TFHIRXmlParser.ParseMedicationDispensePerformer(element : TMXmlElement; path : string) : TFhirMedicationDispensePerformer;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationDispensePerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationDispensePerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationDispensePerformerChild(value : TFhirMedicationDispensePerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispensePerformer(xml : TXmlBuilder; name : String; value : TFhirMedicationDispensePerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationDispensePerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispensePerformerChildren(xml : TXmlBuilder; value : TFhirMedicationDispensePerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseMedicationDispenseSubstitution(element : TMXmlElement; path : string) : TFhirMedicationDispenseSubstitution;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationDispenseSubstitution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationDispenseSubstitutionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationDispenseSubstitutionChild(value : TFhirMedicationDispenseSubstitution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'wasSubstituted') then
        value.wasSubstitutedElement := ParseBoolean(child, path+'/wasSubstituted') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableConcept(child, path+'/reason')) {L631}
      else if (child.localName = 'responsibleParty') then
        value.responsibleParty := ParseReference(child, path+'/responsibleParty') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispenseSubstitution(xml : TXmlBuilder; name : String; value : TFhirMedicationDispenseSubstitution);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationDispenseSubstitutionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispenseSubstitutionChildren(xml : TXmlBuilder; value : TFhirMedicationDispenseSubstitution);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'wasSubstituted', value.wasSubstitutedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'responsibleParty', value.responsibleParty); {L741}
end;

function TFHIRXmlParser.ParseMedicationDispense(element : TMXmlElement; path : string) : TFhirMedicationDispense;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationDispense.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationDispenseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationDispenseChild(value : TFhirMedicationDispense; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMedicationDispenseStatusCodesEnum, SYSTEMS_TFhirMedicationDispenseStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableReference(child, path+'/statusReason') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'medication') then
        value.medication := ParseCodeableReference(child, path+'/medication') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'supportingInformation') then
        value.supportingInformationList.Add(ParseReference(child, path+'/supportingInformation')) {L631}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseMedicationDispensePerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'authorizingPrescription') then
        value.authorizingPrescriptionList.Add(ParseReference(child, path+'/authorizingPrescription')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'daysSupply') then
        value.daysSupply := ParseQuantity(child, path+'/daysSupply') {L740}
      else if (child.localName = 'whenPrepared') then
        value.whenPreparedElement := ParseDateTime(child, path+'/whenPrepared') {L737}
      else if (child.localName = 'whenHandedOver') then
        value.whenHandedOverElement := ParseDateTime(child, path+'/whenHandedOver') {L737}
      else if (child.localName = 'destination') then
        value.destination := ParseReference(child, path+'/destination') {L740}
      else if (child.localName = 'receiver') then
        value.receiverList.Add(ParseReference(child, path+'/receiver')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'renderedDosageInstruction') then
        value.renderedDosageInstructionElement := ParseString(child, path+'/renderedDosageInstruction') {L737}
      else if (child.localName = 'dosageInstruction') then
        value.dosageInstructionList.Add(ParseDosage(child, path+'/dosageInstruction')) {L631}
      else if (child.localName = 'substitution') then
        value.substitution := ParseMedicationDispenseSubstitution(child, path+'/substitution') {L740}
      else if (child.localName = 'detectedIssue') then
        value.detectedIssueList.Add(ParseReference(child, path+'/detectedIssue')) {L631}
      else if (child.localName = 'eventHistory') then
        value.eventHistoryList.Add(ParseReference(child, path+'/eventHistory')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispense(xml : TXmlBuilder; name : String; value : TFhirMedicationDispense);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationDispenseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationDispenseChildren(xml : TXmlBuilder; value : TFhirMedicationDispense);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMedicationDispenseStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableReference(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableReference(xml, 'medication', value.medication); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(xml, 'supportingInformation', value.supportingInformationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeMedicationDispensePerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorizingPrescriptionList.Count - 1 do
      ComposeReference(xml, 'authorizingPrescription', value.authorizingPrescriptionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'daysSupply', value.daysSupply); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'whenPrepared', value.whenPreparedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'whenHandedOver', value.whenHandedOverElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'destination', value.destination); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.receiverList.Count - 1 do
      ComposeReference(xml, 'receiver', value.receiverList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'renderedDosageInstruction', value.renderedDosageInstructionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dosageInstructionList.Count - 1 do
      ComposeDosage(xml, 'dosageInstruction', value.dosageInstructionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationDispenseSubstitution(xml, 'substitution', value.substitution); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detectedIssueList.Count - 1 do
      ComposeReference(xml, 'detectedIssue', value.detectedIssueList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.eventHistoryList.Count - 1 do
      ComposeReference(xml, 'eventHistory', value.eventHistoryList[i]);
end;

{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
function TFHIRXmlParser.ParseMedicationKnowledgeRelatedMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRelatedMedicationKnowledge;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRelatedMedicationKnowledge.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRelatedMedicationKnowledgeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRelatedMedicationKnowledgeChild(value : TFhirMedicationKnowledgeRelatedMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'reference') then
        value.referenceList.Add(ParseReference(child, path+'/reference')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRelatedMedicationKnowledge(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeRelatedMedicationKnowledgeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRelatedMedicationKnowledgeChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRelatedMedicationKnowledge);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  for i := 0 to value.referenceList.Count - 1 do
      ComposeReference(xml, 'reference', value.referenceList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonograph(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonograph;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeMonograph.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeMonographChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonographChild(value : TFhirMedicationKnowledgeMonograph; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'source') then
        value.source := ParseReference(child, path+'/source') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonograph(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeMonograph);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeMonographChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonographChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeMonograph);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'source', value.source); {L741}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeIngredient(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeIngredientChild(value : TFhirMedicationKnowledgeIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'item') then
        value.item := ParseCodeableReference(child, path+'/item') {L740}
      else if (child.localName = 'isActive') then
        value.isActiveElement := ParseBoolean(child, path+'/isActive') {L737}
      else if (child.localName = 'strengthRatio') then
        value.strength := ParseRatio(child, path+'/strengthRatio') {L891}
      else if (child.localName = 'strengthCodeableConcept') then
        value.strength := ParseCodeableConcept(child, path+'/strengthCodeableConcept') {L891}
      else if (child.localName = 'strengthQuantity') then
        value.strength := ParseQuantity(child, path+'/strengthQuantity') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeIngredient(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeIngredient);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeIngredientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeIngredientChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeIngredient);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableReference(xml, 'item', value.item); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'isActive', value.isActiveElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.strength is TFhirRatio) {6} then
    ComposeRatio(xml, 'strengthRatio', TFhirRatio(value.strength))
  else if (SummaryOption in [soFull, soData]) and (value.strength is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'strengthCodeableConcept', TFhirCodeableConcept(value.strength))
  else if (SummaryOption in [soFull, soData]) and (value.strength is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'strengthQuantity', TFhirQuantity(value.strength));
end;

function TFHIRXmlParser.ParseMedicationKnowledgeCost(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeCost;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeCost.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeCostChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeCostChild(value : TFhirMedicationKnowledgeCost; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'effectiveDate') then
        value.effectiveDateList.Add(ParsePeriod(child, path+'/effectiveDate')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'source') then
        value.sourceElement := ParseString(child, path+'/source') {L737}
      else if (child.localName = 'costMoney') then
        value.cost := ParseMoney(child, path+'/costMoney') {L891}
      else if (child.localName = 'costCodeableConcept') then
        value.cost := ParseCodeableConcept(child, path+'/costCodeableConcept') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeCost(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeCost);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeCostChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeCostChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeCost);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.effectiveDateList.Count - 1 do
      ComposePeriod(xml, 'effectiveDate', value.effectiveDateList[i]);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'source', value.sourceElement); {L738}
  if (value.cost is TFhirMoney) {6} then
    ComposeMoney(xml, 'costMoney', TFhirMoney(value.cost))
  else if (value.cost is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'costCodeableConcept', TFhirCodeableConcept(value.cost));
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonitoringProgram(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMonitoringProgram;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeMonitoringProgram.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeMonitoringProgramChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMonitoringProgramChild(value : TFhirMedicationKnowledgeMonitoringProgram; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonitoringProgram(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeMonitoringProgram);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeMonitoringProgramChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMonitoringProgramChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeMonitoringProgram);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuideline(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuideline;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeAdministrationGuideline.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeAdministrationGuidelineChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelineChild(value : TFhirMedicationKnowledgeAdministrationGuideline; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'dosage') then
        value.dosageList.Add(ParseMedicationKnowledgeAdministrationGuidelineDosage(child, path+'/dosage')) {L631}
      else if (child.localName = 'indication') then
        value.indication := ParseCodeableReference(child, path+'/indication') {L740}
      else if (child.localName = 'patientCharacteristic') then
        value.patientCharacteristicList.Add(ParseMedicationKnowledgeAdministrationGuidelinePatientCharacteristic(child, path+'/patientCharacteristic')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuideline(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeAdministrationGuideline);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeAdministrationGuidelineChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelineChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeAdministrationGuideline);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dosageList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelineDosage(xml, 'dosage', value.dosageList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableReference(xml, 'indication', value.indication); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.patientCharacteristicList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuidelinePatientCharacteristic(xml, 'patientCharacteristic', value.patientCharacteristicList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelineDosage(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelineDosage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelineDosage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeAdministrationGuidelineDosageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelineDosageChild(value : TFhirMedicationKnowledgeAdministrationGuidelineDosage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'dosage') then
        value.dosageList.Add(ParseDosage(child, path+'/dosage')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelineDosage(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeAdministrationGuidelineDosage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeAdministrationGuidelineDosageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelineDosageChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeAdministrationGuidelineDosage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  for i := 0 to value.dosageList.Count - 1 do
      ComposeDosage(xml, 'dosage', value.dosageList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinePatientCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeAdministrationGuidelinePatientCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeAdministrationGuidelinePatientCharacteristicChild(value : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinePatientCharacteristic(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeAdministrationGuidelinePatientCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeAdministrationGuidelinePatientCharacteristicChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeAdministrationGuidelinePatientCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value));
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMedicineClassification(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeMedicineClassification;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeMedicineClassification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeMedicineClassificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeMedicineClassificationChild(value : TFhirMedicationKnowledgeMedicineClassification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'classification') then
        value.classificationList.Add(ParseCodeableConcept(child, path+'/classification')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMedicineClassification(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeMedicineClassification);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeMedicineClassificationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeMedicineClassificationChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeMedicineClassification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'classification', value.classificationList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgePackaging(element : TMXmlElement; path : string) : TFhirMedicationKnowledgePackaging;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgePackaging.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgePackagingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgePackagingChild(value : TFhirMedicationKnowledgePackaging; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'cost') then
        value.cost := ParseMedicationKnowledgeCost(child, path+'/cost') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'device') then
        value.device := ParseReference(child, path+'/device') {L740}
      else if (child.localName = 'material') then
        value.material := ParseCodeableConcept(child, path+'/material') {L740}
      else if (child.localName = 'packaging') then
        value.packagingList.Add(ParseMedicationKnowledgePackaging(child, path+'/packaging')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgePackaging(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgePackaging);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgePackagingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgePackagingChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgePackaging);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationKnowledgeCost(xml, 'cost', value.cost); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'device', value.device); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'material', value.material); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.packagingList.Count - 1 do
      ComposeMedicationKnowledgePackaging(xml, 'packaging', value.packagingList[i]);
end;

function TFHIRXmlParser.ParseMedicationKnowledgeDrugCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeDrugCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeDrugCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeDrugCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeDrugCharacteristicChild(value : TFhirMedicationKnowledgeDrugCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeDrugCharacteristic(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeDrugCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeDrugCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeDrugCharacteristicChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeDrugCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value));
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatory(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatory;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatory.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryChild(value : TFhirMedicationKnowledgeRegulatory; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'regulatoryAuthority') then
        value.regulatoryAuthority := ParseReference(child, path+'/regulatoryAuthority') {L740}
      else if (child.localName = 'substitution') then
        value.substitutionList.Add(ParseMedicationKnowledgeRegulatorySubstitution(child, path+'/substitution')) {L631}
      else if (child.localName = 'schedule') then
        value.scheduleList.Add(ParseCodeableConcept(child, path+'/schedule')) {L631}
      else if (child.localName = 'maxDispense') then
        value.maxDispense := ParseMedicationKnowledgeRegulatoryMaxDispense(child, path+'/maxDispense') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatory(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeRegulatory);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeRegulatoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRegulatory);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'regulatoryAuthority', value.regulatoryAuthority); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.substitutionList.Count - 1 do
      ComposeMedicationKnowledgeRegulatorySubstitution(xml, 'substitution', value.substitutionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.scheduleList.Count - 1 do
      ComposeCodeableConcept(xml, 'schedule', value.scheduleList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationKnowledgeRegulatoryMaxDispense(xml, 'maxDispense', value.maxDispense); {L741}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatorySubstitution(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatorySubstitution;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatorySubstitution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatorySubstitutionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatorySubstitutionChild(value : TFhirMedicationKnowledgeRegulatorySubstitution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'allowed') then
        value.allowedElement := ParseBoolean(child, path+'/allowed') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatorySubstitution(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeRegulatorySubstitution);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeRegulatorySubstitutionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatorySubstitutionChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRegulatorySubstitution);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  ComposeBoolean(xml, 'allowed', value.allowedElement); {L738}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryMaxDispense(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeRegulatoryMaxDispense;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeRegulatoryMaxDispense.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeRegulatoryMaxDispenseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeRegulatoryMaxDispenseChild(value : TFhirMedicationKnowledgeRegulatoryMaxDispense; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'period') then
        value.period := ParseDuration(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryMaxDispense(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeRegulatoryMaxDispense);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeRegulatoryMaxDispenseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeRegulatoryMaxDispenseChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeRegulatoryMaxDispense);
begin
  composeBackboneElementChildren(xml, value);
  ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseMedicationKnowledgeKineticCharacteristic(element : TMXmlElement; path : string) : TFhirMedicationKnowledgeKineticCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledgeKineticCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeKineticCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeKineticCharacteristicChild(value : TFhirMedicationKnowledgeKineticCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeKineticCharacteristic(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledgeKineticCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeKineticCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeKineticCharacteristicChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledgeKineticCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value));
end;

function TFHIRXmlParser.ParseMedicationKnowledge(element : TMXmlElement; path : string) : TFhirMedicationKnowledge;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationKnowledge.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationKnowledgeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationKnowledgeChild(value : TFhirMedicationKnowledge; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMedicationKnowledgeStatusCodesEnum, SYSTEMS_TFhirMedicationKnowledgeStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'manufacturer') then
        value.manufacturer := ParseReference(child, path+'/manufacturer') {L740}
      else if (child.localName = 'doseForm') then
        value.doseForm := ParseCodeableConcept(child, path+'/doseForm') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseQuantity(child, path+'/amount') {L740}
      else if (child.localName = 'synonym') then
        value.synonymList.Add(ParseString(child, path+'/synonym')) {L631}
      else if (child.localName = 'relatedMedicationKnowledge') then
        value.relatedMedicationKnowledgeList.Add(ParseMedicationKnowledgeRelatedMedicationKnowledge(child, path+'/relatedMedicationKnowledge')) {L631}
      else if (child.localName = 'associatedMedication') then
        value.associatedMedicationList.Add(ParseReference(child, path+'/associatedMedication')) {L631}
      else if (child.localName = 'associatedDefinition') then
        value.associatedDefinition := ParseReference(child, path+'/associatedDefinition') {L740}
      else if (child.localName = 'productType') then
        value.productTypeList.Add(ParseCodeableConcept(child, path+'/productType')) {L631}
      else if (child.localName = 'monograph') then
        value.monographList.Add(ParseMedicationKnowledgeMonograph(child, path+'/monograph')) {L631}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseMedicationKnowledgeIngredient(child, path+'/ingredient')) {L631}
      else if (child.localName = 'device') then
        value.deviceList.Add(ParseReference(child, path+'/device')) {L631}
      else if (child.localName = 'preparationInstruction') then
        value.preparationInstructionElement := ParseMarkdown(child, path+'/preparationInstruction') {L737}
      else if (child.localName = 'intendedRoute') then
        value.intendedRouteList.Add(ParseCodeableConcept(child, path+'/intendedRoute')) {L631}
      else if (child.localName = 'cost') then
        value.costList.Add(ParseMedicationKnowledgeCost(child, path+'/cost')) {L631}
      else if (child.localName = 'monitoringProgram') then
        value.monitoringProgramList.Add(ParseMedicationKnowledgeMonitoringProgram(child, path+'/monitoringProgram')) {L631}
      else if (child.localName = 'administrationGuideline') then
        value.administrationGuidelineList.Add(ParseMedicationKnowledgeAdministrationGuideline(child, path+'/administrationGuideline')) {L631}
      else if (child.localName = 'medicineClassification') then
        value.medicineClassificationList.Add(ParseMedicationKnowledgeMedicineClassification(child, path+'/medicineClassification')) {L631}
      else if (child.localName = 'packaging') then
        value.packagingList.Add(ParseMedicationKnowledgePackaging(child, path+'/packaging')) {L631}
      else if (child.localName = 'drugCharacteristic') then
        value.drugCharacteristicList.Add(ParseMedicationKnowledgeDrugCharacteristic(child, path+'/drugCharacteristic')) {L631}
      else if (child.localName = 'clinicalUseIssue') then
        value.clinicalUseIssueList.Add(ParseReference(child, path+'/clinicalUseIssue')) {L631}
      else if (child.localName = 'regulatory') then
        value.regulatoryList.Add(ParseMedicationKnowledgeRegulatory(child, path+'/regulatory')) {L631}
      else if (child.localName = 'kineticCharacteristic') then
        value.kineticCharacteristicList.Add(ParseMedicationKnowledgeKineticCharacteristic(child, path+'/kineticCharacteristic')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledge(xml : TXmlBuilder; name : String; value : TFhirMedicationKnowledge);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationKnowledgeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationKnowledgeChildren(xml : TXmlBuilder; value : TFhirMedicationKnowledge);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMedicationKnowledgeStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'manufacturer', value.manufacturer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'doseForm', value.doseForm); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.synonymList.Count - 1 do
      ComposeString(xml, 'synonym', value.synonymList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedMedicationKnowledgeList.Count - 1 do
      ComposeMedicationKnowledgeRelatedMedicationKnowledge(xml, 'relatedMedicationKnowledge', value.relatedMedicationKnowledgeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.associatedMedicationList.Count - 1 do
      ComposeReference(xml, 'associatedMedication', value.associatedMedicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'associatedDefinition', value.associatedDefinition); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.productTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'productType', value.productTypeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.monographList.Count - 1 do
      ComposeMedicationKnowledgeMonograph(xml, 'monograph', value.monographList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeMedicationKnowledgeIngredient(xml, 'ingredient', value.ingredientList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.deviceList.Count - 1 do
      ComposeReference(xml, 'device', value.deviceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'preparationInstruction', value.preparationInstructionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.intendedRouteList.Count - 1 do
      ComposeCodeableConcept(xml, 'intendedRoute', value.intendedRouteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.costList.Count - 1 do
      ComposeMedicationKnowledgeCost(xml, 'cost', value.costList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.monitoringProgramList.Count - 1 do
      ComposeMedicationKnowledgeMonitoringProgram(xml, 'monitoringProgram', value.monitoringProgramList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.administrationGuidelineList.Count - 1 do
      ComposeMedicationKnowledgeAdministrationGuideline(xml, 'administrationGuideline', value.administrationGuidelineList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.medicineClassificationList.Count - 1 do
      ComposeMedicationKnowledgeMedicineClassification(xml, 'medicineClassification', value.medicineClassificationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.packagingList.Count - 1 do
      ComposeMedicationKnowledgePackaging(xml, 'packaging', value.packagingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.drugCharacteristicList.Count - 1 do
      ComposeMedicationKnowledgeDrugCharacteristic(xml, 'drugCharacteristic', value.drugCharacteristicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.clinicalUseIssueList.Count - 1 do
      ComposeReference(xml, 'clinicalUseIssue', value.clinicalUseIssueList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.regulatoryList.Count - 1 do
      ComposeMedicationKnowledgeRegulatory(xml, 'regulatory', value.regulatoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.kineticCharacteristicList.Count - 1 do
      ComposeMedicationKnowledgeKineticCharacteristic(xml, 'kineticCharacteristic', value.kineticCharacteristicList[i]);
end;

{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
function TFHIRXmlParser.ParseMedicationRequestDispenseRequest(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequest;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequestDispenseRequest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestDispenseRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestDispenseRequestChild(value : TFhirMedicationRequestDispenseRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'initialFill') then
        value.initialFill := ParseMedicationRequestDispenseRequestInitialFill(child, path+'/initialFill') {L740}
      else if (child.localName = 'dispenseInterval') then
        value.dispenseInterval := ParseDuration(child, path+'/dispenseInterval') {L740}
      else if (child.localName = 'validityPeriod') then
        value.validityPeriod := ParsePeriod(child, path+'/validityPeriod') {L740}
      else if (child.localName = 'numberOfRepeatsAllowed') then
        value.numberOfRepeatsAllowedElement := ParseUnsignedInt(child, path+'/numberOfRepeatsAllowed') {L737}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'expectedSupplyDuration') then
        value.expectedSupplyDuration := ParseDuration(child, path+'/expectedSupplyDuration') {L740}
      else if (child.localName = 'dispenser') then
        value.dispenser := ParseReference(child, path+'/dispenser') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequest(xml : TXmlBuilder; name : String; value : TFhirMedicationRequestDispenseRequest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationRequestDispenseRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequestChildren(xml : TXmlBuilder; value : TFhirMedicationRequestDispenseRequest);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestDispenseRequestInitialFill(xml, 'initialFill', value.initialFill); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'dispenseInterval', value.dispenseInterval); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'validityPeriod', value.validityPeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeUnsignedInt(xml, 'numberOfRepeatsAllowed', value.numberOfRepeatsAllowedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'expectedSupplyDuration', value.expectedSupplyDuration); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'dispenser', value.dispenser); {L741}
end;

function TFHIRXmlParser.ParseMedicationRequestDispenseRequestInitialFill(element : TMXmlElement; path : string) : TFhirMedicationRequestDispenseRequestInitialFill;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequestDispenseRequestInitialFill.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestDispenseRequestInitialFillChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestDispenseRequestInitialFillChild(value : TFhirMedicationRequestDispenseRequestInitialFill; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'duration') then
        value.duration := ParseDuration(child, path+'/duration') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequestInitialFill(xml : TXmlBuilder; name : String; value : TFhirMedicationRequestDispenseRequestInitialFill);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationRequestDispenseRequestInitialFillChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestDispenseRequestInitialFillChildren(xml : TXmlBuilder; value : TFhirMedicationRequestDispenseRequestInitialFill);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'duration', value.duration); {L741}
end;

function TFHIRXmlParser.ParseMedicationRequestSubstitution(element : TMXmlElement; path : string) : TFhirMedicationRequestSubstitution;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequestSubstitution.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestSubstitutionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestSubstitutionChild(value : TFhirMedicationRequestSubstitution; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'allowedCodeableConcept') then
        value.allowed := ParseCodeableConcept(child, path+'/allowedCodeableConcept') {L891}
      else if (child.localName = 'allowedBoolean') then
        value.allowed := ParseBoolean(child, path+'/allowedBoolean') {L891}
      else if (child.localName = 'reason') then
        value.reason := ParseCodeableConcept(child, path+'/reason') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestSubstitution(xml : TXmlBuilder; name : String; value : TFhirMedicationRequestSubstitution);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationRequestSubstitutionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestSubstitutionChildren(xml : TXmlBuilder; value : TFhirMedicationRequestSubstitution);
begin
  composeBackboneElementChildren(xml, value);
  if (value.allowed is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'allowedCodeableConcept', TFhirCodeableConcept(value.allowed))
  else if (value.allowed is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'allowedBoolean', TFhirBoolean(value.allowed));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', value.reason); {L741}
end;

function TFHIRXmlParser.ParseMedicationRequest(element : TMXmlElement; path : string) : TFhirMedicationRequest;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationRequestChild(value : TFhirMedicationRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMedicationrequestStatusEnum, SYSTEMS_TFhirMedicationrequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirMedicationRequestIntentEnum, SYSTEMS_TFhirMedicationRequestIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'doNotPerform') then
        value.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {L737}
      else if (child.localName = 'reported') then
        value.reportedElement := ParseBoolean(child, path+'/reported') {L737}
      else if (child.localName = 'informationSource') then
        value.informationSource := ParseReference(child, path+'/informationSource') {L740}
      else if (child.localName = 'medication') then
        value.medication := ParseCodeableReference(child, path+'/medication') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'supportingInformation') then
        value.supportingInformationList.Add(ParseReference(child, path+'/supportingInformation')) {L631}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'requester') then
        value.requester := ParseReference(child, path+'/requester') {L740}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'performerType') then
        value.performerType := ParseCodeableConcept(child, path+'/performerType') {L740}
      else if (child.localName = 'recorder') then
        value.recorder := ParseReference(child, path+'/recorder') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {L740}
      else if (child.localName = 'courseOfTherapyType') then
        value.courseOfTherapyType := ParseCodeableConcept(child, path+'/courseOfTherapyType') {L740}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseReference(child, path+'/insurance')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'renderedDosageInstruction') then
        value.renderedDosageInstructionElement := ParseString(child, path+'/renderedDosageInstruction') {L737}
      else if (child.localName = 'dosageInstruction') then
        value.dosageInstructionList.Add(ParseDosage(child, path+'/dosageInstruction')) {L631}
      else if (child.localName = 'dispenseRequest') then
        value.dispenseRequest := ParseMedicationRequestDispenseRequest(child, path+'/dispenseRequest') {L740}
      else if (child.localName = 'substitution') then
        value.substitution := ParseMedicationRequestSubstitution(child, path+'/substitution') {L740}
      else if (child.localName = 'priorPrescription') then
        value.priorPrescription := ParseReference(child, path+'/priorPrescription') {L740}
      else if (child.localName = 'detectedIssue') then
        value.detectedIssueList.Add(ParseReference(child, path+'/detectedIssue')) {L631}
      else if (child.localName = 'eventHistory') then
        value.eventHistoryList.Add(ParseReference(child, path+'/eventHistory')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequest(xml : TXmlBuilder; name : String; value : TFhirMedicationRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationRequestChildren(xml : TXmlBuilder; value : TFhirMedicationRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMedicationrequestStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirMedicationRequestIntentEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'doNotPerform', value.doNotPerformElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'reported', value.reportedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'informationSource', value.informationSource); {L741}
  ComposeCodeableReference(xml, 'medication', value.medication); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInformationList.Count - 1 do
      ComposeReference(xml, 'supportingInformation', value.supportingInformationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'requester', value.requester); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'performerType', value.performerType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'recorder', value.recorder); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'groupIdentifier', value.groupIdentifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'courseOfTherapyType', value.courseOfTherapyType); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'renderedDosageInstruction', value.renderedDosageInstructionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dosageInstructionList.Count - 1 do
      ComposeDosage(xml, 'dosageInstruction', value.dosageInstructionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestDispenseRequest(xml, 'dispenseRequest', value.dispenseRequest); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMedicationRequestSubstitution(xml, 'substitution', value.substitution); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'priorPrescription', value.priorPrescription); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detectedIssueList.Count - 1 do
      ComposeReference(xml, 'detectedIssue', value.detectedIssueList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.eventHistoryList.Count - 1 do
      ComposeReference(xml, 'eventHistory', value.eventHistoryList[i]);
end;

{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONUSAGE}
function TFHIRXmlParser.ParseMedicationUsage(element : TMXmlElement; path : string) : TFhirMedicationUsage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicationUsage.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicationUsageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicationUsageChild(value : TFhirMedicationUsage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirMedicationUsageStatusCodesEnum, SYSTEMS_TFhirMedicationUsageStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')) {L631}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'medication') then
        value.medication := ParseCodeableReference(child, path+'/medication') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'effectivePeriod') then
        value.effective := ParsePeriod(child, path+'/effectivePeriod') {L891}
      else if (child.localName = 'effectiveDateTime') then
        value.effective := ParseDateTime(child, path+'/effectiveDateTime') {L891}
      else if (child.localName = 'dateAsserted') then
        value.dateAssertedElement := ParseDateTime(child, path+'/dateAsserted') {L737}
      else if (child.localName = 'informationSource') then
        value.informationSource := ParseReference(child, path+'/informationSource') {L740}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromList.Add(ParseReference(child, path+'/derivedFrom')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'renderedDosageInstruction') then
        value.renderedDosageInstructionElement := ParseString(child, path+'/renderedDosageInstruction') {L737}
      else if (child.localName = 'dosage') then
        value.dosageList.Add(ParseDosage(child, path+'/dosage')) {L631}
      else if (child.localName = 'takenAsOrdered') then
        value.takenAsOrderedElement := ParseBoolean(child, path+'/takenAsOrdered') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicationUsage(xml : TXmlBuilder; name : String; value : TFhirMedicationUsage);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicationUsageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicationUsageChildren(xml : TXmlBuilder; value : TFhirMedicationUsage);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirMedicationUsageStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', value.statusReasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableReference(xml, 'medication', value.medication); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(value.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(value.effective));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'dateAsserted', value.dateAssertedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'informationSource', value.informationSource); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(xml, 'derivedFrom', value.derivedFromList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'renderedDosageInstruction', value.renderedDosageInstructionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dosageList.Count - 1 do
      ComposeDosage(xml, 'dosage', value.dosageList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'takenAsOrdered', value.takenAsOrderedElement); {L738}
end;

{$ENDIF FHIR_MEDICATIONUSAGE}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
function TFHIRXmlParser.ParseMedicinalProductDefinitionContact(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionContact;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinitionContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionContactChild(value : TFhirMedicinalProductDefinitionContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'contact') then
        value.contact := ParseReference(child, path+'/contact') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionContact(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinitionContact);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionContactChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionContactChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionContact);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  ComposeReference(xml, 'contact', value.contact); {L741}
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionName(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionName;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinitionName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionNameChild(value : TFhirMedicinalProductDefinitionName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'productName') then
        value.productNameElement := ParseString(child, path+'/productName') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'namePart') then
        value.namePartList.Add(ParseMedicinalProductDefinitionNameNamePart(child, path+'/namePart')) {L631}
      else if (child.localName = 'countryLanguage') then
        value.countryLanguageList.Add(ParseMedicinalProductDefinitionNameCountryLanguage(child, path+'/countryLanguage')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionName(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinitionName);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionNameChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionNameChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionName);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'productName', value.productNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.namePartList.Count - 1 do
      ComposeMedicinalProductDefinitionNameNamePart(xml, 'namePart', value.namePartList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.countryLanguageList.Count - 1 do
      ComposeMedicinalProductDefinitionNameCountryLanguage(xml, 'countryLanguage', value.countryLanguageList[i]);
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionNameNamePart(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionNameNamePart;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinitionNameNamePart.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionNameNamePartChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionNameNamePartChild(value : TFhirMedicinalProductDefinitionNameNamePart; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'part') then
        value.partElement := ParseString(child, path+'/part') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionNameNamePart(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinitionNameNamePart);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionNameNamePartChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionNameNamePartChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionNameNamePart);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'part', value.partElement); {L738}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionNameCountryLanguage(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionNameCountryLanguage;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinitionNameCountryLanguage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionNameCountryLanguageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionNameCountryLanguageChild(value : TFhirMedicinalProductDefinitionNameCountryLanguage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'country') then
        value.country := ParseCodeableConcept(child, path+'/country') {L740}
      else if (child.localName = 'jurisdiction') then
        value.jurisdiction := ParseCodeableConcept(child, path+'/jurisdiction') {L740}
      else if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionNameCountryLanguage(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinitionNameCountryLanguage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionNameCountryLanguageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionNameCountryLanguageChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionNameCountryLanguage);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'country', value.country); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdiction); {L741}
  ComposeCodeableConcept(xml, 'language', value.language); {L741}
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionCrossReference(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionCrossReference;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinitionCrossReference.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionCrossReferenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionCrossReferenceChild(value : TFhirMedicinalProductDefinitionCrossReference; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'product') then
        value.product := ParseCodeableReference(child, path+'/product') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionCrossReference(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinitionCrossReference);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionCrossReferenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionCrossReferenceChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionCrossReference);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableReference(xml, 'product', value.product); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionManufacturingBusinessOperation(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinitionManufacturingBusinessOperation;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinitionManufacturingBusinessOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionManufacturingBusinessOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionManufacturingBusinessOperationChild(value : TFhirMedicinalProductDefinitionManufacturingBusinessOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableReference(child, path+'/type') {L740}
      else if (child.localName = 'effectiveDate') then
        value.effectiveDate := ParsePeriod(child, path+'/effectiveDate') {L740}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'authorization') then
        value.authorization := ParseReference(child, path+'/authorization') {L740}
      else if (child.localName = 'confidentialityIndicator') then
        value.confidentialityIndicator := ParseCodeableConcept(child, path+'/confidentialityIndicator') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionManufacturingBusinessOperation(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinitionManufacturingBusinessOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionManufacturingBusinessOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionManufacturingBusinessOperationChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinitionManufacturingBusinessOperation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectiveDate', value.effectiveDate); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'authorization', value.authorization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'confidentialityIndicator', value.confidentialityIndicator); {L741}
end;

function TFHIRXmlParser.ParseMedicinalProductDefinition(element : TMXmlElement; path : string) : TFhirMedicinalProductDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirMedicinalProductDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMedicinalProductDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMedicinalProductDefinitionChild(value : TFhirMedicinalProductDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'domain') then
        value.domain := ParseCodeableConcept(child, path+'/domain') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'statusDate') then
        value.statusDateElement := ParseDateTime(child, path+'/statusDate') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'combinedPharmaceuticalDoseForm') then
        value.combinedPharmaceuticalDoseForm := ParseCodeableConcept(child, path+'/combinedPharmaceuticalDoseForm') {L740}
      else if (child.localName = 'indication') then
        value.indicationElement := ParseMarkdown(child, path+'/indication') {L737}
      else if (child.localName = 'legalStatusOfSupply') then
        value.legalStatusOfSupply := ParseCodeableConcept(child, path+'/legalStatusOfSupply') {L740}
      else if (child.localName = 'additionalMonitoringIndicator') then
        value.additionalMonitoringIndicator := ParseCodeableConcept(child, path+'/additionalMonitoringIndicator') {L740}
      else if (child.localName = 'specialMeasures') then
        value.specialMeasuresList.Add(ParseCodeableConcept(child, path+'/specialMeasures')) {L631}
      else if (child.localName = 'paediatricUseIndicator') then
        value.paediatricUseIndicator := ParseCodeableConcept(child, path+'/paediatricUseIndicator') {L740}
      else if (child.localName = 'classification') then
        value.classificationList.Add(ParseCodeableConcept(child, path+'/classification')) {L631}
      else if (child.localName = 'characteristic') then
        value.characteristicList.Add(ParseCodeableConcept(child, path+'/characteristic')) {L631}
      else if (child.localName = 'marketingStatus') then
        value.marketingStatusList.Add(ParseMarketingStatus(child, path+'/marketingStatus')) {L631}
      else if (child.localName = 'pharmaceuticalProduct') then
        value.pharmaceuticalProductList.Add(ParseReference(child, path+'/pharmaceuticalProduct')) {L631}
      else if (child.localName = 'packagedMedicinalProduct') then
        value.packagedMedicinalProductList.Add(ParseReference(child, path+'/packagedMedicinalProduct')) {L631}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseReference(child, path+'/ingredient')) {L631}
      else if (child.localName = 'impurity') then
        value.impurityList.Add(ParseReference(child, path+'/impurity')) {L631}
      else if (child.localName = 'attachedDocument') then
        value.attachedDocumentList.Add(ParseReference(child, path+'/attachedDocument')) {L631}
      else if (child.localName = 'masterFile') then
        value.masterFileList.Add(ParseReference(child, path+'/masterFile')) {L631}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseMedicinalProductDefinitionContact(child, path+'/contact')) {L631}
      else if (child.localName = 'clinicalTrial') then
        value.clinicalTrialList.Add(ParseReference(child, path+'/clinicalTrial')) {L631}
      else if (child.localName = 'name') then
        value.nameList.Add(ParseMedicinalProductDefinitionName(child, path+'/name')) {L631}
      else if (child.localName = 'crossReference') then
        value.crossReferenceList.Add(ParseMedicinalProductDefinitionCrossReference(child, path+'/crossReference')) {L631}
      else if (child.localName = 'manufacturingBusinessOperation') then
        value.manufacturingBusinessOperationList.Add(ParseMedicinalProductDefinitionManufacturingBusinessOperation(child, path+'/manufacturingBusinessOperation')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinition(xml : TXmlBuilder; name : String; value : TFhirMedicinalProductDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMedicinalProductDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMedicinalProductDefinitionChildren(xml : TXmlBuilder; value : TFhirMedicinalProductDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'domain', value.domain); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'statusDate', value.statusDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'combinedPharmaceuticalDoseForm', value.combinedPharmaceuticalDoseForm); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'indication', value.indicationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'legalStatusOfSupply', value.legalStatusOfSupply); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'additionalMonitoringIndicator', value.additionalMonitoringIndicator); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialMeasuresList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialMeasures', value.specialMeasuresList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'paediatricUseIndicator', value.paediatricUseIndicator); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'classification', value.classificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeCodeableConcept(xml, 'characteristic', value.characteristicList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(xml, 'marketingStatus', value.marketingStatusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.pharmaceuticalProductList.Count - 1 do
      ComposeReference(xml, 'pharmaceuticalProduct', value.pharmaceuticalProductList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.packagedMedicinalProductList.Count - 1 do
      ComposeReference(xml, 'packagedMedicinalProduct', value.packagedMedicinalProductList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeReference(xml, 'ingredient', value.ingredientList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.impurityList.Count - 1 do
      ComposeReference(xml, 'impurity', value.impurityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.attachedDocumentList.Count - 1 do
      ComposeReference(xml, 'attachedDocument', value.attachedDocumentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.masterFileList.Count - 1 do
      ComposeReference(xml, 'masterFile', value.masterFileList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeMedicinalProductDefinitionContact(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.clinicalTrialList.Count - 1 do
      ComposeReference(xml, 'clinicalTrial', value.clinicalTrialList[i]);
  for i := 0 to value.nameList.Count - 1 do
      ComposeMedicinalProductDefinitionName(xml, 'name', value.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.crossReferenceList.Count - 1 do
      ComposeMedicinalProductDefinitionCrossReference(xml, 'crossReference', value.crossReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturingBusinessOperationList.Count - 1 do
      ComposeMedicinalProductDefinitionManufacturingBusinessOperation(xml, 'manufacturingBusinessOperation', value.manufacturingBusinessOperationList[i]);
end;

{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
function TFHIRXmlParser.ParseMessageDefinitionFocus(element : TMXmlElement; path : string) : TFhirMessageDefinitionFocus;
var
  child : TMXmlElement;
begin
  result := TFhirMessageDefinitionFocus.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageDefinitionFocusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageDefinitionFocusChild(value : TFhirMessageDefinitionFocus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/code') {L734}
      else if (child.localName = 'profile') then
        value.profileElement := ParseCanonical(child, path+'/profile') {L737}
      else if (child.localName = 'min') then
        value.minElement := ParseUnsignedInt(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionFocus(xml : TXmlBuilder; name : String; value : TFhirMessageDefinitionFocus);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageDefinitionFocusChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionFocusChildren(xml : TXmlBuilder; value : TFhirMessageDefinitionFocus);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirResourceTypesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'profile', value.profileElement); {L738}
  ComposeUnsignedInt(xml, 'min', value.minElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'max', value.maxElement); {L738}
end;

function TFHIRXmlParser.ParseMessageDefinitionAllowedResponse(element : TMXmlElement; path : string) : TFhirMessageDefinitionAllowedResponse;
var
  child : TMXmlElement;
begin
  result := TFhirMessageDefinitionAllowedResponse.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageDefinitionAllowedResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageDefinitionAllowedResponseChild(value : TFhirMessageDefinitionAllowedResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'message') then
        value.messageElement := ParseCanonical(child, path+'/message') {L737}
      else if (child.localName = 'situation') then
        value.situationElement := ParseMarkdown(child, path+'/situation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionAllowedResponse(xml : TXmlBuilder; name : String; value : TFhirMessageDefinitionAllowedResponse);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageDefinitionAllowedResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionAllowedResponseChildren(xml : TXmlBuilder; value : TFhirMessageDefinitionAllowedResponse);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCanonical(xml, 'message', value.messageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'situation', value.situationElement); {L738}
end;

function TFHIRXmlParser.ParseMessageDefinition(element : TMXmlElement; path : string) : TFhirMessageDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirMessageDefinition.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageDefinitionChild(value : TFhirMessageDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'replaces') then
        value.replacesList.Add(ParseCanonical(child, path+'/replaces')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'base') then
        value.baseElement := ParseCanonical(child, path+'/base') {L737}
      else if (child.localName = 'parent') then
        value.parentList.Add(ParseCanonical(child, path+'/parent')) {L631}
      else if (child.localName = 'eventCoding') then
        value.event := ParseCoding(child, path+'/eventCoding') {L891}
      else if (child.localName = 'eventUri') then
        value.event := ParseUri(child, path+'/eventUri') {L891}
      else if (child.localName = 'category') then
        value.categoryElement := ParseEnum(CODES_TFhirMessageSignificanceCategoryEnum, SYSTEMS_TFhirMessageSignificanceCategoryEnum, child, path+'/category') {L734}
      else if (child.localName = 'focus') then
        value.focusList.Add(ParseMessageDefinitionFocus(child, path+'/focus')) {L631}
      else if (child.localName = 'responseRequired') then
        value.responseRequiredElement := ParseEnum(CODES_TFhirMessageheaderResponseRequestEnum, SYSTEMS_TFhirMessageheaderResponseRequestEnum, child, path+'/responseRequired') {L734}
      else if (child.localName = 'allowedResponse') then
        value.allowedResponseList.Add(ParseMessageDefinitionAllowedResponse(child, path+'/allowedResponse')) {L631}
      else if (child.localName = 'graph') then
        value.graphList.Add(ParseCanonical(child, path+'/graph')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinition(xml : TXmlBuilder; name : String; value : TFhirMessageDefinition);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageDefinitionChildren(xml : TXmlBuilder; value : TFhirMessageDefinition);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.replacesList.Count - 1 do
      ComposeCanonical(xml, 'replaces', value.replacesList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'base', value.baseElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.parentList.Count - 1 do
      ComposeCanonical(xml, 'parent', value.parentList[i]);
  if (value.event is TFhirCoding) {6} then
    ComposeCoding(xml, 'eventCoding', TFhirCoding(value.event))
  else if (value.event is TFhirUri) {6} then
    ComposeUri(xml, 'eventUri', TFhirUri(value.event));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'category', value.categoryElement, CODES_TFhirMessageSignificanceCategoryEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.focusList.Count - 1 do
      ComposeMessageDefinitionFocus(xml, 'focus', value.focusList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'responseRequired', value.responseRequiredElement, CODES_TFhirMessageheaderResponseRequestEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.allowedResponseList.Count - 1 do
      ComposeMessageDefinitionAllowedResponse(xml, 'allowedResponse', value.allowedResponseList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.graphList.Count - 1 do
      ComposeCanonical(xml, 'graph', value.graphList[i]);
end;

{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
function TFHIRXmlParser.ParseMessageHeaderDestination(element : TMXmlElement; path : string) : TFhirMessageHeaderDestination;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeaderDestination.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderDestinationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderDestinationChild(value : TFhirMessageHeaderDestination; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'target') then
        value.target := ParseReference(child, path+'/target') {L740}
      else if (child.localName = 'endpoint') then
        value.endpointElement := ParseUrl(child, path+'/endpoint') {L737}
      else if (child.localName = 'receiver') then
        value.receiver := ParseReference(child, path+'/receiver') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderDestination(xml : TXmlBuilder; name : String; value : TFhirMessageHeaderDestination);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageHeaderDestinationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderDestinationChildren(xml : TXmlBuilder; value : TFhirMessageHeaderDestination);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'target', value.target); {L741}
  ComposeUrl(xml, 'endpoint', value.endpointElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'receiver', value.receiver); {L741}
end;

function TFHIRXmlParser.ParseMessageHeaderSource(element : TMXmlElement; path : string) : TFhirMessageHeaderSource;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeaderSource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderSourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderSourceChild(value : TFhirMessageHeaderSource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'software') then
        value.softwareElement := ParseString(child, path+'/software') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'contact') then
        value.contact := ParseContactPoint(child, path+'/contact') {L740}
      else if (child.localName = 'endpoint') then
        value.endpointElement := ParseUrl(child, path+'/endpoint') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderSource(xml : TXmlBuilder; name : String; value : TFhirMessageHeaderSource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageHeaderSourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderSourceChildren(xml : TXmlBuilder; value : TFhirMessageHeaderSource);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'software', value.softwareElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeContactPoint(xml, 'contact', value.contact); {L741}
  ComposeUrl(xml, 'endpoint', value.endpointElement); {L738}
end;

function TFHIRXmlParser.ParseMessageHeaderResponse(element : TMXmlElement; path : string) : TFhirMessageHeaderResponse;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeaderResponse.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderResponseChild(value : TFhirMessageHeaderResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierElement := ParseId(child, path+'/identifier') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirResponseTypeEnum, SYSTEMS_TFhirResponseTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'details') then
        value.details := ParseReference(child, path+'/details') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderResponse(xml : TXmlBuilder; name : String; value : TFhirMessageHeaderResponse);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageHeaderResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderResponseChildren(xml : TXmlBuilder; value : TFhirMessageHeaderResponse);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'identifier', value.identifierElement); {L738}
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirResponseTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'details', value.details); {L741}
end;

function TFHIRXmlParser.ParseMessageHeader(element : TMXmlElement; path : string) : TFhirMessageHeader;
var
  child : TMXmlElement;
begin
  result := TFhirMessageHeader.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMessageHeaderChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMessageHeaderChild(value : TFhirMessageHeader; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'eventCoding') then
        value.event := ParseCoding(child, path+'/eventCoding') {L891}
      else if (child.localName = 'eventUri') then
        value.event := ParseUri(child, path+'/eventUri') {L891}
      else if (child.localName = 'destination') then
        value.destinationList.Add(ParseMessageHeaderDestination(child, path+'/destination')) {L631}
      else if (child.localName = 'sender') then
        value.sender := ParseReference(child, path+'/sender') {L740}
      else if (child.localName = 'enterer') then
        value.enterer := ParseReference(child, path+'/enterer') {L740}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'source') then
        value.source := ParseMessageHeaderSource(child, path+'/source') {L740}
      else if (child.localName = 'responsible') then
        value.responsible := ParseReference(child, path+'/responsible') {L740}
      else if (child.localName = 'reason') then
        value.reason := ParseCodeableConcept(child, path+'/reason') {L740}
      else if (child.localName = 'response') then
        value.response := ParseMessageHeaderResponse(child, path+'/response') {L740}
      else if (child.localName = 'focus') then
        value.focusList.Add(ParseReference(child, path+'/focus')) {L631}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMessageHeader(xml : TXmlBuilder; name : String; value : TFhirMessageHeader);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMessageHeaderChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMessageHeaderChildren(xml : TXmlBuilder; value : TFhirMessageHeader);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (value.event is TFhirCoding) {6} then
    ComposeCoding(xml, 'eventCoding', TFhirCoding(value.event))
  else if (value.event is TFhirUri) {6} then
    ComposeUri(xml, 'eventUri', TFhirUri(value.event));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.destinationList.Count - 1 do
      ComposeMessageHeaderDestination(xml, 'destination', value.destinationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'sender', value.sender); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'enterer', value.enterer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  ComposeMessageHeaderSource(xml, 'source', value.source); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'responsible', value.responsible); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'reason', value.reason); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMessageHeaderResponse(xml, 'response', value.response); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.focusList.Count - 1 do
      ComposeReference(xml, 'focus', value.focusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
end;

{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
function TFHIRXmlParser.ParseMolecularSequenceReferenceSeq(element : TMXmlElement; path : string) : TFhirMolecularSequenceReferenceSeq;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceReferenceSeq.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceReferenceSeqChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceReferenceSeqChild(value : TFhirMolecularSequenceReferenceSeq; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'chromosome') then
        value.chromosome := ParseCodeableConcept(child, path+'/chromosome') {L740}
      else if (child.localName = 'genomeBuild') then
        value.genomeBuildElement := ParseString(child, path+'/genomeBuild') {L737}
      else if (child.localName = 'orientation') then
        value.orientationElement := ParseEnum(CODES_TFhirOrientationTypeEnum, SYSTEMS_TFhirOrientationTypeEnum, child, path+'/orientation') {L734}
      else if (child.localName = 'referenceSeqId') then
        value.referenceSeqId := ParseCodeableConcept(child, path+'/referenceSeqId') {L740}
      else if (child.localName = 'referenceSeqPointer') then
        value.referenceSeqPointer := ParseReference(child, path+'/referenceSeqPointer') {L740}
      else if (child.localName = 'referenceSeqString') then
        value.referenceSeqStringElement := ParseString(child, path+'/referenceSeqString') {L737}
      else if (child.localName = 'strand') then
        value.strandElement := ParseEnum(CODES_TFhirStrandTypeEnum, SYSTEMS_TFhirStrandTypeEnum, child, path+'/strand') {L734}
      else if (child.localName = 'windowStart') then
        value.windowStartElement := ParseInteger(child, path+'/windowStart') {L737}
      else if (child.localName = 'windowEnd') then
        value.windowEndElement := ParseInteger(child, path+'/windowEnd') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceReferenceSeq(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceReferenceSeq);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceReferenceSeqChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceReferenceSeqChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceReferenceSeq);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'chromosome', value.chromosome); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'genomeBuild', value.genomeBuildElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'orientation', value.orientationElement, CODES_TFhirOrientationTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'referenceSeqId', value.referenceSeqId); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'referenceSeqPointer', value.referenceSeqPointer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'referenceSeqString', value.referenceSeqStringElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'strand', value.strandElement, CODES_TFhirStrandTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'windowStart', value.windowStartElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'windowEnd', value.windowEndElement); {L738}
end;

function TFHIRXmlParser.ParseMolecularSequenceVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceVariant;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceVariant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceVariantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceVariantChild(value : TFhirMolecularSequenceVariant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        value.startElement := ParseInteger(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInteger(child, path+'/end') {L737}
      else if (child.localName = 'observedAllele') then
        value.observedAlleleElement := ParseString(child, path+'/observedAllele') {L737}
      else if (child.localName = 'referenceAllele') then
        value.referenceAlleleElement := ParseString(child, path+'/referenceAllele') {L737}
      else if (child.localName = 'cigar') then
        value.cigarElement := ParseString(child, path+'/cigar') {L737}
      else if (child.localName = 'variantPointer') then
        value.variantPointer := ParseReference(child, path+'/variantPointer') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceVariant(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceVariant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceVariantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceVariantChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceVariant);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', value.end_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'observedAllele', value.observedAlleleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'referenceAllele', value.referenceAlleleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'cigar', value.cigarElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'variantPointer', value.variantPointer); {L741}
end;

function TFHIRXmlParser.ParseMolecularSequenceQuality(element : TMXmlElement; path : string) : TFhirMolecularSequenceQuality;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceQuality.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceQualityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceQualityChild(value : TFhirMolecularSequenceQuality; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirQualityTypeEnum, SYSTEMS_TFhirQualityTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'standardSequence') then
        value.standardSequence := ParseCodeableConcept(child, path+'/standardSequence') {L740}
      else if (child.localName = 'start') then
        value.startElement := ParseInteger(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInteger(child, path+'/end') {L737}
      else if (child.localName = 'score') then
        value.score := ParseQuantity(child, path+'/score') {L740}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'truthTP') then
        value.truthTPElement := ParseDecimal(child, path+'/truthTP') {L737}
      else if (child.localName = 'queryTP') then
        value.queryTPElement := ParseDecimal(child, path+'/queryTP') {L737}
      else if (child.localName = 'truthFN') then
        value.truthFNElement := ParseDecimal(child, path+'/truthFN') {L737}
      else if (child.localName = 'queryFP') then
        value.queryFPElement := ParseDecimal(child, path+'/queryFP') {L737}
      else if (child.localName = 'gtFP') then
        value.gtFPElement := ParseDecimal(child, path+'/gtFP') {L737}
      else if (child.localName = 'precision') then
        value.precisionElement := ParseDecimal(child, path+'/precision') {L737}
      else if (child.localName = 'recall') then
        value.recallElement := ParseDecimal(child, path+'/recall') {L737}
      else if (child.localName = 'fScore') then
        value.fScore_Element := ParseDecimal(child, path+'/fScore') {L737}
      else if (child.localName = 'roc') then
        value.roc := ParseMolecularSequenceQualityRoc(child, path+'/roc') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQuality(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceQuality);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceQualityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQualityChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceQuality);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirQualityTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'standardSequence', value.standardSequence); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', value.end_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'score', value.score); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'truthTP', value.truthTPElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'queryTP', value.queryTPElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'truthFN', value.truthFNElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'queryFP', value.queryFPElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'gtFP', value.gtFPElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'precision', value.precisionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'recall', value.recallElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'fScore', value.fScore_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceQualityRoc(xml, 'roc', value.roc); {L741}
end;

function TFHIRXmlParser.ParseMolecularSequenceQualityRoc(element : TMXmlElement; path : string) : TFhirMolecularSequenceQualityRoc;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceQualityRoc.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceQualityRocChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceQualityRocChild(value : TFhirMolecularSequenceQualityRoc; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'score') then
        value.scoreList.Add(ParseInteger(child, path+'/score')) {L631}
      else if (child.localName = 'numTP') then
        value.numTPList.Add(ParseInteger(child, path+'/numTP')) {L631}
      else if (child.localName = 'numFP') then
        value.numFPList.Add(ParseInteger(child, path+'/numFP')) {L631}
      else if (child.localName = 'numFN') then
        value.numFNList.Add(ParseInteger(child, path+'/numFN')) {L631}
      else if (child.localName = 'precision') then
        value.precisionList.Add(ParseDecimal(child, path+'/precision')) {L631}
      else if (child.localName = 'sensitivity') then
        value.sensitivityList.Add(ParseDecimal(child, path+'/sensitivity')) {L631}
      else if (child.localName = 'fMeasure') then
        value.fMeasureList.Add(ParseDecimal(child, path+'/fMeasure')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQualityRoc(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceQualityRoc);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceQualityRocChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceQualityRocChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceQualityRoc);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.scoreList.Count - 1 do
      ComposeInteger(xml, 'score', value.scoreList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.numTPList.Count - 1 do
      ComposeInteger(xml, 'numTP', value.numTPList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.numFPList.Count - 1 do
      ComposeInteger(xml, 'numFP', value.numFPList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.numFNList.Count - 1 do
      ComposeInteger(xml, 'numFN', value.numFNList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.precisionList.Count - 1 do
      ComposeDecimal(xml, 'precision', value.precisionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sensitivityList.Count - 1 do
      ComposeDecimal(xml, 'sensitivity', value.sensitivityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.fMeasureList.Count - 1 do
      ComposeDecimal(xml, 'fMeasure', value.fMeasureList[i]);
end;

function TFHIRXmlParser.ParseMolecularSequenceRepository(element : TMXmlElement; path : string) : TFhirMolecularSequenceRepository;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceRepository.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceRepositoryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceRepositoryChild(value : TFhirMolecularSequenceRepository; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirRepositoryTypeEnum, SYSTEMS_TFhirRepositoryTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'datasetId') then
        value.datasetIdElement := ParseString(child, path+'/datasetId') {L737}
      else if (child.localName = 'variantsetId') then
        value.variantsetIdElement := ParseString(child, path+'/variantsetId') {L737}
      else if (child.localName = 'readsetId') then
        value.readsetIdElement := ParseString(child, path+'/readsetId') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceRepository(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceRepository);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceRepositoryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceRepositoryChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceRepository);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirRepositoryTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'datasetId', value.datasetIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'variantsetId', value.variantsetIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'readsetId', value.readsetIdElement); {L738}
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariant(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariant;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceStructureVariant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceStructureVariantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantChild(value : TFhirMolecularSequenceStructureVariant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'variantType') then
        value.variantType := ParseCodeableConcept(child, path+'/variantType') {L740}
      else if (child.localName = 'exact') then
        value.exactElement := ParseBoolean(child, path+'/exact') {L737}
      else if (child.localName = 'length') then
        value.lengthElement := ParseInteger(child, path+'/length') {L737}
      else if (child.localName = 'outer') then
        value.outer := ParseMolecularSequenceStructureVariantOuter(child, path+'/outer') {L740}
      else if (child.localName = 'inner') then
        value.inner := ParseMolecularSequenceStructureVariantInner(child, path+'/inner') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariant(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceStructureVariant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceStructureVariantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceStructureVariant);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'variantType', value.variantType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'exact', value.exactElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'length', value.lengthElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceStructureVariantOuter(xml, 'outer', value.outer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceStructureVariantInner(xml, 'inner', value.inner); {L741}
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantOuter(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantOuter;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceStructureVariantOuter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceStructureVariantOuterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantOuterChild(value : TFhirMolecularSequenceStructureVariantOuter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        value.startElement := ParseInteger(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInteger(child, path+'/end') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantOuter(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceStructureVariantOuter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceStructureVariantOuterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantOuterChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceStructureVariantOuter);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', value.end_Element); {L738}
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantInner(element : TMXmlElement; path : string) : TFhirMolecularSequenceStructureVariantInner;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequenceStructureVariantInner.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceStructureVariantInnerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceStructureVariantInnerChild(value : TFhirMolecularSequenceStructureVariantInner; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'start') then
        value.startElement := ParseInteger(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInteger(child, path+'/end') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantInner(xml : TXmlBuilder; name : String; value : TFhirMolecularSequenceStructureVariantInner);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceStructureVariantInnerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceStructureVariantInnerChildren(xml : TXmlBuilder; value : TFhirMolecularSequenceStructureVariantInner);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'start', value.startElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'end', value.end_Element); {L738}
end;

function TFHIRXmlParser.ParseMolecularSequence(element : TMXmlElement; path : string) : TFhirMolecularSequence;
var
  child : TMXmlElement;
begin
  result := TFhirMolecularSequence.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseMolecularSequenceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseMolecularSequenceChild(value : TFhirMolecularSequence; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirSequenceTypeEnum, SYSTEMS_TFhirSequenceTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'coordinateSystem') then
        value.coordinateSystemElement := ParseInteger(child, path+'/coordinateSystem') {L737}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'specimen') then
        value.specimen := ParseReference(child, path+'/specimen') {L740}
      else if (child.localName = 'device') then
        value.device := ParseReference(child, path+'/device') {L740}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'referenceSeq') then
        value.referenceSeq := ParseMolecularSequenceReferenceSeq(child, path+'/referenceSeq') {L740}
      else if (child.localName = 'variant') then
        value.variantList.Add(ParseMolecularSequenceVariant(child, path+'/variant')) {L631}
      else if (child.localName = 'observedSeq') then
        value.observedSeqElement := ParseString(child, path+'/observedSeq') {L737}
      else if (child.localName = 'quality') then
        value.qualityList.Add(ParseMolecularSequenceQuality(child, path+'/quality')) {L631}
      else if (child.localName = 'readCoverage') then
        value.readCoverageElement := ParseInteger(child, path+'/readCoverage') {L737}
      else if (child.localName = 'repository') then
        value.repositoryList.Add(ParseMolecularSequenceRepository(child, path+'/repository')) {L631}
      else if (child.localName = 'pointer') then
        value.pointerList.Add(ParseReference(child, path+'/pointer')) {L631}
      else if (child.localName = 'structureVariant') then
        value.structureVariantList.Add(ParseMolecularSequenceStructureVariant(child, path+'/structureVariant')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequence(xml : TXmlBuilder; name : String; value : TFhirMolecularSequence);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeMolecularSequenceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeMolecularSequenceChildren(xml : TXmlBuilder; value : TFhirMolecularSequence);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirSequenceTypeEnum); {L735}
  ComposeInteger(xml, 'coordinateSystem', value.coordinateSystemElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'specimen', value.specimen); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'device', value.device); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMolecularSequenceReferenceSeq(xml, 'referenceSeq', value.referenceSeq); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.variantList.Count - 1 do
      ComposeMolecularSequenceVariant(xml, 'variant', value.variantList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'observedSeq', value.observedSeqElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.qualityList.Count - 1 do
      ComposeMolecularSequenceQuality(xml, 'quality', value.qualityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'readCoverage', value.readCoverageElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.repositoryList.Count - 1 do
      ComposeMolecularSequenceRepository(xml, 'repository', value.repositoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.pointerList.Count - 1 do
      ComposeReference(xml, 'pointer', value.pointerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.structureVariantList.Count - 1 do
      ComposeMolecularSequenceStructureVariant(xml, 'structureVariant', value.structureVariantList[i]);
end;

{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
function TFHIRXmlParser.ParseNamingSystemUniqueId(element : TMXmlElement; path : string) : TFhirNamingSystemUniqueId;
var
  child : TMXmlElement;
begin
  result := TFhirNamingSystemUniqueId.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNamingSystemUniqueIdChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNamingSystemUniqueIdChild(value : TFhirNamingSystemUniqueId; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirNamingSystemIdentifierTypeEnum, SYSTEMS_TFhirNamingSystemIdentifierTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'preferred') then
        value.preferredElement := ParseBoolean(child, path+'/preferred') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNamingSystemUniqueId(xml : TXmlBuilder; name : String; value : TFhirNamingSystemUniqueId);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNamingSystemUniqueIdChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNamingSystemUniqueIdChildren(xml : TXmlBuilder; value : TFhirNamingSystemUniqueId);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirNamingSystemIdentifierTypeEnum); {L735}
  ComposeString(xml, 'value', value.valueElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'preferred', value.preferredElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParseNamingSystem(element : TMXmlElement; path : string) : TFhirNamingSystem;
var
  child : TMXmlElement;
begin
  result := TFhirNamingSystem.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNamingSystemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNamingSystemChild(value : TFhirNamingSystem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirNamingSystemTypeEnum, SYSTEMS_TFhirNamingSystemTypeEnum, child, path+'/kind') {L734}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'responsible') then
        value.responsibleElement := ParseString(child, path+'/responsible') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'usage') then
        value.usageElement := ParseString(child, path+'/usage') {L737}
      else if (child.localName = 'uniqueId') then
        value.uniqueIdList.Add(ParseNamingSystemUniqueId(child, path+'/uniqueId')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNamingSystem(xml : TXmlBuilder; name : String; value : TFhirNamingSystem);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNamingSystemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNamingSystemChildren(xml : TXmlBuilder; value : TFhirNamingSystem);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirNamingSystemTypeEnum); {L735}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'responsible', value.responsibleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'usage', value.usageElement); {L738}
  for i := 0 to value.uniqueIdList.Count - 1 do
      ComposeNamingSystemUniqueId(xml, 'uniqueId', value.uniqueIdList[i]);
end;

{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONINTAKE}
function TFHIRXmlParser.ParseNutritionIntakeConsumedItem(element : TMXmlElement; path : string) : TFhirNutritionIntakeConsumedItem;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionIntakeConsumedItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionIntakeConsumedItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionIntakeConsumedItemChild(value : TFhirNutritionIntakeConsumedItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'nutritionProduct') then
        value.nutritionProduct := ParseCodeableReference(child, path+'/nutritionProduct') {L740}
      else if (child.localName = 'schedule') then
        value.schedule := ParseTiming(child, path+'/schedule') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseQuantity(child, path+'/amount') {L740}
      else if (child.localName = 'rate') then
        value.rate := ParseQuantity(child, path+'/rate') {L740}
      else if (child.localName = 'notConsumed') then
        value.notConsumedElement := ParseBoolean(child, path+'/notConsumed') {L737}
      else if (child.localName = 'notConsumedReason') then
        value.notConsumedReason := ParseCodeableConcept(child, path+'/notConsumedReason') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakeConsumedItem(xml : TXmlBuilder; name : String; value : TFhirNutritionIntakeConsumedItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionIntakeConsumedItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakeConsumedItemChildren(xml : TXmlBuilder; value : TFhirNutritionIntakeConsumedItem);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  ComposeCodeableReference(xml, 'nutritionProduct', value.nutritionProduct); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(xml, 'schedule', value.schedule); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'rate', value.rate); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'notConsumed', value.notConsumedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'notConsumedReason', value.notConsumedReason); {L741}
end;

function TFHIRXmlParser.ParseNutritionIntakeIngredientLabel(element : TMXmlElement; path : string) : TFhirNutritionIntakeIngredientLabel;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionIntakeIngredientLabel.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionIntakeIngredientLabelChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionIntakeIngredientLabelChild(value : TFhirNutritionIntakeIngredientLabel; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'nutrient') then
        value.nutrient := ParseCodeableReference(child, path+'/nutrient') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseQuantity(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakeIngredientLabel(xml : TXmlBuilder; name : String; value : TFhirNutritionIntakeIngredientLabel);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionIntakeIngredientLabelChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakeIngredientLabelChildren(xml : TXmlBuilder; value : TFhirNutritionIntakeIngredientLabel);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableReference(xml, 'nutrient', value.nutrient); {L741}
  ComposeQuantity(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseNutritionIntakePerformer(element : TMXmlElement; path : string) : TFhirNutritionIntakePerformer;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionIntakePerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionIntakePerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionIntakePerformerChild(value : TFhirNutritionIntakePerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakePerformer(xml : TXmlBuilder; name : String; value : TFhirNutritionIntakePerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionIntakePerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakePerformerChildren(xml : TXmlBuilder; value : TFhirNutritionIntakePerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
end;

function TFHIRXmlParser.ParseNutritionIntake(element : TMXmlElement; path : string) : TFhirNutritionIntake;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionIntake.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionIntakeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionIntakeChild(value : TFhirNutritionIntake; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReasonList.Add(ParseCodeableConcept(child, path+'/statusReason')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'recorded') then
        value.recordedElement := ParseDateTime(child, path+'/recorded') {L737}
      else if (child.localName = 'reportedReference') then
        value.reported := ParseReference(child, path+'/reportedReference') {L881}
      else if (child.localName = 'reportedBoolean') then
        value.reported := ParseBoolean(child, path+'/reportedBoolean') {L891}
      else if (child.localName = 'consumedItem') then
        value.consumedItemList.Add(ParseNutritionIntakeConsumedItem(child, path+'/consumedItem')) {L631}
      else if (child.localName = 'ingredientLabel') then
        value.ingredientLabelList.Add(ParseNutritionIntakeIngredientLabel(child, path+'/ingredientLabel')) {L631}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseNutritionIntakePerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromList.Add(ParseReference(child, path+'/derivedFrom')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntake(xml : TXmlBuilder; name : String; value : TFhirNutritionIntake);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionIntakeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionIntakeChildren(xml : TXmlBuilder; value : TFhirNutritionIntake);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEventStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.statusReasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'statusReason', value.statusReasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'recorded', value.recordedElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.reported is TFhirReference) {2} then
    ComposeReference(xml, 'reportedReference', TFhirReference(value.reported))
  else if (SummaryOption in [soFull, soData]) and (value.reported is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'reportedBoolean', TFhirBoolean(value.reported));
  for i := 0 to value.consumedItemList.Count - 1 do
      ComposeNutritionIntakeConsumedItem(xml, 'consumedItem', value.consumedItemList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.ingredientLabelList.Count - 1 do
      ComposeNutritionIntakeIngredientLabel(xml, 'ingredientLabel', value.ingredientLabelList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeNutritionIntakePerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(xml, 'derivedFrom', value.derivedFromList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_NUTRITIONINTAKE}
{$IFDEF FHIR_NUTRITIONORDER}
function TFHIRXmlParser.ParseNutritionOrderOralDiet(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDiet;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderOralDiet.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderOralDietChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietChild(value : TFhirNutritionOrderOralDiet; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'schedule') then
        value.scheduleList.Add(ParseTiming(child, path+'/schedule')) {L631}
      else if (child.localName = 'nutrient') then
        value.nutrientList.Add(ParseNutritionOrderOralDietNutrient(child, path+'/nutrient')) {L631}
      else if (child.localName = 'texture') then
        value.textureList.Add(ParseNutritionOrderOralDietTexture(child, path+'/texture')) {L631}
      else if (child.localName = 'fluidConsistencyType') then
        value.fluidConsistencyTypeList.Add(ParseCodeableConcept(child, path+'/fluidConsistencyType')) {L631}
      else if (child.localName = 'instruction') then
        value.instructionElement := ParseString(child, path+'/instruction') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDiet(xml : TXmlBuilder; name : String; value : TFhirNutritionOrderOralDiet);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderOralDietChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietChildren(xml : TXmlBuilder; value : TFhirNutritionOrderOralDiet);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.scheduleList.Count - 1 do
      ComposeTiming(xml, 'schedule', value.scheduleList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.nutrientList.Count - 1 do
      ComposeNutritionOrderOralDietNutrient(xml, 'nutrient', value.nutrientList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.textureList.Count - 1 do
      ComposeNutritionOrderOralDietTexture(xml, 'texture', value.textureList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.fluidConsistencyTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'fluidConsistencyType', value.fluidConsistencyTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'instruction', value.instructionElement); {L738}
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietNutrient(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietNutrient;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderOralDietNutrient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderOralDietNutrientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietNutrientChild(value : TFhirNutritionOrderOralDietNutrient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'modifier') then
        value.modifier := ParseCodeableConcept(child, path+'/modifier') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseQuantity(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietNutrient(xml : TXmlBuilder; name : String; value : TFhirNutritionOrderOralDietNutrient);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderOralDietNutrientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietNutrientChildren(xml : TXmlBuilder; value : TFhirNutritionOrderOralDietNutrient);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'modifier', value.modifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietTexture(element : TMXmlElement; path : string) : TFhirNutritionOrderOralDietTexture;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderOralDietTexture.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderOralDietTextureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderOralDietTextureChild(value : TFhirNutritionOrderOralDietTexture; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'modifier') then
        value.modifier := ParseCodeableConcept(child, path+'/modifier') {L740}
      else if (child.localName = 'foodType') then
        value.foodType := ParseCodeableConcept(child, path+'/foodType') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietTexture(xml : TXmlBuilder; name : String; value : TFhirNutritionOrderOralDietTexture);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderOralDietTextureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderOralDietTextureChildren(xml : TXmlBuilder; value : TFhirNutritionOrderOralDietTexture);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'modifier', value.modifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'foodType', value.foodType); {L741}
end;

function TFHIRXmlParser.ParseNutritionOrderSupplement(element : TMXmlElement; path : string) : TFhirNutritionOrderSupplement;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderSupplement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderSupplementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderSupplementChild(value : TFhirNutritionOrderSupplement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'productName') then
        value.productNameElement := ParseString(child, path+'/productName') {L737}
      else if (child.localName = 'schedule') then
        value.scheduleList.Add(ParseTiming(child, path+'/schedule')) {L631}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'instruction') then
        value.instructionElement := ParseString(child, path+'/instruction') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderSupplement(xml : TXmlBuilder; name : String; value : TFhirNutritionOrderSupplement);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderSupplementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderSupplementChildren(xml : TXmlBuilder; value : TFhirNutritionOrderSupplement);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'productName', value.productNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.scheduleList.Count - 1 do
      ComposeTiming(xml, 'schedule', value.scheduleList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'instruction', value.instructionElement); {L738}
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormula(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormula;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderEnteralFormula.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderEnteralFormulaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormulaChild(value : TFhirNutritionOrderEnteralFormula; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'baseFormulaType') then
        value.baseFormulaType := ParseCodeableConcept(child, path+'/baseFormulaType') {L740}
      else if (child.localName = 'baseFormulaProductName') then
        value.baseFormulaProductNameElement := ParseString(child, path+'/baseFormulaProductName') {L737}
      else if (child.localName = 'additiveType') then
        value.additiveType := ParseCodeableConcept(child, path+'/additiveType') {L740}
      else if (child.localName = 'additiveProductName') then
        value.additiveProductNameElement := ParseString(child, path+'/additiveProductName') {L737}
      else if (child.localName = 'caloricDensity') then
        value.caloricDensity := ParseQuantity(child, path+'/caloricDensity') {L740}
      else if (child.localName = 'routeofAdministration') then
        value.routeofAdministration := ParseCodeableConcept(child, path+'/routeofAdministration') {L740}
      else if (child.localName = 'administration') then
        value.administrationList.Add(ParseNutritionOrderEnteralFormulaAdministration(child, path+'/administration')) {L631}
      else if (child.localName = 'maxVolumeToDeliver') then
        value.maxVolumeToDeliver := ParseQuantity(child, path+'/maxVolumeToDeliver') {L740}
      else if (child.localName = 'administrationInstruction') then
        value.administrationInstructionElement := ParseString(child, path+'/administrationInstruction') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormula(xml : TXmlBuilder; name : String; value : TFhirNutritionOrderEnteralFormula);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderEnteralFormulaChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormulaChildren(xml : TXmlBuilder; value : TFhirNutritionOrderEnteralFormula);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'baseFormulaType', value.baseFormulaType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'baseFormulaProductName', value.baseFormulaProductNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'additiveType', value.additiveType); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'additiveProductName', value.additiveProductNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'caloricDensity', value.caloricDensity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'routeofAdministration', value.routeofAdministration); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.administrationList.Count - 1 do
      ComposeNutritionOrderEnteralFormulaAdministration(xml, 'administration', value.administrationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'maxVolumeToDeliver', value.maxVolumeToDeliver); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'administrationInstruction', value.administrationInstructionElement); {L738}
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormulaAdministration(element : TMXmlElement; path : string) : TFhirNutritionOrderEnteralFormulaAdministration;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrderEnteralFormulaAdministration.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderEnteralFormulaAdministrationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderEnteralFormulaAdministrationChild(value : TFhirNutritionOrderEnteralFormulaAdministration; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'schedule') then
        value.schedule := ParseTiming(child, path+'/schedule') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'rateQuantity') then
        value.rate := ParseQuantity(child, path+'/rateQuantity') {L891}
      else if (child.localName = 'rateRatio') then
        value.rate := ParseRatio(child, path+'/rateRatio') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormulaAdministration(xml : TXmlBuilder; name : String; value : TFhirNutritionOrderEnteralFormulaAdministration);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderEnteralFormulaAdministrationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderEnteralFormulaAdministrationChildren(xml : TXmlBuilder; value : TFhirNutritionOrderEnteralFormulaAdministration);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(xml, 'schedule', value.schedule); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) and (value.rate is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'rateQuantity', TFhirQuantity(value.rate))
  else if (SummaryOption in [soFull, soData]) and (value.rate is TFhirRatio) {6} then
    ComposeRatio(xml, 'rateRatio', TFhirRatio(value.rate));
end;

function TFHIRXmlParser.ParseNutritionOrder(element : TMXmlElement; path : string) : TFhirNutritionOrder;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionOrder.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionOrderChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionOrderChild(value : TFhirNutritionOrder; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'instantiates') then
        value.instantiatesList.Add(ParseUri(child, path+'/instantiates')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'dateTime') then
        value.dateTimeElement := ParseDateTime(child, path+'/dateTime') {L737}
      else if (child.localName = 'orderer') then
        value.orderer := ParseReference(child, path+'/orderer') {L740}
      else if (child.localName = 'allergyIntolerance') then
        value.allergyIntoleranceList.Add(ParseReference(child, path+'/allergyIntolerance')) {L631}
      else if (child.localName = 'foodPreferenceModifier') then
        value.foodPreferenceModifierList.Add(ParseCodeableConcept(child, path+'/foodPreferenceModifier')) {L631}
      else if (child.localName = 'excludeFoodModifier') then
        value.excludeFoodModifierList.Add(ParseCodeableConcept(child, path+'/excludeFoodModifier')) {L631}
      else if (child.localName = 'oralDiet') then
        value.oralDiet := ParseNutritionOrderOralDiet(child, path+'/oralDiet') {L740}
      else if (child.localName = 'supplement') then
        value.supplementList.Add(ParseNutritionOrderSupplement(child, path+'/supplement')) {L631}
      else if (child.localName = 'enteralFormula') then
        value.enteralFormula := ParseNutritionOrderEnteralFormula(child, path+'/enteralFormula') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrder(xml : TXmlBuilder; name : String; value : TFhirNutritionOrder);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionOrderChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionOrderChildren(xml : TXmlBuilder; value : TFhirNutritionOrder);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.instantiatesList.Count - 1 do
      ComposeUri(xml, 'instantiates', value.instantiatesList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirRequestStatusEnum); {L735}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum); {L735}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  ComposeDateTime(xml, 'dateTime', value.dateTimeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'orderer', value.orderer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.allergyIntoleranceList.Count - 1 do
      ComposeReference(xml, 'allergyIntolerance', value.allergyIntoleranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.foodPreferenceModifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'foodPreferenceModifier', value.foodPreferenceModifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.excludeFoodModifierList.Count - 1 do
      ComposeCodeableConcept(xml, 'excludeFoodModifier', value.excludeFoodModifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeNutritionOrderOralDiet(xml, 'oralDiet', value.oralDiet); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supplementList.Count - 1 do
      ComposeNutritionOrderSupplement(xml, 'supplement', value.supplementList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeNutritionOrderEnteralFormula(xml, 'enteralFormula', value.enteralFormula); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
function TFHIRXmlParser.ParseNutritionProductNutrient(element : TMXmlElement; path : string) : TFhirNutritionProductNutrient;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionProductNutrient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionProductNutrientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionProductNutrientChild(value : TFhirNutritionProductNutrient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'item') then
        value.item := ParseCodeableReference(child, path+'/item') {L740}
      else if (child.localName = 'amount') then
        value.amountList.Add(ParseRatio(child, path+'/amount')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductNutrient(xml : TXmlBuilder; name : String; value : TFhirNutritionProductNutrient);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionProductNutrientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductNutrientChildren(xml : TXmlBuilder; value : TFhirNutritionProductNutrient);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableReference(xml, 'item', value.item); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.amountList.Count - 1 do
      ComposeRatio(xml, 'amount', value.amountList[i]);
end;

function TFHIRXmlParser.ParseNutritionProductIngredient(element : TMXmlElement; path : string) : TFhirNutritionProductIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionProductIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionProductIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionProductIngredientChild(value : TFhirNutritionProductIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'item') then
        value.item := ParseCodeableReference(child, path+'/item') {L740}
      else if (child.localName = 'amount') then
        value.amountList.Add(ParseRatio(child, path+'/amount')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductIngredient(xml : TXmlBuilder; name : String; value : TFhirNutritionProductIngredient);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionProductIngredientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductIngredientChildren(xml : TXmlBuilder; value : TFhirNutritionProductIngredient);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableReference(xml, 'item', value.item); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.amountList.Count - 1 do
      ComposeRatio(xml, 'amount', value.amountList[i]);
end;

function TFHIRXmlParser.ParseNutritionProductProductCharacteristic(element : TMXmlElement; path : string) : TFhirNutritionProductProductCharacteristic;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionProductProductCharacteristic.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionProductProductCharacteristicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionProductProductCharacteristicChild(value : TFhirNutritionProductProductCharacteristic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductProductCharacteristic(xml : TXmlBuilder; name : String; value : TFhirNutritionProductProductCharacteristic);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionProductProductCharacteristicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductProductCharacteristicChildren(xml : TXmlBuilder; value : TFhirNutritionProductProductCharacteristic);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
end;

function TFHIRXmlParser.ParseNutritionProductInstance(element : TMXmlElement; path : string) : TFhirNutritionProductInstance;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionProductInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionProductInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionProductInstanceChild(value : TFhirNutritionProductInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'lotNumber') then
        value.lotNumberElement := ParseString(child, path+'/lotNumber') {L737}
      else if (child.localName = 'expiry') then
        value.expiryElement := ParseDateTime(child, path+'/expiry') {L737}
      else if (child.localName = 'useBy') then
        value.useByElement := ParseDateTime(child, path+'/useBy') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductInstance(xml : TXmlBuilder; name : String; value : TFhirNutritionProductInstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionProductInstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductInstanceChildren(xml : TXmlBuilder; value : TFhirNutritionProductInstance);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'lotNumber', value.lotNumberElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'expiry', value.expiryElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'useBy', value.useByElement); {L738}
end;

function TFHIRXmlParser.ParseNutritionProduct(element : TMXmlElement; path : string) : TFhirNutritionProduct;
var
  child : TMXmlElement;
begin
  result := TFhirNutritionProduct.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseNutritionProductChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseNutritionProductChild(value : TFhirNutritionProduct; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirNutritionProductStatusEnum, SYSTEMS_TFhirNutritionProductStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'nutrient') then
        value.nutrientList.Add(ParseNutritionProductNutrient(child, path+'/nutrient')) {L631}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseNutritionProductIngredient(child, path+'/ingredient')) {L631}
      else if (child.localName = 'knownAllergen') then
        value.knownAllergenList.Add(ParseCodeableReference(child, path+'/knownAllergen')) {L631}
      else if (child.localName = 'productCharacteristic') then
        value.productCharacteristicList.Add(ParseNutritionProductProductCharacteristic(child, path+'/productCharacteristic')) {L631}
      else if (child.localName = 'instance') then
        value.instance := ParseNutritionProductInstance(child, path+'/instance') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeNutritionProduct(xml : TXmlBuilder; name : String; value : TFhirNutritionProduct);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeNutritionProductChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeNutritionProductChildren(xml : TXmlBuilder; value : TFhirNutritionProduct);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirNutritionProductStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.nutrientList.Count - 1 do
      ComposeNutritionProductNutrient(xml, 'nutrient', value.nutrientList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeNutritionProductIngredient(xml, 'ingredient', value.ingredientList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.knownAllergenList.Count - 1 do
      ComposeCodeableReference(xml, 'knownAllergen', value.knownAllergenList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.productCharacteristicList.Count - 1 do
      ComposeNutritionProductProductCharacteristic(xml, 'productCharacteristic', value.productCharacteristicList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeNutritionProductInstance(xml, 'instance', value.instance); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
function TFHIRXmlParser.ParseObservationReferenceRange(element : TMXmlElement; path : string) : TFhirObservationReferenceRange;
var
  child : TMXmlElement;
begin
  result := TFhirObservationReferenceRange.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationReferenceRangeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationReferenceRangeChild(value : TFhirObservationReferenceRange; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'low') then
        value.low := ParseQuantity(child, path+'/low') {L740}
      else if (child.localName = 'high') then
        value.high := ParseQuantity(child, path+'/high') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'appliesTo') then
        value.appliesToList.Add(ParseCodeableConcept(child, path+'/appliesTo')) {L631}
      else if (child.localName = 'age') then
        value.age := ParseRange(child, path+'/age') {L740}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationReferenceRange(xml : TXmlBuilder; name : String; value : TFhirObservationReferenceRange);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationReferenceRangeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationReferenceRangeChildren(xml : TXmlBuilder; value : TFhirObservationReferenceRange);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'low', value.low); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'high', value.high); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.appliesToList.Count - 1 do
      ComposeCodeableConcept(xml, 'appliesTo', value.appliesToList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'age', value.age); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParseObservationComponent(element : TMXmlElement; path : string) : TFhirObservationComponent;
var
  child : TMXmlElement;
begin
  result := TFhirObservationComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationComponentChild(value : TFhirObservationComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'dataAbsentReason') then
        value.dataAbsentReason := ParseCodeableConcept(child, path+'/dataAbsentReason') {L740}
      else if (child.localName = 'interpretation') then
        value.interpretationList.Add(ParseCodeableConcept(child, path+'/interpretation')) {L631}
      else if (child.localName = 'referenceRange') then
        value.referenceRangeList.Add(ParseObservationReferenceRange(child, path+'/referenceRange')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationComponent(xml : TXmlBuilder; name : String; value : TFhirObservationComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationComponentChildren(xml : TXmlBuilder; value : TFhirObservationComponent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'dataAbsentReason', value.dataAbsentReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.interpretationList.Count - 1 do
      ComposeCodeableConcept(xml, 'interpretation', value.interpretationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(xml, 'referenceRange', value.referenceRangeList[i]);
end;

function TFHIRXmlParser.ParseObservation(element : TMXmlElement; path : string) : TFhirObservation;
var
  child : TMXmlElement;
begin
  result := TFhirObservation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationChild(value : TFhirObservation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'focus') then
        value.focusList.Add(ParseReference(child, path+'/focus')) {L631}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'effectivePeriod') then
        value.effective := ParsePeriod(child, path+'/effectivePeriod') {L891}
      else if (child.localName = 'effectiveTiming') then
        value.effective := ParseTiming(child, path+'/effectiveTiming') {L891}
      else if (child.localName = 'effectiveDateTime') then
        value.effective := ParseDateTime(child, path+'/effectiveDateTime') {L891}
      else if (child.localName = 'effectiveInstant') then
        value.effective := ParseInstant(child, path+'/effectiveInstant') {L891}
      else if (child.localName = 'issued') then
        value.issuedElement := ParseInstant(child, path+'/issued') {L737}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseReference(child, path+'/performer')) {L631}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'dataAbsentReason') then
        value.dataAbsentReason := ParseCodeableConcept(child, path+'/dataAbsentReason') {L740}
      else if (child.localName = 'interpretation') then
        value.interpretationList.Add(ParseCodeableConcept(child, path+'/interpretation')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'specimen') then
        value.specimen := ParseReference(child, path+'/specimen') {L740}
      else if (child.localName = 'device') then
        value.device := ParseReference(child, path+'/device') {L740}
      else if (child.localName = 'referenceRange') then
        value.referenceRangeList.Add(ParseObservationReferenceRange(child, path+'/referenceRange')) {L631}
      else if (child.localName = 'hasMember') then
        value.hasMemberList.Add(ParseReference(child, path+'/hasMember')) {L631}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromList.Add(ParseReference(child, path+'/derivedFrom')) {L631}
      else if (child.localName = 'component') then
        value.componentList.Add(ParseObservationComponent(child, path+'/component')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservation(xml : TXmlBuilder; name : String; value : TFhirObservation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationChildren(xml : TXmlBuilder; value : TFhirObservation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirObservationStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.focusList.Count - 1 do
      ComposeReference(xml, 'focus', value.focusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirPeriod) {6} then
    ComposePeriod(xml, 'effectivePeriod', TFhirPeriod(value.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirTiming) {6} then
    ComposeTiming(xml, 'effectiveTiming', TFhirTiming(value.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'effectiveDateTime', TFhirDateTime(value.effective))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.effective is TFhirInstant) {6} then
    ComposeInstant(xml, 'effectiveInstant', TFhirInstant(value.effective));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'issued', value.issuedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'dataAbsentReason', value.dataAbsentReason); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.interpretationList.Count - 1 do
      ComposeCodeableConcept(xml, 'interpretation', value.interpretationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'specimen', value.specimen); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'device', value.device); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.referenceRangeList.Count - 1 do
      ComposeObservationReferenceRange(xml, 'referenceRange', value.referenceRangeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.hasMemberList.Count - 1 do
      ComposeReference(xml, 'hasMember', value.hasMemberList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeReference(xml, 'derivedFrom', value.derivedFromList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.componentList.Count - 1 do
      ComposeObservationComponent(xml, 'component', value.componentList[i]);
end;

{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
function TFHIRXmlParser.ParseObservationDefinitionQuantitativeDetails(element : TMXmlElement; path : string) : TFhirObservationDefinitionQuantitativeDetails;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinitionQuantitativeDetails.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionQuantitativeDetailsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionQuantitativeDetailsChild(value : TFhirObservationDefinitionQuantitativeDetails; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'customaryUnit') then
        value.customaryUnit := ParseCodeableConcept(child, path+'/customaryUnit') {L740}
      else if (child.localName = 'unit') then
        value.unit_ := ParseCodeableConcept(child, path+'/unit') {L740}
      else if (child.localName = 'conversionFactor') then
        value.conversionFactorElement := ParseDecimal(child, path+'/conversionFactor') {L737}
      else if (child.localName = 'decimalPrecision') then
        value.decimalPrecisionElement := ParseInteger(child, path+'/decimalPrecision') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQuantitativeDetails(xml : TXmlBuilder; name : String; value : TFhirObservationDefinitionQuantitativeDetails);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationDefinitionQuantitativeDetailsChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQuantitativeDetailsChildren(xml : TXmlBuilder; value : TFhirObservationDefinitionQuantitativeDetails);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'customaryUnit', value.customaryUnit); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'unit', value.unit_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'conversionFactor', value.conversionFactorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'decimalPrecision', value.decimalPrecisionElement); {L738}
end;

function TFHIRXmlParser.ParseObservationDefinitionQualifiedInterval(element : TMXmlElement; path : string) : TFhirObservationDefinitionQualifiedInterval;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinitionQualifiedInterval.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionQualifiedIntervalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionQualifiedIntervalChild(value : TFhirObservationDefinitionQualifiedInterval; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.categoryElement := ParseEnum(CODES_TFhirObservationRangeCategoryEnum, SYSTEMS_TFhirObservationRangeCategoryEnum, child, path+'/category') {L734}
      else if (child.localName = 'range') then
        value.range := ParseRange(child, path+'/range') {L740}
      else if (child.localName = 'context') then
        value.context := ParseCodeableConcept(child, path+'/context') {L740}
      else if (child.localName = 'appliesTo') then
        value.appliesToList.Add(ParseCodeableConcept(child, path+'/appliesTo')) {L631}
      else if (child.localName = 'gender') then
        value.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, child, path+'/gender') {L734}
      else if (child.localName = 'age') then
        value.age := ParseRange(child, path+'/age') {L740}
      else if (child.localName = 'gestationalAge') then
        value.gestationalAge := ParseRange(child, path+'/gestationalAge') {L740}
      else if (child.localName = 'condition') then
        value.conditionElement := ParseString(child, path+'/condition') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQualifiedInterval(xml : TXmlBuilder; name : String; value : TFhirObservationDefinitionQualifiedInterval);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationDefinitionQualifiedIntervalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionQualifiedIntervalChildren(xml : TXmlBuilder; value : TFhirObservationDefinitionQualifiedInterval);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'category', value.categoryElement, CODES_TFhirObservationRangeCategoryEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'range', value.range); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'context', value.context); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.appliesToList.Count - 1 do
      ComposeCodeableConcept(xml, 'appliesTo', value.appliesToList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'age', value.age); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'gestationalAge', value.gestationalAge); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'condition', value.conditionElement); {L738}
end;

function TFHIRXmlParser.ParseObservationDefinitionComponent(element : TMXmlElement; path : string) : TFhirObservationDefinitionComponent;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinitionComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionComponentChild(value : TFhirObservationDefinitionComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'permittedDataType') then
        value.permittedDataTypeList.Add(ParseEnum(CODES_TFhirObservationDataTypeEnum, SYSTEMS_TFhirObservationDataTypeEnum, child, path+'/permittedDataType')){y.1}
      else if (child.localName = 'quantitativeDetails') then
        value.quantitativeDetails := ParseObservationDefinitionQuantitativeDetails(child, path+'/quantitativeDetails') {L740}
      else if (child.localName = 'qualifiedInterval') then
        value.qualifiedIntervalList.Add(ParseObservationDefinitionQualifiedInterval(child, path+'/qualifiedInterval')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionComponent(xml : TXmlBuilder; name : String; value : TFhirObservationDefinitionComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationDefinitionComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionComponentChildren(xml : TXmlBuilder; value : TFhirObservationDefinitionComponent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.permittedDataTypeList.Count - 1 do
      ComposeEnum(xml, 'permittedDataType', value.permittedDataTypeList[i], CODES_TFhirObservationDataTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeObservationDefinitionQuantitativeDetails(xml, 'quantitativeDetails', value.quantitativeDetails); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.qualifiedIntervalList.Count - 1 do
      ComposeObservationDefinitionQualifiedInterval(xml, 'qualifiedInterval', value.qualifiedIntervalList[i]);
end;

function TFHIRXmlParser.ParseObservationDefinition(element : TMXmlElement; path : string) : TFhirObservationDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirObservationDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseObservationDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseObservationDefinitionChild(value : TFhirObservationDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'derivedFromCanonical') then
        value.derivedFromCanonicalList.Add(ParseCanonical(child, path+'/derivedFromCanonical')) {L631}
      else if (child.localName = 'derivedFromUri') then
        value.derivedFromUriList.Add(ParseUri(child, path+'/derivedFromUri')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisher := ParseReference(child, path+'/publisher') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'performerType') then
        value.performerType := ParseCodeableConcept(child, path+'/performerType') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'permittedDataType') then
        value.permittedDataTypeList.Add(ParseEnum(CODES_TFhirObservationDataTypeEnum, SYSTEMS_TFhirObservationDataTypeEnum, child, path+'/permittedDataType')){y.1}
      else if (child.localName = 'multipleResultsAllowed') then
        value.multipleResultsAllowedElement := ParseBoolean(child, path+'/multipleResultsAllowed') {L737}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'specimen') then
        value.specimen := ParseReference(child, path+'/specimen') {L740}
      else if (child.localName = 'device') then
        value.device := ParseReference(child, path+'/device') {L740}
      else if (child.localName = 'preferredReportName') then
        value.preferredReportNameElement := ParseString(child, path+'/preferredReportName') {L737}
      else if (child.localName = 'quantitativeDetails') then
        value.quantitativeDetails := ParseObservationDefinitionQuantitativeDetails(child, path+'/quantitativeDetails') {L740}
      else if (child.localName = 'qualifiedInterval') then
        value.qualifiedIntervalList.Add(ParseObservationDefinitionQualifiedInterval(child, path+'/qualifiedInterval')) {L631}
      else if (child.localName = 'validCodedValueSet') then
        value.validCodedValueSet := ParseReference(child, path+'/validCodedValueSet') {L740}
      else if (child.localName = 'normalCodedValueSet') then
        value.normalCodedValueSet := ParseReference(child, path+'/normalCodedValueSet') {L740}
      else if (child.localName = 'abnormalCodedValueSet') then
        value.abnormalCodedValueSet := ParseReference(child, path+'/abnormalCodedValueSet') {L740}
      else if (child.localName = 'criticalCodedValueSet') then
        value.criticalCodedValueSet := ParseReference(child, path+'/criticalCodedValueSet') {L740}
      else if (child.localName = 'hasMember') then
        value.hasMemberList.Add(ParseReference(child, path+'/hasMember')) {L631}
      else if (child.localName = 'component') then
        value.componentList.Add(ParseObservationDefinitionComponent(child, path+'/component')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinition(xml : TXmlBuilder; name : String; value : TFhirObservationDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeObservationDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeObservationDefinitionChildren(xml : TXmlBuilder; value : TFhirObservationDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'derivedFromCanonical', value.derivedFromCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromUriList.Count - 1 do
      ComposeUri(xml, 'derivedFromUri', value.derivedFromUriList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'publisher', value.publisher); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'performerType', value.performerType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.permittedDataTypeList.Count - 1 do
      ComposeEnum(xml, 'permittedDataType', value.permittedDataTypeList[i], CODES_TFhirObservationDataTypeEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'multipleResultsAllowed', value.multipleResultsAllowedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'specimen', value.specimen); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'device', value.device); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'preferredReportName', value.preferredReportNameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeObservationDefinitionQuantitativeDetails(xml, 'quantitativeDetails', value.quantitativeDetails); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.qualifiedIntervalList.Count - 1 do
      ComposeObservationDefinitionQualifiedInterval(xml, 'qualifiedInterval', value.qualifiedIntervalList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'validCodedValueSet', value.validCodedValueSet); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'normalCodedValueSet', value.normalCodedValueSet); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'abnormalCodedValueSet', value.abnormalCodedValueSet); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'criticalCodedValueSet', value.criticalCodedValueSet); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.hasMemberList.Count - 1 do
      ComposeReference(xml, 'hasMember', value.hasMemberList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.componentList.Count - 1 do
      ComposeObservationDefinitionComponent(xml, 'component', value.componentList[i]);
end;

{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
function TFHIRXmlParser.ParseOperationDefinitionParameter(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterChild(value : TFhirOperationDefinitionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseCode(child, path+'/name') {L737}
      else if (child.localName = 'use') then
        value.useElement := ParseEnum(CODES_TFhirOperationParameterUseEnum, SYSTEMS_TFhirOperationParameterUseEnum, child, path+'/use') {L734}
      else if (child.localName = 'min') then
        value.minElement := ParseInteger(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirAllTypesEnum, SYSTEMS_TFhirAllTypesEnum, child, path+'/type') {L734}
      else if (child.localName = 'targetProfile') then
        value.targetProfileList.Add(ParseCanonical(child, path+'/targetProfile')) {L631}
      else if (child.localName = 'searchType') then
        value.searchTypeElement := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, child, path+'/searchType') {L734}
      else if (child.localName = 'binding') then
        value.binding := ParseOperationDefinitionParameterBinding(child, path+'/binding') {L740}
      else if (child.localName = 'referencedFrom') then
        value.referencedFromList.Add(ParseOperationDefinitionParameterReferencedFrom(child, path+'/referencedFrom')) {L631}
      else if (child.localName = 'part') then
        value.partList.Add(ParseOperationDefinitionParameter(child, path+'/part')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameter(xml : TXmlBuilder; name : String; value : TFhirOperationDefinitionParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationDefinitionParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionParameter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'use', value.useElement, CODES_TFhirOperationParameterUseEnum); {L735}
  ComposeInteger(xml, 'min', value.minElement); {L738}
  ComposeString(xml, 'max', value.maxElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirAllTypesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.targetProfileList.Count - 1 do
      ComposeCanonical(xml, 'targetProfile', value.targetProfileList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'searchType', value.searchTypeElement, CODES_TFhirSearchParamTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeOperationDefinitionParameterBinding(xml, 'binding', value.binding); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.referencedFromList.Count - 1 do
      ComposeOperationDefinitionParameterReferencedFrom(xml, 'referencedFrom', value.referencedFromList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.partList.Count - 1 do
      ComposeOperationDefinitionParameter(xml, 'part', value.partList[i]);
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterBinding(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterBinding;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionParameterBinding.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionParameterBindingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterBindingChild(value : TFhirOperationDefinitionParameterBinding; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'strength') then
        value.strengthElement := ParseEnum(CODES_TFhirBindingStrengthEnum, SYSTEMS_TFhirBindingStrengthEnum, child, path+'/strength') {L734}
      else if (child.localName = 'valueSet') then
        value.valueSetElement := ParseCanonical(child, path+'/valueSet') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterBinding(xml : TXmlBuilder; name : String; value : TFhirOperationDefinitionParameterBinding);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationDefinitionParameterBindingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterBindingChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionParameterBinding);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'strength', value.strengthElement, CODES_TFhirBindingStrengthEnum); {L735}
  ComposeCanonical(xml, 'valueSet', value.valueSetElement); {L738}
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterReferencedFrom(element : TMXmlElement; path : string) : TFhirOperationDefinitionParameterReferencedFrom;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionParameterReferencedFrom.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionParameterReferencedFromChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionParameterReferencedFromChild(value : TFhirOperationDefinitionParameterReferencedFrom; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'source') then
        value.sourceElement := ParseString(child, path+'/source') {L737}
      else if (child.localName = 'sourceId') then
        value.sourceIdElement := ParseString(child, path+'/sourceId') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterReferencedFrom(xml : TXmlBuilder; name : String; value : TFhirOperationDefinitionParameterReferencedFrom);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationDefinitionParameterReferencedFromChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionParameterReferencedFromChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionParameterReferencedFrom);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'source', value.sourceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sourceId', value.sourceIdElement); {L738}
end;

function TFHIRXmlParser.ParseOperationDefinitionOverload(element : TMXmlElement; path : string) : TFhirOperationDefinitionOverload;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinitionOverload.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionOverloadChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionOverloadChild(value : TFhirOperationDefinitionOverload; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'parameterName') then
        value.parameterNameList.Add(ParseString(child, path+'/parameterName')) {L631}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionOverload(xml : TXmlBuilder; name : String; value : TFhirOperationDefinitionOverload);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationDefinitionOverloadChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionOverloadChildren(xml : TXmlBuilder; value : TFhirOperationDefinitionOverload);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterNameList.Count - 1 do
      ComposeString(xml, 'parameterName', value.parameterNameList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

function TFHIRXmlParser.ParseOperationDefinition(element : TMXmlElement; path : string) : TFhirOperationDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirOperationDefinition.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationDefinitionChild(value : TFhirOperationDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirOperationKindEnum, SYSTEMS_TFhirOperationKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'affectsState') then
        value.affectsStateElement := ParseBoolean(child, path+'/affectsState') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseMarkdown(child, path+'/comment') {L737}
      else if (child.localName = 'base') then
        value.baseElement := ParseCanonical(child, path+'/base') {L737}
      else if (child.localName = 'resource') then
        value.resource.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/resource')){y.1}
      else if (child.localName = 'system') then
        value.systemElement := ParseBoolean(child, path+'/system') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseBoolean(child, path+'/type') {L737}
      else if (child.localName = 'instance') then
        value.instanceElement := ParseBoolean(child, path+'/instance') {L737}
      else if (child.localName = 'inputProfile') then
        value.inputProfileElement := ParseCanonical(child, path+'/inputProfile') {L737}
      else if (child.localName = 'outputProfile') then
        value.outputProfileElement := ParseCanonical(child, path+'/outputProfile') {L737}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseOperationDefinitionParameter(child, path+'/parameter')) {L631}
      else if (child.localName = 'overload') then
        value.overloadList.Add(ParseOperationDefinitionOverload(child, path+'/overload')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinition(xml : TXmlBuilder; name : String; value : TFhirOperationDefinition);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationDefinitionChildren(xml : TXmlBuilder; value : TFhirOperationDefinition);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirOperationKindEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'affectsState', value.affectsStateElement); {L738}
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'base', value.baseElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resource.Count - 1 do
      ComposeEnum(xml, 'resource', value.resource[i], CODES_TFhirResourceTypesEnum);
  ComposeBoolean(xml, 'system', value.systemElement); {L738}
  ComposeBoolean(xml, 'type', value.type_Element); {L738}
  ComposeBoolean(xml, 'instance', value.instanceElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'inputProfile', value.inputProfileElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'outputProfile', value.outputProfileElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeOperationDefinitionParameter(xml, 'parameter', value.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.overloadList.Count - 1 do
      ComposeOperationDefinitionOverload(xml, 'overload', value.overloadList[i]);
end;

{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
function TFHIRXmlParser.ParseOperationOutcomeIssue(element : TMXmlElement; path : string) : TFhirOperationOutcomeIssue;
var
  child : TMXmlElement;
begin
  result := TFhirOperationOutcomeIssue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationOutcomeIssueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationOutcomeIssueChild(value : TFhirOperationOutcomeIssue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'severity') then
        value.severityElement := ParseEnum(CODES_TFhirIssueSeverityEnum, SYSTEMS_TFhirIssueSeverityEnum, child, path+'/severity') {L734}
      else if (child.localName = 'code') then
        value.codeElement := ParseEnum(CODES_TFhirIssueTypeEnum, SYSTEMS_TFhirIssueTypeEnum, child, path+'/code') {L734}
      else if (child.localName = 'details') then
        value.details := ParseCodeableConcept(child, path+'/details') {L740}
      else if (child.localName = 'diagnostics') then
        value.diagnosticsElement := ParseString(child, path+'/diagnostics') {L737}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseString(child, path+'/location')) {L631}
      else if (child.localName = 'expression') then
        value.expressionList.Add(ParseString(child, path+'/expression')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationOutcomeIssue(xml : TXmlBuilder; name : String; value : TFhirOperationOutcomeIssue);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationOutcomeIssueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationOutcomeIssueChildren(xml : TXmlBuilder; value : TFhirOperationOutcomeIssue);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'severity', value.severityElement, CODES_TFhirIssueSeverityEnum); {L735}
  ComposeEnum(xml, 'code', value.codeElement, CODES_TFhirIssueTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'details', value.details); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'diagnostics', value.diagnosticsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeString(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.expressionList.Count - 1 do
      ComposeString(xml, 'expression', value.expressionList[i]);
end;

function TFHIRXmlParser.ParseOperationOutcome(element : TMXmlElement; path : string) : TFhirOperationOutcome;
var
  child : TMXmlElement;
begin
  result := TFhirOperationOutcome.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOperationOutcomeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOperationOutcomeChild(value : TFhirOperationOutcome; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'issue') then
        value.issueList.Add(ParseOperationOutcomeIssue(child, path+'/issue')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOperationOutcome(xml : TXmlBuilder; name : String; value : TFhirOperationOutcome);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOperationOutcomeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOperationOutcomeChildren(xml : TXmlBuilder; value : TFhirOperationOutcome);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  for i := 0 to value.issueList.Count - 1 do
      ComposeOperationOutcomeIssue(xml, 'issue', value.issueList[i]);
end;

{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
function TFHIRXmlParser.ParseOrganizationContact(element : TMXmlElement; path : string) : TFhirOrganizationContact;
var
  child : TMXmlElement;
begin
  result := TFhirOrganizationContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrganizationContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrganizationContactChild(value : TFhirOrganizationContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'purpose') then
        value.purpose := ParseCodeableConcept(child, path+'/purpose') {L740}
      else if (child.localName = 'name') then
        value.name := ParseHumanName(child, path+'/name') {L740}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'address') then
        value.address := ParseAddress(child, path+'/address') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrganizationContact(xml : TXmlBuilder; name : String; value : TFhirOrganizationContact);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOrganizationContactChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOrganizationContactChildren(xml : TXmlBuilder; value : TFhirOrganizationContact);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'purpose', value.purpose); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', value.name); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', value.address); {L741}
end;

function TFHIRXmlParser.ParseOrganization(element : TMXmlElement; path : string) : TFhirOrganization;
var
  child : TMXmlElement;
begin
  result := TFhirOrganization.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrganizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrganizationChild(value : TFhirOrganization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'alias') then
        value.aliasList.Add(ParseString(child, path+'/alias')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'address') then
        value.addressList.Add(ParseAddress(child, path+'/address')) {L631}
      else if (child.localName = 'partOf') then
        value.partOf := ParseReference(child, path+'/partOf') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseOrganizationContact(child, path+'/contact')) {L631}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrganization(xml : TXmlBuilder; name : String; value : TFhirOrganization);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOrganizationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOrganizationChildren(xml : TXmlBuilder; value : TFhirOrganization);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.aliasList.Count - 1 do
      ComposeString(xml, 'alias', value.aliasList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(xml, 'address', value.addressList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'partOf', value.partOf); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeOrganizationContact(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
end;

{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
function TFHIRXmlParser.ParseOrganizationAffiliation(element : TMXmlElement; path : string) : TFhirOrganizationAffiliation;
var
  child : TMXmlElement;
begin
  result := TFhirOrganizationAffiliation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseOrganizationAffiliationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseOrganizationAffiliationChild(value : TFhirOrganizationAffiliation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'organization') then
        value.organization := ParseReference(child, path+'/organization') {L740}
      else if (child.localName = 'participatingOrganization') then
        value.participatingOrganization := ParseReference(child, path+'/participatingOrganization') {L740}
      else if (child.localName = 'network') then
        value.networkList.Add(ParseReference(child, path+'/network')) {L631}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'specialty') then
        value.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')) {L631}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseReference(child, path+'/location')) {L631}
      else if (child.localName = 'healthcareService') then
        value.healthcareServiceList.Add(ParseReference(child, path+'/healthcareService')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeOrganizationAffiliation(xml : TXmlBuilder; name : String; value : TFhirOrganizationAffiliation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeOrganizationAffiliationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeOrganizationAffiliationChildren(xml : TXmlBuilder; value : TFhirOrganizationAffiliation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'organization', value.organization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'participatingOrganization', value.participatingOrganization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.networkList.Count - 1 do
      ComposeReference(xml, 'network', value.networkList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', value.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeReference(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.healthcareServiceList.Count - 1 do
      ComposeReference(xml, 'healthcareService', value.healthcareServiceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
end;

{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
function TFHIRXmlParser.ParsePackagedProductDefinitionBatchIdentifier(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionBatchIdentifier;
var
  child : TMXmlElement;
begin
  result := TFhirPackagedProductDefinitionBatchIdentifier.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePackagedProductDefinitionBatchIdentifierChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionBatchIdentifierChild(value : TFhirPackagedProductDefinitionBatchIdentifier; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'outerPackaging') then
        value.outerPackaging := ParseIdentifier(child, path+'/outerPackaging') {L740}
      else if (child.localName = 'immediatePackaging') then
        value.immediatePackaging := ParseIdentifier(child, path+'/immediatePackaging') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionBatchIdentifier(xml : TXmlBuilder; name : String; value : TFhirPackagedProductDefinitionBatchIdentifier);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePackagedProductDefinitionBatchIdentifierChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionBatchIdentifierChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionBatchIdentifier);
begin
  composeBackboneElementChildren(xml, value);
  ComposeIdentifier(xml, 'outerPackaging', value.outerPackaging); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'immediatePackaging', value.immediatePackaging); {L741}
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionPackage(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionPackage;
var
  child : TMXmlElement;
begin
  result := TFhirPackagedProductDefinitionPackage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePackagedProductDefinitionPackageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionPackageChild(value : TFhirPackagedProductDefinitionPackage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'quantity') then
        value.quantityElement := ParseInteger(child, path+'/quantity') {L737}
      else if (child.localName = 'material') then
        value.materialList.Add(ParseCodeableConcept(child, path+'/material')) {L631}
      else if (child.localName = 'alternateMaterial') then
        value.alternateMaterialList.Add(ParseCodeableConcept(child, path+'/alternateMaterial')) {L631}
      else if (child.localName = 'shelfLifeStorage') then
        value.shelfLifeStorageList.Add(ParseProductShelfLife(child, path+'/shelfLifeStorage')) {L631}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParsePackagedProductDefinitionPackageProperty(child, path+'/property')) {L631}
      else if (child.localName = 'containedItem') then
        value.containedItemList.Add(ParsePackagedProductDefinitionPackageContainedItem(child, path+'/containedItem')) {L631}
      else if (child.localName = 'package') then
        value.packageList.Add(ParsePackagedProductDefinitionPackage(child, path+'/package')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionPackage(xml : TXmlBuilder; name : String; value : TFhirPackagedProductDefinitionPackage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePackagedProductDefinitionPackageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionPackageChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionPackage);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'quantity', value.quantityElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.materialList.Count - 1 do
      ComposeCodeableConcept(xml, 'material', value.materialList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.alternateMaterialList.Count - 1 do
      ComposeCodeableConcept(xml, 'alternateMaterial', value.alternateMaterialList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.shelfLifeStorageList.Count - 1 do
      ComposeProductShelfLife(xml, 'shelfLifeStorage', value.shelfLifeStorageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposePackagedProductDefinitionPackageProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.containedItemList.Count - 1 do
      ComposePackagedProductDefinitionPackageContainedItem(xml, 'containedItem', value.containedItemList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.packageList.Count - 1 do
      ComposePackagedProductDefinitionPackage(xml, 'package', value.packageList[i]);
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionPackageProperty(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionPackageProperty;
var
  child : TMXmlElement;
begin
  result := TFhirPackagedProductDefinitionPackageProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePackagedProductDefinitionPackagePropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionPackagePropertyChild(value : TFhirPackagedProductDefinitionPackageProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionPackageProperty(xml : TXmlBuilder; name : String; value : TFhirPackagedProductDefinitionPackageProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePackagedProductDefinitionPackagePropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionPackagePropertyChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionPackageProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionPackageContainedItem(element : TMXmlElement; path : string) : TFhirPackagedProductDefinitionPackageContainedItem;
var
  child : TMXmlElement;
begin
  result := TFhirPackagedProductDefinitionPackageContainedItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePackagedProductDefinitionPackageContainedItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionPackageContainedItemChild(value : TFhirPackagedProductDefinitionPackageContainedItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'item') then
        value.itemList.Add(ParseReference(child, path+'/item')) {L631}
      else if (child.localName = 'amountQuantity') then
        value.amount := ParseQuantity(child, path+'/amountQuantity') {L891}
      else if (child.localName = 'amountInteger') then
        value.amount := ParseInteger(child, path+'/amountInteger') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionPackageContainedItem(xml : TXmlBuilder; name : String; value : TFhirPackagedProductDefinitionPackageContainedItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePackagedProductDefinitionPackageContainedItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionPackageContainedItemChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinitionPackageContainedItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeReference(xml, 'item', value.itemList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirInteger) {6} then
    ComposeInteger(xml, 'amountInteger', TFhirInteger(value.amount));
end;

function TFHIRXmlParser.ParsePackagedProductDefinition(element : TMXmlElement; path : string) : TFhirPackagedProductDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirPackagedProductDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePackagedProductDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePackagedProductDefinitionChild(value : TFhirPackagedProductDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subject') then
        value.subjectList.Add(ParseReference(child, path+'/subject')) {L631}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'statusDate') then
        value.statusDateElement := ParseDateTime(child, path+'/statusDate') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'legalStatusOfSupply') then
        value.legalStatusOfSupply := ParseCodeableConcept(child, path+'/legalStatusOfSupply') {L740}
      else if (child.localName = 'marketingStatus') then
        value.marketingStatusList.Add(ParseMarketingStatus(child, path+'/marketingStatus')) {L631}
      else if (child.localName = 'characteristic') then
        value.characteristicList.Add(ParseCodeableConcept(child, path+'/characteristic')) {L631}
      else if (child.localName = 'copackagedIndicator') then
        value.copackagedIndicatorElement := ParseBoolean(child, path+'/copackagedIndicator') {L737}
      else if (child.localName = 'marketingAuthorization') then
        value.marketingAuthorization := ParseReference(child, path+'/marketingAuthorization') {L740}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'batchIdentifier') then
        value.batchIdentifierList.Add(ParsePackagedProductDefinitionBatchIdentifier(child, path+'/batchIdentifier')) {L631}
      else if (child.localName = 'package') then
        value.packageList.Add(ParsePackagedProductDefinitionPackage(child, path+'/package')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinition(xml : TXmlBuilder; name : String; value : TFhirPackagedProductDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePackagedProductDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePackagedProductDefinitionChildren(xml : TXmlBuilder; value : TFhirPackagedProductDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subjectList.Count - 1 do
      ComposeReference(xml, 'subject', value.subjectList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'statusDate', value.statusDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'legalStatusOfSupply', value.legalStatusOfSupply); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.marketingStatusList.Count - 1 do
      ComposeMarketingStatus(xml, 'marketingStatus', value.marketingStatusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.characteristicList.Count - 1 do
      ComposeCodeableConcept(xml, 'characteristic', value.characteristicList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'copackagedIndicator', value.copackagedIndicatorElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'marketingAuthorization', value.marketingAuthorization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.batchIdentifierList.Count - 1 do
      ComposePackagedProductDefinitionBatchIdentifier(xml, 'batchIdentifier', value.batchIdentifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.packageList.Count - 1 do
      ComposePackagedProductDefinitionPackage(xml, 'package', value.packageList[i]);
end;

{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
function TFHIRXmlParser.ParseParametersParameter(element : TMXmlElement; path : string) : TFhirParametersParameter;
var
  child : TMXmlElement;
begin
  result := TFhirParametersParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseParametersParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseParametersParameterChild(value : TFhirParametersParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'valueCanonical') then
        value.value := ParseCanonical(child, path+'/valueCanonical') {L891}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueId') then
        value.value := ParseId(child, path+'/valueId') {L891}
      else if (child.localName = 'valueMarkdown') then
        value.value := ParseMarkdown(child, path+'/valueMarkdown') {L891}
      else if (child.localName = 'valueOid') then
        value.value := ParseOid(child, path+'/valueOid') {L891}
      else if (child.localName = 'valuePositiveInt') then
        value.value := ParsePositiveInt(child, path+'/valuePositiveInt') {L891}
      else if (child.localName = 'valueUnsignedInt') then
        value.value := ParseUnsignedInt(child, path+'/valueUnsignedInt') {L891}
      else if (child.localName = 'valueUrl') then
        value.value := ParseUrl(child, path+'/valueUrl') {L891}
      else if (child.localName = 'valueUuid') then
        value.value := ParseUuid(child, path+'/valueUuid') {L891}
      else if (child.localName = 'valueAddress') then
        value.value := ParseAddress(child, path+'/valueAddress') {L891}
      else if (child.localName = 'valueAge') then
        value.value := ParseAge(child, path+'/valueAge') {L891}
      else if (child.localName = 'valueAnnotation') then
        value.value := ParseAnnotation(child, path+'/valueAnnotation') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueContactPoint') then
        value.value := ParseContactPoint(child, path+'/valueContactPoint') {L891}
      else if (child.localName = 'valueCount') then
        value.value := ParseCount(child, path+'/valueCount') {L891}
      else if (child.localName = 'valueDistance') then
        value.value := ParseDistance(child, path+'/valueDistance') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if (child.localName = 'valueHumanName') then
        value.value := ParseHumanName(child, path+'/valueHumanName') {L891}
      else if (child.localName = 'valueIdentifier') then
        value.value := ParseIdentifier(child, path+'/valueIdentifier') {L891}
      else if (child.localName = 'valueMoney') then
        value.value := ParseMoney(child, path+'/valueMoney') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valueSignature') then
        value.value := ParseSignature(child, path+'/valueSignature') {L891}
      else if (child.localName = 'valueTiming') then
        value.value := ParseTiming(child, path+'/valueTiming') {L891}
      else if (child.localName = 'valueContactDetail') then
        value.value := ParseContactDetail(child, path+'/valueContactDetail') {L891}
      else if (child.localName = 'valueContributor') then
        value.value := ParseContributor(child, path+'/valueContributor') {L891}
      else if (child.localName = 'valueDataRequirement') then
        value.value := ParseDataRequirement(child, path+'/valueDataRequirement') {L891}
      else if (child.localName = 'valueExpression') then
        value.value := ParseExpression(child, path+'/valueExpression') {L891}
      else if (child.localName = 'valueParameterDefinition') then
        value.value := ParseParameterDefinition(child, path+'/valueParameterDefinition') {L891}
      else if (child.localName = 'valueRelatedArtifact') then
        value.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact') {L891}
      else if (child.localName = 'valueTriggerDefinition') then
        value.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition') {L891}
      else if (child.localName = 'valueUsageContext') then
        value.value := ParseUsageContext(child, path+'/valueUsageContext') {L891}
      else if (child.localName = 'valueDosage') then
        value.value := ParseDosage(child, path+'/valueDosage') {L891}
      else if (child.localName = 'valueMeta') then
        value.value := ParseMeta(child, path+'/valueMeta') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInstant') then
        value.value := ParseInstant(child, path+'/valueInstant') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueInteger64') then
        value.value := ParseInteger64(child, path+'/valueInteger64') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if (child.localName = 'resource') then
        value.resource := ParseInnerResource(child, path+'/resource') {L740}
      else if (child.localName = 'part') then
        value.partList.Add(ParseParametersParameter(child, path+'/part')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeParametersParameter(xml : TXmlBuilder; name : String; value : TFhirParametersParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeParametersParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeParametersParameterChildren(xml : TXmlBuilder; value : TFhirParametersParameter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirMeta) {6} then
    ComposeMeta(xml, 'valueMeta', TFhirMeta(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'valueInteger64', TFhirInteger64(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (SummaryOption in [soFull, soSummary, soText, soData]) and (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    ComposeInnerResource(xml, 'resource', value, value.resource); {L741}
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to value.partList.Count - 1 do
      ComposeParametersParameter(xml, 'part', value.partList[i]);
end;

function TFHIRXmlParser.ParseParameters(element : TMXmlElement; path : string) : TFhirParameters;
var
  child : TMXmlElement;
begin
  result := TFhirParameters.create;
  try
    parseResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseParametersChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseParametersChild(value : TFhirParameters; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'parameter') then
        value.parameterList.Add(ParseParametersParameter(child, path+'/parameter')) {L631}
      else if Not ParseResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeParameters(xml : TXmlBuilder; name : String; value : TFhirParameters);
begin
  if (value = nil) then
    exit;
  composeResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeParametersChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeParametersChildren(xml : TXmlBuilder; value : TFhirParameters);
var
  i : integer;
begin
  composeResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soText, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeParametersParameter(xml, 'parameter', value.parameterList[i]);
end;

{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
function TFHIRXmlParser.ParsePatientContact(element : TMXmlElement; path : string) : TFhirPatientContact;
var
  child : TMXmlElement;
begin
  result := TFhirPatientContact.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientContactChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientContactChild(value : TFhirPatientContact; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'relationship') then
        value.relationshipList.Add(ParseCodeableConcept(child, path+'/relationship')) {L631}
      else if (child.localName = 'name') then
        value.name := ParseHumanName(child, path+'/name') {L740}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'address') then
        value.address := ParseAddress(child, path+'/address') {L740}
      else if (child.localName = 'gender') then
        value.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, child, path+'/gender') {L734}
      else if (child.localName = 'organization') then
        value.organization := ParseReference(child, path+'/organization') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatientContact(xml : TXmlBuilder; name : String; value : TFhirPatientContact);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePatientContactChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePatientContactChildren(xml : TXmlBuilder; value : TFhirPatientContact);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relationshipList.Count - 1 do
      ComposeCodeableConcept(xml, 'relationship', value.relationshipList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeHumanName(xml, 'name', value.name); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAddress(xml, 'address', value.address); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'organization', value.organization); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
end;

function TFHIRXmlParser.ParsePatientCommunication(element : TMXmlElement; path : string) : TFhirPatientCommunication;
var
  child : TMXmlElement;
begin
  result := TFhirPatientCommunication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientCommunicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientCommunicationChild(value : TFhirPatientCommunication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if (child.localName = 'preferred') then
        value.preferredElement := ParseBoolean(child, path+'/preferred') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatientCommunication(xml : TXmlBuilder; name : String; value : TFhirPatientCommunication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePatientCommunicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePatientCommunicationChildren(xml : TXmlBuilder; value : TFhirPatientCommunication);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'language', value.language); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'preferred', value.preferredElement); {L738}
end;

function TFHIRXmlParser.ParsePatientLink(element : TMXmlElement; path : string) : TFhirPatientLink;
var
  child : TMXmlElement;
begin
  result := TFhirPatientLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientLinkChild(value : TFhirPatientLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'other') then
        value.other := ParseReference(child, path+'/other') {L740}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirLinkTypeEnum, SYSTEMS_TFhirLinkTypeEnum, child, path+'/type') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatientLink(xml : TXmlBuilder; name : String; value : TFhirPatientLink);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePatientLinkChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePatientLinkChildren(xml : TXmlBuilder; value : TFhirPatientLink);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'other', value.other); {L741}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirLinkTypeEnum); {L735}
end;

function TFHIRXmlParser.ParsePatient(element : TMXmlElement; path : string) : TFhirPatient;
var
  child : TMXmlElement;
begin
  result := TFhirPatient.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePatientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePatientChild(value : TFhirPatient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'name') then
        value.nameList.Add(ParseHumanName(child, path+'/name')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'gender') then
        value.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, child, path+'/gender') {L734}
      else if (child.localName = 'birthDate') then
        value.birthDateElement := ParseDate(child, path+'/birthDate') {L737}
      else if (child.localName = 'deceasedBoolean') then
        value.deceased := ParseBoolean(child, path+'/deceasedBoolean') {L891}
      else if (child.localName = 'deceasedDateTime') then
        value.deceased := ParseDateTime(child, path+'/deceasedDateTime') {L891}
      else if (child.localName = 'address') then
        value.addressList.Add(ParseAddress(child, path+'/address')) {L631}
      else if (child.localName = 'maritalStatus') then
        value.maritalStatus := ParseCodeableConcept(child, path+'/maritalStatus') {L740}
      else if (child.localName = 'multipleBirthBoolean') then
        value.multipleBirth := ParseBoolean(child, path+'/multipleBirthBoolean') {L891}
      else if (child.localName = 'multipleBirthInteger') then
        value.multipleBirth := ParseInteger(child, path+'/multipleBirthInteger') {L891}
      else if (child.localName = 'photo') then
        value.photoList.Add(ParseAttachment(child, path+'/photo')) {L631}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParsePatientContact(child, path+'/contact')) {L631}
      else if (child.localName = 'communication') then
        value.communicationList.Add(ParsePatientCommunication(child, path+'/communication')) {L631}
      else if (child.localName = 'generalPractitioner') then
        value.generalPractitionerList.Add(ParseReference(child, path+'/generalPractitioner')) {L631}
      else if (child.localName = 'managingOrganization') then
        value.managingOrganization := ParseReference(child, path+'/managingOrganization') {L740}
      else if (child.localName = 'link') then
        value.link_List.Add(ParsePatientLink(child, path+'/link')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePatient(xml : TXmlBuilder; name : String; value : TFhirPatient);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePatientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePatientChildren(xml : TXmlBuilder; value : TFhirPatient);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', value.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'birthDate', value.birthDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'deceasedBoolean', TFhirBoolean(value.deceased))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.deceased is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'deceasedDateTime', TFhirDateTime(value.deceased));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(xml, 'address', value.addressList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'maritalStatus', value.maritalStatus); {L741}
  if (SummaryOption in [soFull, soData]) and (value.multipleBirth is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'multipleBirthBoolean', TFhirBoolean(value.multipleBirth))
  else if (SummaryOption in [soFull, soData]) and (value.multipleBirth is TFhirInteger) {6} then
    ComposeInteger(xml, 'multipleBirthInteger', TFhirInteger(value.multipleBirth));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.photoList.Count - 1 do
      ComposeAttachment(xml, 'photo', value.photoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposePatientContact(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.communicationList.Count - 1 do
      ComposePatientCommunication(xml, 'communication', value.communicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.generalPractitionerList.Count - 1 do
      ComposeReference(xml, 'generalPractitioner', value.generalPractitionerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'managingOrganization', value.managingOrganization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposePatientLink(xml, 'link', value.link_List[i]);
end;

{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
function TFHIRXmlParser.ParsePaymentNotice(element : TMXmlElement; path : string) : TFhirPaymentNotice;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentNotice.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentNoticeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentNoticeChild(value : TFhirPaymentNotice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'response') then
        value.response := ParseReference(child, path+'/response') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'provider') then
        value.provider := ParseReference(child, path+'/provider') {L740}
      else if (child.localName = 'payment') then
        value.payment := ParseReference(child, path+'/payment') {L740}
      else if (child.localName = 'paymentDate') then
        value.paymentDateElement := ParseDate(child, path+'/paymentDate') {L737}
      else if (child.localName = 'payee') then
        value.payee := ParseReference(child, path+'/payee') {L740}
      else if (child.localName = 'recipient') then
        value.recipient := ParseReference(child, path+'/recipient') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if (child.localName = 'paymentStatus') then
        value.paymentStatus := ParseCodeableConcept(child, path+'/paymentStatus') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentNotice(xml : TXmlBuilder; name : String; value : TFhirPaymentNotice);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePaymentNoticeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePaymentNoticeChildren(xml : TXmlBuilder; value : TFhirPaymentNotice);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'response', value.response); {L741}
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'provider', value.provider); {L741}
  ComposeReference(xml, 'payment', value.payment); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'paymentDate', value.paymentDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'payee', value.payee); {L741}
  ComposeReference(xml, 'recipient', value.recipient); {L741}
  ComposeMoney(xml, 'amount', value.amount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'paymentStatus', value.paymentStatus); {L741}
end;

{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
function TFHIRXmlParser.ParsePaymentReconciliationDetail(element : TMXmlElement; path : string) : TFhirPaymentReconciliationDetail;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentReconciliationDetail.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentReconciliationDetailChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentReconciliationDetailChild(value : TFhirPaymentReconciliationDetail; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'predecessor') then
        value.predecessor := ParseIdentifier(child, path+'/predecessor') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'submitter') then
        value.submitter := ParseReference(child, path+'/submitter') {L740}
      else if (child.localName = 'response') then
        value.response := ParseReference(child, path+'/response') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'responsible') then
        value.responsible := ParseReference(child, path+'/responsible') {L740}
      else if (child.localName = 'payee') then
        value.payee := ParseReference(child, path+'/payee') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseMoney(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationDetail(xml : TXmlBuilder; name : String; value : TFhirPaymentReconciliationDetail);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePaymentReconciliationDetailChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationDetailChildren(xml : TXmlBuilder; value : TFhirPaymentReconciliationDetail);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'predecessor', value.predecessor); {L741}
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'submitter', value.submitter); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'response', value.response); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'responsible', value.responsible); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'payee', value.payee); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeMoney(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParsePaymentReconciliationProcessNote(element : TMXmlElement; path : string) : TFhirPaymentReconciliationProcessNote;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentReconciliationProcessNote.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentReconciliationProcessNoteChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentReconciliationProcessNoteChild(value : TFhirPaymentReconciliationProcessNote; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirNoteTypeEnum, SYSTEMS_TFhirNoteTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationProcessNote(xml : TXmlBuilder; name : String; value : TFhirPaymentReconciliationProcessNote);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePaymentReconciliationProcessNoteChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationProcessNoteChildren(xml : TXmlBuilder; value : TFhirPaymentReconciliationProcessNote);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirNoteTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
end;

function TFHIRXmlParser.ParsePaymentReconciliation(element : TMXmlElement; path : string) : TFhirPaymentReconciliation;
var
  child : TMXmlElement;
begin
  result := TFhirPaymentReconciliation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePaymentReconciliationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePaymentReconciliationChild(value : TFhirPaymentReconciliation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'paymentIssuer') then
        value.paymentIssuer := ParseReference(child, path+'/paymentIssuer') {L740}
      else if (child.localName = 'request') then
        value.request := ParseReference(child, path+'/request') {L740}
      else if (child.localName = 'requestor') then
        value.requestor := ParseReference(child, path+'/requestor') {L740}
      else if (child.localName = 'outcome') then
        value.outcomeElement := ParseEnum(CODES_TFhirClaimProcessingCodesEnum, SYSTEMS_TFhirClaimProcessingCodesEnum, child, path+'/outcome') {L734}
      else if (child.localName = 'disposition') then
        value.dispositionElement := ParseString(child, path+'/disposition') {L737}
      else if (child.localName = 'paymentDate') then
        value.paymentDateElement := ParseDate(child, path+'/paymentDate') {L737}
      else if (child.localName = 'paymentAmount') then
        value.paymentAmount := ParseMoney(child, path+'/paymentAmount') {L740}
      else if (child.localName = 'paymentIdentifier') then
        value.paymentIdentifier := ParseIdentifier(child, path+'/paymentIdentifier') {L740}
      else if (child.localName = 'detail') then
        value.detailList.Add(ParsePaymentReconciliationDetail(child, path+'/detail')) {L631}
      else if (child.localName = 'formCode') then
        value.formCode := ParseCodeableConcept(child, path+'/formCode') {L740}
      else if (child.localName = 'processNote') then
        value.processNoteList.Add(ParsePaymentReconciliationProcessNote(child, path+'/processNote')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliation(xml : TXmlBuilder; name : String; value : TFhirPaymentReconciliation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePaymentReconciliationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePaymentReconciliationChildren(xml : TXmlBuilder; value : TFhirPaymentReconciliation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'paymentIssuer', value.paymentIssuer); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'request', value.request); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'requestor', value.requestor); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'outcome', value.outcomeElement, CODES_TFhirClaimProcessingCodesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'disposition', value.dispositionElement); {L738}
  ComposeDate(xml, 'paymentDate', value.paymentDateElement); {L738}
  ComposeMoney(xml, 'paymentAmount', value.paymentAmount); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeIdentifier(xml, 'paymentIdentifier', value.paymentIdentifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.detailList.Count - 1 do
      ComposePaymentReconciliationDetail(xml, 'detail', value.detailList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'formCode', value.formCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processNoteList.Count - 1 do
      ComposePaymentReconciliationProcessNote(xml, 'processNote', value.processNoteList[i]);
end;

{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERMISSION}
function TFHIRXmlParser.ParsePermissionProcessingActivity(element : TMXmlElement; path : string) : TFhirPermissionProcessingActivity;
var
  child : TMXmlElement;
begin
  result := TFhirPermissionProcessingActivity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePermissionProcessingActivityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePermissionProcessingActivityChild(value : TFhirPermissionProcessingActivity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'partyReference') then
        value.partyReferenceList.Add(ParseReference(child, path+'/partyReference')) {L631}
      else if (child.localName = 'partyCodeableConcept') then
        value.partyCodeableConceptList.Add(ParseCodeableConcept(child, path+'/partyCodeableConcept')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeList.Add(ParseCodeableConcept(child, path+'/purpose')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePermissionProcessingActivity(xml : TXmlBuilder; name : String; value : TFhirPermissionProcessingActivity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePermissionProcessingActivityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePermissionProcessingActivityChildren(xml : TXmlBuilder; value : TFhirPermissionProcessingActivity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partyReferenceList.Count - 1 do
      ComposeReference(xml, 'partyReference', value.partyReferenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partyCodeableConceptList.Count - 1 do
      ComposeCodeableConcept(xml, 'partyCodeableConcept', value.partyCodeableConceptList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.purposeList.Count - 1 do
      ComposeCodeableConcept(xml, 'purpose', value.purposeList[i]);
end;

function TFHIRXmlParser.ParsePermissionJustification(element : TMXmlElement; path : string) : TFhirPermissionJustification;
var
  child : TMXmlElement;
begin
  result := TFhirPermissionJustification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePermissionJustificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePermissionJustificationChild(value : TFhirPermissionJustification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'evidence') then
        value.evidenceList.Add(ParseReference(child, path+'/evidence')) {L631}
      else if (child.localName = 'grounds') then
        value.groundsList.Add(ParseCodeableConcept(child, path+'/grounds')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePermissionJustification(xml : TXmlBuilder; name : String; value : TFhirPermissionJustification);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePermissionJustificationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePermissionJustificationChildren(xml : TXmlBuilder; value : TFhirPermissionJustification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.evidenceList.Count - 1 do
      ComposeReference(xml, 'evidence', value.evidenceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.groundsList.Count - 1 do
      ComposeCodeableConcept(xml, 'grounds', value.groundsList[i]);
end;

function TFHIRXmlParser.ParsePermission(element : TMXmlElement; path : string) : TFhirPermission;
var
  child : TMXmlElement;
begin
  result := TFhirPermission.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePermissionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePermissionChild(value : TFhirPermission; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPermissionStatusEnum, SYSTEMS_TFhirPermissionStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'intent') then
        value.intent := ParseCodeableConcept(child, path+'/intent') {L740}
      else if (child.localName = 'asserter') then
        value.asserter := ParseReference(child, path+'/asserter') {L740}
      else if (child.localName = 'assertionDate') then
        value.assertionDateList.Add(ParseDateTime(child, path+'/assertionDate')) {L631}
      else if (child.localName = 'validity') then
        value.validity := ParsePeriod(child, path+'/validity') {L740}
      else if (child.localName = 'purpose') then
        value.purposeList.Add(ParseCodeableConcept(child, path+'/purpose')) {L631}
      else if (child.localName = 'dataScope') then
        value.dataScopeList.Add(ParseExpression(child, path+'/dataScope')) {L631}
      else if (child.localName = 'processingActivity') then
        value.processingActivityList.Add(ParsePermissionProcessingActivity(child, path+'/processingActivity')) {L631}
      else if (child.localName = 'justification') then
        value.justification := ParsePermissionJustification(child, path+'/justification') {L740}
      else if (child.localName = 'usageLimitations') then
        value.usageLimitationsList.Add(ParseCodeableConcept(child, path+'/usageLimitations')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePermission(xml : TXmlBuilder; name : String; value : TFhirPermission);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePermissionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePermissionChildren(xml : TXmlBuilder; value : TFhirPermission);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPermissionStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'intent', value.intent); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'asserter', value.asserter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.assertionDateList.Count - 1 do
      ComposeDateTime(xml, 'assertionDate', value.assertionDateList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'validity', value.validity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.purposeList.Count - 1 do
      ComposeCodeableConcept(xml, 'purpose', value.purposeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dataScopeList.Count - 1 do
      ComposeExpression(xml, 'dataScope', value.dataScopeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.processingActivityList.Count - 1 do
      ComposePermissionProcessingActivity(xml, 'processingActivity', value.processingActivityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePermissionJustification(xml, 'justification', value.justification); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.usageLimitationsList.Count - 1 do
      ComposeCodeableConcept(xml, 'usageLimitations', value.usageLimitationsList[i]);
end;

{$ENDIF FHIR_PERMISSION}
{$IFDEF FHIR_PERSON}
function TFHIRXmlParser.ParsePersonLink(element : TMXmlElement; path : string) : TFhirPersonLink;
var
  child : TMXmlElement;
begin
  result := TFhirPersonLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePersonLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePersonLinkChild(value : TFhirPersonLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        value.target := ParseReference(child, path+'/target') {L740}
      else if (child.localName = 'assurance') then
        value.assuranceElement := ParseEnum(CODES_TFhirIdentityAssuranceLevelEnum, SYSTEMS_TFhirIdentityAssuranceLevelEnum, child, path+'/assurance') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePersonLink(xml : TXmlBuilder; name : String; value : TFhirPersonLink);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePersonLinkChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePersonLinkChildren(xml : TXmlBuilder; value : TFhirPersonLink);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'target', value.target); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'assurance', value.assuranceElement, CODES_TFhirIdentityAssuranceLevelEnum); {L735}
end;

function TFHIRXmlParser.ParsePerson(element : TMXmlElement; path : string) : TFhirPerson;
var
  child : TMXmlElement;
begin
  result := TFhirPerson.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePersonChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePersonChild(value : TFhirPerson; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'name') then
        value.nameList.Add(ParseHumanName(child, path+'/name')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'gender') then
        value.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, child, path+'/gender') {L734}
      else if (child.localName = 'birthDate') then
        value.birthDateElement := ParseDate(child, path+'/birthDate') {L737}
      else if (child.localName = 'address') then
        value.addressList.Add(ParseAddress(child, path+'/address')) {L631}
      else if (child.localName = 'photo') then
        value.photo := ParseAttachment(child, path+'/photo') {L740}
      else if (child.localName = 'managingOrganization') then
        value.managingOrganization := ParseReference(child, path+'/managingOrganization') {L740}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'link') then
        value.link_List.Add(ParsePersonLink(child, path+'/link')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePerson(xml : TXmlBuilder; name : String; value : TFhirPerson);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePersonChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePersonChildren(xml : TXmlBuilder; value : TFhirPerson);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', value.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'birthDate', value.birthDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(xml, 'address', value.addressList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeAttachment(xml, 'photo', value.photo); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'managingOrganization', value.managingOrganization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposePersonLink(xml, 'link', value.link_List[i]);
end;

{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
function TFHIRXmlParser.ParsePlanDefinitionGoal(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoal;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionGoal.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionGoalChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionGoalChild(value : TFhirPlanDefinitionGoal; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'description') then
        value.description := ParseCodeableConcept(child, path+'/description') {L740}
      else if (child.localName = 'priority') then
        value.priority := ParseCodeableConcept(child, path+'/priority') {L740}
      else if (child.localName = 'start') then
        value.start := ParseCodeableConcept(child, path+'/start') {L740}
      else if (child.localName = 'addresses') then
        value.addressesList.Add(ParseCodeableConcept(child, path+'/addresses')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationList.Add(ParseRelatedArtifact(child, path+'/documentation')) {L631}
      else if (child.localName = 'target') then
        value.targetList.Add(ParsePlanDefinitionGoalTarget(child, path+'/target')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoal(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionGoal);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionGoalChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoalChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionGoal);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  ComposeCodeableConcept(xml, 'description', value.description); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'priority', value.priority); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'start', value.start); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.addressesList.Count - 1 do
      ComposeCodeableConcept(xml, 'addresses', value.addressesList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.documentationList.Count - 1 do
      ComposeRelatedArtifact(xml, 'documentation', value.documentationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposePlanDefinitionGoalTarget(xml, 'target', value.targetList[i]);
end;

function TFHIRXmlParser.ParsePlanDefinitionGoalTarget(element : TMXmlElement; path : string) : TFhirPlanDefinitionGoalTarget;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionGoalTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionGoalTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionGoalTargetChild(value : TFhirPlanDefinitionGoalTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'measure') then
        value.measure := ParseCodeableConcept(child, path+'/measure') {L740}
      else if (child.localName = 'detailQuantity') then
        value.detail := ParseQuantity(child, path+'/detailQuantity') {L891}
      else if (child.localName = 'detailRange') then
        value.detail := ParseRange(child, path+'/detailRange') {L891}
      else if (child.localName = 'detailCodeableConcept') then
        value.detail := ParseCodeableConcept(child, path+'/detailCodeableConcept') {L891}
      else if (child.localName = 'due') then
        value.due := ParseDuration(child, path+'/due') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoalTarget(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionGoalTarget);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionGoalTargetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionGoalTargetChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionGoalTarget);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'measure', value.measure); {L741}
  if (SummaryOption in [soFull, soData]) and (value.detail is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'detailQuantity', TFhirQuantity(value.detail))
  else if (SummaryOption in [soFull, soData]) and (value.detail is TFhirRange) {6} then
    ComposeRange(xml, 'detailRange', TFhirRange(value.detail))
  else if (SummaryOption in [soFull, soData]) and (value.detail is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'detailCodeableConcept', TFhirCodeableConcept(value.detail));
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'due', value.due); {L741}
end;

function TFHIRXmlParser.ParsePlanDefinitionAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionAction;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionChild(value : TFhirPlanDefinitionAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'prefix') then
        value.prefixElement := ParseString(child, path+'/prefix') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'textEquivalent') then
        value.textEquivalentElement := ParseString(child, path+'/textEquivalent') {L737}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableConcept(child, path+'/reason')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationList.Add(ParseRelatedArtifact(child, path+'/documentation')) {L631}
      else if (child.localName = 'goalId') then
        value.goalIdList.Add(ParseId(child, path+'/goalId')) {L631}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'trigger') then
        value.triggerList.Add(ParseTriggerDefinition(child, path+'/trigger')) {L631}
      else if (child.localName = 'condition') then
        value.conditionList.Add(ParsePlanDefinitionActionCondition(child, path+'/condition')) {L631}
      else if (child.localName = 'input') then
        value.inputList.Add(ParseDataRequirement(child, path+'/input')) {L631}
      else if (child.localName = 'output') then
        value.outputList.Add(ParseDataRequirement(child, path+'/output')) {L631}
      else if (child.localName = 'relatedAction') then
        value.relatedActionList.Add(ParsePlanDefinitionActionRelatedAction(child, path+'/relatedAction')) {L631}
      else if (child.localName = 'timingAge') then
        value.timing := ParseAge(child, path+'/timingAge') {L891}
      else if (child.localName = 'timingPeriod') then
        value.timing := ParsePeriod(child, path+'/timingPeriod') {L891}
      else if (child.localName = 'timingDuration') then
        value.timing := ParseDuration(child, path+'/timingDuration') {L891}
      else if (child.localName = 'timingRange') then
        value.timing := ParseRange(child, path+'/timingRange') {L891}
      else if (child.localName = 'timingTiming') then
        value.timing := ParseTiming(child, path+'/timingTiming') {L891}
      else if (child.localName = 'timingDateTime') then
        value.timing := ParseDateTime(child, path+'/timingDateTime') {L891}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParsePlanDefinitionActionParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'groupingBehavior') then
        value.groupingBehaviorElement := ParseEnum(CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum, child, path+'/groupingBehavior') {L734}
      else if (child.localName = 'selectionBehavior') then
        value.selectionBehaviorElement := ParseEnum(CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum, child, path+'/selectionBehavior') {L734}
      else if (child.localName = 'requiredBehavior') then
        value.requiredBehaviorElement := ParseEnum(CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum, child, path+'/requiredBehavior') {L734}
      else if (child.localName = 'precheckBehavior') then
        value.precheckBehaviorElement := ParseEnum(CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum, child, path+'/precheckBehavior') {L734}
      else if (child.localName = 'cardinalityBehavior') then
        value.cardinalityBehaviorElement := ParseEnum(CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum, child, path+'/cardinalityBehavior') {L734}
      else if (child.localName = 'definitionCanonical') then
        value.definition := ParseCanonical(child, path+'/definitionCanonical') {L891}
      else if (child.localName = 'definitionUri') then
        value.definition := ParseUri(child, path+'/definitionUri') {L891}
      else if (child.localName = 'transform') then
        value.transformElement := ParseCanonical(child, path+'/transform') {L737}
      else if (child.localName = 'dynamicValue') then
        value.dynamicValueList.Add(ParsePlanDefinitionActionDynamicValue(child, path+'/dynamicValue')) {L631}
      else if (child.localName = 'action') then
        value.actionList.Add(ParsePlanDefinitionAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionAction(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionAction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'prefix', value.prefixElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'textEquivalent', value.textEquivalentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.documentationList.Count - 1 do
      ComposeRelatedArtifact(xml, 'documentation', value.documentationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.goalIdList.Count - 1 do
      ComposeId(xml, 'goalId', value.goalIdList[i]);
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.triggerList.Count - 1 do
      ComposeTriggerDefinition(xml, 'trigger', value.triggerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conditionList.Count - 1 do
      ComposePlanDefinitionActionCondition(xml, 'condition', value.conditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.inputList.Count - 1 do
      ComposeDataRequirement(xml, 'input', value.inputList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.outputList.Count - 1 do
      ComposeDataRequirement(xml, 'output', value.outputList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedActionList.Count - 1 do
      ComposePlanDefinitionActionRelatedAction(xml, 'relatedAction', value.relatedActionList[i]);
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirAge) {6} then
    ComposeAge(xml, 'timingAge', TFhirAge(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDuration) {6} then
    ComposeDuration(xml, 'timingDuration', TFhirDuration(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirRange) {6} then
    ComposeRange(xml, 'timingRange', TFhirRange(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(value.timing));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposePlanDefinitionActionParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'groupingBehavior', value.groupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'selectionBehavior', value.selectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'requiredBehavior', value.requiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'precheckBehavior', value.precheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'cardinalityBehavior', value.cardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) and (value.definition is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'definitionCanonical', TFhirCanonical(value.definition))
  else if (SummaryOption in [soFull, soData]) and (value.definition is TFhirUri) {6} then
    ComposeUri(xml, 'definitionUri', TFhirUri(value.definition));
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'transform', value.transformElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.dynamicValueList.Count - 1 do
      ComposePlanDefinitionActionDynamicValue(xml, 'dynamicValue', value.dynamicValueList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actionList.Count - 1 do
      ComposePlanDefinitionAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParsePlanDefinitionActionCondition(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionCondition;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionCondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionConditionChild(value : TFhirPlanDefinitionActionCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'expression') then
        value.expression := ParseExpression(child, path+'/expression') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionCondition(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionActionCondition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionActionConditionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionConditionChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionCondition);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirActionConditionKindEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'expression', value.expression); {L741}
end;

function TFHIRXmlParser.ParsePlanDefinitionActionRelatedAction(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionRelatedAction;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionRelatedAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionRelatedActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionRelatedActionChild(value : TFhirPlanDefinitionActionRelatedAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'actionId') then
        value.actionIdElement := ParseId(child, path+'/actionId') {L737}
      else if (child.localName = 'relationship') then
        value.relationshipElement := ParseEnum(CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum, child, path+'/relationship') {L734}
      else if (child.localName = 'offsetDuration') then
        value.offset := ParseDuration(child, path+'/offsetDuration') {L891}
      else if (child.localName = 'offsetRange') then
        value.offset := ParseRange(child, path+'/offsetRange') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionRelatedAction(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionActionRelatedAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionActionRelatedActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionRelatedActionChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionRelatedAction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'actionId', value.actionIdElement); {L738}
  ComposeEnum(xml, 'relationship', value.relationshipElement, CODES_TFhirActionRelationshipTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) and (value.offset is TFhirDuration) {6} then
    ComposeDuration(xml, 'offsetDuration', TFhirDuration(value.offset))
  else if (SummaryOption in [soFull, soData]) and (value.offset is TFhirRange) {6} then
    ComposeRange(xml, 'offsetRange', TFhirRange(value.offset));
end;

function TFHIRXmlParser.ParsePlanDefinitionActionParticipant(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionParticipantChild(value : TFhirPlanDefinitionActionParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirActionParticipantTypeEnum, SYSTEMS_TFhirActionParticipantTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionParticipant(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionActionParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionActionParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionParticipantChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionParticipant);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirActionParticipantTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
end;

function TFHIRXmlParser.ParsePlanDefinitionActionDynamicValue(element : TMXmlElement; path : string) : TFhirPlanDefinitionActionDynamicValue;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinitionActionDynamicValue.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionActionDynamicValueChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionActionDynamicValueChild(value : TFhirPlanDefinitionActionDynamicValue; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'expression') then
        value.expression := ParseExpression(child, path+'/expression') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionDynamicValue(xml : TXmlBuilder; name : String; value : TFhirPlanDefinitionActionDynamicValue);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionActionDynamicValueChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionActionDynamicValueChildren(xml : TXmlBuilder; value : TFhirPlanDefinitionActionDynamicValue);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'expression', value.expression); {L741}
end;

function TFHIRXmlParser.ParsePlanDefinition(element : TMXmlElement; path : string) : TFhirPlanDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirPlanDefinition.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePlanDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePlanDefinitionChild(value : TFhirPlanDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'subtitle') then
        value.subtitleElement := ParseString(child, path+'/subtitle') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'usage') then
        value.usageElement := ParseString(child, path+'/usage') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'topic') then
        value.topicList.Add(ParseCodeableConcept(child, path+'/topic')) {L631}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseContactDetail(child, path+'/author')) {L631}
      else if (child.localName = 'editor') then
        value.editorList.Add(ParseContactDetail(child, path+'/editor')) {L631}
      else if (child.localName = 'reviewer') then
        value.reviewerList.Add(ParseContactDetail(child, path+'/reviewer')) {L631}
      else if (child.localName = 'endorser') then
        value.endorserList.Add(ParseContactDetail(child, path+'/endorser')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'library') then
        value.library_List.Add(ParseCanonical(child, path+'/library')) {L631}
      else if (child.localName = 'goal') then
        value.goalList.Add(ParsePlanDefinitionGoal(child, path+'/goal')) {L631}
      else if (child.localName = 'action') then
        value.actionList.Add(ParsePlanDefinitionAction(child, path+'/action')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePlanDefinition(xml : TXmlBuilder; name : String; value : TFhirPlanDefinition);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePlanDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePlanDefinitionChildren(xml : TXmlBuilder; value : TFhirPlanDefinition);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'subtitle', value.subtitleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'usage', value.usageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.topicList.Count - 1 do
      ComposeCodeableConcept(xml, 'topic', value.topicList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeContactDetail(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.editorList.Count - 1 do
      ComposeContactDetail(xml, 'editor', value.editorList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reviewerList.Count - 1 do
      ComposeContactDetail(xml, 'reviewer', value.reviewerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endorserList.Count - 1 do
      ComposeContactDetail(xml, 'endorser', value.endorserList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.library_List.Count - 1 do
      ComposeCanonical(xml, 'library', value.library_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.goalList.Count - 1 do
      ComposePlanDefinitionGoal(xml, 'goal', value.goalList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actionList.Count - 1 do
      ComposePlanDefinitionAction(xml, 'action', value.actionList[i]);
end;

{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
function TFHIRXmlParser.ParsePractitionerQualification(element : TMXmlElement; path : string) : TFhirPractitionerQualification;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerQualification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerQualificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerQualificationChild(value : TFhirPractitionerQualification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'issuer') then
        value.issuer := ParseReference(child, path+'/issuer') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerQualification(xml : TXmlBuilder; name : String; value : TFhirPractitionerQualification);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePractitionerQualificationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePractitionerQualificationChildren(xml : TXmlBuilder; value : TFhirPractitionerQualification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'issuer', value.issuer); {L741}
end;

function TFHIRXmlParser.ParsePractitioner(element : TMXmlElement; path : string) : TFhirPractitioner;
var
  child : TMXmlElement;
begin
  result := TFhirPractitioner.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerChild(value : TFhirPractitioner; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'name') then
        value.nameList.Add(ParseHumanName(child, path+'/name')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'address') then
        value.addressList.Add(ParseAddress(child, path+'/address')) {L631}
      else if (child.localName = 'gender') then
        value.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, child, path+'/gender') {L734}
      else if (child.localName = 'birthDate') then
        value.birthDateElement := ParseDate(child, path+'/birthDate') {L737}
      else if (child.localName = 'photo') then
        value.photoList.Add(ParseAttachment(child, path+'/photo')) {L631}
      else if (child.localName = 'qualification') then
        value.qualificationList.Add(ParsePractitionerQualification(child, path+'/qualification')) {L631}
      else if (child.localName = 'communication') then
        value.communicationList.Add(ParseCodeableConcept(child, path+'/communication')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitioner(xml : TXmlBuilder; name : String; value : TFhirPractitioner);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePractitionerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePractitionerChildren(xml : TXmlBuilder; value : TFhirPractitioner);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', value.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(xml, 'address', value.addressList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'birthDate', value.birthDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.photoList.Count - 1 do
      ComposeAttachment(xml, 'photo', value.photoList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.qualificationList.Count - 1 do
      ComposePractitionerQualification(xml, 'qualification', value.qualificationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.communicationList.Count - 1 do
      ComposeCodeableConcept(xml, 'communication', value.communicationList[i]);
end;

{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
function TFHIRXmlParser.ParsePractitionerRoleAvailableTime(element : TMXmlElement; path : string) : TFhirPractitionerRoleAvailableTime;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerRoleAvailableTime.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerRoleAvailableTimeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerRoleAvailableTimeChild(value : TFhirPractitionerRoleAvailableTime; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'daysOfWeek') then
        value.daysOfWeekList.Add(ParseEnum(CODES_TFhirDaysOfWeekEnum, SYSTEMS_TFhirDaysOfWeekEnum, child, path+'/daysOfWeek')){y.1}
      else if (child.localName = 'allDay') then
        value.allDayElement := ParseBoolean(child, path+'/allDay') {L737}
      else if (child.localName = 'availableStartTime') then
        value.availableStartTimeElement := ParseTime(child, path+'/availableStartTime') {L737}
      else if (child.localName = 'availableEndTime') then
        value.availableEndTimeElement := ParseTime(child, path+'/availableEndTime') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleAvailableTime(xml : TXmlBuilder; name : String; value : TFhirPractitionerRoleAvailableTime);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePractitionerRoleAvailableTimeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleAvailableTimeChildren(xml : TXmlBuilder; value : TFhirPractitionerRoleAvailableTime);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.daysOfWeekList.Count - 1 do
      ComposeEnum(xml, 'daysOfWeek', value.daysOfWeekList[i], CODES_TFhirDaysOfWeekEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'allDay', value.allDayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableStartTime', value.availableStartTimeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeTime(xml, 'availableEndTime', value.availableEndTimeElement); {L738}
end;

function TFHIRXmlParser.ParsePractitionerRoleNotAvailable(element : TMXmlElement; path : string) : TFhirPractitionerRoleNotAvailable;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerRoleNotAvailable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerRoleNotAvailableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerRoleNotAvailableChild(value : TFhirPractitionerRoleNotAvailable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'during') then
        value.during := ParsePeriod(child, path+'/during') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleNotAvailable(xml : TXmlBuilder; name : String; value : TFhirPractitionerRoleNotAvailable);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePractitionerRoleNotAvailableChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleNotAvailableChildren(xml : TXmlBuilder; value : TFhirPractitionerRoleNotAvailable);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'during', value.during); {L741}
end;

function TFHIRXmlParser.ParsePractitionerRole(element : TMXmlElement; path : string) : TFhirPractitionerRole;
var
  child : TMXmlElement;
begin
  result := TFhirPractitionerRole.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParsePractitionerRoleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParsePractitionerRoleChild(value : TFhirPractitionerRole; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'practitioner') then
        value.practitioner := ParseReference(child, path+'/practitioner') {L740}
      else if (child.localName = 'organization') then
        value.organization := ParseReference(child, path+'/organization') {L740}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'specialty') then
        value.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')) {L631}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseReference(child, path+'/location')) {L631}
      else if (child.localName = 'healthcareService') then
        value.healthcareServiceList.Add(ParseReference(child, path+'/healthcareService')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'availableTime') then
        value.availableTimeList.Add(ParsePractitionerRoleAvailableTime(child, path+'/availableTime')) {L631}
      else if (child.localName = 'notAvailable') then
        value.notAvailableList.Add(ParsePractitionerRoleNotAvailable(child, path+'/notAvailable')) {L631}
      else if (child.localName = 'availabilityExceptions') then
        value.availabilityExceptionsElement := ParseString(child, path+'/availabilityExceptions') {L737}
      else if (child.localName = 'endpoint') then
        value.endpointList.Add(ParseReference(child, path+'/endpoint')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposePractitionerRole(xml : TXmlBuilder; name : String; value : TFhirPractitionerRole);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composePractitionerRoleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposePractitionerRoleChildren(xml : TXmlBuilder; value : TFhirPractitionerRole);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'practitioner', value.practitioner); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'organization', value.organization); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', value.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeReference(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.healthcareServiceList.Count - 1 do
      ComposeReference(xml, 'healthcareService', value.healthcareServiceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.availableTimeList.Count - 1 do
      ComposePractitionerRoleAvailableTime(xml, 'availableTime', value.availableTimeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.notAvailableList.Count - 1 do
      ComposePractitionerRoleNotAvailable(xml, 'notAvailable', value.notAvailableList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'availabilityExceptions', value.availabilityExceptionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.endpointList.Count - 1 do
      ComposeReference(xml, 'endpoint', value.endpointList[i]);
end;

{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
function TFHIRXmlParser.ParseProcedurePerformer(element : TMXmlElement; path : string) : TFhirProcedurePerformer;
var
  child : TMXmlElement;
begin
  result := TFhirProcedurePerformer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProcedurePerformerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProcedurePerformerChild(value : TFhirProcedurePerformer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'function') then
        value.function_ := ParseCodeableConcept(child, path+'/function') {L740}
      else if (child.localName = 'actor') then
        value.actor := ParseReference(child, path+'/actor') {L740}
      else if (child.localName = 'onBehalfOf') then
        value.onBehalfOf := ParseReference(child, path+'/onBehalfOf') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProcedurePerformer(xml : TXmlBuilder; name : String; value : TFhirProcedurePerformer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProcedurePerformerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProcedurePerformerChildren(xml : TXmlBuilder; value : TFhirProcedurePerformer);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'function', value.function_); {L741}
  ComposeReference(xml, 'actor', value.actor); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'onBehalfOf', value.onBehalfOf); {L741}
end;

function TFHIRXmlParser.ParseProcedureFocalDevice(element : TMXmlElement; path : string) : TFhirProcedureFocalDevice;
var
  child : TMXmlElement;
begin
  result := TFhirProcedureFocalDevice.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProcedureFocalDeviceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProcedureFocalDeviceChild(value : TFhirProcedureFocalDevice; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        value.action := ParseCodeableConcept(child, path+'/action') {L740}
      else if (child.localName = 'manipulated') then
        value.manipulated := ParseReference(child, path+'/manipulated') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProcedureFocalDevice(xml : TXmlBuilder; name : String; value : TFhirProcedureFocalDevice);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProcedureFocalDeviceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProcedureFocalDeviceChildren(xml : TXmlBuilder; value : TFhirProcedureFocalDevice);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'action', value.action); {L741}
  ComposeReference(xml, 'manipulated', value.manipulated); {L741}
end;

function TFHIRXmlParser.ParseProcedure(element : TMXmlElement; path : string) : TFhirProcedure;
var
  child : TMXmlElement;
begin
  result := TFhirProcedure.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProcedureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProcedureChild(value : TFhirProcedure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirEventStatusEnum, SYSTEMS_TFhirEventStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceAge') then
        value.occurrence := ParseAge(child, path+'/occurrenceAge') {L891}
      else if (child.localName = 'occurrenceRange') then
        value.occurrence := ParseRange(child, path+'/occurrenceRange') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'occurrenceString') then
        value.occurrence := ParseString(child, path+'/occurrenceString') {L891}
      else if (child.localName = 'recorded') then
        value.recordedElement := ParseDateTime(child, path+'/recorded') {L737}
      else if (child.localName = 'recorder') then
        value.recorder := ParseReference(child, path+'/recorder') {L740}
      else if (child.localName = 'reportedReference') then
        value.reported := ParseReference(child, path+'/reportedReference') {L881}
      else if (child.localName = 'reportedBoolean') then
        value.reported := ParseBoolean(child, path+'/reportedBoolean') {L891}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseProcedurePerformer(child, path+'/performer')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')) {L631}
      else if (child.localName = 'outcome') then
        value.outcome := ParseCodeableConcept(child, path+'/outcome') {L740}
      else if (child.localName = 'report') then
        value.reportList.Add(ParseReference(child, path+'/report')) {L631}
      else if (child.localName = 'complication') then
        value.complicationList.Add(ParseCodeableConcept(child, path+'/complication')) {L631}
      else if (child.localName = 'complicationDetail') then
        value.complicationDetailList.Add(ParseReference(child, path+'/complicationDetail')) {L631}
      else if (child.localName = 'followUp') then
        value.followUpList.Add(ParseCodeableConcept(child, path+'/followUp')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'focalDevice') then
        value.focalDeviceList.Add(ParseProcedureFocalDevice(child, path+'/focalDevice')) {L631}
      else if (child.localName = 'used') then
        value.usedList.Add(ParseCodeableReference(child, path+'/used')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProcedure(xml : TXmlBuilder; name : String; value : TFhirProcedure);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProcedureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProcedureChildren(xml : TXmlBuilder; value : TFhirProcedure);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirEventStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirAge) {6} then
    ComposeAge(xml, 'occurrenceAge', TFhirAge(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirRange) {6} then
    ComposeRange(xml, 'occurrenceRange', TFhirRange(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirString) {6} then
    ComposeString(xml, 'occurrenceString', TFhirString(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'recorded', value.recordedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'recorder', value.recorder); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.reported is TFhirReference) {2} then
    ComposeReference(xml, 'reportedReference', TFhirReference(value.reported))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.reported is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'reportedBoolean', TFhirBoolean(value.reported));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeProcedurePerformer(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', value.bodySiteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'outcome', value.outcome); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reportList.Count - 1 do
      ComposeReference(xml, 'report', value.reportList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.complicationList.Count - 1 do
      ComposeCodeableConcept(xml, 'complication', value.complicationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.complicationDetailList.Count - 1 do
      ComposeReference(xml, 'complicationDetail', value.complicationDetailList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.followUpList.Count - 1 do
      ComposeCodeableConcept(xml, 'followUp', value.followUpList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.focalDeviceList.Count - 1 do
      ComposeProcedureFocalDevice(xml, 'focalDevice', value.focalDeviceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.usedList.Count - 1 do
      ComposeCodeableReference(xml, 'used', value.usedList[i]);
end;

{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
function TFHIRXmlParser.ParseProvenanceAgent(element : TMXmlElement; path : string) : TFhirProvenanceAgent;
var
  child : TMXmlElement;
begin
  result := TFhirProvenanceAgent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProvenanceAgentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProvenanceAgentChild(value : TFhirProvenanceAgent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'role') then
        value.roleList.Add(ParseCodeableConcept(child, path+'/role')) {L631}
      else if (child.localName = 'who') then
        value.who := ParseReference(child, path+'/who') {L740}
      else if (child.localName = 'onBehalfOf') then
        value.onBehalfOf := ParseReference(child, path+'/onBehalfOf') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProvenanceAgent(xml : TXmlBuilder; name : String; value : TFhirProvenanceAgent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProvenanceAgentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProvenanceAgentChildren(xml : TXmlBuilder; value : TFhirProvenanceAgent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.roleList.Count - 1 do
      ComposeCodeableConcept(xml, 'role', value.roleList[i]);
  ComposeReference(xml, 'who', value.who); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'onBehalfOf', value.onBehalfOf); {L741}
end;

function TFHIRXmlParser.ParseProvenanceEntity(element : TMXmlElement; path : string) : TFhirProvenanceEntity;
var
  child : TMXmlElement;
begin
  result := TFhirProvenanceEntity.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProvenanceEntityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProvenanceEntityChild(value : TFhirProvenanceEntity; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        value.roleElement := ParseEnum(CODES_TFhirProvenanceEntityRoleEnum, SYSTEMS_TFhirProvenanceEntityRoleEnum, child, path+'/role') {L734}
      else if (child.localName = 'what') then
        value.what := ParseReference(child, path+'/what') {L740}
      else if (child.localName = 'agent') then
        value.agentList.Add(ParseProvenanceAgent(child, path+'/agent')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProvenanceEntity(xml : TXmlBuilder; name : String; value : TFhirProvenanceEntity);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProvenanceEntityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProvenanceEntityChildren(xml : TXmlBuilder; value : TFhirProvenanceEntity);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'role', value.roleElement, CODES_TFhirProvenanceEntityRoleEnum); {L735}
  ComposeReference(xml, 'what', value.what); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.agentList.Count - 1 do
      ComposeProvenanceAgent(xml, 'agent', value.agentList[i]);
end;

function TFHIRXmlParser.ParseProvenance(element : TMXmlElement; path : string) : TFhirProvenance;
var
  child : TMXmlElement;
begin
  result := TFhirProvenance.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseProvenanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseProvenanceChild(value : TFhirProvenance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        value.targetList.Add(ParseReference(child, path+'/target')) {L631}
      else if (child.localName = 'occurredPeriod') then
        value.occurred := ParsePeriod(child, path+'/occurredPeriod') {L891}
      else if (child.localName = 'occurredDateTime') then
        value.occurred := ParseDateTime(child, path+'/occurredDateTime') {L891}
      else if (child.localName = 'recorded') then
        value.recordedElement := ParseInstant(child, path+'/recorded') {L737}
      else if (child.localName = 'policy') then
        value.policyList.Add(ParseUri(child, path+'/policy')) {L631}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableConcept(child, path+'/reason')) {L631}
      else if (child.localName = 'activity') then
        value.activity := ParseCodeableConcept(child, path+'/activity') {L740}
      else if (child.localName = 'agent') then
        value.agentList.Add(ParseProvenanceAgent(child, path+'/agent')) {L631}
      else if (child.localName = 'entity') then
        value.entityList.Add(ParseProvenanceEntity(child, path+'/entity')) {L631}
      else if (child.localName = 'signature') then
        value.signatureList.Add(ParseSignature(child, path+'/signature')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeProvenance(xml : TXmlBuilder; name : String; value : TFhirProvenance);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeProvenanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeProvenanceChildren(xml : TXmlBuilder; value : TFhirProvenance);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  for i := 0 to value.targetList.Count - 1 do
      ComposeReference(xml, 'target', value.targetList[i]);
  if (SummaryOption in [soFull, soData]) and (value.occurred is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurredPeriod', TFhirPeriod(value.occurred))
  else if (SummaryOption in [soFull, soData]) and (value.occurred is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurredDateTime', TFhirDateTime(value.occurred));
  ComposeInstant(xml, 'recorded', value.recordedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.policyList.Count - 1 do
      ComposeUri(xml, 'policy', value.policyList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableConcept(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'activity', value.activity); {L741}
  for i := 0 to value.agentList.Count - 1 do
      ComposeProvenanceAgent(xml, 'agent', value.agentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.entityList.Count - 1 do
      ComposeProvenanceEntity(xml, 'entity', value.entityList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.signatureList.Count - 1 do
      ComposeSignature(xml, 'signature', value.signatureList[i]);
end;

{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
function TFHIRXmlParser.ParseQuestionnaireItem(element : TMXmlElement; path : string) : TFhirQuestionnaireItem;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemChild(value : TFhirQuestionnaireItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'linkId') then
        value.linkIdElement := ParseString(child, path+'/linkId') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseUri(child, path+'/definition') {L737}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCoding(child, path+'/code')) {L631}
      else if (child.localName = 'prefix') then
        value.prefixElement := ParseString(child, path+'/prefix') {L737}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirQuestionnaireItemTypeEnum, SYSTEMS_TFhirQuestionnaireItemTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'enableWhen') then
        value.enableWhenList.Add(ParseQuestionnaireItemEnableWhen(child, path+'/enableWhen')) {L631}
      else if (child.localName = 'enableBehavior') then
        value.enableBehaviorElement := ParseEnum(CODES_TFhirEnableWhenBehaviorEnum, SYSTEMS_TFhirEnableWhenBehaviorEnum, child, path+'/enableBehavior') {L734}
      else if (child.localName = 'required') then
        value.requiredElement := ParseBoolean(child, path+'/required') {L737}
      else if (child.localName = 'repeats') then
        value.repeatsElement := ParseBoolean(child, path+'/repeats') {L737}
      else if (child.localName = 'readOnly') then
        value.readOnlyElement := ParseBoolean(child, path+'/readOnly') {L737}
      else if (child.localName = 'maxLength') then
        value.maxLengthElement := ParseInteger(child, path+'/maxLength') {L737}
      else if (child.localName = 'answerValueSet') then
        value.answerValueSetElement := ParseCanonical(child, path+'/answerValueSet') {L737}
      else if (child.localName = 'answerOption') then
        value.answerOptionList.Add(ParseQuestionnaireItemAnswerOption(child, path+'/answerOption')) {L631}
      else if (child.localName = 'initial') then
        value.initialList.Add(ParseQuestionnaireItemInitial(child, path+'/initial')) {L631}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseQuestionnaireItem(child, path+'/item')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItem(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'linkId', value.linkIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'definition', value.definitionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'prefix', value.prefixElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirQuestionnaireItemTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.enableWhenList.Count - 1 do
      ComposeQuestionnaireItemEnableWhen(xml, 'enableWhen', value.enableWhenList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'enableBehavior', value.enableBehaviorElement, CODES_TFhirEnableWhenBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'required', value.requiredElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'repeats', value.repeatsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'readOnly', value.readOnlyElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'maxLength', value.maxLengthElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'answerValueSet', value.answerValueSetElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.answerOptionList.Count - 1 do
      ComposeQuestionnaireItemAnswerOption(xml, 'answerOption', value.answerOptionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.initialList.Count - 1 do
      ComposeQuestionnaireItemInitial(xml, 'initial', value.initialList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireItem(xml, 'item', value.itemList[i]);
end;

function TFHIRXmlParser.ParseQuestionnaireItemEnableWhen(element : TMXmlElement; path : string) : TFhirQuestionnaireItemEnableWhen;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItemEnableWhen.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemEnableWhenChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemEnableWhenChild(value : TFhirQuestionnaireItemEnableWhen; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'question') then
        value.questionElement := ParseString(child, path+'/question') {L737}
      else if (child.localName = 'operator') then
        value.operatorElement := ParseEnum(CODES_TFhirQuestionnaireItemOperatorEnum, SYSTEMS_TFhirQuestionnaireItemOperatorEnum, child, path+'/operator') {L734}
      else if (child.localName = 'answerCoding') then
        value.answer := ParseCoding(child, path+'/answerCoding') {L891}
      else if (child.localName = 'answerQuantity') then
        value.answer := ParseQuantity(child, path+'/answerQuantity') {L891}
      else if (child.localName = 'answerReference') then
        value.answer := ParseReference(child, path+'/answerReference') {L881}
      else if (child.localName = 'answerBoolean') then
        value.answer := ParseBoolean(child, path+'/answerBoolean') {L891}
      else if (child.localName = 'answerDecimal') then
        value.answer := ParseDecimal(child, path+'/answerDecimal') {L891}
      else if (child.localName = 'answerInteger') then
        value.answer := ParseInteger(child, path+'/answerInteger') {L891}
      else if (child.localName = 'answerDate') then
        value.answer := ParseDate(child, path+'/answerDate') {L891}
      else if (child.localName = 'answerDateTime') then
        value.answer := ParseDateTime(child, path+'/answerDateTime') {L891}
      else if (child.localName = 'answerTime') then
        value.answer := ParseTime(child, path+'/answerTime') {L891}
      else if (child.localName = 'answerString') then
        value.answer := ParseString(child, path+'/answerString') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemEnableWhen(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireItemEnableWhen);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireItemEnableWhenChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemEnableWhenChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItemEnableWhen);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'question', value.questionElement); {L738}
  ComposeEnum(xml, 'operator', value.operatorElement, CODES_TFhirQuestionnaireItemOperatorEnum); {L735}
  if (value.answer is TFhirCoding) {6} then
    ComposeCoding(xml, 'answerCoding', TFhirCoding(value.answer))
  else if (value.answer is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'answerQuantity', TFhirQuantity(value.answer))
  else if (value.answer is TFhirReference) {2} then
    ComposeReference(xml, 'answerReference', TFhirReference(value.answer))
  else if (value.answer is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'answerBoolean', TFhirBoolean(value.answer))
  else if (value.answer is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'answerDecimal', TFhirDecimal(value.answer))
  else if (value.answer is TFhirInteger) {6} then
    ComposeInteger(xml, 'answerInteger', TFhirInteger(value.answer))
  else if (value.answer is TFhirDate) {6} then
    ComposeDate(xml, 'answerDate', TFhirDate(value.answer))
  else if (value.answer is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'answerDateTime', TFhirDateTime(value.answer))
  else if (value.answer is TFhirTime) {6} then
    ComposeTime(xml, 'answerTime', TFhirTime(value.answer))
  else if (value.answer is TFhirString) {6} then
    ComposeString(xml, 'answerString', TFhirString(value.answer));
end;

function TFHIRXmlParser.ParseQuestionnaireItemAnswerOption(element : TMXmlElement; path : string) : TFhirQuestionnaireItemAnswerOption;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItemAnswerOption.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemAnswerOptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemAnswerOptionChild(value : TFhirQuestionnaireItemAnswerOption; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'initialSelected') then
        value.initialSelectedElement := ParseBoolean(child, path+'/initialSelected') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemAnswerOption(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireItemAnswerOption);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireItemAnswerOptionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemAnswerOptionChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItemAnswerOption);
begin
  composeBackboneElementChildren(xml, value);
  if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value));
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'initialSelected', value.initialSelectedElement); {L738}
end;

function TFHIRXmlParser.ParseQuestionnaireItemInitial(element : TMXmlElement; path : string) : TFhirQuestionnaireItemInitial;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireItemInitial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireItemInitialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireItemInitialChild(value : TFhirQuestionnaireItemInitial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemInitial(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireItemInitial);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireItemInitialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireItemInitialChildren(xml : TXmlBuilder; value : TFhirQuestionnaireItemInitial);
begin
  composeBackboneElementChildren(xml, value);
  if (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
end;

function TFHIRXmlParser.ParseQuestionnaire(element : TMXmlElement; path : string) : TFhirQuestionnaire;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaire.create;
  try
    parseMetadataResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireChild(value : TFhirQuestionnaire; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromList.Add(ParseCanonical(child, path+'/derivedFrom')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectType') then
        value.subjectType.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/subjectType')){y.1}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCoding(child, path+'/code')) {L631}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseQuestionnaireItem(child, path+'/item')) {L631}
      else if Not ParseMetadataResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaire(xml : TXmlBuilder; name : String; value : TFhirQuestionnaire);
begin
  if (value = nil) then
    exit;
  composeMetadataResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireChildren(xml : TXmlBuilder; value : TFhirQuestionnaire);
var
  i : integer;
begin
  composeMetadataResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeCanonical(xml, 'derivedFrom', value.derivedFromList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subjectType.Count - 1 do
      ComposeEnum(xml, 'subjectType', value.subjectType[i], CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCoding(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireItem(xml, 'item', value.itemList[i]);
end;

{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
function TFHIRXmlParser.ParseQuestionnaireResponseItem(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItem;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireResponseItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireResponseItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireResponseItemChild(value : TFhirQuestionnaireResponseItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'linkId') then
        value.linkIdElement := ParseString(child, path+'/linkId') {L737}
      else if (child.localName = 'definition') then
        value.definitionElement := ParseUri(child, path+'/definition') {L737}
      else if (child.localName = 'text') then
        value.textElement := ParseString(child, path+'/text') {L737}
      else if (child.localName = 'answer') then
        value.answerList.Add(ParseQuestionnaireResponseItemAnswer(child, path+'/answer')) {L631}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseQuestionnaireResponseItem(child, path+'/item')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItem(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireResponseItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireResponseItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItemChildren(xml : TXmlBuilder; value : TFhirQuestionnaireResponseItem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'linkId', value.linkIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'definition', value.definitionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'text', value.textElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.answerList.Count - 1 do
      ComposeQuestionnaireResponseItemAnswer(xml, 'answer', value.answerList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(xml, 'item', value.itemList[i]);
end;

function TFHIRXmlParser.ParseQuestionnaireResponseItemAnswer(element : TMXmlElement; path : string) : TFhirQuestionnaireResponseItemAnswer;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireResponseItemAnswer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireResponseItemAnswerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireResponseItemAnswerChild(value : TFhirQuestionnaireResponseItemAnswer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L881}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseQuestionnaireResponseItem(child, path+'/item')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItemAnswer(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireResponseItemAnswer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireResponseItemAnswerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseItemAnswerChildren(xml : TXmlBuilder; value : TFhirQuestionnaireResponseItemAnswer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirReference) {2} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(xml, 'item', value.itemList[i]);
end;

function TFHIRXmlParser.ParseQuestionnaireResponse(element : TMXmlElement; path : string) : TFhirQuestionnaireResponse;
var
  child : TMXmlElement;
begin
  result := TFhirQuestionnaireResponse.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseQuestionnaireResponseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseQuestionnaireResponseChild(value : TFhirQuestionnaireResponse; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'questionnaire') then
        value.questionnaireElement := ParseCanonical(child, path+'/questionnaire') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirQuestionnaireResponseStatusEnum, SYSTEMS_TFhirQuestionnaireResponseStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'authored') then
        value.authoredElement := ParseDateTime(child, path+'/authored') {L737}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'source') then
        value.source := ParseReference(child, path+'/source') {L740}
      else if (child.localName = 'item') then
        value.itemList.Add(ParseQuestionnaireResponseItem(child, path+'/item')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponse(xml : TXmlBuilder; name : String; value : TFhirQuestionnaireResponse);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeQuestionnaireResponseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeQuestionnaireResponseChildren(xml : TXmlBuilder; value : TFhirQuestionnaireResponse);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'questionnaire', value.questionnaireElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirQuestionnaireResponseStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'authored', value.authoredElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'source', value.source); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.itemList.Count - 1 do
      ComposeQuestionnaireResponseItem(xml, 'item', value.itemList[i]);
end;

{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
function TFHIRXmlParser.ParseRegulatedAuthorizationRelatedDate(element : TMXmlElement; path : string) : TFhirRegulatedAuthorizationRelatedDate;
var
  child : TMXmlElement;
begin
  result := TFhirRegulatedAuthorizationRelatedDate.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRegulatedAuthorizationRelatedDateChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRegulatedAuthorizationRelatedDateChild(value : TFhirRegulatedAuthorizationRelatedDate; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'datePeriod') then
        value.date := ParsePeriod(child, path+'/datePeriod') {L891}
      else if (child.localName = 'dateDateTime') then
        value.date := ParseDateTime(child, path+'/dateDateTime') {L891}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRegulatedAuthorizationRelatedDate(xml : TXmlBuilder; name : String; value : TFhirRegulatedAuthorizationRelatedDate);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRegulatedAuthorizationRelatedDateChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRegulatedAuthorizationRelatedDateChildren(xml : TXmlBuilder; value : TFhirRegulatedAuthorizationRelatedDate);
begin
  composeBackboneElementChildren(xml, value);
  if (value.date is TFhirPeriod) {6} then
    ComposePeriod(xml, 'datePeriod', TFhirPeriod(value.date))
  else if (value.date is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'dateDateTime', TFhirDateTime(value.date));
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
end;

function TFHIRXmlParser.ParseRegulatedAuthorizationCase(element : TMXmlElement; path : string) : TFhirRegulatedAuthorizationCase;
var
  child : TMXmlElement;
begin
  result := TFhirRegulatedAuthorizationCase.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRegulatedAuthorizationCaseChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRegulatedAuthorizationCaseChild(value : TFhirRegulatedAuthorizationCase; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'datePeriod') then
        value.date := ParsePeriod(child, path+'/datePeriod') {L891}
      else if (child.localName = 'dateDateTime') then
        value.date := ParseDateTime(child, path+'/dateDateTime') {L891}
      else if (child.localName = 'application') then
        value.applicationList.Add(ParseRegulatedAuthorizationCase(child, path+'/application')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRegulatedAuthorizationCase(xml : TXmlBuilder; name : String; value : TFhirRegulatedAuthorizationCase);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRegulatedAuthorizationCaseChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRegulatedAuthorizationCaseChildren(xml : TXmlBuilder; value : TFhirRegulatedAuthorizationCase);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.date is TFhirPeriod) {6} then
    ComposePeriod(xml, 'datePeriod', TFhirPeriod(value.date))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.date is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'dateDateTime', TFhirDateTime(value.date));
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.applicationList.Count - 1 do
      ComposeRegulatedAuthorizationCase(xml, 'application', value.applicationList[i]);
end;

function TFHIRXmlParser.ParseRegulatedAuthorization(element : TMXmlElement; path : string) : TFhirRegulatedAuthorization;
var
  child : TMXmlElement;
begin
  result := TFhirRegulatedAuthorization.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRegulatedAuthorizationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRegulatedAuthorizationChild(value : TFhirRegulatedAuthorization; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'region') then
        value.regionList.Add(ParseCodeableConcept(child, path+'/region')) {L631}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'statusDate') then
        value.statusDateElement := ParseDateTime(child, path+'/statusDate') {L737}
      else if (child.localName = 'validityPeriod') then
        value.validityPeriod := ParsePeriod(child, path+'/validityPeriod') {L740}
      else if (child.localName = 'indicationCodeableConcept') then
        value.indication := ParseCodeableConcept(child, path+'/indicationCodeableConcept') {L891}
      else if (child.localName = 'indicationReference') then
        value.indication := ParseReference(child, path+'/indicationReference') {L881}
      else if (child.localName = 'intendedUse') then
        value.intendedUse := ParseCodeableConcept(child, path+'/intendedUse') {L740}
      else if (child.localName = 'basis') then
        value.basisList.Add(ParseCodeableConcept(child, path+'/basis')) {L631}
      else if (child.localName = 'relatedDate') then
        value.relatedDateList.Add(ParseRegulatedAuthorizationRelatedDate(child, path+'/relatedDate')) {L631}
      else if (child.localName = 'jurisdictionalAuthorization') then
        value.jurisdictionalAuthorizationList.Add(ParseReference(child, path+'/jurisdictionalAuthorization')) {L631}
      else if (child.localName = 'holder') then
        value.holder := ParseReference(child, path+'/holder') {L740}
      else if (child.localName = 'regulator') then
        value.regulator := ParseReference(child, path+'/regulator') {L740}
      else if (child.localName = 'case') then
        value.case_ := ParseRegulatedAuthorizationCase(child, path+'/case') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRegulatedAuthorization(xml : TXmlBuilder; name : String; value : TFhirRegulatedAuthorization);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRegulatedAuthorizationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRegulatedAuthorizationChildren(xml : TXmlBuilder; value : TFhirRegulatedAuthorization);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.regionList.Count - 1 do
      ComposeCodeableConcept(xml, 'region', value.regionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'statusDate', value.statusDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'validityPeriod', value.validityPeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.indication is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'indicationCodeableConcept', TFhirCodeableConcept(value.indication))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.indication is TFhirReference) {2} then
    ComposeReference(xml, 'indicationReference', TFhirReference(value.indication));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'intendedUse', value.intendedUse); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basisList.Count - 1 do
      ComposeCodeableConcept(xml, 'basis', value.basisList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.relatedDateList.Count - 1 do
      ComposeRegulatedAuthorizationRelatedDate(xml, 'relatedDate', value.relatedDateList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionalAuthorizationList.Count - 1 do
      ComposeReference(xml, 'jurisdictionalAuthorization', value.jurisdictionalAuthorizationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'holder', value.holder); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'regulator', value.regulator); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRegulatedAuthorizationCase(xml, 'case', value.case_); {L741}
end;

{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
function TFHIRXmlParser.ParseRelatedPersonCommunication(element : TMXmlElement; path : string) : TFhirRelatedPersonCommunication;
var
  child : TMXmlElement;
begin
  result := TFhirRelatedPersonCommunication.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRelatedPersonCommunicationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRelatedPersonCommunicationChild(value : TFhirRelatedPersonCommunication; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        value.language := ParseCodeableConcept(child, path+'/language') {L740}
      else if (child.localName = 'preferred') then
        value.preferredElement := ParseBoolean(child, path+'/preferred') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRelatedPersonCommunication(xml : TXmlBuilder; name : String; value : TFhirRelatedPersonCommunication);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRelatedPersonCommunicationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRelatedPersonCommunicationChildren(xml : TXmlBuilder; value : TFhirRelatedPersonCommunication);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'language', value.language); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'preferred', value.preferredElement); {L738}
end;

function TFHIRXmlParser.ParseRelatedPerson(element : TMXmlElement; path : string) : TFhirRelatedPerson;
var
  child : TMXmlElement;
begin
  result := TFhirRelatedPerson.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRelatedPersonChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRelatedPersonChild(value : TFhirRelatedPerson; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'relationship') then
        value.relationshipList.Add(ParseCodeableConcept(child, path+'/relationship')) {L631}
      else if (child.localName = 'name') then
        value.nameList.Add(ParseHumanName(child, path+'/name')) {L631}
      else if (child.localName = 'telecom') then
        value.telecomList.Add(ParseContactPoint(child, path+'/telecom')) {L631}
      else if (child.localName = 'gender') then
        value.genderElement := ParseEnum(CODES_TFhirAdministrativeGenderEnum, SYSTEMS_TFhirAdministrativeGenderEnum, child, path+'/gender') {L734}
      else if (child.localName = 'birthDate') then
        value.birthDateElement := ParseDate(child, path+'/birthDate') {L737}
      else if (child.localName = 'address') then
        value.addressList.Add(ParseAddress(child, path+'/address')) {L631}
      else if (child.localName = 'photo') then
        value.photoList.Add(ParseAttachment(child, path+'/photo')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'communication') then
        value.communicationList.Add(ParseRelatedPersonCommunication(child, path+'/communication')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRelatedPerson(xml : TXmlBuilder; name : String; value : TFhirRelatedPerson);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRelatedPersonChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRelatedPersonChildren(xml : TXmlBuilder; value : TFhirRelatedPerson);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.relationshipList.Count - 1 do
      ComposeCodeableConcept(xml, 'relationship', value.relationshipList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.nameList.Count - 1 do
      ComposeHumanName(xml, 'name', value.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.telecomList.Count - 1 do
      ComposeContactPoint(xml, 'telecom', value.telecomList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'gender', value.genderElement, CODES_TFhirAdministrativeGenderEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'birthDate', value.birthDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.addressList.Count - 1 do
      ComposeAddress(xml, 'address', value.addressList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.photoList.Count - 1 do
      ComposeAttachment(xml, 'photo', value.photoList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.communicationList.Count - 1 do
      ComposeRelatedPersonCommunication(xml, 'communication', value.communicationList[i]);
end;

{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
function TFHIRXmlParser.ParseRequestGroupAction(element : TMXmlElement; path : string) : TFhirRequestGroupAction;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroupAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupActionChild(value : TFhirRequestGroupAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'prefix') then
        value.prefixElement := ParseString(child, path+'/prefix') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'textEquivalent') then
        value.textEquivalentElement := ParseString(child, path+'/textEquivalent') {L737}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseCodeableConcept(child, path+'/code')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationList.Add(ParseRelatedArtifact(child, path+'/documentation')) {L631}
      else if (child.localName = 'condition') then
        value.conditionList.Add(ParseRequestGroupActionCondition(child, path+'/condition')) {L631}
      else if (child.localName = 'relatedAction') then
        value.relatedActionList.Add(ParseRequestGroupActionRelatedAction(child, path+'/relatedAction')) {L631}
      else if (child.localName = 'timingAge') then
        value.timing := ParseAge(child, path+'/timingAge') {L891}
      else if (child.localName = 'timingPeriod') then
        value.timing := ParsePeriod(child, path+'/timingPeriod') {L891}
      else if (child.localName = 'timingDuration') then
        value.timing := ParseDuration(child, path+'/timingDuration') {L891}
      else if (child.localName = 'timingRange') then
        value.timing := ParseRange(child, path+'/timingRange') {L891}
      else if (child.localName = 'timingTiming') then
        value.timing := ParseTiming(child, path+'/timingTiming') {L891}
      else if (child.localName = 'timingDateTime') then
        value.timing := ParseDateTime(child, path+'/timingDateTime') {L891}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseReference(child, path+'/participant')) {L631}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'groupingBehavior') then
        value.groupingBehaviorElement := ParseEnum(CODES_TFhirActionGroupingBehaviorEnum, SYSTEMS_TFhirActionGroupingBehaviorEnum, child, path+'/groupingBehavior') {L734}
      else if (child.localName = 'selectionBehavior') then
        value.selectionBehaviorElement := ParseEnum(CODES_TFhirActionSelectionBehaviorEnum, SYSTEMS_TFhirActionSelectionBehaviorEnum, child, path+'/selectionBehavior') {L734}
      else if (child.localName = 'requiredBehavior') then
        value.requiredBehaviorElement := ParseEnum(CODES_TFhirActionRequiredBehaviorEnum, SYSTEMS_TFhirActionRequiredBehaviorEnum, child, path+'/requiredBehavior') {L734}
      else if (child.localName = 'precheckBehavior') then
        value.precheckBehaviorElement := ParseEnum(CODES_TFhirActionPrecheckBehaviorEnum, SYSTEMS_TFhirActionPrecheckBehaviorEnum, child, path+'/precheckBehavior') {L734}
      else if (child.localName = 'cardinalityBehavior') then
        value.cardinalityBehaviorElement := ParseEnum(CODES_TFhirActionCardinalityBehaviorEnum, SYSTEMS_TFhirActionCardinalityBehaviorEnum, child, path+'/cardinalityBehavior') {L734}
      else if (child.localName = 'resource') then
        value.resource := ParseReference(child, path+'/resource') {L740}
      else if (child.localName = 'action') then
        value.actionList.Add(ParseRequestGroupAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupAction(xml : TXmlBuilder; name : String; value : TFhirRequestGroupAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRequestGroupActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionChildren(xml : TXmlBuilder; value : TFhirRequestGroupAction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'prefix', value.prefixElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'textEquivalent', value.textEquivalentElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeCodeableConcept(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.documentationList.Count - 1 do
      ComposeRelatedArtifact(xml, 'documentation', value.documentationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conditionList.Count - 1 do
      ComposeRequestGroupActionCondition(xml, 'condition', value.conditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedActionList.Count - 1 do
      ComposeRequestGroupActionRelatedAction(xml, 'relatedAction', value.relatedActionList[i]);
  if (SummaryOption in [soFull, soData]) and (value.timing is TFhirAge) {6} then
    ComposeAge(xml, 'timingAge', TFhirAge(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timingPeriod', TFhirPeriod(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDuration) {6} then
    ComposeDuration(xml, 'timingDuration', TFhirDuration(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirRange) {6} then
    ComposeRange(xml, 'timingRange', TFhirRange(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirTiming) {6} then
    ComposeTiming(xml, 'timingTiming', TFhirTiming(value.timing))
  else if (SummaryOption in [soFull, soData]) and (value.timing is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timingDateTime', TFhirDateTime(value.timing));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeReference(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'groupingBehavior', value.groupingBehaviorElement, CODES_TFhirActionGroupingBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'selectionBehavior', value.selectionBehaviorElement, CODES_TFhirActionSelectionBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'requiredBehavior', value.requiredBehaviorElement, CODES_TFhirActionRequiredBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'precheckBehavior', value.precheckBehaviorElement, CODES_TFhirActionPrecheckBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'cardinalityBehavior', value.cardinalityBehaviorElement, CODES_TFhirActionCardinalityBehaviorEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'resource', value.resource); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actionList.Count - 1 do
      ComposeRequestGroupAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseRequestGroupActionCondition(element : TMXmlElement; path : string) : TFhirRequestGroupActionCondition;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroupActionCondition.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupActionConditionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupActionConditionChild(value : TFhirRequestGroupActionCondition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirActionConditionKindEnum, SYSTEMS_TFhirActionConditionKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'expression') then
        value.expression := ParseExpression(child, path+'/expression') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionCondition(xml : TXmlBuilder; name : String; value : TFhirRequestGroupActionCondition);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRequestGroupActionConditionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionConditionChildren(xml : TXmlBuilder; value : TFhirRequestGroupActionCondition);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirActionConditionKindEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeExpression(xml, 'expression', value.expression); {L741}
end;

function TFHIRXmlParser.ParseRequestGroupActionRelatedAction(element : TMXmlElement; path : string) : TFhirRequestGroupActionRelatedAction;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroupActionRelatedAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupActionRelatedActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupActionRelatedActionChild(value : TFhirRequestGroupActionRelatedAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'actionId') then
        value.actionIdElement := ParseId(child, path+'/actionId') {L737}
      else if (child.localName = 'relationship') then
        value.relationshipElement := ParseEnum(CODES_TFhirActionRelationshipTypeEnum, SYSTEMS_TFhirActionRelationshipTypeEnum, child, path+'/relationship') {L734}
      else if (child.localName = 'offsetDuration') then
        value.offset := ParseDuration(child, path+'/offsetDuration') {L891}
      else if (child.localName = 'offsetRange') then
        value.offset := ParseRange(child, path+'/offsetRange') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionRelatedAction(xml : TXmlBuilder; name : String; value : TFhirRequestGroupActionRelatedAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRequestGroupActionRelatedActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupActionRelatedActionChildren(xml : TXmlBuilder; value : TFhirRequestGroupActionRelatedAction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'actionId', value.actionIdElement); {L738}
  ComposeEnum(xml, 'relationship', value.relationshipElement, CODES_TFhirActionRelationshipTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) and (value.offset is TFhirDuration) {6} then
    ComposeDuration(xml, 'offsetDuration', TFhirDuration(value.offset))
  else if (SummaryOption in [soFull, soData]) and (value.offset is TFhirRange) {6} then
    ComposeRange(xml, 'offsetRange', TFhirRange(value.offset));
end;

function TFHIRXmlParser.ParseRequestGroup(element : TMXmlElement; path : string) : TFhirRequestGroup;
var
  child : TMXmlElement;
begin
  result := TFhirRequestGroup.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRequestGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRequestGroupChild(value : TFhirRequestGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'replaces') then
        value.replacesList.Add(ParseReference(child, path+'/replaces')) {L631}
      else if (child.localName = 'groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'author') then
        value.author := ParseReference(child, path+'/author') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'action') then
        value.actionList.Add(ParseRequestGroupAction(child, path+'/action')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRequestGroup(xml : TXmlBuilder; name : String; value : TFhirRequestGroup);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRequestGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRequestGroupChildren(xml : TXmlBuilder; value : TFhirRequestGroup);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(xml, 'replaces', value.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'groupIdentifier', value.groupIdentifier); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirRequestStatusEnum); {L735}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'author', value.author); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.actionList.Count - 1 do
      ComposeRequestGroupAction(xml, 'action', value.actionList[i]);
end;

{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
function TFHIRXmlParser.ParseResearchStudyArm(element : TMXmlElement; path : string) : TFhirResearchStudyArm;
var
  child : TMXmlElement;
begin
  result := TFhirResearchStudyArm.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchStudyArmChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchStudyArmChild(value : TFhirResearchStudyArm; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyArm(xml : TXmlBuilder; name : String; value : TFhirResearchStudyArm);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeResearchStudyArmChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyArmChildren(xml : TXmlBuilder; value : TFhirResearchStudyArm);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseResearchStudyObjective(element : TMXmlElement; path : string) : TFhirResearchStudyObjective;
var
  child : TMXmlElement;
begin
  result := TFhirResearchStudyObjective.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchStudyObjectiveChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchStudyObjectiveChild(value : TFhirResearchStudyObjective; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyObjective(xml : TXmlBuilder; name : String; value : TFhirResearchStudyObjective);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeResearchStudyObjectiveChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyObjectiveChildren(xml : TXmlBuilder; value : TFhirResearchStudyObjective);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
end;

function TFHIRXmlParser.ParseResearchStudy(element : TMXmlElement; path : string) : TFhirResearchStudy;
var
  child : TMXmlElement;
begin
  result := TFhirResearchStudy.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchStudyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchStudyChild(value : TFhirResearchStudy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'protocol') then
        value.protocolList.Add(ParseReference(child, path+'/protocol')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirResearchStudyStatusEnum, SYSTEMS_TFhirResearchStudyStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'primaryPurposeType') then
        value.primaryPurposeType := ParseCodeableConcept(child, path+'/primaryPurposeType') {L740}
      else if (child.localName = 'phase') then
        value.phase := ParseCodeableConcept(child, path+'/phase') {L740}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'focus') then
        value.focusList.Add(ParseCodeableConcept(child, path+'/focus')) {L631}
      else if (child.localName = 'condition') then
        value.conditionList.Add(ParseCodeableConcept(child, path+'/condition')) {L631}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'relatedArtifact') then
        value.relatedArtifactList.Add(ParseRelatedArtifact(child, path+'/relatedArtifact')) {L631}
      else if (child.localName = 'keyword') then
        value.keywordList.Add(ParseCodeableConcept(child, path+'/keyword')) {L631}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseCodeableConcept(child, path+'/location')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'enrollment') then
        value.enrollmentList.Add(ParseReference(child, path+'/enrollment')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'sponsor') then
        value.sponsor := ParseReference(child, path+'/sponsor') {L740}
      else if (child.localName = 'principalInvestigator') then
        value.principalInvestigator := ParseReference(child, path+'/principalInvestigator') {L740}
      else if (child.localName = 'site') then
        value.siteList.Add(ParseReference(child, path+'/site')) {L631}
      else if (child.localName = 'reasonStopped') then
        value.reasonStopped := ParseCodeableConcept(child, path+'/reasonStopped') {L740}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'arm') then
        value.armList.Add(ParseResearchStudyArm(child, path+'/arm')) {L631}
      else if (child.localName = 'objective') then
        value.objectiveList.Add(ParseResearchStudyObjective(child, path+'/objective')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchStudy(xml : TXmlBuilder; name : String; value : TFhirResearchStudy);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeResearchStudyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeResearchStudyChildren(xml : TXmlBuilder; value : TFhirResearchStudy);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.protocolList.Count - 1 do
      ComposeReference(xml, 'protocol', value.protocolList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirResearchStudyStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'primaryPurposeType', value.primaryPurposeType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'phase', value.phase); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.focusList.Count - 1 do
      ComposeCodeableConcept(xml, 'focus', value.focusList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.conditionList.Count - 1 do
      ComposeCodeableConcept(xml, 'condition', value.conditionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relatedArtifactList.Count - 1 do
      ComposeRelatedArtifact(xml, 'relatedArtifact', value.relatedArtifactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.keywordList.Count - 1 do
      ComposeCodeableConcept(xml, 'keyword', value.keywordList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeCodeableConcept(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.enrollmentList.Count - 1 do
      ComposeReference(xml, 'enrollment', value.enrollmentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'sponsor', value.sponsor); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'principalInvestigator', value.principalInvestigator); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.siteList.Count - 1 do
      ComposeReference(xml, 'site', value.siteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'reasonStopped', value.reasonStopped); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.armList.Count - 1 do
      ComposeResearchStudyArm(xml, 'arm', value.armList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.objectiveList.Count - 1 do
      ComposeResearchStudyObjective(xml, 'objective', value.objectiveList[i]);
end;

{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
function TFHIRXmlParser.ParseResearchSubjectProgress(element : TMXmlElement; path : string) : TFhirResearchSubjectProgress;
var
  child : TMXmlElement;
begin
  result := TFhirResearchSubjectProgress.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchSubjectProgressChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchSubjectProgressChild(value : TFhirResearchSubjectProgress; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'state') then
        value.state := ParseCodeableConcept(child, path+'/state') {L740}
      else if (child.localName = 'milestone') then
        value.milestone := ParseCodeableConcept(child, path+'/milestone') {L740}
      else if (child.localName = 'reason') then
        value.reason := ParseCodeableConcept(child, path+'/reason') {L740}
      else if (child.localName = 'startDate') then
        value.startDateElement := ParseDateTime(child, path+'/startDate') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchSubjectProgress(xml : TXmlBuilder; name : String; value : TFhirResearchSubjectProgress);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeResearchSubjectProgressChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeResearchSubjectProgressChildren(xml : TXmlBuilder; value : TFhirResearchSubjectProgress);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'state', value.state); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'milestone', value.milestone); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reason', value.reason); {L741}
  ComposeDateTime(xml, 'startDate', value.startDateElement); {L738}
end;

function TFHIRXmlParser.ParseResearchSubject(element : TMXmlElement; path : string) : TFhirResearchSubject;
var
  child : TMXmlElement;
begin
  result := TFhirResearchSubject.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseResearchSubjectChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseResearchSubjectChild(value : TFhirResearchSubject; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirResearchSubjectStatusEnum, SYSTEMS_TFhirResearchSubjectStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'progress') then
        value.progressList.Add(ParseResearchSubjectProgress(child, path+'/progress')) {L631}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'study') then
        value.study := ParseReference(child, path+'/study') {L740}
      else if (child.localName = 'individual') then
        value.individual := ParseReference(child, path+'/individual') {L740}
      else if (child.localName = 'assignedArm') then
        value.assignedArmElement := ParseString(child, path+'/assignedArm') {L737}
      else if (child.localName = 'actualArm') then
        value.actualArmElement := ParseString(child, path+'/actualArm') {L737}
      else if (child.localName = 'consent') then
        value.consent := ParseReference(child, path+'/consent') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeResearchSubject(xml : TXmlBuilder; name : String; value : TFhirResearchSubject);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeResearchSubjectChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeResearchSubjectChildren(xml : TXmlBuilder; value : TFhirResearchSubject);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirResearchSubjectStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.progressList.Count - 1 do
      ComposeResearchSubjectProgress(xml, 'progress', value.progressList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  ComposeReference(xml, 'study', value.study); {L741}
  ComposeReference(xml, 'individual', value.individual); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'assignedArm', value.assignedArmElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'actualArm', value.actualArmElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'consent', value.consent); {L741}
end;

{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
function TFHIRXmlParser.ParseRiskAssessmentPrediction(element : TMXmlElement; path : string) : TFhirRiskAssessmentPrediction;
var
  child : TMXmlElement;
begin
  result := TFhirRiskAssessmentPrediction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskAssessmentPredictionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskAssessmentPredictionChild(value : TFhirRiskAssessmentPrediction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'outcome') then
        value.outcome := ParseCodeableConcept(child, path+'/outcome') {L740}
      else if (child.localName = 'probabilityRange') then
        value.probability := ParseRange(child, path+'/probabilityRange') {L891}
      else if (child.localName = 'probabilityDecimal') then
        value.probability := ParseDecimal(child, path+'/probabilityDecimal') {L891}
      else if (child.localName = 'qualitativeRisk') then
        value.qualitativeRisk := ParseCodeableConcept(child, path+'/qualitativeRisk') {L740}
      else if (child.localName = 'relativeRisk') then
        value.relativeRiskElement := ParseDecimal(child, path+'/relativeRisk') {L737}
      else if (child.localName = 'whenPeriod') then
        value.when := ParsePeriod(child, path+'/whenPeriod') {L891}
      else if (child.localName = 'whenRange') then
        value.when := ParseRange(child, path+'/whenRange') {L891}
      else if (child.localName = 'rationale') then
        value.rationaleElement := ParseString(child, path+'/rationale') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskAssessmentPrediction(xml : TXmlBuilder; name : String; value : TFhirRiskAssessmentPrediction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRiskAssessmentPredictionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRiskAssessmentPredictionChildren(xml : TXmlBuilder; value : TFhirRiskAssessmentPrediction);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'outcome', value.outcome); {L741}
  if (SummaryOption in [soFull, soData]) and (value.probability is TFhirRange) {6} then
    ComposeRange(xml, 'probabilityRange', TFhirRange(value.probability))
  else if (SummaryOption in [soFull, soData]) and (value.probability is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'probabilityDecimal', TFhirDecimal(value.probability));
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'qualitativeRisk', value.qualitativeRisk); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'relativeRisk', value.relativeRiskElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.when is TFhirPeriod) {6} then
    ComposePeriod(xml, 'whenPeriod', TFhirPeriod(value.when))
  else if (SummaryOption in [soFull, soData]) and (value.when is TFhirRange) {6} then
    ComposeRange(xml, 'whenRange', TFhirRange(value.when));
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'rationale', value.rationaleElement); {L738}
end;

function TFHIRXmlParser.ParseRiskAssessment(element : TMXmlElement; path : string) : TFhirRiskAssessment;
var
  child : TMXmlElement;
begin
  result := TFhirRiskAssessment.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseRiskAssessmentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseRiskAssessmentChild(value : TFhirRiskAssessment; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOn := ParseReference(child, path+'/basedOn') {L740}
      else if (child.localName = 'parent') then
        value.parent := ParseReference(child, path+'/parent') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirObservationStatusEnum, SYSTEMS_TFhirObservationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'condition') then
        value.condition := ParseReference(child, path+'/condition') {L740}
      else if (child.localName = 'performer') then
        value.performer := ParseReference(child, path+'/performer') {L740}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'basis') then
        value.basisList.Add(ParseReference(child, path+'/basis')) {L631}
      else if (child.localName = 'prediction') then
        value.predictionList.Add(ParseRiskAssessmentPrediction(child, path+'/prediction')) {L631}
      else if (child.localName = 'mitigation') then
        value.mitigationElement := ParseString(child, path+'/mitigation') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeRiskAssessment(xml : TXmlBuilder; name : String; value : TFhirRiskAssessment);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeRiskAssessmentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeRiskAssessmentChildren(xml : TXmlBuilder; value : TFhirRiskAssessment);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'basedOn', value.basedOn); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'parent', value.parent); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirObservationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'condition', value.condition); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'performer', value.performer); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.basisList.Count - 1 do
      ComposeReference(xml, 'basis', value.basisList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.predictionList.Count - 1 do
      ComposeRiskAssessmentPrediction(xml, 'prediction', value.predictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'mitigation', value.mitigationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
function TFHIRXmlParser.ParseSchedule(element : TMXmlElement; path : string) : TFhirSchedule;
var
  child : TMXmlElement;
begin
  result := TFhirSchedule.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseScheduleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseScheduleChild(value : TFhirSchedule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'active') then
        value.activeElement := ParseBoolean(child, path+'/active') {L737}
      else if (child.localName = 'serviceCategory') then
        value.serviceCategoryList.Add(ParseCodeableConcept(child, path+'/serviceCategory')) {L631}
      else if (child.localName = 'serviceType') then
        value.serviceTypeList.Add(ParseCodeableConcept(child, path+'/serviceType')) {L631}
      else if (child.localName = 'specialty') then
        value.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')) {L631}
      else if (child.localName = 'actor') then
        value.actorList.Add(ParseReference(child, path+'/actor')) {L631}
      else if (child.localName = 'planningHorizon') then
        value.planningHorizon := ParsePeriod(child, path+'/planningHorizon') {L740}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSchedule(xml : TXmlBuilder; name : String; value : TFhirSchedule);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeScheduleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeScheduleChildren(xml : TXmlBuilder; value : TFhirSchedule);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'active', value.activeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceCategory', value.serviceCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceType', value.serviceTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', value.specialtyList[i]);
  for i := 0 to value.actorList.Count - 1 do
      ComposeReference(xml, 'actor', value.actorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'planningHorizon', value.planningHorizon); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
function TFHIRXmlParser.ParseSearchParameterComponent(element : TMXmlElement; path : string) : TFhirSearchParameterComponent;
var
  child : TMXmlElement;
begin
  result := TFhirSearchParameterComponent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSearchParameterComponentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSearchParameterComponentChild(value : TFhirSearchParameterComponent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'definition') then
        value.definitionElement := ParseCanonical(child, path+'/definition') {L737}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSearchParameterComponent(xml : TXmlBuilder; name : String; value : TFhirSearchParameterComponent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSearchParameterComponentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSearchParameterComponentChildren(xml : TXmlBuilder; value : TFhirSearchParameterComponent);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCanonical(xml, 'definition', value.definitionElement); {L738}
  ComposeString(xml, 'expression', value.expressionElement); {L738}
end;

function TFHIRXmlParser.ParseSearchParameter(element : TMXmlElement; path : string) : TFhirSearchParameter;
var
  child : TMXmlElement;
begin
  result := TFhirSearchParameter.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSearchParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSearchParameterChild(value : TFhirSearchParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromElement := ParseCanonical(child, path+'/derivedFrom') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'base') then
        value.base.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/base')){y.1}
      else if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirSearchParamTypeEnum, SYSTEMS_TFhirSearchParamTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if (child.localName = 'xpath') then
        value.xpathElement := ParseString(child, path+'/xpath') {L737}
      else if (child.localName = 'xpathUsage') then
        value.xpathUsageElement := ParseEnum(CODES_TFhirXPathUsageTypeEnum, SYSTEMS_TFhirXPathUsageTypeEnum, child, path+'/xpathUsage') {L734}
      else if (child.localName = 'target') then
        value.target.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/target')){y.1}
      else if (child.localName = 'multipleOr') then
        value.multipleOrElement := ParseBoolean(child, path+'/multipleOr') {L737}
      else if (child.localName = 'multipleAnd') then
        value.multipleAndElement := ParseBoolean(child, path+'/multipleAnd') {L737}
      else if (child.localName = 'comparator') then
        value.comparatorList.Add(ParseEnum(CODES_TFhirSearchComparatorEnum, SYSTEMS_TFhirSearchComparatorEnum, child, path+'/comparator')){y.1}
      else if (child.localName = 'modifier') then
        value.modifierList.Add(ParseEnum(CODES_TFhirSearchModifierCodeEnum, SYSTEMS_TFhirSearchModifierCodeEnum, child, path+'/modifier')){y.1}
      else if (child.localName = 'chain') then
        value.chainList.Add(ParseString(child, path+'/chain')) {L631}
      else if (child.localName = 'component') then
        value.componentList.Add(ParseSearchParameterComponent(child, path+'/component')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSearchParameter(xml : TXmlBuilder; name : String; value : TFhirSearchParameter);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSearchParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSearchParameterChildren(xml : TXmlBuilder; value : TFhirSearchParameter);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'derivedFrom', value.derivedFromElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  ComposeCode(xml, 'code', value.codeElement); {L738}
  for i := 0 to value.base.Count - 1 do
      ComposeEnum(xml, 'base', value.base[i], CODES_TFhirResourceTypesEnum);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirSearchParamTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'xpath', value.xpathElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'xpathUsage', value.xpathUsageElement, CODES_TFhirXPathUsageTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.target.Count - 1 do
      ComposeEnum(xml, 'target', value.target[i], CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'multipleOr', value.multipleOrElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'multipleAnd', value.multipleAndElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.comparatorList.Count - 1 do
      ComposeEnum(xml, 'comparator', value.comparatorList[i], CODES_TFhirSearchComparatorEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.modifierList.Count - 1 do
      ComposeEnum(xml, 'modifier', value.modifierList[i], CODES_TFhirSearchModifierCodeEnum);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.chainList.Count - 1 do
      ComposeString(xml, 'chain', value.chainList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.componentList.Count - 1 do
      ComposeSearchParameterComponent(xml, 'component', value.componentList[i]);
end;

{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
function TFHIRXmlParser.ParseServiceRequest(element : TMXmlElement; path : string) : TFhirServiceRequest;
var
  child : TMXmlElement;
begin
  result := TFhirServiceRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseServiceRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseServiceRequestChild(value : TFhirServiceRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalList.Add(ParseCanonical(child, path+'/instantiatesCanonical')) {L631}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriList.Add(ParseUri(child, path+'/instantiatesUri')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'replaces') then
        value.replacesList.Add(ParseReference(child, path+'/replaces')) {L631}
      else if (child.localName = 'requisition') then
        value.requisition := ParseIdentifier(child, path+'/requisition') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirRequestStatusEnum, SYSTEMS_TFhirRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirRequestIntentEnum, SYSTEMS_TFhirRequestIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'doNotPerform') then
        value.doNotPerformElement := ParseBoolean(child, path+'/doNotPerform') {L737}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'orderDetail') then
        value.orderDetailList.Add(ParseCodeableConcept(child, path+'/orderDetail')) {L631}
      else if (child.localName = 'quantityQuantity') then
        value.quantity := ParseQuantity(child, path+'/quantityQuantity') {L891}
      else if (child.localName = 'quantityRatio') then
        value.quantity := ParseRatio(child, path+'/quantityRatio') {L891}
      else if (child.localName = 'quantityRange') then
        value.quantity := ParseRange(child, path+'/quantityRange') {L891}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'asNeededCodeableConcept') then
        value.asNeeded := ParseCodeableConcept(child, path+'/asNeededCodeableConcept') {L891}
      else if (child.localName = 'asNeededBoolean') then
        value.asNeeded := ParseBoolean(child, path+'/asNeededBoolean') {L891}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'requester') then
        value.requester := ParseReference(child, path+'/requester') {L740}
      else if (child.localName = 'performerType') then
        value.performerType := ParseCodeableConcept(child, path+'/performerType') {L740}
      else if (child.localName = 'performer') then
        value.performerList.Add(ParseReference(child, path+'/performer')) {L631}
      else if (child.localName = 'location') then
        value.locationList.Add(ParseCodeableReference(child, path+'/location')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseReference(child, path+'/insurance')) {L631}
      else if (child.localName = 'supportingInfo') then
        value.supportingInfoList.Add(ParseReference(child, path+'/supportingInfo')) {L631}
      else if (child.localName = 'specimen') then
        value.specimenList.Add(ParseReference(child, path+'/specimen')) {L631}
      else if (child.localName = 'bodySite') then
        value.bodySiteList.Add(ParseCodeableConcept(child, path+'/bodySite')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'patientInstruction') then
        value.patientInstructionElement := ParseString(child, path+'/patientInstruction') {L737}
      else if (child.localName = 'relevantHistory') then
        value.relevantHistoryList.Add(ParseReference(child, path+'/relevantHistory')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeServiceRequest(xml : TXmlBuilder; name : String; value : TFhirServiceRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeServiceRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeServiceRequestChildren(xml : TXmlBuilder; value : TFhirServiceRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instantiatesUriList.Count - 1 do
      ComposeUri(xml, 'instantiatesUri', value.instantiatesUriList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.replacesList.Count - 1 do
      ComposeReference(xml, 'replaces', value.replacesList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'requisition', value.requisition); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirRequestStatusEnum); {L735}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirRequestIntentEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'doNotPerform', value.doNotPerformElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.orderDetailList.Count - 1 do
      ComposeCodeableConcept(xml, 'orderDetail', value.orderDetailList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.quantity is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'quantityQuantity', TFhirQuantity(value.quantity))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.quantity is TFhirRatio) {6} then
    ComposeRatio(xml, 'quantityRatio', TFhirRatio(value.quantity))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.quantity is TFhirRange) {6} then
    ComposeRange(xml, 'quantityRange', TFhirRange(value.quantity));
  ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'asNeededCodeableConcept', TFhirCodeableConcept(value.asNeeded))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.asNeeded is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'asNeededBoolean', TFhirBoolean(value.asNeeded));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'requester', value.requester); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'performerType', value.performerType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.performerList.Count - 1 do
      ComposeReference(xml, 'performer', value.performerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.locationList.Count - 1 do
      ComposeCodeableReference(xml, 'location', value.locationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.supportingInfoList.Count - 1 do
      ComposeReference(xml, 'supportingInfo', value.supportingInfoList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specimenList.Count - 1 do
      ComposeReference(xml, 'specimen', value.specimenList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.bodySiteList.Count - 1 do
      ComposeCodeableConcept(xml, 'bodySite', value.bodySiteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'patientInstruction', value.patientInstructionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(xml, 'relevantHistory', value.relevantHistoryList[i]);
end;

{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
function TFHIRXmlParser.ParseSlot(element : TMXmlElement; path : string) : TFhirSlot;
var
  child : TMXmlElement;
begin
  result := TFhirSlot.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSlotChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSlotChild(value : TFhirSlot; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'serviceCategory') then
        value.serviceCategoryList.Add(ParseCodeableConcept(child, path+'/serviceCategory')) {L631}
      else if (child.localName = 'serviceType') then
        value.serviceTypeList.Add(ParseCodeableConcept(child, path+'/serviceType')) {L631}
      else if (child.localName = 'specialty') then
        value.specialtyList.Add(ParseCodeableConcept(child, path+'/specialty')) {L631}
      else if (child.localName = 'appointmentType') then
        value.appointmentType := ParseCodeableConcept(child, path+'/appointmentType') {L740}
      else if (child.localName = 'schedule') then
        value.schedule := ParseReference(child, path+'/schedule') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirSlotStatusEnum, SYSTEMS_TFhirSlotStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'start') then
        value.startElement := ParseInstant(child, path+'/start') {L737}
      else if (child.localName = 'end') then
        value.end_Element := ParseInstant(child, path+'/end') {L737}
      else if (child.localName = 'overbooked') then
        value.overbookedElement := ParseBoolean(child, path+'/overbooked') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSlot(xml : TXmlBuilder; name : String; value : TFhirSlot);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSlotChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSlotChildren(xml : TXmlBuilder; value : TFhirSlot);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceCategoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceCategory', value.serviceCategoryList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.serviceTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'serviceType', value.serviceTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.specialtyList.Count - 1 do
      ComposeCodeableConcept(xml, 'specialty', value.specialtyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'appointmentType', value.appointmentType); {L741}
  ComposeReference(xml, 'schedule', value.schedule); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirSlotStatusEnum); {L735}
  ComposeInstant(xml, 'start', value.startElement); {L738}
  ComposeInstant(xml, 'end', value.end_Element); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'overbooked', value.overbookedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
function TFHIRXmlParser.ParseSpecimenCollection(element : TMXmlElement; path : string) : TFhirSpecimenCollection;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenCollection.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenCollectionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenCollectionChild(value : TFhirSpecimenCollection; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'collector') then
        value.collector := ParseReference(child, path+'/collector') {L740}
      else if (child.localName = 'collectedPeriod') then
        value.collected := ParsePeriod(child, path+'/collectedPeriod') {L891}
      else if (child.localName = 'collectedDateTime') then
        value.collected := ParseDateTime(child, path+'/collectedDateTime') {L891}
      else if (child.localName = 'duration') then
        value.duration := ParseDuration(child, path+'/duration') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'bodySite') then
        value.bodySite := ParseCodeableConcept(child, path+'/bodySite') {L740}
      else if (child.localName = 'fastingStatusCodeableConcept') then
        value.fastingStatus := ParseCodeableConcept(child, path+'/fastingStatusCodeableConcept') {L891}
      else if (child.localName = 'fastingStatusDuration') then
        value.fastingStatus := ParseDuration(child, path+'/fastingStatusDuration') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenCollection(xml : TXmlBuilder; name : String; value : TFhirSpecimenCollection);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenCollectionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenCollectionChildren(xml : TXmlBuilder; value : TFhirSpecimenCollection);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'collector', value.collector); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.collected is TFhirPeriod) {6} then
    ComposePeriod(xml, 'collectedPeriod', TFhirPeriod(value.collected))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.collected is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'collectedDateTime', TFhirDateTime(value.collected));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDuration(xml, 'duration', value.duration); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'bodySite', value.bodySite); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.fastingStatus is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'fastingStatusCodeableConcept', TFhirCodeableConcept(value.fastingStatus))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.fastingStatus is TFhirDuration) {6} then
    ComposeDuration(xml, 'fastingStatusDuration', TFhirDuration(value.fastingStatus));
end;

function TFHIRXmlParser.ParseSpecimenProcessing(element : TMXmlElement; path : string) : TFhirSpecimenProcessing;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenProcessing.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenProcessingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenProcessingChild(value : TFhirSpecimenProcessing; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'procedure') then
        value.procedure_ := ParseCodeableConcept(child, path+'/procedure') {L740}
      else if (child.localName = 'additive') then
        value.additiveList.Add(ParseReference(child, path+'/additive')) {L631}
      else if (child.localName = 'timePeriod') then
        value.time := ParsePeriod(child, path+'/timePeriod') {L891}
      else if (child.localName = 'timeDateTime') then
        value.time := ParseDateTime(child, path+'/timeDateTime') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenProcessing(xml : TXmlBuilder; name : String; value : TFhirSpecimenProcessing);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenProcessingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenProcessingChildren(xml : TXmlBuilder; value : TFhirSpecimenProcessing);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'procedure', value.procedure_); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.additiveList.Count - 1 do
      ComposeReference(xml, 'additive', value.additiveList[i]);
  if (SummaryOption in [soFull, soData]) and (value.time is TFhirPeriod) {6} then
    ComposePeriod(xml, 'timePeriod', TFhirPeriod(value.time))
  else if (SummaryOption in [soFull, soData]) and (value.time is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'timeDateTime', TFhirDateTime(value.time));
end;

function TFHIRXmlParser.ParseSpecimenContainer(element : TMXmlElement; path : string) : TFhirSpecimenContainer;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenContainer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenContainerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenContainerChild(value : TFhirSpecimenContainer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'capacity') then
        value.capacity := ParseQuantity(child, path+'/capacity') {L740}
      else if (child.localName = 'specimenQuantity') then
        value.specimenQuantity := ParseQuantity(child, path+'/specimenQuantity') {L740}
      else if (child.localName = 'additiveCodeableConcept') then
        value.additive := ParseCodeableConcept(child, path+'/additiveCodeableConcept') {L891}
      else if (child.localName = 'additiveReference') then
        value.additive := ParseReference(child, path+'/additiveReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenContainer(xml : TXmlBuilder; name : String; value : TFhirSpecimenContainer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenContainerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenContainerChildren(xml : TXmlBuilder; value : TFhirSpecimenContainer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'capacity', value.capacity); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'specimenQuantity', value.specimenQuantity); {L741}
  if (SummaryOption in [soFull, soData]) and (value.additive is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'additiveCodeableConcept', TFhirCodeableConcept(value.additive))
  else if (SummaryOption in [soFull, soData]) and (value.additive is TFhirReference) {2} then
    ComposeReference(xml, 'additiveReference', TFhirReference(value.additive));
end;

function TFHIRXmlParser.ParseSpecimen(element : TMXmlElement; path : string) : TFhirSpecimen;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimen.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenChild(value : TFhirSpecimen; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'accessionIdentifier') then
        value.accessionIdentifier := ParseIdentifier(child, path+'/accessionIdentifier') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirSpecimenStatusEnum, SYSTEMS_TFhirSpecimenStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'subject') then
        value.subject := ParseReference(child, path+'/subject') {L740}
      else if (child.localName = 'receivedTime') then
        value.receivedTimeElement := ParseDateTime(child, path+'/receivedTime') {L737}
      else if (child.localName = 'parent') then
        value.parentList.Add(ParseReference(child, path+'/parent')) {L631}
      else if (child.localName = 'request') then
        value.requestList.Add(ParseReference(child, path+'/request')) {L631}
      else if (child.localName = 'collection') then
        value.collection := ParseSpecimenCollection(child, path+'/collection') {L740}
      else if (child.localName = 'processing') then
        value.processingList.Add(ParseSpecimenProcessing(child, path+'/processing')) {L631}
      else if (child.localName = 'container') then
        value.containerList.Add(ParseSpecimenContainer(child, path+'/container')) {L631}
      else if (child.localName = 'condition') then
        value.conditionList.Add(ParseCodeableConcept(child, path+'/condition')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimen(xml : TXmlBuilder; name : String; value : TFhirSpecimen);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenChildren(xml : TXmlBuilder; value : TFhirSpecimen);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'accessionIdentifier', value.accessionIdentifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirSpecimenStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'subject', value.subject); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'receivedTime', value.receivedTimeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parentList.Count - 1 do
      ComposeReference(xml, 'parent', value.parentList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.requestList.Count - 1 do
      ComposeReference(xml, 'request', value.requestList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeSpecimenCollection(xml, 'collection', value.collection); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.processingList.Count - 1 do
      ComposeSpecimenProcessing(xml, 'processing', value.processingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.containerList.Count - 1 do
      ComposeSpecimenContainer(xml, 'container', value.containerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.conditionList.Count - 1 do
      ComposeCodeableConcept(xml, 'condition', value.conditionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
function TFHIRXmlParser.ParseSpecimenDefinitionTypeTested(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTested;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTested.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedChild(value : TFhirSpecimenDefinitionTypeTested; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'isDerived') then
        value.isDerivedElement := ParseBoolean(child, path+'/isDerived') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'preference') then
        value.preferenceElement := ParseEnum(CODES_TFhirSpecimenContainedPreferenceEnum, SYSTEMS_TFhirSpecimenContainedPreferenceEnum, child, path+'/preference') {L734}
      else if (child.localName = 'container') then
        value.container := ParseSpecimenDefinitionTypeTestedContainer(child, path+'/container') {L740}
      else if (child.localName = 'requirement') then
        value.requirementElement := ParseString(child, path+'/requirement') {L737}
      else if (child.localName = 'retentionTime') then
        value.retentionTime := ParseDuration(child, path+'/retentionTime') {L740}
      else if (child.localName = 'singleUse') then
        value.singleUseElement := ParseBoolean(child, path+'/singleUse') {L737}
      else if (child.localName = 'rejectionCriterion') then
        value.rejectionCriterionList.Add(ParseCodeableConcept(child, path+'/rejectionCriterion')) {L631}
      else if (child.localName = 'handling') then
        value.handlingList.Add(ParseSpecimenDefinitionTypeTestedHandling(child, path+'/handling')) {L631}
      else if (child.localName = 'testingDestination') then
        value.testingDestinationList.Add(ParseCodeableConcept(child, path+'/testingDestination')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTested(xml : TXmlBuilder; name : String; value : TFhirSpecimenDefinitionTypeTested);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenDefinitionTypeTestedChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTested);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'isDerived', value.isDerivedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  ComposeEnum(xml, 'preference', value.preferenceElement, CODES_TFhirSpecimenContainedPreferenceEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeSpecimenDefinitionTypeTestedContainer(xml, 'container', value.container); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'requirement', value.requirementElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'retentionTime', value.retentionTime); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'singleUse', value.singleUseElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.rejectionCriterionList.Count - 1 do
      ComposeCodeableConcept(xml, 'rejectionCriterion', value.rejectionCriterionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.handlingList.Count - 1 do
      ComposeSpecimenDefinitionTypeTestedHandling(xml, 'handling', value.handlingList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.testingDestinationList.Count - 1 do
      ComposeCodeableConcept(xml, 'testingDestination', value.testingDestinationList[i]);
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainer(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainer;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTestedContainer.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedContainerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainerChild(value : TFhirSpecimenDefinitionTypeTestedContainer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'material') then
        value.material := ParseCodeableConcept(child, path+'/material') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'cap') then
        value.cap := ParseCodeableConcept(child, path+'/cap') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'capacity') then
        value.capacity := ParseQuantity(child, path+'/capacity') {L740}
      else if (child.localName = 'minimumVolumeQuantity') then
        value.minimumVolume := ParseQuantity(child, path+'/minimumVolumeQuantity') {L891}
      else if (child.localName = 'minimumVolumeString') then
        value.minimumVolume := ParseString(child, path+'/minimumVolumeString') {L891}
      else if (child.localName = 'additive') then
        value.additiveList.Add(ParseSpecimenDefinitionTypeTestedContainerAdditive(child, path+'/additive')) {L631}
      else if (child.localName = 'preparation') then
        value.preparationElement := ParseString(child, path+'/preparation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainer(xml : TXmlBuilder; name : String; value : TFhirSpecimenDefinitionTypeTestedContainer);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenDefinitionTypeTestedContainerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainerChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTestedContainer);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'material', value.material); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'cap', value.cap); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'capacity', value.capacity); {L741}
  if (SummaryOption in [soFull, soData]) and (value.minimumVolume is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'minimumVolumeQuantity', TFhirQuantity(value.minimumVolume))
  else if (SummaryOption in [soFull, soData]) and (value.minimumVolume is TFhirString) {6} then
    ComposeString(xml, 'minimumVolumeString', TFhirString(value.minimumVolume));
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.additiveList.Count - 1 do
      ComposeSpecimenDefinitionTypeTestedContainerAdditive(xml, 'additive', value.additiveList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'preparation', value.preparationElement); {L738}
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainerAdditive(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedContainerAdditive;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTestedContainerAdditive.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedContainerAdditiveChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedContainerAdditiveChild(value : TFhirSpecimenDefinitionTypeTestedContainerAdditive; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'additiveCodeableConcept') then
        value.additive := ParseCodeableConcept(child, path+'/additiveCodeableConcept') {L891}
      else if (child.localName = 'additiveReference') then
        value.additive := ParseReference(child, path+'/additiveReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainerAdditive(xml : TXmlBuilder; name : String; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenDefinitionTypeTestedContainerAdditiveChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedContainerAdditiveChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTestedContainerAdditive);
begin
  composeBackboneElementChildren(xml, value);
  if (value.additive is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'additiveCodeableConcept', TFhirCodeableConcept(value.additive))
  else if (value.additive is TFhirReference) {2} then
    ComposeReference(xml, 'additiveReference', TFhirReference(value.additive));
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedHandling(element : TMXmlElement; path : string) : TFhirSpecimenDefinitionTypeTestedHandling;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinitionTypeTestedHandling.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionTypeTestedHandlingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionTypeTestedHandlingChild(value : TFhirSpecimenDefinitionTypeTestedHandling; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'temperatureQualifier') then
        value.temperatureQualifier := ParseCodeableConcept(child, path+'/temperatureQualifier') {L740}
      else if (child.localName = 'temperatureRange') then
        value.temperatureRange := ParseRange(child, path+'/temperatureRange') {L740}
      else if (child.localName = 'maxDuration') then
        value.maxDuration := ParseDuration(child, path+'/maxDuration') {L740}
      else if (child.localName = 'instruction') then
        value.instructionElement := ParseString(child, path+'/instruction') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedHandling(xml : TXmlBuilder; name : String; value : TFhirSpecimenDefinitionTypeTestedHandling);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenDefinitionTypeTestedHandlingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionTypeTestedHandlingChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinitionTypeTestedHandling);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'temperatureQualifier', value.temperatureQualifier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeRange(xml, 'temperatureRange', value.temperatureRange); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDuration(xml, 'maxDuration', value.maxDuration); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'instruction', value.instructionElement); {L738}
end;

function TFHIRXmlParser.ParseSpecimenDefinition(element : TMXmlElement; path : string) : TFhirSpecimenDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirSpecimenDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSpecimenDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSpecimenDefinitionChild(value : TFhirSpecimenDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'derivedFromCanonical') then
        value.derivedFromCanonicalList.Add(ParseCanonical(child, path+'/derivedFromCanonical')) {L631}
      else if (child.localName = 'derivedFromUri') then
        value.derivedFromUriList.Add(ParseUri(child, path+'/derivedFromUri')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'subjectCodeableConcept') then
        value.subject := ParseCodeableConcept(child, path+'/subjectCodeableConcept') {L891}
      else if (child.localName = 'subjectReference') then
        value.subject := ParseReference(child, path+'/subjectReference') {L881}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisher := ParseReference(child, path+'/publisher') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'typeCollected') then
        value.typeCollected := ParseCodeableConcept(child, path+'/typeCollected') {L740}
      else if (child.localName = 'patientPreparation') then
        value.patientPreparationList.Add(ParseCodeableConcept(child, path+'/patientPreparation')) {L631}
      else if (child.localName = 'timeAspect') then
        value.timeAspectElement := ParseString(child, path+'/timeAspect') {L737}
      else if (child.localName = 'collection') then
        value.collectionList.Add(ParseCodeableConcept(child, path+'/collection')) {L631}
      else if (child.localName = 'typeTested') then
        value.typeTestedList.Add(ParseSpecimenDefinitionTypeTested(child, path+'/typeTested')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinition(xml : TXmlBuilder; name : String; value : TFhirSpecimenDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSpecimenDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSpecimenDefinitionChildren(xml : TXmlBuilder; value : TFhirSpecimenDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromCanonicalList.Count - 1 do
      ComposeCanonical(xml, 'derivedFromCanonical', value.derivedFromCanonicalList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromUriList.Count - 1 do
      ComposeUri(xml, 'derivedFromUri', value.derivedFromUriList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'subjectCodeableConcept', TFhirCodeableConcept(value.subject))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.subject is TFhirReference) {2} then
    ComposeReference(xml, 'subjectReference', TFhirReference(value.subject));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'publisher', value.publisher); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'typeCollected', value.typeCollected); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.patientPreparationList.Count - 1 do
      ComposeCodeableConcept(xml, 'patientPreparation', value.patientPreparationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'timeAspect', value.timeAspectElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.collectionList.Count - 1 do
      ComposeCodeableConcept(xml, 'collection', value.collectionList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.typeTestedList.Count - 1 do
      ComposeSpecimenDefinitionTypeTested(xml, 'typeTested', value.typeTestedList[i]);
end;

{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
function TFHIRXmlParser.ParseStructureDefinitionMapping(element : TMXmlElement; path : string) : TFhirStructureDefinitionMapping;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionMapping.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionMappingChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionMappingChild(value : TFhirStructureDefinitionMapping; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identity') then
        value.identityElement := ParseId(child, path+'/identity') {L737}
      else if (child.localName = 'uri') then
        value.uriElement := ParseUri(child, path+'/uri') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionMapping(xml : TXmlBuilder; name : String; value : TFhirStructureDefinitionMapping);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureDefinitionMappingChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionMappingChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionMapping);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'identity', value.identityElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'uri', value.uriElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
end;

function TFHIRXmlParser.ParseStructureDefinitionContext(element : TMXmlElement; path : string) : TFhirStructureDefinitionContext;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionContext.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionContextChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionContextChild(value : TFhirStructureDefinitionContext; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirExtensionContextTypeEnum, SYSTEMS_TFhirExtensionContextTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionContext(xml : TXmlBuilder; name : String; value : TFhirStructureDefinitionContext);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureDefinitionContextChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionContextChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionContext);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirExtensionContextTypeEnum); {L735}
  ComposeString(xml, 'expression', value.expressionElement); {L738}
end;

function TFHIRXmlParser.ParseStructureDefinitionSnapshot(element : TMXmlElement; path : string) : TFhirStructureDefinitionSnapshot;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionSnapshot.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionSnapshotChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionSnapshotChild(value : TFhirStructureDefinitionSnapshot; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'element') then
        value.elementList.Add(ParseElementDefinition(child, path+'/element')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionSnapshot(xml : TXmlBuilder; name : String; value : TFhirStructureDefinitionSnapshot);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureDefinitionSnapshotChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionSnapshotChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionSnapshot);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.elementList.Count - 1 do
      ComposeElementDefinition(xml, 'element', value.elementList[i]);
end;

function TFHIRXmlParser.ParseStructureDefinitionDifferential(element : TMXmlElement; path : string) : TFhirStructureDefinitionDifferential;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinitionDifferential.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionDifferentialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionDifferentialChild(value : TFhirStructureDefinitionDifferential; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'element') then
        value.elementList.Add(ParseElementDefinition(child, path+'/element')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionDifferential(xml : TXmlBuilder; name : String; value : TFhirStructureDefinitionDifferential);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureDefinitionDifferentialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionDifferentialChildren(xml : TXmlBuilder; value : TFhirStructureDefinitionDifferential);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.elementList.Count - 1 do
      ComposeElementDefinition(xml, 'element', value.elementList[i]);
end;

function TFHIRXmlParser.ParseStructureDefinition(element : TMXmlElement; path : string) : TFhirStructureDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirStructureDefinition.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureDefinitionChild(value : TFhirStructureDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'keyword') then
        value.keywordList.Add(ParseCoding(child, path+'/keyword')) {L631}
      else if (child.localName = 'fhirVersion') then
        value.fhirVersionElement := ParseEnum(CODES_TFhirFHIRVersionEnum, SYSTEMS_TFhirFHIRVersionEnum, child, path+'/fhirVersion') {L734}
      else if (child.localName = 'mapping') then
        value.mappingList.Add(ParseStructureDefinitionMapping(child, path+'/mapping')) {L631}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirStructureDefinitionKindEnum, SYSTEMS_TFhirStructureDefinitionKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'abstract') then
        value.abstractElement := ParseBoolean(child, path+'/abstract') {L737}
      else if (child.localName = 'context') then
        value.contextList.Add(ParseStructureDefinitionContext(child, path+'/context')) {L631}
      else if (child.localName = 'contextInvariant') then
        value.contextInvariantList.Add(ParseString(child, path+'/contextInvariant')) {L631}
      else if (child.localName = 'type') then
        value.type_Element := ParseUri(child, path+'/type') {L737}
      else if (child.localName = 'baseDefinition') then
        value.baseDefinitionElement := ParseCanonical(child, path+'/baseDefinition') {L737}
      else if (child.localName = 'derivation') then
        value.derivationElement := ParseEnum(CODES_TFhirTypeDerivationRuleEnum, SYSTEMS_TFhirTypeDerivationRuleEnum, child, path+'/derivation') {L734}
      else if (child.localName = 'snapshot') then
        value.snapshot := ParseStructureDefinitionSnapshot(child, path+'/snapshot') {L740}
      else if (child.localName = 'differential') then
        value.differential := ParseStructureDefinitionDifferential(child, path+'/differential') {L740}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinition(xml : TXmlBuilder; name : String; value : TFhirStructureDefinition);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureDefinitionChildren(xml : TXmlBuilder; value : TFhirStructureDefinition);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.keywordList.Count - 1 do
      ComposeCoding(xml, 'keyword', value.keywordList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'fhirVersion', value.fhirVersionElement, CODES_TFhirFHIRVersionEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.mappingList.Count - 1 do
      ComposeStructureDefinitionMapping(xml, 'mapping', value.mappingList[i]);
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirStructureDefinitionKindEnum); {L735}
  ComposeBoolean(xml, 'abstract', value.abstractElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contextList.Count - 1 do
      ComposeStructureDefinitionContext(xml, 'context', value.contextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contextInvariantList.Count - 1 do
      ComposeString(xml, 'contextInvariant', value.contextInvariantList[i]);
  ComposeUri(xml, 'type', value.type_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'baseDefinition', value.baseDefinitionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'derivation', value.derivationElement, CODES_TFhirTypeDerivationRuleEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeStructureDefinitionSnapshot(xml, 'snapshot', value.snapshot); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeStructureDefinitionDifferential(xml, 'differential', value.differential); {L741}
end;

{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
function TFHIRXmlParser.ParseStructureMapStructure(element : TMXmlElement; path : string) : TFhirStructureMapStructure;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapStructure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapStructureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapStructureChild(value : TFhirStructureMapStructure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseCanonical(child, path+'/url') {L737}
      else if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirStructureMapModelModeEnum, SYSTEMS_TFhirStructureMapModelModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'alias') then
        value.aliasElement := ParseString(child, path+'/alias') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapStructure(xml : TXmlBuilder; name : String; value : TFhirStructureMapStructure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapStructureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapStructureChildren(xml : TXmlBuilder; value : TFhirStructureMapStructure);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCanonical(xml, 'url', value.urlElement); {L738}
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirStructureMapModelModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'alias', value.aliasElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseStructureMapGroup(element : TMXmlElement; path : string) : TFhirStructureMapGroup;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupChild(value : TFhirStructureMapGroup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseId(child, path+'/name') {L737}
      else if (child.localName = 'extends') then
        value.extendsElement := ParseId(child, path+'/extends') {L737}
      else if (child.localName = 'typeMode') then
        value.typeModeElement := ParseEnum(CODES_TFhirStructureMapGroupTypeModeEnum, SYSTEMS_TFhirStructureMapGroupTypeModeEnum, child, path+'/typeMode') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if (child.localName = 'input') then
        value.inputList.Add(ParseStructureMapGroupInput(child, path+'/input')) {L631}
      else if (child.localName = 'rule') then
        value.ruleList.Add(ParseStructureMapGroupRule(child, path+'/rule')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroup(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupChildren(xml : TXmlBuilder; value : TFhirStructureMapGroup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'extends', value.extendsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'typeMode', value.typeModeElement, CODES_TFhirStructureMapGroupTypeModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
  for i := 0 to value.inputList.Count - 1 do
      ComposeStructureMapGroupInput(xml, 'input', value.inputList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(xml, 'rule', value.ruleList[i]);
end;

function TFHIRXmlParser.ParseStructureMapGroupInput(element : TMXmlElement; path : string) : TFhirStructureMapGroupInput;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupInput.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupInputChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupInputChild(value : TFhirStructureMapGroupInput; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseId(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseString(child, path+'/type') {L737}
      else if (child.localName = 'mode') then
        value.modeElement := ParseEnum(CODES_TFhirStructureMapInputModeEnum, SYSTEMS_TFhirStructureMapInputModeEnum, child, path+'/mode') {L734}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupInput(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroupInput);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupInputChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupInputChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupInput);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'type', value.type_Element); {L738}
  ComposeEnum(xml, 'mode', value.modeElement, CODES_TFhirStructureMapInputModeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseStructureMapGroupRule(element : TMXmlElement; path : string) : TFhirStructureMapGroupRule;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRule.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleChild(value : TFhirStructureMapGroupRule; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseId(child, path+'/name') {L737}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseStructureMapGroupRuleSource(child, path+'/source')) {L631}
      else if (child.localName = 'target') then
        value.targetList.Add(ParseStructureMapGroupRuleTarget(child, path+'/target')) {L631}
      else if (child.localName = 'rule') then
        value.ruleList.Add(ParseStructureMapGroupRule(child, path+'/rule')) {L631}
      else if (child.localName = 'dependent') then
        value.dependentList.Add(ParseStructureMapGroupRuleDependent(child, path+'/dependent')) {L631}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRule(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroupRule);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupRuleChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRule);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'name', value.nameElement); {L738}
  for i := 0 to value.sourceList.Count - 1 do
      ComposeStructureMapGroupRuleSource(xml, 'source', value.sourceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposeStructureMapGroupRuleTarget(xml, 'target', value.targetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ruleList.Count - 1 do
      ComposeStructureMapGroupRule(xml, 'rule', value.ruleList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.dependentList.Count - 1 do
      ComposeStructureMapGroupRuleDependent(xml, 'dependent', value.dependentList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleSource(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleSource;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleSource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleSourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleSourceChild(value : TFhirStructureMapGroupRuleSource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'context') then
        value.contextElement := ParseId(child, path+'/context') {L737}
      else if (child.localName = 'min') then
        value.minElement := ParseInteger(child, path+'/min') {L737}
      else if (child.localName = 'max') then
        value.maxElement := ParseString(child, path+'/max') {L737}
      else if (child.localName = 'type') then
        value.type_Element := ParseString(child, path+'/type') {L737}
      else if (child.localName = 'defaultValueCanonical') then
        value.defaultValue := ParseCanonical(child, path+'/defaultValueCanonical') {L891}
      else if (child.localName = 'defaultValueCode') then
        value.defaultValue := ParseCode(child, path+'/defaultValueCode') {L891}
      else if (child.localName = 'defaultValueId') then
        value.defaultValue := ParseId(child, path+'/defaultValueId') {L891}
      else if (child.localName = 'defaultValueMarkdown') then
        value.defaultValue := ParseMarkdown(child, path+'/defaultValueMarkdown') {L891}
      else if (child.localName = 'defaultValueOid') then
        value.defaultValue := ParseOid(child, path+'/defaultValueOid') {L891}
      else if (child.localName = 'defaultValuePositiveInt') then
        value.defaultValue := ParsePositiveInt(child, path+'/defaultValuePositiveInt') {L891}
      else if (child.localName = 'defaultValueUnsignedInt') then
        value.defaultValue := ParseUnsignedInt(child, path+'/defaultValueUnsignedInt') {L891}
      else if (child.localName = 'defaultValueUrl') then
        value.defaultValue := ParseUrl(child, path+'/defaultValueUrl') {L891}
      else if (child.localName = 'defaultValueUuid') then
        value.defaultValue := ParseUuid(child, path+'/defaultValueUuid') {L891}
      else if (child.localName = 'defaultValueAddress') then
        value.defaultValue := ParseAddress(child, path+'/defaultValueAddress') {L891}
      else if (child.localName = 'defaultValueAge') then
        value.defaultValue := ParseAge(child, path+'/defaultValueAge') {L891}
      else if (child.localName = 'defaultValueAnnotation') then
        value.defaultValue := ParseAnnotation(child, path+'/defaultValueAnnotation') {L891}
      else if (child.localName = 'defaultValueAttachment') then
        value.defaultValue := ParseAttachment(child, path+'/defaultValueAttachment') {L891}
      else if (child.localName = 'defaultValueCodeableConcept') then
        value.defaultValue := ParseCodeableConcept(child, path+'/defaultValueCodeableConcept') {L891}
      else if (child.localName = 'defaultValueCoding') then
        value.defaultValue := ParseCoding(child, path+'/defaultValueCoding') {L891}
      else if (child.localName = 'defaultValueContactPoint') then
        value.defaultValue := ParseContactPoint(child, path+'/defaultValueContactPoint') {L891}
      else if (child.localName = 'defaultValueCount') then
        value.defaultValue := ParseCount(child, path+'/defaultValueCount') {L891}
      else if (child.localName = 'defaultValueDistance') then
        value.defaultValue := ParseDistance(child, path+'/defaultValueDistance') {L891}
      else if (child.localName = 'defaultValueDuration') then
        value.defaultValue := ParseDuration(child, path+'/defaultValueDuration') {L891}
      else if (child.localName = 'defaultValueHumanName') then
        value.defaultValue := ParseHumanName(child, path+'/defaultValueHumanName') {L891}
      else if (child.localName = 'defaultValueIdentifier') then
        value.defaultValue := ParseIdentifier(child, path+'/defaultValueIdentifier') {L891}
      else if (child.localName = 'defaultValueMoney') then
        value.defaultValue := ParseMoney(child, path+'/defaultValueMoney') {L891}
      else if (child.localName = 'defaultValuePeriod') then
        value.defaultValue := ParsePeriod(child, path+'/defaultValuePeriod') {L891}
      else if (child.localName = 'defaultValueQuantity') then
        value.defaultValue := ParseQuantity(child, path+'/defaultValueQuantity') {L891}
      else if (child.localName = 'defaultValueRange') then
        value.defaultValue := ParseRange(child, path+'/defaultValueRange') {L891}
      else if (child.localName = 'defaultValueRatio') then
        value.defaultValue := ParseRatio(child, path+'/defaultValueRatio') {L891}
      else if (child.localName = 'defaultValueReference') then
        value.defaultValue := ParseReference(child, path+'/defaultValueReference') {L891}
      else if (child.localName = 'defaultValueSampledData') then
        value.defaultValue := ParseSampledData(child, path+'/defaultValueSampledData') {L891}
      else if (child.localName = 'defaultValueSignature') then
        value.defaultValue := ParseSignature(child, path+'/defaultValueSignature') {L891}
      else if (child.localName = 'defaultValueTiming') then
        value.defaultValue := ParseTiming(child, path+'/defaultValueTiming') {L891}
      else if (child.localName = 'defaultValueContactDetail') then
        value.defaultValue := ParseContactDetail(child, path+'/defaultValueContactDetail') {L891}
      else if (child.localName = 'defaultValueContributor') then
        value.defaultValue := ParseContributor(child, path+'/defaultValueContributor') {L891}
      else if (child.localName = 'defaultValueDataRequirement') then
        value.defaultValue := ParseDataRequirement(child, path+'/defaultValueDataRequirement') {L891}
      else if (child.localName = 'defaultValueExpression') then
        value.defaultValue := ParseExpression(child, path+'/defaultValueExpression') {L891}
      else if (child.localName = 'defaultValueParameterDefinition') then
        value.defaultValue := ParseParameterDefinition(child, path+'/defaultValueParameterDefinition') {L891}
      else if (child.localName = 'defaultValueRelatedArtifact') then
        value.defaultValue := ParseRelatedArtifact(child, path+'/defaultValueRelatedArtifact') {L891}
      else if (child.localName = 'defaultValueTriggerDefinition') then
        value.defaultValue := ParseTriggerDefinition(child, path+'/defaultValueTriggerDefinition') {L891}
      else if (child.localName = 'defaultValueUsageContext') then
        value.defaultValue := ParseUsageContext(child, path+'/defaultValueUsageContext') {L891}
      else if (child.localName = 'defaultValueDosage') then
        value.defaultValue := ParseDosage(child, path+'/defaultValueDosage') {L891}
      else if (child.localName = 'defaultValueMeta') then
        value.defaultValue := ParseMeta(child, path+'/defaultValueMeta') {L891}
      else if (child.localName = 'defaultValueBase64Binary') then
        value.defaultValue := ParseBase64Binary(child, path+'/defaultValueBase64Binary') {L891}
      else if (child.localName = 'defaultValueBoolean') then
        value.defaultValue := ParseBoolean(child, path+'/defaultValueBoolean') {L891}
      else if (child.localName = 'defaultValueDate') then
        value.defaultValue := ParseDate(child, path+'/defaultValueDate') {L891}
      else if (child.localName = 'defaultValueDateTime') then
        value.defaultValue := ParseDateTime(child, path+'/defaultValueDateTime') {L891}
      else if (child.localName = 'defaultValueDecimal') then
        value.defaultValue := ParseDecimal(child, path+'/defaultValueDecimal') {L891}
      else if (child.localName = 'defaultValueInstant') then
        value.defaultValue := ParseInstant(child, path+'/defaultValueInstant') {L891}
      else if (child.localName = 'defaultValueInteger') then
        value.defaultValue := ParseInteger(child, path+'/defaultValueInteger') {L891}
      else if (child.localName = 'defaultValueInteger64') then
        value.defaultValue := ParseInteger64(child, path+'/defaultValueInteger64') {L891}
      else if (child.localName = 'defaultValueString') then
        value.defaultValue := ParseString(child, path+'/defaultValueString') {L891}
      else if (child.localName = 'defaultValueTime') then
        value.defaultValue := ParseTime(child, path+'/defaultValueTime') {L891}
      else if (child.localName = 'defaultValueUri') then
        value.defaultValue := ParseUri(child, path+'/defaultValueUri') {L891}
      else if (child.localName = 'element') then
        value.elementElement := ParseString(child, path+'/element') {L737}
      else if (child.localName = 'listMode') then
        value.listModeElement := ParseEnum(CODES_TFhirStructureMapSourceListModeEnum, SYSTEMS_TFhirStructureMapSourceListModeEnum, child, path+'/listMode') {L734}
      else if (child.localName = 'variable') then
        value.variableElement := ParseId(child, path+'/variable') {L737}
      else if (child.localName = 'condition') then
        value.conditionElement := ParseString(child, path+'/condition') {L737}
      else if (child.localName = 'check') then
        value.checkElement := ParseString(child, path+'/check') {L737}
      else if (child.localName = 'logMessage') then
        value.logMessageElement := ParseString(child, path+'/logMessage') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleSource(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroupRuleSource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupRuleSourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleSourceChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleSource);
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'context', value.contextElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'min', value.minElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'max', value.maxElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'type', value.type_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'defaultValueCanonical', TFhirCanonical(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCode) {6} then
    ComposeCode(xml, 'defaultValueCode', TFhirCode(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirId) {6} then
    ComposeId(xml, 'defaultValueId', TFhirId(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'defaultValueMarkdown', TFhirMarkdown(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirOid) {6} then
    ComposeOid(xml, 'defaultValueOid', TFhirOid(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'defaultValuePositiveInt', TFhirPositiveInt(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'defaultValueUnsignedInt', TFhirUnsignedInt(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUrl) {6} then
    ComposeUrl(xml, 'defaultValueUrl', TFhirUrl(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUuid) {6} then
    ComposeUuid(xml, 'defaultValueUuid', TFhirUuid(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAddress) {6} then
    ComposeAddress(xml, 'defaultValueAddress', TFhirAddress(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAge) {6} then
    ComposeAge(xml, 'defaultValueAge', TFhirAge(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'defaultValueAnnotation', TFhirAnnotation(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'defaultValueAttachment', TFhirAttachment(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'defaultValueCodeableConcept', TFhirCodeableConcept(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCoding) {6} then
    ComposeCoding(xml, 'defaultValueCoding', TFhirCoding(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'defaultValueContactPoint', TFhirContactPoint(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirCount) {6} then
    ComposeCount(xml, 'defaultValueCount', TFhirCount(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDistance) {6} then
    ComposeDistance(xml, 'defaultValueDistance', TFhirDistance(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDuration) {6} then
    ComposeDuration(xml, 'defaultValueDuration', TFhirDuration(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'defaultValueHumanName', TFhirHumanName(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'defaultValueIdentifier', TFhirIdentifier(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMoney) {6} then
    ComposeMoney(xml, 'defaultValueMoney', TFhirMoney(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirPeriod) {6} then
    ComposePeriod(xml, 'defaultValuePeriod', TFhirPeriod(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'defaultValueQuantity', TFhirQuantity(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRange) {6} then
    ComposeRange(xml, 'defaultValueRange', TFhirRange(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRatio) {6} then
    ComposeRatio(xml, 'defaultValueRatio', TFhirRatio(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirReference) {6} then
    ComposeReference(xml, 'defaultValueReference', TFhirReference(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'defaultValueSampledData', TFhirSampledData(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirSignature) {6} then
    ComposeSignature(xml, 'defaultValueSignature', TFhirSignature(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTiming) {6} then
    ComposeTiming(xml, 'defaultValueTiming', TFhirTiming(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'defaultValueContactDetail', TFhirContactDetail(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirContributor) {6} then
    ComposeContributor(xml, 'defaultValueContributor', TFhirContributor(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'defaultValueDataRequirement', TFhirDataRequirement(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirExpression) {6} then
    ComposeExpression(xml, 'defaultValueExpression', TFhirExpression(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'defaultValueParameterDefinition', TFhirParameterDefinition(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'defaultValueRelatedArtifact', TFhirRelatedArtifact(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'defaultValueTriggerDefinition', TFhirTriggerDefinition(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'defaultValueUsageContext', TFhirUsageContext(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDosage) {6} then
    ComposeDosage(xml, 'defaultValueDosage', TFhirDosage(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirMeta) {6} then
    ComposeMeta(xml, 'defaultValueMeta', TFhirMeta(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'defaultValueBase64Binary', TFhirBase64Binary(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'defaultValueBoolean', TFhirBoolean(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDate) {6} then
    ComposeDate(xml, 'defaultValueDate', TFhirDate(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'defaultValueDateTime', TFhirDateTime(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'defaultValueDecimal', TFhirDecimal(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInstant) {6} then
    ComposeInstant(xml, 'defaultValueInstant', TFhirInstant(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInteger) {6} then
    ComposeInteger(xml, 'defaultValueInteger', TFhirInteger(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'defaultValueInteger64', TFhirInteger64(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirString) {6} then
    ComposeString(xml, 'defaultValueString', TFhirString(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirTime) {6} then
    ComposeTime(xml, 'defaultValueTime', TFhirTime(value.defaultValue))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.defaultValue is TFhirUri) {6} then
    ComposeUri(xml, 'defaultValueUri', TFhirUri(value.defaultValue));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'element', value.elementElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'listMode', value.listModeElement, CODES_TFhirStructureMapSourceListModeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'variable', value.variableElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'condition', value.conditionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'check', value.checkElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'logMessage', value.logMessageElement); {L738}
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTarget(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTarget;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTargetChild(value : TFhirStructureMapGroupRuleTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'context') then
        value.contextElement := ParseId(child, path+'/context') {L737}
      else if (child.localName = 'contextType') then
        value.contextTypeElement := ParseEnum(CODES_TFhirStructureMapContextTypeEnum, SYSTEMS_TFhirStructureMapContextTypeEnum, child, path+'/contextType') {L734}
      else if (child.localName = 'element') then
        value.elementElement := ParseString(child, path+'/element') {L737}
      else if (child.localName = 'variable') then
        value.variableElement := ParseId(child, path+'/variable') {L737}
      else if (child.localName = 'listMode') then
        value.listModeList.Add(ParseEnum(CODES_TFhirStructureMapTargetListModeEnum, SYSTEMS_TFhirStructureMapTargetListModeEnum, child, path+'/listMode')){y.1}
      else if (child.localName = 'listRuleId') then
        value.listRuleIdElement := ParseId(child, path+'/listRuleId') {L737}
      else if (child.localName = 'transform') then
        value.transformElement := ParseEnum(CODES_TFhirStructureMapTransformEnum, SYSTEMS_TFhirStructureMapTransformEnum, child, path+'/transform') {L734}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseStructureMapGroupRuleTargetParameter(child, path+'/parameter')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTarget(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroupRuleTarget);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupRuleTargetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTargetChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'context', value.contextElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'contextType', value.contextTypeElement, CODES_TFhirStructureMapContextTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'element', value.elementElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'variable', value.variableElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.listModeList.Count - 1 do
      ComposeEnum(xml, 'listMode', value.listModeList[i], CODES_TFhirStructureMapTargetListModeEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeId(xml, 'listRuleId', value.listRuleIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'transform', value.transformElement, CODES_TFhirStructureMapTransformEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeStructureMapGroupRuleTargetParameter(xml, 'parameter', value.parameterList[i]);
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTargetParameter(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleTargetParameter;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleTargetParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleTargetParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleTargetParameterChild(value : TFhirStructureMapGroupRuleTargetParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'valueId') then
        value.value := ParseId(child, path+'/valueId') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTargetParameter(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroupRuleTargetParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupRuleTargetParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleTargetParameterChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleTargetParameter);
begin
  composeBackboneElementChildren(xml, value);
  if (value.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value));
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleDependent(element : TMXmlElement; path : string) : TFhirStructureMapGroupRuleDependent;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMapGroupRuleDependent.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapGroupRuleDependentChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapGroupRuleDependentChild(value : TFhirStructureMapGroupRuleDependent; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseId(child, path+'/name') {L737}
      else if (child.localName = 'variable') then
        value.variableList.Add(ParseString(child, path+'/variable')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleDependent(xml : TXmlBuilder; name : String; value : TFhirStructureMapGroupRuleDependent);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapGroupRuleDependentChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapGroupRuleDependentChildren(xml : TXmlBuilder; value : TFhirStructureMapGroupRuleDependent);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeId(xml, 'name', value.nameElement); {L738}
  for i := 0 to value.variableList.Count - 1 do
      ComposeString(xml, 'variable', value.variableList[i]);
end;

function TFHIRXmlParser.ParseStructureMap(element : TMXmlElement; path : string) : TFhirStructureMap;
var
  child : TMXmlElement;
begin
  result := TFhirStructureMap.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseStructureMapChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseStructureMapChild(value : TFhirStructureMap; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'structure') then
        value.structureList.Add(ParseStructureMapStructure(child, path+'/structure')) {L631}
      else if (child.localName = 'import') then
        value.importList.Add(ParseCanonical(child, path+'/import')) {L631}
      else if (child.localName = 'group') then
        value.groupList.Add(ParseStructureMapGroup(child, path+'/group')) {L631}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeStructureMap(xml : TXmlBuilder; name : String; value : TFhirStructureMap);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeStructureMapChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeStructureMapChildren(xml : TXmlBuilder; value : TFhirStructureMap);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.structureList.Count - 1 do
      ComposeStructureMapStructure(xml, 'structure', value.structureList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.importList.Count - 1 do
      ComposeCanonical(xml, 'import', value.importList[i]);
  for i := 0 to value.groupList.Count - 1 do
      ComposeStructureMapGroup(xml, 'group', value.groupList[i]);
end;

{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
function TFHIRXmlParser.ParseSubscriptionFilterBy(element : TMXmlElement; path : string) : TFhirSubscriptionFilterBy;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionFilterBy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionFilterByChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionFilterByChild(value : TFhirSubscriptionFilterBy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'searchParamName') then
        value.searchParamNameElement := ParseString(child, path+'/searchParamName') {L737}
      else if (child.localName = 'searchModifier') then
        value.searchModifierElement := ParseEnum(CODES_TFhirSubscriptionSearchModifierEnum, SYSTEMS_TFhirSubscriptionSearchModifierEnum, child, path+'/searchModifier') {L734}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionFilterBy(xml : TXmlBuilder; name : String; value : TFhirSubscriptionFilterBy);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionFilterByChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionFilterByChildren(xml : TXmlBuilder; value : TFhirSubscriptionFilterBy);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'searchParamName', value.searchParamNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'searchModifier', value.searchModifierElement, CODES_TFhirSubscriptionSearchModifierEnum); {L735}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseSubscription(element : TMXmlElement; path : string) : TFhirSubscription;
var
  child : TMXmlElement;
begin
  result := TFhirSubscription.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionChild(value : TFhirSubscription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirSubscriptionStateEnum, SYSTEMS_TFhirSubscriptionStateEnum, child, path+'/status') {L734}
      else if (child.localName = 'topic') then
        value.topic := ParseReference(child, path+'/topic') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactPoint(child, path+'/contact')) {L631}
      else if (child.localName = 'end') then
        value.end_Element := ParseInstant(child, path+'/end') {L737}
      else if (child.localName = 'reason') then
        value.reasonElement := ParseString(child, path+'/reason') {L737}
      else if (child.localName = 'filterBy') then
        value.filterByList.Add(ParseSubscriptionFilterBy(child, path+'/filterBy')) {L631}
      else if (child.localName = 'channelType') then
        value.channelType := ParseCoding(child, path+'/channelType') {L740}
      else if (child.localName = 'endpoint') then
        value.endpointElement := ParseUrl(child, path+'/endpoint') {L737}
      else if (child.localName = 'header') then
        value.headerList.Add(ParseString(child, path+'/header')) {L631}
      else if (child.localName = 'heartbeatPeriod') then
        value.heartbeatPeriodElement := ParseUnsignedInt(child, path+'/heartbeatPeriod') {L737}
      else if (child.localName = 'timeout') then
        value.timeoutElement := ParseUnsignedInt(child, path+'/timeout') {L737}
      else if (child.localName = 'contentType') then
        value.contentTypeElement := ParseCode(child, path+'/contentType') {L737}
      else if (child.localName = 'content') then
        value.contentElement := ParseEnum(CODES_TFhirSubscriptionPayloadContentEnum, SYSTEMS_TFhirSubscriptionPayloadContentEnum, child, path+'/content') {L734}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscription(xml : TXmlBuilder; name : String; value : TFhirSubscription);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionChildren(xml : TXmlBuilder; value : TFhirSubscription);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirSubscriptionStateEnum); {L735}
  ComposeReference(xml, 'topic', value.topic); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactPoint(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInstant(xml, 'end', value.end_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'reason', value.reasonElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.filterByList.Count - 1 do
      ComposeSubscriptionFilterBy(xml, 'filterBy', value.filterByList[i]);
  ComposeCoding(xml, 'channelType', value.channelType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'endpoint', value.endpointElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.headerList.Count - 1 do
      ComposeString(xml, 'header', value.headerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'heartbeatPeriod', value.heartbeatPeriodElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUnsignedInt(xml, 'timeout', value.timeoutElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCode(xml, 'contentType', value.contentTypeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'content', value.contentElement, CODES_TFhirSubscriptionPayloadContentEnum); {L735}
end;

{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
function TFHIRXmlParser.ParseSubscriptionStatus(element : TMXmlElement; path : string) : TFhirSubscriptionStatus;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionStatus.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionStatusChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionStatusChild(value : TFhirSubscriptionStatus; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirSubscriptionNotificationTypeEnum, SYSTEMS_TFhirSubscriptionNotificationTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'eventsSinceSubscriptionStart') then
        value.eventsSinceSubscriptionStartElement := ParseInteger64(child, path+'/eventsSinceSubscriptionStart') {L737}
      else if (child.localName = 'eventsInNotification') then
        value.eventsInNotificationElement := ParseInteger(child, path+'/eventsInNotification') {L737}
      else if (child.localName = 'subscription') then
        value.subscription := ParseReference(child, path+'/subscription') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirSubscriptionStateEnum, SYSTEMS_TFhirSubscriptionStateEnum, child, path+'/status') {L734}
      else if (child.localName = 'topic') then
        value.topicElement := ParseCanonical(child, path+'/topic') {L737}
      else if (child.localName = 'error') then
        value.errorList.Add(ParseCodeableConcept(child, path+'/error')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionStatus(xml : TXmlBuilder; name : String; value : TFhirSubscriptionStatus);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionStatusChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionStatusChildren(xml : TXmlBuilder; value : TFhirSubscriptionStatus);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirSubscriptionNotificationTypeEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger64(xml, 'eventsSinceSubscriptionStart', value.eventsSinceSubscriptionStartElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'eventsInNotification', value.eventsInNotificationElement); {L738}
  ComposeReference(xml, 'subscription', value.subscription); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirSubscriptionStateEnum); {L735}
  ComposeCanonical(xml, 'topic', value.topicElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.errorList.Count - 1 do
      ComposeCodeableConcept(xml, 'error', value.errorList[i]);
end;

{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
function TFHIRXmlParser.ParseSubscriptionTopicResourceTrigger(element : TMXmlElement; path : string) : TFhirSubscriptionTopicResourceTrigger;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionTopicResourceTrigger.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionTopicResourceTriggerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionTopicResourceTriggerChild(value : TFhirSubscriptionTopicResourceTrigger; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'resourceType') then
        value.resourceType.Add(ParseEnum(CODES_TFhirResourceTypesEnum, SYSTEMS_TFhirResourceTypesEnum, child, path+'/resourceType')){y.1}
      else if (child.localName = 'methodCriteria') then
        value.methodCriteriaList.Add(ParseEnum(CODES_TFhirInteractionTriggerEnum, SYSTEMS_TFhirInteractionTriggerEnum, child, path+'/methodCriteria')){y.1}
      else if (child.localName = 'queryCriteria') then
        value.queryCriteria := ParseSubscriptionTopicResourceTriggerQueryCriteria(child, path+'/queryCriteria') {L740}
      else if (child.localName = 'fhirPathCriteria') then
        value.fhirPathCriteriaList.Add(ParseString(child, path+'/fhirPathCriteria')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicResourceTrigger(xml : TXmlBuilder; name : String; value : TFhirSubscriptionTopicResourceTrigger);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionTopicResourceTriggerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicResourceTriggerChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopicResourceTrigger);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.resourceType.Count - 1 do
      ComposeEnum(xml, 'resourceType', value.resourceType[i], CODES_TFhirResourceTypesEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.methodCriteriaList.Count - 1 do
      ComposeEnum(xml, 'methodCriteria', value.methodCriteriaList[i], CODES_TFhirInteractionTriggerEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubscriptionTopicResourceTriggerQueryCriteria(xml, 'queryCriteria', value.queryCriteria); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.fhirPathCriteriaList.Count - 1 do
      ComposeString(xml, 'fhirPathCriteria', value.fhirPathCriteriaList[i]);
end;

function TFHIRXmlParser.ParseSubscriptionTopicResourceTriggerQueryCriteria(element : TMXmlElement; path : string) : TFhirSubscriptionTopicResourceTriggerQueryCriteria;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionTopicResourceTriggerQueryCriteria.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionTopicResourceTriggerQueryCriteriaChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionTopicResourceTriggerQueryCriteriaChild(value : TFhirSubscriptionTopicResourceTriggerQueryCriteria; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'previous') then
        value.previousElement := ParseString(child, path+'/previous') {L737}
      else if (child.localName = 'current') then
        value.currentElement := ParseString(child, path+'/current') {L737}
      else if (child.localName = 'requireBoth') then
        value.requireBothElement := ParseBoolean(child, path+'/requireBoth') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicResourceTriggerQueryCriteria(xml : TXmlBuilder; name : String; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionTopicResourceTriggerQueryCriteriaChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicResourceTriggerQueryCriteriaChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopicResourceTriggerQueryCriteria);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'previous', value.previousElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'current', value.currentElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'requireBoth', value.requireBothElement); {L738}
end;

function TFHIRXmlParser.ParseSubscriptionTopicCanFilterBy(element : TMXmlElement; path : string) : TFhirSubscriptionTopicCanFilterBy;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionTopicCanFilterBy.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionTopicCanFilterByChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionTopicCanFilterByChild(value : TFhirSubscriptionTopicCanFilterBy; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'searchParamName') then
        value.searchParamNameElement := ParseString(child, path+'/searchParamName') {L737}
      else if (child.localName = 'searchModifier') then
        value.searchModifierList.Add(ParseEnum(CODES_TFhirSubscriptionSearchModifierEnum, SYSTEMS_TFhirSubscriptionSearchModifierEnum, child, path+'/searchModifier')){y.1}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseMarkdown(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicCanFilterBy(xml : TXmlBuilder; name : String; value : TFhirSubscriptionTopicCanFilterBy);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionTopicCanFilterByChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicCanFilterByChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopicCanFilterBy);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'searchParamName', value.searchParamNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.searchModifierList.Count - 1 do
      ComposeEnum(xml, 'searchModifier', value.searchModifierList[i], CODES_TFhirSubscriptionSearchModifierEnum);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseSubscriptionTopic(element : TMXmlElement; path : string) : TFhirSubscriptionTopic;
var
  child : TMXmlElement;
begin
  result := TFhirSubscriptionTopic.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubscriptionTopicChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubscriptionTopicChild(value : TFhirSubscriptionTopic; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'derivedFrom') then
        value.derivedFromList.Add(ParseCanonical(child, path+'/derivedFrom')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisher := ParseReference(child, path+'/publisher') {L740}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'approvalDate') then
        value.approvalDateElement := ParseDate(child, path+'/approvalDate') {L737}
      else if (child.localName = 'lastReviewDate') then
        value.lastReviewDateElement := ParseDate(child, path+'/lastReviewDate') {L737}
      else if (child.localName = 'effectivePeriod') then
        value.effectivePeriod := ParsePeriod(child, path+'/effectivePeriod') {L740}
      else if (child.localName = 'resourceTrigger') then
        value.resourceTrigger := ParseSubscriptionTopicResourceTrigger(child, path+'/resourceTrigger') {L740}
      else if (child.localName = 'canFilterBy') then
        value.canFilterByList.Add(ParseSubscriptionTopicCanFilterBy(child, path+'/canFilterBy')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopic(xml : TXmlBuilder; name : String; value : TFhirSubscriptionTopic);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubscriptionTopicChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubscriptionTopicChildren(xml : TXmlBuilder; value : TFhirSubscriptionTopic);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.derivedFromList.Count - 1 do
      ComposeCanonical(xml, 'derivedFrom', value.derivedFromList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'publisher', value.publisher); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'approvalDate', value.approvalDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'lastReviewDate', value.lastReviewDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'effectivePeriod', value.effectivePeriod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubscriptionTopicResourceTrigger(xml, 'resourceTrigger', value.resourceTrigger); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.canFilterByList.Count - 1 do
      ComposeSubscriptionTopicCanFilterBy(xml, 'canFilterBy', value.canFilterByList[i]);
end;

{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
function TFHIRXmlParser.ParseSubstanceInstance(element : TMXmlElement; path : string) : TFhirSubstanceInstance;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceInstance.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceInstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceInstanceChild(value : TFhirSubstanceInstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'expiry') then
        value.expiryElement := ParseDateTime(child, path+'/expiry') {L737}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceInstance(xml : TXmlBuilder; name : String; value : TFhirSubstanceInstance);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceInstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceInstanceChildren(xml : TXmlBuilder; value : TFhirSubstanceInstance);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'expiry', value.expiryElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
end;

function TFHIRXmlParser.ParseSubstanceIngredient(element : TMXmlElement; path : string) : TFhirSubstanceIngredient;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceIngredient.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceIngredientChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceIngredientChild(value : TFhirSubstanceIngredient; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        value.quantity := ParseRatio(child, path+'/quantity') {L740}
      else if (child.localName = 'substanceCodeableConcept') then
        value.substance := ParseCodeableConcept(child, path+'/substanceCodeableConcept') {L891}
      else if (child.localName = 'substanceReference') then
        value.substance := ParseReference(child, path+'/substanceReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceIngredient(xml : TXmlBuilder; name : String; value : TFhirSubstanceIngredient);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceIngredientChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceIngredientChildren(xml : TXmlBuilder; value : TFhirSubstanceIngredient);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'quantity', value.quantity); {L741}
  if (value.substance is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'substanceCodeableConcept', TFhirCodeableConcept(value.substance))
  else if (value.substance is TFhirReference) {2} then
    ComposeReference(xml, 'substanceReference', TFhirReference(value.substance));
end;

function TFHIRXmlParser.ParseSubstance(element : TMXmlElement; path : string) : TFhirSubstance;
var
  child : TMXmlElement;
begin
  result := TFhirSubstance.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceChild(value : TFhirSubstance; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFHIRSubstanceStatusEnum, SYSTEMS_TFhirFHIRSubstanceStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.categoryList.Add(ParseCodeableConcept(child, path+'/category')) {L631}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'instance') then
        value.instanceList.Add(ParseSubstanceInstance(child, path+'/instance')) {L631}
      else if (child.localName = 'ingredient') then
        value.ingredientList.Add(ParseSubstanceIngredient(child, path+'/ingredient')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstance(xml : TXmlBuilder; name : String; value : TFhirSubstance);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceChildren(xml : TXmlBuilder; value : TFhirSubstance);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFHIRSubstanceStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.categoryList.Count - 1 do
      ComposeCodeableConcept(xml, 'category', value.categoryList[i]);
  ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.instanceList.Count - 1 do
      ComposeSubstanceInstance(xml, 'instance', value.instanceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.ingredientList.Count - 1 do
      ComposeSubstanceIngredient(xml, 'ingredient', value.ingredientList[i]);
end;

{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
function TFHIRXmlParser.ParseSubstanceDefinitionMoiety(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionMoiety;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionMoiety.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionMoietyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionMoietyChild(value : TFhirSubstanceDefinitionMoiety; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'role') then
        value.role := ParseCodeableConcept(child, path+'/role') {L740}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'stereochemistry') then
        value.stereochemistry := ParseCodeableConcept(child, path+'/stereochemistry') {L740}
      else if (child.localName = 'opticalActivity') then
        value.opticalActivity := ParseCodeableConcept(child, path+'/opticalActivity') {L740}
      else if (child.localName = 'molecularFormula') then
        value.molecularFormulaElement := ParseString(child, path+'/molecularFormula') {L737}
      else if (child.localName = 'amountQuantity') then
        value.amount := ParseQuantity(child, path+'/amountQuantity') {L891}
      else if (child.localName = 'amountString') then
        value.amount := ParseString(child, path+'/amountString') {L891}
      else if (child.localName = 'amountType') then
        value.amountType := ParseCodeableConcept(child, path+'/amountType') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionMoiety(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionMoiety);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionMoietyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionMoietyChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionMoiety);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'role', value.role); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'stereochemistry', value.stereochemistry); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'opticalActivity', value.opticalActivity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'molecularFormula', value.molecularFormulaElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(value.amount));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'amountType', value.amountType); {L741}
end;

function TFHIRXmlParser.ParseSubstanceDefinitionProperty(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionProperty;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionPropertyChild(value : TFhirSubstanceDefinitionProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'parameters') then
        value.parametersElement := ParseString(child, path+'/parameters') {L737}
      else if (child.localName = 'definingSubstance') then
        value.definingSubstance := ParseCodeableReference(child, path+'/definingSubstance') {L740}
      else if (child.localName = 'amountQuantity') then
        value.amount := ParseQuantity(child, path+'/amountQuantity') {L891}
      else if (child.localName = 'amountString') then
        value.amount := ParseString(child, path+'/amountString') {L891}
      else if (child.localName = 'referenceRange') then
        value.referenceRange := ParseRange(child, path+'/referenceRange') {L740}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionProperty(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionPropertyChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionProperty);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'parameters', value.parametersElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableReference(xml, 'definingSubstance', value.definingSubstance); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(value.amount));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRange(xml, 'referenceRange', value.referenceRange); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructure(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructure;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionStructure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionStructureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureChild(value : TFhirSubstanceDefinitionStructure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'stereochemistry') then
        value.stereochemistry := ParseCodeableConcept(child, path+'/stereochemistry') {L740}
      else if (child.localName = 'opticalActivity') then
        value.opticalActivity := ParseCodeableConcept(child, path+'/opticalActivity') {L740}
      else if (child.localName = 'molecularFormula') then
        value.molecularFormulaElement := ParseString(child, path+'/molecularFormula') {L737}
      else if (child.localName = 'molecularFormulaByMoiety') then
        value.molecularFormulaByMoietyElement := ParseString(child, path+'/molecularFormulaByMoiety') {L737}
      else if (child.localName = 'isotope') then
        value.isotopeList.Add(ParseSubstanceDefinitionStructureIsotope(child, path+'/isotope')) {L631}
      else if (child.localName = 'molecularWeight') then
        value.molecularWeight := ParseSubstanceDefinitionStructureIsotopeMolecularWeight(child, path+'/molecularWeight') {L740}
      else if (child.localName = 'technique') then
        value.techniqueList.Add(ParseCodeableConcept(child, path+'/technique')) {L631}
      else if (child.localName = 'sourceDocument') then
        value.sourceDocumentList.Add(ParseReference(child, path+'/sourceDocument')) {L631}
      else if (child.localName = 'representation') then
        value.representationList.Add(ParseSubstanceDefinitionStructureRepresentation(child, path+'/representation')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructure(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionStructure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionStructureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructure);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'stereochemistry', value.stereochemistry); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'opticalActivity', value.opticalActivity); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'molecularFormula', value.molecularFormulaElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'molecularFormulaByMoiety', value.molecularFormulaByMoietyElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.isotopeList.Count - 1 do
      ComposeSubstanceDefinitionStructureIsotope(xml, 'isotope', value.isotopeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceDefinitionStructureIsotopeMolecularWeight(xml, 'molecularWeight', value.molecularWeight); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.techniqueList.Count - 1 do
      ComposeCodeableConcept(xml, 'technique', value.techniqueList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceDocumentList.Count - 1 do
      ComposeReference(xml, 'sourceDocument', value.sourceDocumentList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.representationList.Count - 1 do
      ComposeSubstanceDefinitionStructureRepresentation(xml, 'representation', value.representationList[i]);
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureIsotope(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructureIsotope;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionStructureIsotope.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionStructureIsotopeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureIsotopeChild(value : TFhirSubstanceDefinitionStructureIsotope; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'name') then
        value.name := ParseCodeableConcept(child, path+'/name') {L740}
      else if (child.localName = 'substitution') then
        value.substitution := ParseCodeableConcept(child, path+'/substitution') {L740}
      else if (child.localName = 'halfLife') then
        value.halfLife := ParseQuantity(child, path+'/halfLife') {L740}
      else if (child.localName = 'molecularWeight') then
        value.molecularWeight := ParseSubstanceDefinitionStructureIsotopeMolecularWeight(child, path+'/molecularWeight') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureIsotope(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionStructureIsotope);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionStructureIsotopeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureIsotopeChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructureIsotope);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'name', value.name); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'substitution', value.substitution); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'halfLife', value.halfLife); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceDefinitionStructureIsotopeMolecularWeight(xml, 'molecularWeight', value.molecularWeight); {L741}
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureIsotopeMolecularWeight(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionStructureIsotopeMolecularWeight.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionStructureIsotopeMolecularWeightChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureIsotopeMolecularWeightChild(value : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'method') then
        value.method := ParseCodeableConcept(child, path+'/method') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'amount') then
        value.amount := ParseQuantity(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureIsotopeMolecularWeight(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionStructureIsotopeMolecularWeightChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureIsotopeMolecularWeightChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructureIsotopeMolecularWeight);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'method', value.method); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureRepresentation(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionStructureRepresentation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionStructureRepresentation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionStructureRepresentationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionStructureRepresentationChild(value : TFhirSubstanceDefinitionStructureRepresentation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'representation') then
        value.representationElement := ParseString(child, path+'/representation') {L737}
      else if (child.localName = 'format') then
        value.format := ParseCodeableConcept(child, path+'/format') {L740}
      else if (child.localName = 'document') then
        value.document := ParseReference(child, path+'/document') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureRepresentation(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionStructureRepresentation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionStructureRepresentationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionStructureRepresentationChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionStructureRepresentation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'representation', value.representationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'format', value.format); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'document', value.document); {L741}
end;

function TFHIRXmlParser.ParseSubstanceDefinitionCode(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionCode;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionCode.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionCodeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionCodeChild(value : TFhirSubstanceDefinitionCode; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'statusDate') then
        value.statusDateElement := ParseDateTime(child, path+'/statusDate') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionCode(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionCode);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionCodeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionCodeChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionCode);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'statusDate', value.statusDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceDefinitionName(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionName;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionName.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionNameChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionNameChild(value : TFhirSubstanceDefinitionName; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'preferred') then
        value.preferredElement := ParseBoolean(child, path+'/preferred') {L737}
      else if (child.localName = 'language') then
        value.languageList.Add(ParseCodeableConcept(child, path+'/language')) {L631}
      else if (child.localName = 'domain') then
        value.domainList.Add(ParseCodeableConcept(child, path+'/domain')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'synonym') then
        value.synonymList.Add(ParseSubstanceDefinitionName(child, path+'/synonym')) {L631}
      else if (child.localName = 'translation') then
        value.translationList.Add(ParseSubstanceDefinitionName(child, path+'/translation')) {L631}
      else if (child.localName = 'official') then
        value.officialList.Add(ParseSubstanceDefinitionNameOfficial(child, path+'/official')) {L631}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionName(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionName);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionNameChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionNameChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionName);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'preferred', value.preferredElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.languageList.Count - 1 do
      ComposeCodeableConcept(xml, 'language', value.languageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.domainList.Count - 1 do
      ComposeCodeableConcept(xml, 'domain', value.domainList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.synonymList.Count - 1 do
      ComposeSubstanceDefinitionName(xml, 'synonym', value.synonymList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.translationList.Count - 1 do
      ComposeSubstanceDefinitionName(xml, 'translation', value.translationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.officialList.Count - 1 do
      ComposeSubstanceDefinitionNameOfficial(xml, 'official', value.officialList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceDefinitionNameOfficial(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionNameOfficial;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionNameOfficial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionNameOfficialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionNameOfficialChild(value : TFhirSubstanceDefinitionNameOfficial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authority') then
        value.authority := ParseCodeableConcept(child, path+'/authority') {L740}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionNameOfficial(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionNameOfficial);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionNameOfficialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionNameOfficialChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionNameOfficial);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'authority', value.authority); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
end;

function TFHIRXmlParser.ParseSubstanceDefinitionRelationship(element : TMXmlElement; path : string) : TFhirSubstanceDefinitionRelationship;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinitionRelationship.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionRelationshipChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionRelationshipChild(value : TFhirSubstanceDefinitionRelationship; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'substanceDefinitionReference') then
        value.substanceDefinition := ParseReference(child, path+'/substanceDefinitionReference') {L881}
      else if (child.localName = 'substanceDefinitionCodeableConcept') then
        value.substanceDefinition := ParseCodeableConcept(child, path+'/substanceDefinitionCodeableConcept') {L891}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'isDefining') then
        value.isDefiningElement := ParseBoolean(child, path+'/isDefining') {L737}
      else if (child.localName = 'amountQuantity') then
        value.amount := ParseQuantity(child, path+'/amountQuantity') {L891}
      else if (child.localName = 'amountRange') then
        value.amount := ParseRange(child, path+'/amountRange') {L891}
      else if (child.localName = 'amountRatio') then
        value.amount := ParseRatio(child, path+'/amountRatio') {L891}
      else if (child.localName = 'amountString') then
        value.amount := ParseString(child, path+'/amountString') {L891}
      else if (child.localName = 'amountRatioHighLimit') then
        value.amountRatioHighLimit := ParseRatio(child, path+'/amountRatioHighLimit') {L740}
      else if (child.localName = 'amountType') then
        value.amountType := ParseCodeableConcept(child, path+'/amountType') {L740}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionRelationship(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinitionRelationship);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionRelationshipChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionRelationshipChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinitionRelationship);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.substanceDefinition is TFhirReference) {2} then
    ComposeReference(xml, 'substanceDefinitionReference', TFhirReference(value.substanceDefinition))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.substanceDefinition is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'substanceDefinitionCodeableConcept', TFhirCodeableConcept(value.substanceDefinition));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isDefining', value.isDefiningElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirRange) {6} then
    ComposeRange(xml, 'amountRange', TFhirRange(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirRatio) {6} then
    ComposeRatio(xml, 'amountRatio', TFhirRatio(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(value.amount));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeRatio(xml, 'amountRatioHighLimit', value.amountRatioHighLimit); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'amountType', value.amountType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceDefinition(element : TMXmlElement; path : string) : TFhirSubstanceDefinition;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceDefinition.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceDefinitionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceDefinitionChild(value : TFhirSubstanceDefinition; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'status') then
        value.status := ParseCodeableConcept(child, path+'/status') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'classification') then
        value.classificationList.Add(ParseCodeableConcept(child, path+'/classification')) {L631}
      else if (child.localName = 'domain') then
        value.domain := ParseCodeableConcept(child, path+'/domain') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'manufacturer') then
        value.manufacturerList.Add(ParseReference(child, path+'/manufacturer')) {L631}
      else if (child.localName = 'supplier') then
        value.supplierList.Add(ParseReference(child, path+'/supplier')) {L631}
      else if (child.localName = 'moiety') then
        value.moietyList.Add(ParseSubstanceDefinitionMoiety(child, path+'/moiety')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseSubstanceDefinitionProperty(child, path+'/property')) {L631}
      else if (child.localName = 'referenceInformation') then
        value.referenceInformation := ParseReference(child, path+'/referenceInformation') {L740}
      else if (child.localName = 'structure') then
        value.structure := ParseSubstanceDefinitionStructure(child, path+'/structure') {L740}
      else if (child.localName = 'code') then
        value.codeList.Add(ParseSubstanceDefinitionCode(child, path+'/code')) {L631}
      else if (child.localName = 'name') then
        value.nameList.Add(ParseSubstanceDefinitionName(child, path+'/name')) {L631}
      else if (child.localName = 'molecularWeight') then
        value.molecularWeightList.Add(ParseSubstanceDefinitionStructureIsotopeMolecularWeight(child, path+'/molecularWeight')) {L631}
      else if (child.localName = 'relationship') then
        value.relationshipList.Add(ParseSubstanceDefinitionRelationship(child, path+'/relationship')) {L631}
      else if (child.localName = 'nucleicAcid') then
        value.nucleicAcid := ParseReference(child, path+'/nucleicAcid') {L740}
      else if (child.localName = 'polymer') then
        value.polymer := ParseReference(child, path+'/polymer') {L740}
      else if (child.localName = 'protein') then
        value.protein := ParseReference(child, path+'/protein') {L740}
      else if (child.localName = 'sourceMaterial') then
        value.sourceMaterial := ParseReference(child, path+'/sourceMaterial') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinition(xml : TXmlBuilder; name : String; value : TFhirSubstanceDefinition);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceDefinitionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceDefinitionChildren(xml : TXmlBuilder; value : TFhirSubstanceDefinition);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'status', value.status); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.classificationList.Count - 1 do
      ComposeCodeableConcept(xml, 'classification', value.classificationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'domain', value.domain); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.manufacturerList.Count - 1 do
      ComposeReference(xml, 'manufacturer', value.manufacturerList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.supplierList.Count - 1 do
      ComposeReference(xml, 'supplier', value.supplierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.moietyList.Count - 1 do
      ComposeSubstanceDefinitionMoiety(xml, 'moiety', value.moietyList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeSubstanceDefinitionProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'referenceInformation', value.referenceInformation); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceDefinitionStructure(xml, 'structure', value.structure); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.codeList.Count - 1 do
      ComposeSubstanceDefinitionCode(xml, 'code', value.codeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.nameList.Count - 1 do
      ComposeSubstanceDefinitionName(xml, 'name', value.nameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.molecularWeightList.Count - 1 do
      ComposeSubstanceDefinitionStructureIsotopeMolecularWeight(xml, 'molecularWeight', value.molecularWeightList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.relationshipList.Count - 1 do
      ComposeSubstanceDefinitionRelationship(xml, 'relationship', value.relationshipList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'nucleicAcid', value.nucleicAcid); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'polymer', value.polymer); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'protein', value.protein); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'sourceMaterial', value.sourceMaterial); {L741}
end;

{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunit(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunit;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcidSubunit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidSubunitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitChild(value : TFhirSubstanceNucleicAcidSubunit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subunit') then
        value.subunitElement := ParseInteger(child, path+'/subunit') {L737}
      else if (child.localName = 'sequence') then
        value.sequenceElement := ParseString(child, path+'/sequence') {L737}
      else if (child.localName = 'length') then
        value.lengthElement := ParseInteger(child, path+'/length') {L737}
      else if (child.localName = 'sequenceAttachment') then
        value.sequenceAttachment := ParseAttachment(child, path+'/sequenceAttachment') {L740}
      else if (child.localName = 'fivePrime') then
        value.fivePrime := ParseCodeableConcept(child, path+'/fivePrime') {L740}
      else if (child.localName = 'threePrime') then
        value.threePrime := ParseCodeableConcept(child, path+'/threePrime') {L740}
      else if (child.localName = 'linkage') then
        value.linkageList.Add(ParseSubstanceNucleicAcidSubunitLinkage(child, path+'/linkage')) {L631}
      else if (child.localName = 'sugar') then
        value.sugarList.Add(ParseSubstanceNucleicAcidSubunitSugar(child, path+'/sugar')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunit(xml : TXmlBuilder; name : String; value : TFhirSubstanceNucleicAcidSubunit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceNucleicAcidSubunitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcidSubunit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'subunit', value.subunitElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'length', value.lengthElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'sequenceAttachment', value.sequenceAttachment); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'fivePrime', value.fivePrime); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'threePrime', value.threePrime); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.linkageList.Count - 1 do
      ComposeSubstanceNucleicAcidSubunitLinkage(xml, 'linkage', value.linkageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sugarList.Count - 1 do
      ComposeSubstanceNucleicAcidSubunitSugar(xml, 'sugar', value.sugarList[i]);
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitLinkage(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitLinkage;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcidSubunitLinkage.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidSubunitLinkageChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitLinkageChild(value : TFhirSubstanceNucleicAcidSubunitLinkage; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'connectivity') then
        value.connectivityElement := ParseString(child, path+'/connectivity') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'residueSite') then
        value.residueSiteElement := ParseString(child, path+'/residueSite') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitLinkage(xml : TXmlBuilder; name : String; value : TFhirSubstanceNucleicAcidSubunitLinkage);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceNucleicAcidSubunitLinkageChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitLinkageChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcidSubunitLinkage);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'connectivity', value.connectivityElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'residueSite', value.residueSiteElement); {L738}
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitSugar(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcidSubunitSugar;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcidSubunitSugar.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidSubunitSugarChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidSubunitSugarChild(value : TFhirSubstanceNucleicAcidSubunitSugar; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'residueSite') then
        value.residueSiteElement := ParseString(child, path+'/residueSite') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitSugar(xml : TXmlBuilder; name : String; value : TFhirSubstanceNucleicAcidSubunitSugar);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceNucleicAcidSubunitSugarChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidSubunitSugarChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcidSubunitSugar);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'residueSite', value.residueSiteElement); {L738}
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcid(element : TMXmlElement; path : string) : TFhirSubstanceNucleicAcid;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceNucleicAcid.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceNucleicAcidChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceNucleicAcidChild(value : TFhirSubstanceNucleicAcid; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequenceType') then
        value.sequenceType := ParseCodeableConcept(child, path+'/sequenceType') {L740}
      else if (child.localName = 'numberOfSubunits') then
        value.numberOfSubunitsElement := ParseInteger(child, path+'/numberOfSubunits') {L737}
      else if (child.localName = 'areaOfHybridisation') then
        value.areaOfHybridisationElement := ParseString(child, path+'/areaOfHybridisation') {L737}
      else if (child.localName = 'oligoNucleotideType') then
        value.oligoNucleotideType := ParseCodeableConcept(child, path+'/oligoNucleotideType') {L740}
      else if (child.localName = 'subunit') then
        value.subunitList.Add(ParseSubstanceNucleicAcidSubunit(child, path+'/subunit')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcid(xml : TXmlBuilder; name : String; value : TFhirSubstanceNucleicAcid);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceNucleicAcidChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceNucleicAcidChildren(xml : TXmlBuilder; value : TFhirSubstanceNucleicAcid);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'sequenceType', value.sequenceType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'numberOfSubunits', value.numberOfSubunitsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'areaOfHybridisation', value.areaOfHybridisationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'oligoNucleotideType', value.oligoNucleotideType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subunitList.Count - 1 do
      ComposeSubstanceNucleicAcidSubunit(xml, 'subunit', value.subunitList[i]);
end;

{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
function TFHIRXmlParser.ParseSubstancePolymerMonomerSet(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSet;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerMonomerSet.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerMonomerSetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerMonomerSetChild(value : TFhirSubstancePolymerMonomerSet; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'ratioType') then
        value.ratioType := ParseCodeableConcept(child, path+'/ratioType') {L740}
      else if (child.localName = 'startingMaterial') then
        value.startingMaterialList.Add(ParseSubstancePolymerMonomerSetStartingMaterial(child, path+'/startingMaterial')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSet(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymerMonomerSet);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerMonomerSetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSetChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerMonomerSet);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'ratioType', value.ratioType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.startingMaterialList.Count - 1 do
      ComposeSubstancePolymerMonomerSetStartingMaterial(xml, 'startingMaterial', value.startingMaterialList[i]);
end;

function TFHIRXmlParser.ParseSubstancePolymerMonomerSetStartingMaterial(element : TMXmlElement; path : string) : TFhirSubstancePolymerMonomerSetStartingMaterial;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerMonomerSetStartingMaterial.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerMonomerSetStartingMaterialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerMonomerSetStartingMaterialChild(value : TFhirSubstancePolymerMonomerSetStartingMaterial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'isDefining') then
        value.isDefiningElement := ParseBoolean(child, path+'/isDefining') {L737}
      else if (child.localName = 'amount') then
        value.amount := ParseQuantity(child, path+'/amount') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSetStartingMaterial(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymerMonomerSetStartingMaterial);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerMonomerSetStartingMaterialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerMonomerSetStartingMaterialChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerMonomerSetStartingMaterial);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isDefining', value.isDefiningElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeQuantity(xml, 'amount', value.amount); {L741}
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeat(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeat;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeat.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatChild(value : TFhirSubstancePolymerRepeat; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'averageMolecularFormula') then
        value.averageMolecularFormulaElement := ParseString(child, path+'/averageMolecularFormula') {L737}
      else if (child.localName = 'repeatUnitAmountType') then
        value.repeatUnitAmountType := ParseCodeableConcept(child, path+'/repeatUnitAmountType') {L740}
      else if (child.localName = 'repeatUnit') then
        value.repeatUnitList.Add(ParseSubstancePolymerRepeatRepeatUnit(child, path+'/repeatUnit')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeat(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymerRepeat);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerRepeatChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeat);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'averageMolecularFormula', value.averageMolecularFormulaElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'repeatUnitAmountType', value.repeatUnitAmountType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.repeatUnitList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnit(xml, 'repeatUnit', value.repeatUnitList[i]);
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnit(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnit;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatRepeatUnitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitChild(value : TFhirSubstancePolymerRepeatRepeatUnit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'unit') then
        value.unit_Element := ParseString(child, path+'/unit') {L737}
      else if (child.localName = 'orientation') then
        value.orientation := ParseCodeableConcept(child, path+'/orientation') {L740}
      else if (child.localName = 'amount') then
        value.amountElement := ParseInteger(child, path+'/amount') {L737}
      else if (child.localName = 'degreeOfPolymerisation') then
        value.degreeOfPolymerisationList.Add(ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(child, path+'/degreeOfPolymerisation')) {L631}
      else if (child.localName = 'structuralRepresentation') then
        value.structuralRepresentationList.Add(ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(child, path+'/structuralRepresentation')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnit(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymerRepeatRepeatUnit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerRepeatRepeatUnitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeatRepeatUnit);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'unit', value.unit_Element); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'orientation', value.orientation); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'amount', value.amountElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.degreeOfPolymerisationList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml, 'degreeOfPolymerisation', value.degreeOfPolymerisationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.structuralRepresentationList.Count - 1 do
      ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml, 'structuralRepresentation', value.structuralRepresentationList[i]);
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChild(value : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'average') then
        value.averageElement := ParseInteger(child, path+'/average') {L737}
      else if (child.localName = 'low') then
        value.lowElement := ParseInteger(child, path+'/low') {L737}
      else if (child.localName = 'high') then
        value.highElement := ParseInteger(child, path+'/high') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisationChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'average', value.averageElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'low', value.lowElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'high', value.highElement); {L738}
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(element : TMXmlElement; path : string) : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerRepeatRepeatUnitStructuralRepresentationChild(value : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'representation') then
        value.representationElement := ParseString(child, path+'/representation') {L737}
      else if (child.localName = 'format') then
        value.format := ParseCodeableConcept(child, path+'/format') {L740}
      else if (child.localName = 'attachment') then
        value.attachment := ParseAttachment(child, path+'/attachment') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentation(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerRepeatRepeatUnitStructuralRepresentationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerRepeatRepeatUnitStructuralRepresentationChildren(xml : TXmlBuilder; value : TFhirSubstancePolymerRepeatRepeatUnitStructuralRepresentation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'representation', value.representationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'format', value.format); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'attachment', value.attachment); {L741}
end;

function TFHIRXmlParser.ParseSubstancePolymer(element : TMXmlElement; path : string) : TFhirSubstancePolymer;
var
  child : TMXmlElement;
begin
  result := TFhirSubstancePolymer.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstancePolymerChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstancePolymerChild(value : TFhirSubstancePolymer; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'class') then
        value.class_ := ParseCodeableConcept(child, path+'/class') {L740}
      else if (child.localName = 'geometry') then
        value.geometry := ParseCodeableConcept(child, path+'/geometry') {L740}
      else if (child.localName = 'copolymerConnectivity') then
        value.copolymerConnectivityList.Add(ParseCodeableConcept(child, path+'/copolymerConnectivity')) {L631}
      else if (child.localName = 'modification') then
        value.modificationElement := ParseString(child, path+'/modification') {L737}
      else if (child.localName = 'monomerSet') then
        value.monomerSetList.Add(ParseSubstancePolymerMonomerSet(child, path+'/monomerSet')) {L631}
      else if (child.localName = 'repeat') then
        value.repeat_List.Add(ParseSubstancePolymerRepeat(child, path+'/repeat')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymer(xml : TXmlBuilder; name : String; value : TFhirSubstancePolymer);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstancePolymerChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstancePolymerChildren(xml : TXmlBuilder; value : TFhirSubstancePolymer);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'class', value.class_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'geometry', value.geometry); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.copolymerConnectivityList.Count - 1 do
      ComposeCodeableConcept(xml, 'copolymerConnectivity', value.copolymerConnectivityList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'modification', value.modificationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.monomerSetList.Count - 1 do
      ComposeSubstancePolymerMonomerSet(xml, 'monomerSet', value.monomerSetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.repeat_List.Count - 1 do
      ComposeSubstancePolymerRepeat(xml, 'repeat', value.repeat_List[i]);
end;

{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
function TFHIRXmlParser.ParseSubstanceProteinSubunit(element : TMXmlElement; path : string) : TFhirSubstanceProteinSubunit;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceProteinSubunit.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceProteinSubunitChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceProteinSubunitChild(value : TFhirSubstanceProteinSubunit; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'subunit') then
        value.subunitElement := ParseInteger(child, path+'/subunit') {L737}
      else if (child.localName = 'sequence') then
        value.sequenceElement := ParseString(child, path+'/sequence') {L737}
      else if (child.localName = 'length') then
        value.lengthElement := ParseInteger(child, path+'/length') {L737}
      else if (child.localName = 'sequenceAttachment') then
        value.sequenceAttachment := ParseAttachment(child, path+'/sequenceAttachment') {L740}
      else if (child.localName = 'nTerminalModificationId') then
        value.nTerminalModificationId := ParseIdentifier(child, path+'/nTerminalModificationId') {L740}
      else if (child.localName = 'nTerminalModification') then
        value.nTerminalModificationElement := ParseString(child, path+'/nTerminalModification') {L737}
      else if (child.localName = 'cTerminalModificationId') then
        value.cTerminalModificationId := ParseIdentifier(child, path+'/cTerminalModificationId') {L740}
      else if (child.localName = 'cTerminalModification') then
        value.cTerminalModificationElement := ParseString(child, path+'/cTerminalModification') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceProteinSubunit(xml : TXmlBuilder; name : String; value : TFhirSubstanceProteinSubunit);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceProteinSubunitChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceProteinSubunitChildren(xml : TXmlBuilder; value : TFhirSubstanceProteinSubunit);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'subunit', value.subunitElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'sequence', value.sequenceElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'length', value.lengthElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeAttachment(xml, 'sequenceAttachment', value.sequenceAttachment); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'nTerminalModificationId', value.nTerminalModificationId); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'nTerminalModification', value.nTerminalModificationElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'cTerminalModificationId', value.cTerminalModificationId); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'cTerminalModification', value.cTerminalModificationElement); {L738}
end;

function TFHIRXmlParser.ParseSubstanceProtein(element : TMXmlElement; path : string) : TFhirSubstanceProtein;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceProtein.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceProteinChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceProteinChild(value : TFhirSubstanceProtein; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sequenceType') then
        value.sequenceType := ParseCodeableConcept(child, path+'/sequenceType') {L740}
      else if (child.localName = 'numberOfSubunits') then
        value.numberOfSubunitsElement := ParseInteger(child, path+'/numberOfSubunits') {L737}
      else if (child.localName = 'disulfideLinkage') then
        value.disulfideLinkageList.Add(ParseString(child, path+'/disulfideLinkage')) {L631}
      else if (child.localName = 'subunit') then
        value.subunitList.Add(ParseSubstanceProteinSubunit(child, path+'/subunit')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceProtein(xml : TXmlBuilder; name : String; value : TFhirSubstanceProtein);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceProteinChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceProteinChildren(xml : TXmlBuilder; value : TFhirSubstanceProtein);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'sequenceType', value.sequenceType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeInteger(xml, 'numberOfSubunits', value.numberOfSubunitsElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.disulfideLinkageList.Count - 1 do
      ComposeString(xml, 'disulfideLinkage', value.disulfideLinkageList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.subunitList.Count - 1 do
      ComposeSubstanceProteinSubunit(xml, 'subunit', value.subunitList[i]);
end;

{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
function TFHIRXmlParser.ParseSubstanceReferenceInformationGene(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGene;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationGene.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationGeneChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationGeneChild(value : TFhirSubstanceReferenceInformationGene; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'geneSequenceOrigin') then
        value.geneSequenceOrigin := ParseCodeableConcept(child, path+'/geneSequenceOrigin') {L740}
      else if (child.localName = 'gene') then
        value.gene := ParseCodeableConcept(child, path+'/gene') {L740}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGene(xml : TXmlBuilder; name : String; value : TFhirSubstanceReferenceInformationGene);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceReferenceInformationGeneChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGeneChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformationGene);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'geneSequenceOrigin', value.geneSequenceOrigin); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'gene', value.gene); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationGeneElement(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationGeneElement;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationGeneElement.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationGeneElementChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationGeneElementChild(value : TFhirSubstanceReferenceInformationGeneElement; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'element') then
        value.element := ParseIdentifier(child, path+'/element') {L740}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGeneElement(xml : TXmlBuilder; name : String; value : TFhirSubstanceReferenceInformationGeneElement);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceReferenceInformationGeneElementChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationGeneElementChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformationGeneElement);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'element', value.element); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationTarget(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformationTarget;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformationTarget.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationTargetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationTargetChild(value : TFhirSubstanceReferenceInformationTarget; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        value.target := ParseIdentifier(child, path+'/target') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'interaction') then
        value.interaction := ParseCodeableConcept(child, path+'/interaction') {L740}
      else if (child.localName = 'organism') then
        value.organism := ParseCodeableConcept(child, path+'/organism') {L740}
      else if (child.localName = 'organismType') then
        value.organismType := ParseCodeableConcept(child, path+'/organismType') {L740}
      else if (child.localName = 'amountQuantity') then
        value.amount := ParseQuantity(child, path+'/amountQuantity') {L891}
      else if (child.localName = 'amountRange') then
        value.amount := ParseRange(child, path+'/amountRange') {L891}
      else if (child.localName = 'amountString') then
        value.amount := ParseString(child, path+'/amountString') {L891}
      else if (child.localName = 'amountType') then
        value.amountType := ParseCodeableConcept(child, path+'/amountType') {L740}
      else if (child.localName = 'source') then
        value.sourceList.Add(ParseReference(child, path+'/source')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationTarget(xml : TXmlBuilder; name : String; value : TFhirSubstanceReferenceInformationTarget);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceReferenceInformationTargetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationTargetChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformationTarget);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'target', value.target); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'interaction', value.interaction); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'organism', value.organism); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'organismType', value.organismType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'amountQuantity', TFhirQuantity(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirRange) {6} then
    ComposeRange(xml, 'amountRange', TFhirRange(value.amount))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.amount is TFhirString) {6} then
    ComposeString(xml, 'amountString', TFhirString(value.amount));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'amountType', value.amountType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.sourceList.Count - 1 do
      ComposeReference(xml, 'source', value.sourceList[i]);
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformation(element : TMXmlElement; path : string) : TFhirSubstanceReferenceInformation;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceReferenceInformation.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceReferenceInformationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceReferenceInformationChild(value : TFhirSubstanceReferenceInformation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'comment') then
        value.commentElement := ParseString(child, path+'/comment') {L737}
      else if (child.localName = 'gene') then
        value.geneList.Add(ParseSubstanceReferenceInformationGene(child, path+'/gene')) {L631}
      else if (child.localName = 'geneElement') then
        value.geneElementList.Add(ParseSubstanceReferenceInformationGeneElement(child, path+'/geneElement')) {L631}
      else if (child.localName = 'target') then
        value.targetList.Add(ParseSubstanceReferenceInformationTarget(child, path+'/target')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformation(xml : TXmlBuilder; name : String; value : TFhirSubstanceReferenceInformation);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceReferenceInformationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceReferenceInformationChildren(xml : TXmlBuilder; value : TFhirSubstanceReferenceInformation);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'comment', value.commentElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.geneList.Count - 1 do
      ComposeSubstanceReferenceInformationGene(xml, 'gene', value.geneList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.geneElementList.Count - 1 do
      ComposeSubstanceReferenceInformationGeneElement(xml, 'geneElement', value.geneElementList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposeSubstanceReferenceInformationTarget(xml, 'target', value.targetList[i]);
end;

{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
function TFHIRXmlParser.ParseSubstanceSourceMaterialFractionDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialFractionDescription;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialFractionDescription.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialFractionDescriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialFractionDescriptionChild(value : TFhirSubstanceSourceMaterialFractionDescription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'fraction') then
        value.fractionElement := ParseString(child, path+'/fraction') {L737}
      else if (child.localName = 'materialType') then
        value.materialType := ParseCodeableConcept(child, path+'/materialType') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialFractionDescription(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterialFractionDescription);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialFractionDescriptionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialFractionDescriptionChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialFractionDescription);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'fraction', value.fractionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'materialType', value.materialType); {L741}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganism(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganism;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganism.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismChild(value : TFhirSubstanceSourceMaterialOrganism; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'family') then
        value.family := ParseCodeableConcept(child, path+'/family') {L740}
      else if (child.localName = 'genus') then
        value.genus := ParseCodeableConcept(child, path+'/genus') {L740}
      else if (child.localName = 'species') then
        value.species := ParseCodeableConcept(child, path+'/species') {L740}
      else if (child.localName = 'intraspecificType') then
        value.intraspecificType := ParseCodeableConcept(child, path+'/intraspecificType') {L740}
      else if (child.localName = 'intraspecificDescription') then
        value.intraspecificDescriptionElement := ParseString(child, path+'/intraspecificDescription') {L737}
      else if (child.localName = 'author') then
        value.authorList.Add(ParseSubstanceSourceMaterialOrganismAuthor(child, path+'/author')) {L631}
      else if (child.localName = 'hybrid') then
        value.hybrid := ParseSubstanceSourceMaterialOrganismHybrid(child, path+'/hybrid') {L740}
      else if (child.localName = 'organismGeneral') then
        value.organismGeneral := ParseSubstanceSourceMaterialOrganismOrganismGeneral(child, path+'/organismGeneral') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganism(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterialOrganism);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialOrganismChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganism);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'family', value.family); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'genus', value.genus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'species', value.species); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'intraspecificType', value.intraspecificType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'intraspecificDescription', value.intraspecificDescriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.authorList.Count - 1 do
      ComposeSubstanceSourceMaterialOrganismAuthor(xml, 'author', value.authorList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSourceMaterialOrganismHybrid(xml, 'hybrid', value.hybrid); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSourceMaterialOrganismOrganismGeneral(xml, 'organismGeneral', value.organismGeneral); {L741}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismAuthor(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismAuthor;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganismAuthor.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismAuthorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismAuthorChild(value : TFhirSubstanceSourceMaterialOrganismAuthor; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'authorType') then
        value.authorType := ParseCodeableConcept(child, path+'/authorType') {L740}
      else if (child.localName = 'authorDescription') then
        value.authorDescriptionElement := ParseString(child, path+'/authorDescription') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismAuthor(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterialOrganismAuthor);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialOrganismAuthorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismAuthorChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganismAuthor);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'authorType', value.authorType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'authorDescription', value.authorDescriptionElement); {L738}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismHybrid(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismHybrid;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganismHybrid.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismHybridChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismHybridChild(value : TFhirSubstanceSourceMaterialOrganismHybrid; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'maternalOrganismId') then
        value.maternalOrganismIdElement := ParseString(child, path+'/maternalOrganismId') {L737}
      else if (child.localName = 'maternalOrganismName') then
        value.maternalOrganismNameElement := ParseString(child, path+'/maternalOrganismName') {L737}
      else if (child.localName = 'paternalOrganismId') then
        value.paternalOrganismIdElement := ParseString(child, path+'/paternalOrganismId') {L737}
      else if (child.localName = 'paternalOrganismName') then
        value.paternalOrganismNameElement := ParseString(child, path+'/paternalOrganismName') {L737}
      else if (child.localName = 'hybridType') then
        value.hybridType := ParseCodeableConcept(child, path+'/hybridType') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismHybrid(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterialOrganismHybrid);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialOrganismHybridChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismHybridChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganismHybrid);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'maternalOrganismId', value.maternalOrganismIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'maternalOrganismName', value.maternalOrganismNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'paternalOrganismId', value.paternalOrganismIdElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'paternalOrganismName', value.paternalOrganismNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'hybridType', value.hybridType); {L741}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismOrganismGeneral(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialOrganismOrganismGeneral;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialOrganismOrganismGeneral.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialOrganismOrganismGeneralChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialOrganismOrganismGeneralChild(value : TFhirSubstanceSourceMaterialOrganismOrganismGeneral; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'kingdom') then
        value.kingdom := ParseCodeableConcept(child, path+'/kingdom') {L740}
      else if (child.localName = 'phylum') then
        value.phylum := ParseCodeableConcept(child, path+'/phylum') {L740}
      else if (child.localName = 'class') then
        value.class_ := ParseCodeableConcept(child, path+'/class') {L740}
      else if (child.localName = 'order') then
        value.order := ParseCodeableConcept(child, path+'/order') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismOrganismGeneral(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialOrganismOrganismGeneralChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialOrganismOrganismGeneralChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialOrganismOrganismGeneral);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'kingdom', value.kingdom); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'phylum', value.phylum); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'class', value.class_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'order', value.order); {L741}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialPartDescription(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterialPartDescription;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterialPartDescription.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialPartDescriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialPartDescriptionChild(value : TFhirSubstanceSourceMaterialPartDescription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'part') then
        value.part := ParseCodeableConcept(child, path+'/part') {L740}
      else if (child.localName = 'partLocation') then
        value.partLocation := ParseCodeableConcept(child, path+'/partLocation') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialPartDescription(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterialPartDescription);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialPartDescriptionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialPartDescriptionChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterialPartDescription);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'part', value.part); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'partLocation', value.partLocation); {L741}
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterial(element : TMXmlElement; path : string) : TFhirSubstanceSourceMaterial;
var
  child : TMXmlElement;
begin
  result := TFhirSubstanceSourceMaterial.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSubstanceSourceMaterialChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSubstanceSourceMaterialChild(value : TFhirSubstanceSourceMaterial; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'sourceMaterialClass') then
        value.sourceMaterialClass := ParseCodeableConcept(child, path+'/sourceMaterialClass') {L740}
      else if (child.localName = 'sourceMaterialType') then
        value.sourceMaterialType := ParseCodeableConcept(child, path+'/sourceMaterialType') {L740}
      else if (child.localName = 'sourceMaterialState') then
        value.sourceMaterialState := ParseCodeableConcept(child, path+'/sourceMaterialState') {L740}
      else if (child.localName = 'organismId') then
        value.organismId := ParseIdentifier(child, path+'/organismId') {L740}
      else if (child.localName = 'organismName') then
        value.organismNameElement := ParseString(child, path+'/organismName') {L737}
      else if (child.localName = 'parentSubstanceId') then
        value.parentSubstanceIdList.Add(ParseIdentifier(child, path+'/parentSubstanceId')) {L631}
      else if (child.localName = 'parentSubstanceName') then
        value.parentSubstanceNameList.Add(ParseString(child, path+'/parentSubstanceName')) {L631}
      else if (child.localName = 'countryOfOrigin') then
        value.countryOfOriginList.Add(ParseCodeableConcept(child, path+'/countryOfOrigin')) {L631}
      else if (child.localName = 'geographicalLocation') then
        value.geographicalLocationList.Add(ParseString(child, path+'/geographicalLocation')) {L631}
      else if (child.localName = 'developmentStage') then
        value.developmentStage := ParseCodeableConcept(child, path+'/developmentStage') {L740}
      else if (child.localName = 'fractionDescription') then
        value.fractionDescriptionList.Add(ParseSubstanceSourceMaterialFractionDescription(child, path+'/fractionDescription')) {L631}
      else if (child.localName = 'organism') then
        value.organism := ParseSubstanceSourceMaterialOrganism(child, path+'/organism') {L740}
      else if (child.localName = 'partDescription') then
        value.partDescriptionList.Add(ParseSubstanceSourceMaterialPartDescription(child, path+'/partDescription')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterial(xml : TXmlBuilder; name : String; value : TFhirSubstanceSourceMaterial);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSubstanceSourceMaterialChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSubstanceSourceMaterialChildren(xml : TXmlBuilder; value : TFhirSubstanceSourceMaterial);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'sourceMaterialClass', value.sourceMaterialClass); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'sourceMaterialType', value.sourceMaterialType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'sourceMaterialState', value.sourceMaterialState); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'organismId', value.organismId); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'organismName', value.organismNameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.parentSubstanceIdList.Count - 1 do
      ComposeIdentifier(xml, 'parentSubstanceId', value.parentSubstanceIdList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.parentSubstanceNameList.Count - 1 do
      ComposeString(xml, 'parentSubstanceName', value.parentSubstanceNameList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.countryOfOriginList.Count - 1 do
      ComposeCodeableConcept(xml, 'countryOfOrigin', value.countryOfOriginList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.geographicalLocationList.Count - 1 do
      ComposeString(xml, 'geographicalLocation', value.geographicalLocationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'developmentStage', value.developmentStage); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.fractionDescriptionList.Count - 1 do
      ComposeSubstanceSourceMaterialFractionDescription(xml, 'fractionDescription', value.fractionDescriptionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeSubstanceSourceMaterialOrganism(xml, 'organism', value.organism); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partDescriptionList.Count - 1 do
      ComposeSubstanceSourceMaterialPartDescription(xml, 'partDescription', value.partDescriptionList[i]);
end;

{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUPPLYDELIVERY}
function TFHIRXmlParser.ParseSupplyDeliverySuppliedItem(element : TMXmlElement; path : string) : TFhirSupplyDeliverySuppliedItem;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyDeliverySuppliedItem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyDeliverySuppliedItemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyDeliverySuppliedItemChild(value : TFhirSupplyDeliverySuppliedItem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'itemCodeableConcept') then
        value.item := ParseCodeableConcept(child, path+'/itemCodeableConcept') {L891}
      else if (child.localName = 'itemReference') then
        value.item := ParseReference(child, path+'/itemReference') {L881}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyDeliverySuppliedItem(xml : TXmlBuilder; name : String; value : TFhirSupplyDeliverySuppliedItem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSupplyDeliverySuppliedItemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSupplyDeliverySuppliedItemChildren(xml : TXmlBuilder; value : TFhirSupplyDeliverySuppliedItem);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) and (value.item is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'itemCodeableConcept', TFhirCodeableConcept(value.item))
  else if (SummaryOption in [soFull, soData]) and (value.item is TFhirReference) {2} then
    ComposeReference(xml, 'itemReference', TFhirReference(value.item));
end;

function TFHIRXmlParser.ParseSupplyDelivery(element : TMXmlElement; path : string) : TFhirSupplyDelivery;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyDelivery.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyDeliveryChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyDeliveryChild(value : TFhirSupplyDelivery; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirSupplyDeliveryStatusEnum, SYSTEMS_TFhirSupplyDeliveryStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'suppliedItem') then
        value.suppliedItem := ParseSupplyDeliverySuppliedItem(child, path+'/suppliedItem') {L740}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'supplier') then
        value.supplier := ParseReference(child, path+'/supplier') {L740}
      else if (child.localName = 'destination') then
        value.destination := ParseReference(child, path+'/destination') {L740}
      else if (child.localName = 'receiver') then
        value.receiverList.Add(ParseReference(child, path+'/receiver')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyDelivery(xml : TXmlBuilder; name : String; value : TFhirSupplyDelivery);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSupplyDeliveryChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSupplyDeliveryChildren(xml : TXmlBuilder; value : TFhirSupplyDelivery);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirSupplyDeliveryStatusEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeSupplyDeliverySuppliedItem(xml, 'suppliedItem', value.suppliedItem); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'supplier', value.supplier); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'destination', value.destination); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.receiverList.Count - 1 do
      ComposeReference(xml, 'receiver', value.receiverList[i]);
end;

{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
function TFHIRXmlParser.ParseSupplyRequestParameter(element : TMXmlElement; path : string) : TFhirSupplyRequestParameter;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyRequestParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyRequestParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyRequestParameterChild(value : TFhirSupplyRequestParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyRequestParameter(xml : TXmlBuilder; name : String; value : TFhirSupplyRequestParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSupplyRequestParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSupplyRequestParameterChildren(xml : TXmlBuilder; value : TFhirSupplyRequestParameter);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value));
end;

function TFHIRXmlParser.ParseSupplyRequest(element : TMXmlElement; path : string) : TFhirSupplyRequest;
var
  child : TMXmlElement;
begin
  result := TFhirSupplyRequest.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseSupplyRequestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseSupplyRequestChild(value : TFhirSupplyRequest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirSupplyRequestStatusEnum, SYSTEMS_TFhirSupplyRequestStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'category') then
        value.category := ParseCodeableConcept(child, path+'/category') {L740}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'item') then
        value.item := ParseCodeableReference(child, path+'/item') {L740}
      else if (child.localName = 'quantity') then
        value.quantity := ParseQuantity(child, path+'/quantity') {L740}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseSupplyRequestParameter(child, path+'/parameter')) {L631}
      else if (child.localName = 'occurrencePeriod') then
        value.occurrence := ParsePeriod(child, path+'/occurrencePeriod') {L891}
      else if (child.localName = 'occurrenceTiming') then
        value.occurrence := ParseTiming(child, path+'/occurrenceTiming') {L891}
      else if (child.localName = 'occurrenceDateTime') then
        value.occurrence := ParseDateTime(child, path+'/occurrenceDateTime') {L891}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'requester') then
        value.requester := ParseReference(child, path+'/requester') {L740}
      else if (child.localName = 'supplier') then
        value.supplierList.Add(ParseReference(child, path+'/supplier')) {L631}
      else if (child.localName = 'reason') then
        value.reasonList.Add(ParseCodeableReference(child, path+'/reason')) {L631}
      else if (child.localName = 'deliverFrom') then
        value.deliverFrom := ParseReference(child, path+'/deliverFrom') {L740}
      else if (child.localName = 'deliverTo') then
        value.deliverTo := ParseReference(child, path+'/deliverTo') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeSupplyRequest(xml : TXmlBuilder; name : String; value : TFhirSupplyRequest);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeSupplyRequestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeSupplyRequestChildren(xml : TXmlBuilder; value : TFhirSupplyRequest);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirSupplyRequestStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'category', value.category); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  ComposeCodeableReference(xml, 'item', value.item); {L741}
  ComposeQuantity(xml, 'quantity', value.quantity); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeSupplyRequestParameter(xml, 'parameter', value.parameterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirPeriod) {6} then
    ComposePeriod(xml, 'occurrencePeriod', TFhirPeriod(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirTiming) {6} then
    ComposeTiming(xml, 'occurrenceTiming', TFhirTiming(value.occurrence))
  else if (SummaryOption in [soFull, soSummary, soData]) and (value.occurrence is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'occurrenceDateTime', TFhirDateTime(value.occurrence));
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'requester', value.requester); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.supplierList.Count - 1 do
      ComposeReference(xml, 'supplier', value.supplierList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.reasonList.Count - 1 do
      ComposeCodeableReference(xml, 'reason', value.reasonList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'deliverFrom', value.deliverFrom); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'deliverTo', value.deliverTo); {L741}
end;

{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
function TFHIRXmlParser.ParseTaskRestriction(element : TMXmlElement; path : string) : TFhirTaskRestriction;
var
  child : TMXmlElement;
begin
  result := TFhirTaskRestriction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskRestrictionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskRestrictionChild(value : TFhirTaskRestriction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'repetitions') then
        value.repetitionsElement := ParsePositiveInt(child, path+'/repetitions') {L737}
      else if (child.localName = 'period') then
        value.period := ParsePeriod(child, path+'/period') {L740}
      else if (child.localName = 'recipient') then
        value.recipientList.Add(ParseReference(child, path+'/recipient')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTaskRestriction(xml : TXmlBuilder; name : String; value : TFhirTaskRestriction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTaskRestrictionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTaskRestrictionChildren(xml : TXmlBuilder; value : TFhirTaskRestriction);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposePositiveInt(xml, 'repetitions', value.repetitionsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposePeriod(xml, 'period', value.period); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.recipientList.Count - 1 do
      ComposeReference(xml, 'recipient', value.recipientList[i]);
end;

function TFHIRXmlParser.ParseTaskInput(element : TMXmlElement; path : string) : TFhirTaskInput;
var
  child : TMXmlElement;
begin
  result := TFhirTaskInput.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskInputChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskInputChild(value : TFhirTaskInput; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCanonical') then
        value.value := ParseCanonical(child, path+'/valueCanonical') {L891}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueId') then
        value.value := ParseId(child, path+'/valueId') {L891}
      else if (child.localName = 'valueMarkdown') then
        value.value := ParseMarkdown(child, path+'/valueMarkdown') {L891}
      else if (child.localName = 'valueOid') then
        value.value := ParseOid(child, path+'/valueOid') {L891}
      else if (child.localName = 'valuePositiveInt') then
        value.value := ParsePositiveInt(child, path+'/valuePositiveInt') {L891}
      else if (child.localName = 'valueUnsignedInt') then
        value.value := ParseUnsignedInt(child, path+'/valueUnsignedInt') {L891}
      else if (child.localName = 'valueUrl') then
        value.value := ParseUrl(child, path+'/valueUrl') {L891}
      else if (child.localName = 'valueUuid') then
        value.value := ParseUuid(child, path+'/valueUuid') {L891}
      else if (child.localName = 'valueAddress') then
        value.value := ParseAddress(child, path+'/valueAddress') {L891}
      else if (child.localName = 'valueAge') then
        value.value := ParseAge(child, path+'/valueAge') {L891}
      else if (child.localName = 'valueAnnotation') then
        value.value := ParseAnnotation(child, path+'/valueAnnotation') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueContactPoint') then
        value.value := ParseContactPoint(child, path+'/valueContactPoint') {L891}
      else if (child.localName = 'valueCount') then
        value.value := ParseCount(child, path+'/valueCount') {L891}
      else if (child.localName = 'valueDistance') then
        value.value := ParseDistance(child, path+'/valueDistance') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if (child.localName = 'valueHumanName') then
        value.value := ParseHumanName(child, path+'/valueHumanName') {L891}
      else if (child.localName = 'valueIdentifier') then
        value.value := ParseIdentifier(child, path+'/valueIdentifier') {L891}
      else if (child.localName = 'valueMoney') then
        value.value := ParseMoney(child, path+'/valueMoney') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valueSignature') then
        value.value := ParseSignature(child, path+'/valueSignature') {L891}
      else if (child.localName = 'valueTiming') then
        value.value := ParseTiming(child, path+'/valueTiming') {L891}
      else if (child.localName = 'valueContactDetail') then
        value.value := ParseContactDetail(child, path+'/valueContactDetail') {L891}
      else if (child.localName = 'valueContributor') then
        value.value := ParseContributor(child, path+'/valueContributor') {L891}
      else if (child.localName = 'valueDataRequirement') then
        value.value := ParseDataRequirement(child, path+'/valueDataRequirement') {L891}
      else if (child.localName = 'valueExpression') then
        value.value := ParseExpression(child, path+'/valueExpression') {L891}
      else if (child.localName = 'valueParameterDefinition') then
        value.value := ParseParameterDefinition(child, path+'/valueParameterDefinition') {L891}
      else if (child.localName = 'valueRelatedArtifact') then
        value.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact') {L891}
      else if (child.localName = 'valueTriggerDefinition') then
        value.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition') {L891}
      else if (child.localName = 'valueUsageContext') then
        value.value := ParseUsageContext(child, path+'/valueUsageContext') {L891}
      else if (child.localName = 'valueDosage') then
        value.value := ParseDosage(child, path+'/valueDosage') {L891}
      else if (child.localName = 'valueMeta') then
        value.value := ParseMeta(child, path+'/valueMeta') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInstant') then
        value.value := ParseInstant(child, path+'/valueInstant') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueInteger64') then
        value.value := ParseInteger64(child, path+'/valueInteger64') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTaskInput(xml : TXmlBuilder; name : String; value : TFhirTaskInput);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTaskInputChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTaskInputChildren(xml : TXmlBuilder; value : TFhirTaskInput);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (value.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(value.value))
  else if (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (value.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(value.value))
  else if (value.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(value.value))
  else if (value.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(value.value))
  else if (value.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(value.value))
  else if (value.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(value.value))
  else if (value.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(value.value))
  else if (value.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(value.value))
  else if (value.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(value.value))
  else if (value.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(value.value))
  else if (value.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(value.value))
  else if (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(value.value))
  else if (value.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(value.value))
  else if (value.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(value.value))
  else if (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value))
  else if (value.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(value.value))
  else if (value.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(value.value))
  else if (value.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(value.value))
  else if (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (value.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (value.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(value.value))
  else if (value.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(value.value))
  else if (value.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(value.value))
  else if (value.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(value.value))
  else if (value.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(value.value))
  else if (value.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(value.value))
  else if (value.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(value.value))
  else if (value.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value))
  else if (value.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value))
  else if (value.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(value.value))
  else if (value.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(value.value))
  else if (value.value is TFhirMeta) {6} then
    ComposeMeta(xml, 'valueMeta', TFhirMeta(value.value))
  else if (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (value.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'valueInteger64', TFhirInteger64(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
end;

function TFHIRXmlParser.ParseTaskOutput(element : TMXmlElement; path : string) : TFhirTaskOutput;
var
  child : TMXmlElement;
begin
  result := TFhirTaskOutput.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskOutputChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskOutputChild(value : TFhirTaskOutput; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCodeableConcept(child, path+'/type') {L740}
      else if (child.localName = 'valueCanonical') then
        value.value := ParseCanonical(child, path+'/valueCanonical') {L891}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueId') then
        value.value := ParseId(child, path+'/valueId') {L891}
      else if (child.localName = 'valueMarkdown') then
        value.value := ParseMarkdown(child, path+'/valueMarkdown') {L891}
      else if (child.localName = 'valueOid') then
        value.value := ParseOid(child, path+'/valueOid') {L891}
      else if (child.localName = 'valuePositiveInt') then
        value.value := ParsePositiveInt(child, path+'/valuePositiveInt') {L891}
      else if (child.localName = 'valueUnsignedInt') then
        value.value := ParseUnsignedInt(child, path+'/valueUnsignedInt') {L891}
      else if (child.localName = 'valueUrl') then
        value.value := ParseUrl(child, path+'/valueUrl') {L891}
      else if (child.localName = 'valueUuid') then
        value.value := ParseUuid(child, path+'/valueUuid') {L891}
      else if (child.localName = 'valueAddress') then
        value.value := ParseAddress(child, path+'/valueAddress') {L891}
      else if (child.localName = 'valueAge') then
        value.value := ParseAge(child, path+'/valueAge') {L891}
      else if (child.localName = 'valueAnnotation') then
        value.value := ParseAnnotation(child, path+'/valueAnnotation') {L891}
      else if (child.localName = 'valueAttachment') then
        value.value := ParseAttachment(child, path+'/valueAttachment') {L891}
      else if (child.localName = 'valueCodeableConcept') then
        value.value := ParseCodeableConcept(child, path+'/valueCodeableConcept') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueContactPoint') then
        value.value := ParseContactPoint(child, path+'/valueContactPoint') {L891}
      else if (child.localName = 'valueCount') then
        value.value := ParseCount(child, path+'/valueCount') {L891}
      else if (child.localName = 'valueDistance') then
        value.value := ParseDistance(child, path+'/valueDistance') {L891}
      else if (child.localName = 'valueDuration') then
        value.value := ParseDuration(child, path+'/valueDuration') {L891}
      else if (child.localName = 'valueHumanName') then
        value.value := ParseHumanName(child, path+'/valueHumanName') {L891}
      else if (child.localName = 'valueIdentifier') then
        value.value := ParseIdentifier(child, path+'/valueIdentifier') {L891}
      else if (child.localName = 'valueMoney') then
        value.value := ParseMoney(child, path+'/valueMoney') {L891}
      else if (child.localName = 'valuePeriod') then
        value.value := ParsePeriod(child, path+'/valuePeriod') {L891}
      else if (child.localName = 'valueQuantity') then
        value.value := ParseQuantity(child, path+'/valueQuantity') {L891}
      else if (child.localName = 'valueRange') then
        value.value := ParseRange(child, path+'/valueRange') {L891}
      else if (child.localName = 'valueRatio') then
        value.value := ParseRatio(child, path+'/valueRatio') {L891}
      else if (child.localName = 'valueReference') then
        value.value := ParseReference(child, path+'/valueReference') {L891}
      else if (child.localName = 'valueSampledData') then
        value.value := ParseSampledData(child, path+'/valueSampledData') {L891}
      else if (child.localName = 'valueSignature') then
        value.value := ParseSignature(child, path+'/valueSignature') {L891}
      else if (child.localName = 'valueTiming') then
        value.value := ParseTiming(child, path+'/valueTiming') {L891}
      else if (child.localName = 'valueContactDetail') then
        value.value := ParseContactDetail(child, path+'/valueContactDetail') {L891}
      else if (child.localName = 'valueContributor') then
        value.value := ParseContributor(child, path+'/valueContributor') {L891}
      else if (child.localName = 'valueDataRequirement') then
        value.value := ParseDataRequirement(child, path+'/valueDataRequirement') {L891}
      else if (child.localName = 'valueExpression') then
        value.value := ParseExpression(child, path+'/valueExpression') {L891}
      else if (child.localName = 'valueParameterDefinition') then
        value.value := ParseParameterDefinition(child, path+'/valueParameterDefinition') {L891}
      else if (child.localName = 'valueRelatedArtifact') then
        value.value := ParseRelatedArtifact(child, path+'/valueRelatedArtifact') {L891}
      else if (child.localName = 'valueTriggerDefinition') then
        value.value := ParseTriggerDefinition(child, path+'/valueTriggerDefinition') {L891}
      else if (child.localName = 'valueUsageContext') then
        value.value := ParseUsageContext(child, path+'/valueUsageContext') {L891}
      else if (child.localName = 'valueDosage') then
        value.value := ParseDosage(child, path+'/valueDosage') {L891}
      else if (child.localName = 'valueMeta') then
        value.value := ParseMeta(child, path+'/valueMeta') {L891}
      else if (child.localName = 'valueBase64Binary') then
        value.value := ParseBase64Binary(child, path+'/valueBase64Binary') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDate') then
        value.value := ParseDate(child, path+'/valueDate') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueInstant') then
        value.value := ParseInstant(child, path+'/valueInstant') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueInteger64') then
        value.value := ParseInteger64(child, path+'/valueInteger64') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueTime') then
        value.value := ParseTime(child, path+'/valueTime') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTaskOutput(xml : TXmlBuilder; name : String; value : TFhirTaskOutput);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTaskOutputChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTaskOutputChildren(xml : TXmlBuilder; value : TFhirTaskOutput);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'type', value.type_); {L741}
  if (value.value is TFhirCanonical) {6} then
    ComposeCanonical(xml, 'valueCanonical', TFhirCanonical(value.value))
  else if (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (value.value is TFhirId) {6} then
    ComposeId(xml, 'valueId', TFhirId(value.value))
  else if (value.value is TFhirMarkdown) {6} then
    ComposeMarkdown(xml, 'valueMarkdown', TFhirMarkdown(value.value))
  else if (value.value is TFhirOid) {6} then
    ComposeOid(xml, 'valueOid', TFhirOid(value.value))
  else if (value.value is TFhirPositiveInt) {6} then
    ComposePositiveInt(xml, 'valuePositiveInt', TFhirPositiveInt(value.value))
  else if (value.value is TFhirUnsignedInt) {6} then
    ComposeUnsignedInt(xml, 'valueUnsignedInt', TFhirUnsignedInt(value.value))
  else if (value.value is TFhirUrl) {6} then
    ComposeUrl(xml, 'valueUrl', TFhirUrl(value.value))
  else if (value.value is TFhirUuid) {6} then
    ComposeUuid(xml, 'valueUuid', TFhirUuid(value.value))
  else if (value.value is TFhirAddress) {6} then
    ComposeAddress(xml, 'valueAddress', TFhirAddress(value.value))
  else if (value.value is TFhirAge) {6} then
    ComposeAge(xml, 'valueAge', TFhirAge(value.value))
  else if (value.value is TFhirAnnotation) {6} then
    ComposeAnnotation(xml, 'valueAnnotation', TFhirAnnotation(value.value))
  else if (value.value is TFhirAttachment) {6} then
    ComposeAttachment(xml, 'valueAttachment', TFhirAttachment(value.value))
  else if (value.value is TFhirCodeableConcept) {6} then
    ComposeCodeableConcept(xml, 'valueCodeableConcept', TFhirCodeableConcept(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirContactPoint) {6} then
    ComposeContactPoint(xml, 'valueContactPoint', TFhirContactPoint(value.value))
  else if (value.value is TFhirCount) {6} then
    ComposeCount(xml, 'valueCount', TFhirCount(value.value))
  else if (value.value is TFhirDistance) {6} then
    ComposeDistance(xml, 'valueDistance', TFhirDistance(value.value))
  else if (value.value is TFhirDuration) {6} then
    ComposeDuration(xml, 'valueDuration', TFhirDuration(value.value))
  else if (value.value is TFhirHumanName) {6} then
    ComposeHumanName(xml, 'valueHumanName', TFhirHumanName(value.value))
  else if (value.value is TFhirIdentifier) {6} then
    ComposeIdentifier(xml, 'valueIdentifier', TFhirIdentifier(value.value))
  else if (value.value is TFhirMoney) {6} then
    ComposeMoney(xml, 'valueMoney', TFhirMoney(value.value))
  else if (value.value is TFhirPeriod) {6} then
    ComposePeriod(xml, 'valuePeriod', TFhirPeriod(value.value))
  else if (value.value is TFhirQuantity) {6} then
    ComposeQuantity(xml, 'valueQuantity', TFhirQuantity(value.value))
  else if (value.value is TFhirRange) {6} then
    ComposeRange(xml, 'valueRange', TFhirRange(value.value))
  else if (value.value is TFhirRatio) {6} then
    ComposeRatio(xml, 'valueRatio', TFhirRatio(value.value))
  else if (value.value is TFhirReference) {6} then
    ComposeReference(xml, 'valueReference', TFhirReference(value.value))
  else if (value.value is TFhirSampledData) {6} then
    ComposeSampledData(xml, 'valueSampledData', TFhirSampledData(value.value))
  else if (value.value is TFhirSignature) {6} then
    ComposeSignature(xml, 'valueSignature', TFhirSignature(value.value))
  else if (value.value is TFhirTiming) {6} then
    ComposeTiming(xml, 'valueTiming', TFhirTiming(value.value))
  else if (value.value is TFhirContactDetail) {6} then
    ComposeContactDetail(xml, 'valueContactDetail', TFhirContactDetail(value.value))
  else if (value.value is TFhirContributor) {6} then
    ComposeContributor(xml, 'valueContributor', TFhirContributor(value.value))
  else if (value.value is TFhirDataRequirement) {6} then
    ComposeDataRequirement(xml, 'valueDataRequirement', TFhirDataRequirement(value.value))
  else if (value.value is TFhirExpression) {6} then
    ComposeExpression(xml, 'valueExpression', TFhirExpression(value.value))
  else if (value.value is TFhirParameterDefinition) {6} then
    ComposeParameterDefinition(xml, 'valueParameterDefinition', TFhirParameterDefinition(value.value))
  else if (value.value is TFhirRelatedArtifact) {6} then
    ComposeRelatedArtifact(xml, 'valueRelatedArtifact', TFhirRelatedArtifact(value.value))
  else if (value.value is TFhirTriggerDefinition) {6} then
    ComposeTriggerDefinition(xml, 'valueTriggerDefinition', TFhirTriggerDefinition(value.value))
  else if (value.value is TFhirUsageContext) {6} then
    ComposeUsageContext(xml, 'valueUsageContext', TFhirUsageContext(value.value))
  else if (value.value is TFhirDosage) {6} then
    ComposeDosage(xml, 'valueDosage', TFhirDosage(value.value))
  else if (value.value is TFhirMeta) {6} then
    ComposeMeta(xml, 'valueMeta', TFhirMeta(value.value))
  else if (value.value is TFhirBase64Binary) {6} then
    ComposeBase64Binary(xml, 'valueBase64Binary', TFhirBase64Binary(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDate) {6} then
    ComposeDate(xml, 'valueDate', TFhirDate(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (value.value is TFhirInstant) {6} then
    ComposeInstant(xml, 'valueInstant', TFhirInstant(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirInteger64) {6} then
    ComposeInteger64(xml, 'valueInteger64', TFhirInteger64(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirTime) {6} then
    ComposeTime(xml, 'valueTime', TFhirTime(value.value))
  else if (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value));
end;

function TFHIRXmlParser.ParseTask(element : TMXmlElement; path : string) : TFhirTask;
var
  child : TMXmlElement;
begin
  result := TFhirTask.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTaskChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTaskChild(value : TFhirTask; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'instantiatesCanonical') then
        value.instantiatesCanonicalElement := ParseCanonical(child, path+'/instantiatesCanonical') {L737}
      else if (child.localName = 'instantiatesUri') then
        value.instantiatesUriElement := ParseUri(child, path+'/instantiatesUri') {L737}
      else if (child.localName = 'basedOn') then
        value.basedOnList.Add(ParseReference(child, path+'/basedOn')) {L631}
      else if (child.localName = 'groupIdentifier') then
        value.groupIdentifier := ParseIdentifier(child, path+'/groupIdentifier') {L740}
      else if (child.localName = 'partOf') then
        value.partOfList.Add(ParseReference(child, path+'/partOf')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirTaskStatusEnum, SYSTEMS_TFhirTaskStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusReason') then
        value.statusReason := ParseCodeableConcept(child, path+'/statusReason') {L740}
      else if (child.localName = 'businessStatus') then
        value.businessStatus := ParseCodeableConcept(child, path+'/businessStatus') {L740}
      else if (child.localName = 'intent') then
        value.intentElement := ParseEnum(CODES_TFhirTaskIntentEnum, SYSTEMS_TFhirTaskIntentEnum, child, path+'/intent') {L734}
      else if (child.localName = 'priority') then
        value.priorityElement := ParseEnum(CODES_TFhirRequestPriorityEnum, SYSTEMS_TFhirRequestPriorityEnum, child, path+'/priority') {L734}
      else if (child.localName = 'code') then
        value.code := ParseCodeableConcept(child, path+'/code') {L740}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'focus') then
        value.focus := ParseReference(child, path+'/focus') {L740}
      else if (child.localName = 'for') then
        value.for_ := ParseReference(child, path+'/for') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'executionPeriod') then
        value.executionPeriod := ParsePeriod(child, path+'/executionPeriod') {L740}
      else if (child.localName = 'authoredOn') then
        value.authoredOnElement := ParseDateTime(child, path+'/authoredOn') {L737}
      else if (child.localName = 'lastModified') then
        value.lastModifiedElement := ParseDateTime(child, path+'/lastModified') {L737}
      else if (child.localName = 'requester') then
        value.requester := ParseReference(child, path+'/requester') {L740}
      else if (child.localName = 'performerType') then
        value.performerTypeList.Add(ParseCodeableConcept(child, path+'/performerType')) {L631}
      else if (child.localName = 'owner') then
        value.owner := ParseReference(child, path+'/owner') {L740}
      else if (child.localName = 'location') then
        value.location := ParseReference(child, path+'/location') {L740}
      else if (child.localName = 'reasonCode') then
        value.reasonCode := ParseCodeableConcept(child, path+'/reasonCode') {L740}
      else if (child.localName = 'reasonReference') then
        value.reasonReference := ParseReference(child, path+'/reasonReference') {L740}
      else if (child.localName = 'insurance') then
        value.insuranceList.Add(ParseReference(child, path+'/insurance')) {L631}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if (child.localName = 'relevantHistory') then
        value.relevantHistoryList.Add(ParseReference(child, path+'/relevantHistory')) {L631}
      else if (child.localName = 'restriction') then
        value.restriction := ParseTaskRestriction(child, path+'/restriction') {L740}
      else if (child.localName = 'input') then
        value.inputList.Add(ParseTaskInput(child, path+'/input')) {L631}
      else if (child.localName = 'output') then
        value.outputList.Add(ParseTaskOutput(child, path+'/output')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTask(xml : TXmlBuilder; name : String; value : TFhirTask);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTaskChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTaskChildren(xml : TXmlBuilder; value : TFhirTask);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCanonical(xml, 'instantiatesCanonical', value.instantiatesCanonicalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'instantiatesUri', value.instantiatesUriElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.basedOnList.Count - 1 do
      ComposeReference(xml, 'basedOn', value.basedOnList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'groupIdentifier', value.groupIdentifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.partOfList.Count - 1 do
      ComposeReference(xml, 'partOf', value.partOfList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirTaskStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'statusReason', value.statusReason); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'businessStatus', value.businessStatus); {L741}
  ComposeEnum(xml, 'intent', value.intentElement, CODES_TFhirTaskIntentEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'priority', value.priorityElement, CODES_TFhirRequestPriorityEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'code', value.code); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'focus', value.focus); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'for', value.for_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposePeriod(xml, 'executionPeriod', value.executionPeriod); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'authoredOn', value.authoredOnElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'lastModified', value.lastModifiedElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'requester', value.requester); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.performerTypeList.Count - 1 do
      ComposeCodeableConcept(xml, 'performerType', value.performerTypeList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'owner', value.owner); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'location', value.location); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'reasonCode', value.reasonCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'reasonReference', value.reasonReference); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.insuranceList.Count - 1 do
      ComposeReference(xml, 'insurance', value.insuranceList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.relevantHistoryList.Count - 1 do
      ComposeReference(xml, 'relevantHistory', value.relevantHistoryList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTaskRestriction(xml, 'restriction', value.restriction); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.inputList.Count - 1 do
      ComposeTaskInput(xml, 'input', value.inputList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.outputList.Count - 1 do
      ComposeTaskOutput(xml, 'output', value.outputList[i]);
end;

{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
function TFHIRXmlParser.ParseTerminologyCapabilitiesSoftware(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesSoftware;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesSoftware.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesSoftwareChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesSoftwareChild(value : TFhirTerminologyCapabilitiesSoftware; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesSoftware(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesSoftware);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesSoftwareChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesSoftwareChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesSoftware);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesImplementation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesImplementation;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesImplementation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesImplementationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesImplementationChild(value : TFhirTerminologyCapabilitiesImplementation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseUrl(child, path+'/url') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesImplementation(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesImplementation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesImplementationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesImplementationChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesImplementation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUrl(xml, 'url', value.urlElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystem(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystem;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesCodeSystem.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesCodeSystemChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemChild(value : TFhirTerminologyCapabilitiesCodeSystem; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'uri') then
        value.uriElement := ParseCanonical(child, path+'/uri') {L737}
      else if (child.localName = 'version') then
        value.versionList.Add(ParseTerminologyCapabilitiesCodeSystemVersion(child, path+'/version')) {L631}
      else if (child.localName = 'subsumption') then
        value.subsumptionElement := ParseBoolean(child, path+'/subsumption') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystem(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesCodeSystem);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesCodeSystemChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesCodeSystem);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCanonical(xml, 'uri', value.uriElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.versionList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersion(xml, 'version', value.versionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'subsumption', value.subsumptionElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersion;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesCodeSystemVersionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersionChild(value : TFhirTerminologyCapabilitiesCodeSystemVersion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseString(child, path+'/code') {L737}
      else if (child.localName = 'isDefault') then
        value.isDefaultElement := ParseBoolean(child, path+'/isDefault') {L737}
      else if (child.localName = 'compositional') then
        value.compositionalElement := ParseBoolean(child, path+'/compositional') {L737}
      else if (child.localName = 'language') then
        value.languageList.Add(ParseCode(child, path+'/language')) {L631}
      else if (child.localName = 'filter') then
        value.filterList.Add(ParseTerminologyCapabilitiesCodeSystemVersionFilter(child, path+'/filter')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseCode(child, path+'/property')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersion(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesCodeSystemVersion);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesCodeSystemVersionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersionChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesCodeSystemVersion);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'isDefault', value.isDefaultElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'compositional', value.compositionalElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.languageList.Count - 1 do
      ComposeCode(xml, 'language', value.languageList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.filterList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystemVersionFilter(xml, 'filter', value.filterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeCode(xml, 'property', value.property_List[i]);
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersionFilter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesCodeSystemVersionFilter;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesCodeSystemVersionFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesCodeSystemVersionFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesCodeSystemVersionFilterChild(value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'op') then
        value.opList.Add(ParseCode(child, path+'/op')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersionFilter(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesCodeSystemVersionFilterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesCodeSystemVersionFilterChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesCodeSystemVersionFilter);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  for i := 0 to value.opList.Count - 1 do
      ComposeCode(xml, 'op', value.opList[i]);
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansion(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansion;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesExpansion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesExpansionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansionChild(value : TFhirTerminologyCapabilitiesExpansion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'hierarchical') then
        value.hierarchicalElement := ParseBoolean(child, path+'/hierarchical') {L737}
      else if (child.localName = 'paging') then
        value.pagingElement := ParseBoolean(child, path+'/paging') {L737}
      else if (child.localName = 'incomplete') then
        value.incompleteElement := ParseBoolean(child, path+'/incomplete') {L737}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseTerminologyCapabilitiesExpansionParameter(child, path+'/parameter')) {L631}
      else if (child.localName = 'textFilter') then
        value.textFilterElement := ParseMarkdown(child, path+'/textFilter') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansion(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesExpansion);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesExpansionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansionChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesExpansion);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'hierarchical', value.hierarchicalElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'paging', value.pagingElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'incomplete', value.incompleteElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeTerminologyCapabilitiesExpansionParameter(xml, 'parameter', value.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'textFilter', value.textFilterElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansionParameter(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesExpansionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesExpansionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesExpansionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesExpansionParameterChild(value : TFhirTerminologyCapabilitiesExpansionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseCode(child, path+'/name') {L737}
      else if (child.localName = 'documentation') then
        value.documentationElement := ParseString(child, path+'/documentation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansionParameter(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesExpansionParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesExpansionParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesExpansionParameterChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesExpansionParameter);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'documentation', value.documentationElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesValidateCode(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesValidateCode;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesValidateCode.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesValidateCodeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesValidateCodeChild(value : TFhirTerminologyCapabilitiesValidateCode; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'translations') then
        value.translationsElement := ParseBoolean(child, path+'/translations') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesValidateCode(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesValidateCode);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesValidateCodeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesValidateCodeChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesValidateCode);
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'translations', value.translationsElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesTranslation(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesTranslation;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesTranslation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesTranslationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesTranslationChild(value : TFhirTerminologyCapabilitiesTranslation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'needsMap') then
        value.needsMapElement := ParseBoolean(child, path+'/needsMap') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesTranslation(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesTranslation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesTranslationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesTranslationChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesTranslation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'needsMap', value.needsMapElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesClosure(element : TMXmlElement; path : string) : TFhirTerminologyCapabilitiesClosure;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilitiesClosure.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesClosureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesClosureChild(value : TFhirTerminologyCapabilitiesClosure; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'translation') then
        value.translationElement := ParseBoolean(child, path+'/translation') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesClosure(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilitiesClosure);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesClosureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesClosureChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilitiesClosure);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'translation', value.translationElement); {L738}
end;

function TFHIRXmlParser.ParseTerminologyCapabilities(element : TMXmlElement; path : string) : TFhirTerminologyCapabilities;
var
  child : TMXmlElement;
begin
  result := TFhirTerminologyCapabilities.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTerminologyCapabilitiesChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTerminologyCapabilitiesChild(value : TFhirTerminologyCapabilities; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'kind') then
        value.kindElement := ParseEnum(CODES_TFhirCapabilityStatementKindEnum, SYSTEMS_TFhirCapabilityStatementKindEnum, child, path+'/kind') {L734}
      else if (child.localName = 'software') then
        value.software := ParseTerminologyCapabilitiesSoftware(child, path+'/software') {L740}
      else if (child.localName = 'implementation') then
        value.implementation_ := ParseTerminologyCapabilitiesImplementation(child, path+'/implementation') {L740}
      else if (child.localName = 'lockedDate') then
        value.lockedDateElement := ParseBoolean(child, path+'/lockedDate') {L737}
      else if (child.localName = 'codeSystem') then
        value.codeSystemList.Add(ParseTerminologyCapabilitiesCodeSystem(child, path+'/codeSystem')) {L631}
      else if (child.localName = 'expansion') then
        value.expansion := ParseTerminologyCapabilitiesExpansion(child, path+'/expansion') {L740}
      else if (child.localName = 'codeSearch') then
        value.codeSearchElement := ParseEnum(CODES_TFhirCodeSearchSupportEnum, SYSTEMS_TFhirCodeSearchSupportEnum, child, path+'/codeSearch') {L734}
      else if (child.localName = 'validateCode') then
        value.validateCode := ParseTerminologyCapabilitiesValidateCode(child, path+'/validateCode') {L740}
      else if (child.localName = 'translation') then
        value.translation := ParseTerminologyCapabilitiesTranslation(child, path+'/translation') {L740}
      else if (child.localName = 'closure') then
        value.closure := ParseTerminologyCapabilitiesClosure(child, path+'/closure') {L740}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilities(xml : TXmlBuilder; name : String; value : TFhirTerminologyCapabilities);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTerminologyCapabilitiesChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTerminologyCapabilitiesChildren(xml : TXmlBuilder; value : TFhirTerminologyCapabilities);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  ComposeEnum(xml, 'kind', value.kindElement, CODES_TFhirCapabilityStatementKindEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTerminologyCapabilitiesSoftware(xml, 'software', value.software); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeTerminologyCapabilitiesImplementation(xml, 'implementation', value.implementation_); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'lockedDate', value.lockedDateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.codeSystemList.Count - 1 do
      ComposeTerminologyCapabilitiesCodeSystem(xml, 'codeSystem', value.codeSystemList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesExpansion(xml, 'expansion', value.expansion); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'codeSearch', value.codeSearchElement, CODES_TFhirCodeSearchSupportEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesValidateCode(xml, 'validateCode', value.validateCode); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesTranslation(xml, 'translation', value.translation); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTerminologyCapabilitiesClosure(xml, 'closure', value.closure); {L741}
end;

{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
function TFHIRXmlParser.ParseTestReportParticipant(element : TMXmlElement; path : string) : TFhirTestReportParticipant;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportParticipant.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportParticipantChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportParticipantChild(value : TFhirTestReportParticipant; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_Element := ParseEnum(CODES_TFhirTestReportParticipantTypeEnum, SYSTEMS_TFhirTestReportParticipantTypeEnum, child, path+'/type') {L734}
      else if (child.localName = 'uri') then
        value.uriElement := ParseUri(child, path+'/uri') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportParticipant(xml : TXmlBuilder; name : String; value : TFhirTestReportParticipant);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportParticipantChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportParticipantChildren(xml : TXmlBuilder; value : TFhirTestReportParticipant);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'type', value.type_Element, CODES_TFhirTestReportParticipantTypeEnum); {L735}
  ComposeUri(xml, 'uri', value.uriElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
end;

function TFHIRXmlParser.ParseTestReportSetup(element : TMXmlElement; path : string) : TFhirTestReportSetup;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupChild(value : TFhirTestReportSetup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        value.actionList.Add(ParseTestReportSetupAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetup(xml : TXmlBuilder; name : String; value : TFhirTestReportSetup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportSetupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupChildren(xml : TXmlBuilder; value : TFhirTestReportSetup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.actionList.Count - 1 do
      ComposeTestReportSetupAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseTestReportSetupAction(element : TMXmlElement; path : string) : TFhirTestReportSetupAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetupAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupActionChild(value : TFhirTestReportSetupAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        value.operation := ParseTestReportSetupActionOperation(child, path+'/operation') {L740}
      else if (child.localName = 'assert') then
        value.assert := ParseTestReportSetupActionAssert(child, path+'/assert') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupAction(xml : TXmlBuilder; name : String; value : TFhirTestReportSetupAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportSetupActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionChildren(xml : TXmlBuilder; value : TFhirTestReportSetupAction);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(xml, 'operation', value.operation); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(xml, 'assert', value.assert); {L741}
end;

function TFHIRXmlParser.ParseTestReportSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestReportSetupActionOperation;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetupActionOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupActionOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupActionOperationChild(value : TFhirTestReportSetupActionOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'result') then
        value.resultElement := ParseEnum(CODES_TFhirTestReportActionResultEnum, SYSTEMS_TFhirTestReportActionResultEnum, child, path+'/result') {L734}
      else if (child.localName = 'message') then
        value.messageElement := ParseMarkdown(child, path+'/message') {L737}
      else if (child.localName = 'detail') then
        value.detailElement := ParseUri(child, path+'/detail') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionOperation(xml : TXmlBuilder; name : String; value : TFhirTestReportSetupActionOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportSetupActionOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionOperationChildren(xml : TXmlBuilder; value : TFhirTestReportSetupActionOperation);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'result', value.resultElement, CODES_TFhirTestReportActionResultEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'message', value.messageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'detail', value.detailElement); {L738}
end;

function TFHIRXmlParser.ParseTestReportSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestReportSetupActionAssert;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportSetupActionAssert.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportSetupActionAssertChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportSetupActionAssertChild(value : TFhirTestReportSetupActionAssert; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'result') then
        value.resultElement := ParseEnum(CODES_TFhirTestReportActionResultEnum, SYSTEMS_TFhirTestReportActionResultEnum, child, path+'/result') {L734}
      else if (child.localName = 'message') then
        value.messageElement := ParseMarkdown(child, path+'/message') {L737}
      else if (child.localName = 'detail') then
        value.detailElement := ParseString(child, path+'/detail') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionAssert(xml : TXmlBuilder; name : String; value : TFhirTestReportSetupActionAssert);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportSetupActionAssertChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportSetupActionAssertChildren(xml : TXmlBuilder; value : TFhirTestReportSetupActionAssert);
begin
  composeBackboneElementChildren(xml, value);
  ComposeEnum(xml, 'result', value.resultElement, CODES_TFhirTestReportActionResultEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'message', value.messageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'detail', value.detailElement); {L738}
end;

function TFHIRXmlParser.ParseTestReportTest(element : TMXmlElement; path : string) : TFhirTestReportTest;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTestChild(value : TFhirTestReportTest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'action') then
        value.actionList.Add(ParseTestReportTestAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTest(xml : TXmlBuilder; name : String; value : TFhirTestReportTest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportTestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportTestChildren(xml : TXmlBuilder; value : TFhirTestReportTest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  for i := 0 to value.actionList.Count - 1 do
      ComposeTestReportTestAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseTestReportTestAction(element : TMXmlElement; path : string) : TFhirTestReportTestAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTestAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTestActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTestActionChild(value : TFhirTestReportTestAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        value.operation := ParseTestReportSetupActionOperation(child, path+'/operation') {L740}
      else if (child.localName = 'assert') then
        value.assert := ParseTestReportSetupActionAssert(child, path+'/assert') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTestAction(xml : TXmlBuilder; name : String; value : TFhirTestReportTestAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportTestActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportTestActionChildren(xml : TXmlBuilder; value : TFhirTestReportTestAction);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionOperation(xml, 'operation', value.operation); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetupActionAssert(xml, 'assert', value.assert); {L741}
end;

function TFHIRXmlParser.ParseTestReportTeardown(element : TMXmlElement; path : string) : TFhirTestReportTeardown;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTeardown.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTeardownChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTeardownChild(value : TFhirTestReportTeardown; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        value.actionList.Add(ParseTestReportTeardownAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardown(xml : TXmlBuilder; name : String; value : TFhirTestReportTeardown);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportTeardownChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardownChildren(xml : TXmlBuilder; value : TFhirTestReportTeardown);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.actionList.Count - 1 do
      ComposeTestReportTeardownAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseTestReportTeardownAction(element : TMXmlElement; path : string) : TFhirTestReportTeardownAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestReportTeardownAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportTeardownActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportTeardownActionChild(value : TFhirTestReportTeardownAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        value.operation := ParseTestReportSetupActionOperation(child, path+'/operation') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardownAction(xml : TXmlBuilder; name : String; value : TFhirTestReportTeardownAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportTeardownActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportTeardownActionChildren(xml : TXmlBuilder; value : TFhirTestReportTeardownAction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeTestReportSetupActionOperation(xml, 'operation', value.operation); {L741}
end;

function TFHIRXmlParser.ParseTestReport(element : TMXmlElement; path : string) : TFhirTestReport;
var
  child : TMXmlElement;
begin
  result := TFhirTestReport.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestReportChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestReportChild(value : TFhirTestReport; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirTestReportStatusEnum, SYSTEMS_TFhirTestReportStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'testScript') then
        value.testScript := ParseReference(child, path+'/testScript') {L740}
      else if (child.localName = 'result') then
        value.resultElement := ParseEnum(CODES_TFhirTestReportResultEnum, SYSTEMS_TFhirTestReportResultEnum, child, path+'/result') {L734}
      else if (child.localName = 'score') then
        value.scoreElement := ParseDecimal(child, path+'/score') {L737}
      else if (child.localName = 'tester') then
        value.testerElement := ParseString(child, path+'/tester') {L737}
      else if (child.localName = 'issued') then
        value.issuedElement := ParseDateTime(child, path+'/issued') {L737}
      else if (child.localName = 'participant') then
        value.participantList.Add(ParseTestReportParticipant(child, path+'/participant')) {L631}
      else if (child.localName = 'setup') then
        value.setup := ParseTestReportSetup(child, path+'/setup') {L740}
      else if (child.localName = 'test') then
        value.testList.Add(ParseTestReportTest(child, path+'/test')) {L631}
      else if (child.localName = 'teardown') then
        value.teardown := ParseTestReportTeardown(child, path+'/teardown') {L740}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestReport(xml : TXmlBuilder; name : String; value : TFhirTestReport);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestReportChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestReportChildren(xml : TXmlBuilder; value : TFhirTestReport);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirTestReportStatusEnum); {L735}
  ComposeReference(xml, 'testScript', value.testScript); {L741}
  ComposeEnum(xml, 'result', value.resultElement, CODES_TFhirTestReportResultEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDecimal(xml, 'score', value.scoreElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'tester', value.testerElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'issued', value.issuedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.participantList.Count - 1 do
      ComposeTestReportParticipant(xml, 'participant', value.participantList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportSetup(xml, 'setup', value.setup); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.testList.Count - 1 do
      ComposeTestReportTest(xml, 'test', value.testList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestReportTeardown(xml, 'teardown', value.teardown); {L741}
end;

{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
function TFHIRXmlParser.ParseTestScriptOrigin(element : TMXmlElement; path : string) : TFhirTestScriptOrigin;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptOrigin.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptOriginChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptOriginChild(value : TFhirTestScriptOrigin; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'index') then
        value.indexElement := ParseInteger(child, path+'/index') {L737}
      else if (child.localName = 'profile') then
        value.profile := ParseCoding(child, path+'/profile') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptOrigin(xml : TXmlBuilder; name : String; value : TFhirTestScriptOrigin);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptOriginChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptOriginChildren(xml : TXmlBuilder; value : TFhirTestScriptOrigin);
begin
  composeBackboneElementChildren(xml, value);
  ComposeInteger(xml, 'index', value.indexElement); {L738}
  ComposeCoding(xml, 'profile', value.profile); {L741}
end;

function TFHIRXmlParser.ParseTestScriptDestination(element : TMXmlElement; path : string) : TFhirTestScriptDestination;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptDestination.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptDestinationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptDestinationChild(value : TFhirTestScriptDestination; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'index') then
        value.indexElement := ParseInteger(child, path+'/index') {L737}
      else if (child.localName = 'profile') then
        value.profile := ParseCoding(child, path+'/profile') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptDestination(xml : TXmlBuilder; name : String; value : TFhirTestScriptDestination);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptDestinationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptDestinationChildren(xml : TXmlBuilder; value : TFhirTestScriptDestination);
begin
  composeBackboneElementChildren(xml, value);
  ComposeInteger(xml, 'index', value.indexElement); {L738}
  ComposeCoding(xml, 'profile', value.profile); {L741}
end;

function TFHIRXmlParser.ParseTestScriptMetadata(element : TMXmlElement; path : string) : TFhirTestScriptMetadata;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptMetadata.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptMetadataChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptMetadataChild(value : TFhirTestScriptMetadata; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'link') then
        value.link_List.Add(ParseTestScriptMetadataLink(child, path+'/link')) {L631}
      else if (child.localName = 'capability') then
        value.capabilityList.Add(ParseTestScriptMetadataCapability(child, path+'/capability')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadata(xml : TXmlBuilder; name : String; value : TFhirTestScriptMetadata);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptMetadataChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataChildren(xml : TXmlBuilder; value : TFhirTestScriptMetadata);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposeTestScriptMetadataLink(xml, 'link', value.link_List[i]);
  for i := 0 to value.capabilityList.Count - 1 do
      ComposeTestScriptMetadataCapability(xml, 'capability', value.capabilityList[i]);
end;

function TFHIRXmlParser.ParseTestScriptMetadataLink(element : TMXmlElement; path : string) : TFhirTestScriptMetadataLink;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptMetadataLink.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptMetadataLinkChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptMetadataLinkChild(value : TFhirTestScriptMetadataLink; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataLink(xml : TXmlBuilder; name : String; value : TFhirTestScriptMetadataLink);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptMetadataLinkChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataLinkChildren(xml : TXmlBuilder; value : TFhirTestScriptMetadataLink);
begin
  composeBackboneElementChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
end;

function TFHIRXmlParser.ParseTestScriptMetadataCapability(element : TMXmlElement; path : string) : TFhirTestScriptMetadataCapability;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptMetadataCapability.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptMetadataCapabilityChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptMetadataCapabilityChild(value : TFhirTestScriptMetadataCapability; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'required') then
        value.requiredElement := ParseBoolean(child, path+'/required') {L737}
      else if (child.localName = 'validated') then
        value.validatedElement := ParseBoolean(child, path+'/validated') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'origin') then
        value.originList.Add(ParseInteger(child, path+'/origin')) {L631}
      else if (child.localName = 'destination') then
        value.destinationElement := ParseInteger(child, path+'/destination') {L737}
      else if (child.localName = 'link') then
        value.link_List.Add(ParseUri(child, path+'/link')) {L631}
      else if (child.localName = 'capabilities') then
        value.capabilitiesElement := ParseCanonical(child, path+'/capabilities') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataCapability(xml : TXmlBuilder; name : String; value : TFhirTestScriptMetadataCapability);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptMetadataCapabilityChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptMetadataCapabilityChildren(xml : TXmlBuilder; value : TFhirTestScriptMetadataCapability);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'required', value.requiredElement); {L738}
  ComposeBoolean(xml, 'validated', value.validatedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.originList.Count - 1 do
      ComposeInteger(xml, 'origin', value.originList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'destination', value.destinationElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.link_List.Count - 1 do
      ComposeUri(xml, 'link', value.link_List[i]);
  ComposeCanonical(xml, 'capabilities', value.capabilitiesElement); {L738}
end;

function TFHIRXmlParser.ParseTestScriptFixture(element : TMXmlElement; path : string) : TFhirTestScriptFixture;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptFixture.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptFixtureChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptFixtureChild(value : TFhirTestScriptFixture; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'autocreate') then
        value.autocreateElement := ParseBoolean(child, path+'/autocreate') {L737}
      else if (child.localName = 'autodelete') then
        value.autodeleteElement := ParseBoolean(child, path+'/autodelete') {L737}
      else if (child.localName = 'resource') then
        value.resource := ParseReference(child, path+'/resource') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptFixture(xml : TXmlBuilder; name : String; value : TFhirTestScriptFixture);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptFixtureChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptFixtureChildren(xml : TXmlBuilder; value : TFhirTestScriptFixture);
begin
  composeBackboneElementChildren(xml, value);
  ComposeBoolean(xml, 'autocreate', value.autocreateElement); {L738}
  ComposeBoolean(xml, 'autodelete', value.autodeleteElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'resource', value.resource); {L741}
end;

function TFHIRXmlParser.ParseTestScriptVariable(element : TMXmlElement; path : string) : TFhirTestScriptVariable;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptVariable.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptVariableChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptVariableChild(value : TFhirTestScriptVariable; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'defaultValue') then
        value.defaultValueElement := ParseString(child, path+'/defaultValue') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if (child.localName = 'headerField') then
        value.headerFieldElement := ParseString(child, path+'/headerField') {L737}
      else if (child.localName = 'hint') then
        value.hintElement := ParseString(child, path+'/hint') {L737}
      else if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'sourceId') then
        value.sourceIdElement := ParseId(child, path+'/sourceId') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptVariable(xml : TXmlBuilder; name : String; value : TFhirTestScriptVariable);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptVariableChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptVariableChildren(xml : TXmlBuilder; value : TFhirTestScriptVariable);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'defaultValue', value.defaultValueElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'headerField', value.headerFieldElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'hint', value.hintElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'sourceId', value.sourceIdElement); {L738}
end;

function TFHIRXmlParser.ParseTestScriptSetup(element : TMXmlElement; path : string) : TFhirTestScriptSetup;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetup.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupChild(value : TFhirTestScriptSetup; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        value.actionList.Add(ParseTestScriptSetupAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetup(xml : TXmlBuilder; name : String; value : TFhirTestScriptSetup);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptSetupChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupChildren(xml : TXmlBuilder; value : TFhirTestScriptSetup);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.actionList.Count - 1 do
      ComposeTestScriptSetupAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseTestScriptSetupAction(element : TMXmlElement; path : string) : TFhirTestScriptSetupAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionChild(value : TFhirTestScriptSetupAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        value.operation := ParseTestScriptSetupActionOperation(child, path+'/operation') {L740}
      else if (child.localName = 'assert') then
        value.assert := ParseTestScriptSetupActionAssert(child, path+'/assert') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupAction(xml : TXmlBuilder; name : String; value : TFhirTestScriptSetupAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptSetupActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupAction);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(xml, 'operation', value.operation); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(xml, 'assert', value.assert); {L741}
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperation(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperation;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupActionOperation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionOperationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperationChild(value : TFhirTestScriptSetupActionOperation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'type') then
        value.type_ := ParseCoding(child, path+'/type') {L740}
      else if (child.localName = 'resource') then
        value.resourceElement := ParseEnum(CODES_TFhirFHIRDefinedTypeEnum, SYSTEMS_TFhirFHIRDefinedTypeEnum, child, path+'/resource') {L734}
      else if (child.localName = 'label') then
        value.label_Element := ParseString(child, path+'/label') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'accept') then
        value.acceptElement := ParseCode(child, path+'/accept') {L737}
      else if (child.localName = 'contentType') then
        value.contentTypeElement := ParseCode(child, path+'/contentType') {L737}
      else if (child.localName = 'destination') then
        value.destinationElement := ParseInteger(child, path+'/destination') {L737}
      else if (child.localName = 'encodeRequestUrl') then
        value.encodeRequestUrlElement := ParseBoolean(child, path+'/encodeRequestUrl') {L737}
      else if (child.localName = 'method') then
        value.methodElement := ParseEnum(CODES_TFhirTestScriptRequestMethodCodeEnum, SYSTEMS_TFhirTestScriptRequestMethodCodeEnum, child, path+'/method') {L734}
      else if (child.localName = 'origin') then
        value.originElement := ParseInteger(child, path+'/origin') {L737}
      else if (child.localName = 'params') then
        value.paramsElement := ParseString(child, path+'/params') {L737}
      else if (child.localName = 'requestHeader') then
        value.requestHeaderList.Add(ParseTestScriptSetupActionOperationRequestHeader(child, path+'/requestHeader')) {L631}
      else if (child.localName = 'requestId') then
        value.requestIdElement := ParseId(child, path+'/requestId') {L737}
      else if (child.localName = 'responseId') then
        value.responseIdElement := ParseId(child, path+'/responseId') {L737}
      else if (child.localName = 'sourceId') then
        value.sourceIdElement := ParseId(child, path+'/sourceId') {L737}
      else if (child.localName = 'targetId') then
        value.targetIdElement := ParseId(child, path+'/targetId') {L737}
      else if (child.localName = 'url') then
        value.urlElement := ParseString(child, path+'/url') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperation(xml : TXmlBuilder; name : String; value : TFhirTestScriptSetupActionOperation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptSetupActionOperationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperationChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupActionOperation);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'type', value.type_); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'resource', value.resourceElement, CODES_TFhirFHIRDefinedTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'label', value.label_Element); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'accept', value.acceptElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'contentType', value.contentTypeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'destination', value.destinationElement); {L738}
  ComposeBoolean(xml, 'encodeRequestUrl', value.encodeRequestUrlElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'method', value.methodElement, CODES_TFhirTestScriptRequestMethodCodeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'origin', value.originElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'params', value.paramsElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.requestHeaderList.Count - 1 do
      ComposeTestScriptSetupActionOperationRequestHeader(xml, 'requestHeader', value.requestHeaderList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'requestId', value.requestIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'responseId', value.responseIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'sourceId', value.sourceIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'targetId', value.targetIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'url', value.urlElement); {L738}
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperationRequestHeader(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionOperationRequestHeader;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupActionOperationRequestHeader.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionOperationRequestHeaderChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionOperationRequestHeaderChild(value : TFhirTestScriptSetupActionOperationRequestHeader; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'field') then
        value.fieldElement := ParseString(child, path+'/field') {L737}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperationRequestHeader(xml : TXmlBuilder; name : String; value : TFhirTestScriptSetupActionOperationRequestHeader);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptSetupActionOperationRequestHeaderChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionOperationRequestHeaderChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupActionOperationRequestHeader);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'field', value.fieldElement); {L738}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseTestScriptSetupActionAssert(element : TMXmlElement; path : string) : TFhirTestScriptSetupActionAssert;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptSetupActionAssert.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptSetupActionAssertChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptSetupActionAssertChild(value : TFhirTestScriptSetupActionAssert; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'label') then
        value.label_Element := ParseString(child, path+'/label') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'direction') then
        value.directionElement := ParseEnum(CODES_TFhirAssertionDirectionTypeEnum, SYSTEMS_TFhirAssertionDirectionTypeEnum, child, path+'/direction') {L734}
      else if (child.localName = 'compareToSourceId') then
        value.compareToSourceIdElement := ParseString(child, path+'/compareToSourceId') {L737}
      else if (child.localName = 'compareToSourceExpression') then
        value.compareToSourceExpressionElement := ParseString(child, path+'/compareToSourceExpression') {L737}
      else if (child.localName = 'compareToSourcePath') then
        value.compareToSourcePathElement := ParseString(child, path+'/compareToSourcePath') {L737}
      else if (child.localName = 'contentType') then
        value.contentTypeElement := ParseCode(child, path+'/contentType') {L737}
      else if (child.localName = 'expression') then
        value.expressionElement := ParseString(child, path+'/expression') {L737}
      else if (child.localName = 'headerField') then
        value.headerFieldElement := ParseString(child, path+'/headerField') {L737}
      else if (child.localName = 'minimumId') then
        value.minimumIdElement := ParseString(child, path+'/minimumId') {L737}
      else if (child.localName = 'navigationLinks') then
        value.navigationLinksElement := ParseBoolean(child, path+'/navigationLinks') {L737}
      else if (child.localName = 'operator') then
        value.operatorElement := ParseEnum(CODES_TFhirAssertionOperatorTypeEnum, SYSTEMS_TFhirAssertionOperatorTypeEnum, child, path+'/operator') {L734}
      else if (child.localName = 'path') then
        value.pathElement := ParseString(child, path+'/path') {L737}
      else if (child.localName = 'requestMethod') then
        value.requestMethodElement := ParseEnum(CODES_TFhirTestScriptRequestMethodCodeEnum, SYSTEMS_TFhirTestScriptRequestMethodCodeEnum, child, path+'/requestMethod') {L734}
      else if (child.localName = 'requestURL') then
        value.requestURLElement := ParseString(child, path+'/requestURL') {L737}
      else if (child.localName = 'resource') then
        value.resourceElement := ParseEnum(CODES_TFhirFHIRDefinedTypeEnum, SYSTEMS_TFhirFHIRDefinedTypeEnum, child, path+'/resource') {L734}
      else if (child.localName = 'response') then
        value.responseElement := ParseEnum(CODES_TFhirAssertionResponseTypesEnum, SYSTEMS_TFhirAssertionResponseTypesEnum, child, path+'/response') {L734}
      else if (child.localName = 'responseCode') then
        value.responseCodeElement := ParseString(child, path+'/responseCode') {L737}
      else if (child.localName = 'sourceId') then
        value.sourceIdElement := ParseId(child, path+'/sourceId') {L737}
      else if (child.localName = 'validateProfileId') then
        value.validateProfileIdElement := ParseId(child, path+'/validateProfileId') {L737}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if (child.localName = 'warningOnly') then
        value.warningOnlyElement := ParseBoolean(child, path+'/warningOnly') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionAssert(xml : TXmlBuilder; name : String; value : TFhirTestScriptSetupActionAssert);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptSetupActionAssertChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptSetupActionAssertChildren(xml : TXmlBuilder; value : TFhirTestScriptSetupActionAssert);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'label', value.label_Element); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'direction', value.directionElement, CODES_TFhirAssertionDirectionTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'compareToSourceId', value.compareToSourceIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'compareToSourceExpression', value.compareToSourceExpressionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'compareToSourcePath', value.compareToSourcePathElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'contentType', value.contentTypeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'expression', value.expressionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'headerField', value.headerFieldElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'minimumId', value.minimumIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'navigationLinks', value.navigationLinksElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'operator', value.operatorElement, CODES_TFhirAssertionOperatorTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'path', value.pathElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'requestMethod', value.requestMethodElement, CODES_TFhirTestScriptRequestMethodCodeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'requestURL', value.requestURLElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'resource', value.resourceElement, CODES_TFhirFHIRDefinedTypeEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeEnum(xml, 'response', value.responseElement, CODES_TFhirAssertionResponseTypesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'responseCode', value.responseCodeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'sourceId', value.sourceIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeId(xml, 'validateProfileId', value.validateProfileIdElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'value', value.valueElement); {L738}
  ComposeBoolean(xml, 'warningOnly', value.warningOnlyElement); {L738}
end;

function TFHIRXmlParser.ParseTestScriptTest(element : TMXmlElement; path : string) : TFhirTestScriptTest;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTest.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTestChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTestChild(value : TFhirTestScriptTest; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseString(child, path+'/description') {L737}
      else if (child.localName = 'action') then
        value.actionList.Add(ParseTestScriptTestAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTest(xml : TXmlBuilder; name : String; value : TFhirTestScriptTest);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptTestChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTestChildren(xml : TXmlBuilder; value : TFhirTestScriptTest);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'description', value.descriptionElement); {L738}
  for i := 0 to value.actionList.Count - 1 do
      ComposeTestScriptTestAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseTestScriptTestAction(element : TMXmlElement; path : string) : TFhirTestScriptTestAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTestAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTestActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTestActionChild(value : TFhirTestScriptTestAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        value.operation := ParseTestScriptSetupActionOperation(child, path+'/operation') {L740}
      else if (child.localName = 'assert') then
        value.assert := ParseTestScriptSetupActionAssert(child, path+'/assert') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTestAction(xml : TXmlBuilder; name : String; value : TFhirTestScriptTestAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptTestActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTestActionChildren(xml : TXmlBuilder; value : TFhirTestScriptTestAction);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionOperation(xml, 'operation', value.operation); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetupActionAssert(xml, 'assert', value.assert); {L741}
end;

function TFHIRXmlParser.ParseTestScriptTeardown(element : TMXmlElement; path : string) : TFhirTestScriptTeardown;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTeardown.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTeardownChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTeardownChild(value : TFhirTestScriptTeardown; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'action') then
        value.actionList.Add(ParseTestScriptTeardownAction(child, path+'/action')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardown(xml : TXmlBuilder; name : String; value : TFhirTestScriptTeardown);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptTeardownChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardownChildren(xml : TXmlBuilder; value : TFhirTestScriptTeardown);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  for i := 0 to value.actionList.Count - 1 do
      ComposeTestScriptTeardownAction(xml, 'action', value.actionList[i]);
end;

function TFHIRXmlParser.ParseTestScriptTeardownAction(element : TMXmlElement; path : string) : TFhirTestScriptTeardownAction;
var
  child : TMXmlElement;
begin
  result := TFhirTestScriptTeardownAction.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptTeardownActionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptTeardownActionChild(value : TFhirTestScriptTeardownAction; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'operation') then
        value.operation := ParseTestScriptSetupActionOperation(child, path+'/operation') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardownAction(xml : TXmlBuilder; name : String; value : TFhirTestScriptTeardownAction);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptTeardownActionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptTeardownActionChildren(xml : TXmlBuilder; value : TFhirTestScriptTeardownAction);
begin
  composeBackboneElementChildren(xml, value);
  ComposeTestScriptSetupActionOperation(xml, 'operation', value.operation); {L741}
end;

function TFHIRXmlParser.ParseTestScript(element : TMXmlElement; path : string) : TFhirTestScript;
var
  child : TMXmlElement;
begin
  result := TFhirTestScript.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseTestScriptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseTestScriptChild(value : TFhirTestScript; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifier := ParseIdentifier(child, path+'/identifier') {L740}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'origin') then
        value.originList.Add(ParseTestScriptOrigin(child, path+'/origin')) {L631}
      else if (child.localName = 'destination') then
        value.destinationList.Add(ParseTestScriptDestination(child, path+'/destination')) {L631}
      else if (child.localName = 'metadata') then
        value.metadata := ParseTestScriptMetadata(child, path+'/metadata') {L740}
      else if (child.localName = 'fixture') then
        value.fixtureList.Add(ParseTestScriptFixture(child, path+'/fixture')) {L631}
      else if (child.localName = 'profile') then
        value.profileList.Add(ParseReference(child, path+'/profile')) {L631}
      else if (child.localName = 'variable') then
        value.variableList.Add(ParseTestScriptVariable(child, path+'/variable')) {L631}
      else if (child.localName = 'setup') then
        value.setup := ParseTestScriptSetup(child, path+'/setup') {L740}
      else if (child.localName = 'test') then
        value.testList.Add(ParseTestScriptTest(child, path+'/test')) {L631}
      else if (child.localName = 'teardown') then
        value.teardown := ParseTestScriptTeardown(child, path+'/teardown') {L740}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeTestScript(xml : TXmlBuilder; name : String; value : TFhirTestScript);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeTestScriptChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeTestScriptChildren(xml : TXmlBuilder; value : TFhirTestScript);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeIdentifier(xml, 'identifier', value.identifier); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.originList.Count - 1 do
      ComposeTestScriptOrigin(xml, 'origin', value.originList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.destinationList.Count - 1 do
      ComposeTestScriptDestination(xml, 'destination', value.destinationList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptMetadata(xml, 'metadata', value.metadata); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.fixtureList.Count - 1 do
      ComposeTestScriptFixture(xml, 'fixture', value.fixtureList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.profileList.Count - 1 do
      ComposeReference(xml, 'profile', value.profileList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.variableList.Count - 1 do
      ComposeTestScriptVariable(xml, 'variable', value.variableList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptSetup(xml, 'setup', value.setup); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.testList.Count - 1 do
      ComposeTestScriptTest(xml, 'test', value.testList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTestScriptTeardown(xml, 'teardown', value.teardown); {L741}
end;

{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
function TFHIRXmlParser.ParseValueSetCompose(element : TMXmlElement; path : string) : TFhirValueSetCompose;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetCompose.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeChild(value : TFhirValueSetCompose; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'lockedDate') then
        value.lockedDateElement := ParseDate(child, path+'/lockedDate') {L737}
      else if (child.localName = 'inactive') then
        value.inactiveElement := ParseBoolean(child, path+'/inactive') {L737}
      else if (child.localName = 'include') then
        value.includeList.Add(ParseValueSetComposeInclude(child, path+'/include')) {L631}
      else if (child.localName = 'exclude') then
        value.excludeList.Add(ParseValueSetComposeInclude(child, path+'/exclude')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseString(child, path+'/property')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetCompose(xml : TXmlBuilder; name : String; value : TFhirValueSetCompose);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetComposeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeChildren(xml : TXmlBuilder; value : TFhirValueSetCompose);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'lockedDate', value.lockedDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'inactive', value.inactiveElement); {L738}
  for i := 0 to value.includeList.Count - 1 do
      ComposeValueSetComposeInclude(xml, 'include', value.includeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.excludeList.Count - 1 do
      ComposeValueSetComposeInclude(xml, 'exclude', value.excludeList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeString(xml, 'property', value.property_List[i]);
end;

function TFHIRXmlParser.ParseValueSetComposeInclude(element : TMXmlElement; path : string) : TFhirValueSetComposeInclude;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeInclude.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeChild(value : TFhirValueSetComposeInclude; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        value.systemElement := ParseUri(child, path+'/system') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'concept') then
        value.conceptList.Add(ParseValueSetComposeIncludeConcept(child, path+'/concept')) {L631}
      else if (child.localName = 'filter') then
        value.filterList.Add(ParseValueSetComposeIncludeFilter(child, path+'/filter')) {L631}
      else if (child.localName = 'valueSet') then
        value.valueSetList.Add(ParseCanonical(child, path+'/valueSet')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeInclude(xml : TXmlBuilder; name : String; value : TFhirValueSetComposeInclude);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetComposeIncludeChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeChildren(xml : TXmlBuilder; value : TFhirValueSetComposeInclude);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'system', value.systemElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.conceptList.Count - 1 do
      ComposeValueSetComposeIncludeConcept(xml, 'concept', value.conceptList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.filterList.Count - 1 do
      ComposeValueSetComposeIncludeFilter(xml, 'filter', value.filterList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.valueSetList.Count - 1 do
      ComposeCanonical(xml, 'valueSet', value.valueSetList[i]);
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConcept(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConcept;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeIncludeConcept.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeConceptChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConceptChild(value : TFhirValueSetComposeIncludeConcept; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'designation') then
        value.designationList.Add(ParseValueSetComposeIncludeConceptDesignation(child, path+'/designation')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConcept(xml : TXmlBuilder; name : String; value : TFhirValueSetComposeIncludeConcept);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetComposeIncludeConceptChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConceptChildren(xml : TXmlBuilder; value : TFhirValueSetComposeIncludeConcept);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(xml, 'designation', value.designationList[i]);
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConceptDesignation(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeConceptDesignation;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeIncludeConceptDesignation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeConceptDesignationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeConceptDesignationChild(value : TFhirValueSetComposeIncludeConceptDesignation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'language') then
        value.languageElement := ParseCode(child, path+'/language') {L737}
      else if (child.localName = 'use') then
        value.use := ParseCoding(child, path+'/use') {L740}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConceptDesignation(xml : TXmlBuilder; name : String; value : TFhirValueSetComposeIncludeConceptDesignation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetComposeIncludeConceptDesignationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeConceptDesignationChildren(xml : TXmlBuilder; value : TFhirValueSetComposeIncludeConceptDesignation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'language', value.languageElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCoding(xml, 'use', value.use); {L741}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeFilter(element : TMXmlElement; path : string) : TFhirValueSetComposeIncludeFilter;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetComposeIncludeFilter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetComposeIncludeFilterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetComposeIncludeFilterChild(value : TFhirValueSetComposeIncludeFilter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'property') then
        value.property_Element := ParseCode(child, path+'/property') {L737}
      else if (child.localName = 'op') then
        value.opElement := ParseEnum(CODES_TFhirFilterOperatorEnum, SYSTEMS_TFhirFilterOperatorEnum, child, path+'/op') {L734}
      else if (child.localName = 'value') then
        value.valueElement := ParseString(child, path+'/value') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeFilter(xml : TXmlBuilder; name : String; value : TFhirValueSetComposeIncludeFilter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetComposeIncludeFilterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetComposeIncludeFilterChildren(xml : TXmlBuilder; value : TFhirValueSetComposeIncludeFilter);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'property', value.property_Element); {L738}
  ComposeEnum(xml, 'op', value.opElement, CODES_TFhirFilterOperatorEnum); {L735}
  ComposeString(xml, 'value', value.valueElement); {L738}
end;

function TFHIRXmlParser.ParseValueSetExpansion(element : TMXmlElement; path : string) : TFhirValueSetExpansion;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansion.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionChild(value : TFhirValueSetExpansion; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierElement := ParseUri(child, path+'/identifier') {L737}
      else if (child.localName = 'timestamp') then
        value.timestampElement := ParseDateTime(child, path+'/timestamp') {L737}
      else if (child.localName = 'total') then
        value.totalElement := ParseInteger(child, path+'/total') {L737}
      else if (child.localName = 'offset') then
        value.offsetElement := ParseInteger(child, path+'/offset') {L737}
      else if (child.localName = 'parameter') then
        value.parameterList.Add(ParseValueSetExpansionParameter(child, path+'/parameter')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseValueSetExpansionProperty(child, path+'/property')) {L631}
      else if (child.localName = 'contains') then
        value.containsList.Add(ParseValueSetExpansionContains(child, path+'/contains')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansion(xml : TXmlBuilder; name : String; value : TFhirValueSetExpansion);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetExpansionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionChildren(xml : TXmlBuilder; value : TFhirValueSetExpansion);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'identifier', value.identifierElement); {L738}
  ComposeDateTime(xml, 'timestamp', value.timestampElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'total', value.totalElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'offset', value.offsetElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.parameterList.Count - 1 do
      ComposeValueSetExpansionParameter(xml, 'parameter', value.parameterList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeValueSetExpansionProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.containsList.Count - 1 do
      ComposeValueSetExpansionContains(xml, 'contains', value.containsList[i]);
end;

function TFHIRXmlParser.ParseValueSetExpansionParameter(element : TMXmlElement; path : string) : TFhirValueSetExpansionParameter;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansionParameter.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionParameterChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionParameterChild(value : TFhirValueSetExpansionParameter; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if (child.localName = 'valueUri') then
        value.value := ParseUri(child, path+'/valueUri') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionParameter(xml : TXmlBuilder; name : String; value : TFhirValueSetExpansionParameter);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetExpansionParameterChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionParameterChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionParameter);
begin
  composeBackboneElementChildren(xml, value);
  ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soData]) and (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirUri) {6} then
    ComposeUri(xml, 'valueUri', TFhirUri(value.value))
  else if (SummaryOption in [soFull, soData]) and (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value));
end;

function TFHIRXmlParser.ParseValueSetExpansionProperty(element : TMXmlElement; path : string) : TFhirValueSetExpansionProperty;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansionProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionPropertyChild(value : TFhirValueSetExpansionProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'uri') then
        value.uriElement := ParseUri(child, path+'/uri') {L737}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionProperty(xml : TXmlBuilder; name : String; value : TFhirValueSetExpansionProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetExpansionPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionPropertyChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'uri', value.uriElement); {L738}
end;

function TFHIRXmlParser.ParseValueSetExpansionContains(element : TMXmlElement; path : string) : TFhirValueSetExpansionContains;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansionContains.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionContainsChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionContainsChild(value : TFhirValueSetExpansionContains; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'system') then
        value.systemElement := ParseUri(child, path+'/system') {L737}
      else if (child.localName = 'abstract') then
        value.abstractElement := ParseBoolean(child, path+'/abstract') {L737}
      else if (child.localName = 'inactive') then
        value.inactiveElement := ParseBoolean(child, path+'/inactive') {L737}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'display') then
        value.displayElement := ParseString(child, path+'/display') {L737}
      else if (child.localName = 'designation') then
        value.designationList.Add(ParseValueSetComposeIncludeConceptDesignation(child, path+'/designation')) {L631}
      else if (child.localName = 'property') then
        value.property_List.Add(ParseValueSetExpansionContainsProperty(child, path+'/property')) {L631}
      else if (child.localName = 'contains') then
        value.containsList.Add(ParseValueSetExpansionContains(child, path+'/contains')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionContains(xml : TXmlBuilder; name : String; value : TFhirValueSetExpansionContains);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetExpansionContainsChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionContainsChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionContains);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeUri(xml, 'system', value.systemElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'abstract', value.abstractElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeBoolean(xml, 'inactive', value.inactiveElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeCode(xml, 'code', value.codeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'display', value.displayElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.designationList.Count - 1 do
      ComposeValueSetComposeIncludeConceptDesignation(xml, 'designation', value.designationList[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.property_List.Count - 1 do
      ComposeValueSetExpansionContainsProperty(xml, 'property', value.property_List[i]);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.containsList.Count - 1 do
      ComposeValueSetExpansionContains(xml, 'contains', value.containsList[i]);
end;

function TFHIRXmlParser.ParseValueSetExpansionContainsProperty(element : TMXmlElement; path : string) : TFhirValueSetExpansionContainsProperty;
var
  child : TMXmlElement;
begin
  result := TFhirValueSetExpansionContainsProperty.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetExpansionContainsPropertyChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetExpansionContainsPropertyChild(value : TFhirValueSetExpansionContainsProperty; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'code') then
        value.codeElement := ParseCode(child, path+'/code') {L737}
      else if (child.localName = 'valueCode') then
        value.value := ParseCode(child, path+'/valueCode') {L891}
      else if (child.localName = 'valueCoding') then
        value.value := ParseCoding(child, path+'/valueCoding') {L891}
      else if (child.localName = 'valueString') then
        value.value := ParseString(child, path+'/valueString') {L891}
      else if (child.localName = 'valueInteger') then
        value.value := ParseInteger(child, path+'/valueInteger') {L891}
      else if (child.localName = 'valueBoolean') then
        value.value := ParseBoolean(child, path+'/valueBoolean') {L891}
      else if (child.localName = 'valueDateTime') then
        value.value := ParseDateTime(child, path+'/valueDateTime') {L891}
      else if (child.localName = 'valueDecimal') then
        value.value := ParseDecimal(child, path+'/valueDecimal') {L891}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionContainsProperty(xml : TXmlBuilder; name : String; value : TFhirValueSetExpansionContainsProperty);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetExpansionContainsPropertyChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetExpansionContainsPropertyChildren(xml : TXmlBuilder; value : TFhirValueSetExpansionContainsProperty);
begin
  composeBackboneElementChildren(xml, value);
  ComposeCode(xml, 'code', value.codeElement); {L738}
  if (value.value is TFhirCode) {6} then
    ComposeCode(xml, 'valueCode', TFhirCode(value.value))
  else if (value.value is TFhirCoding) {6} then
    ComposeCoding(xml, 'valueCoding', TFhirCoding(value.value))
  else if (value.value is TFhirString) {6} then
    ComposeString(xml, 'valueString', TFhirString(value.value))
  else if (value.value is TFhirInteger) {6} then
    ComposeInteger(xml, 'valueInteger', TFhirInteger(value.value))
  else if (value.value is TFhirBoolean) {6} then
    ComposeBoolean(xml, 'valueBoolean', TFhirBoolean(value.value))
  else if (value.value is TFhirDateTime) {6} then
    ComposeDateTime(xml, 'valueDateTime', TFhirDateTime(value.value))
  else if (value.value is TFhirDecimal) {6} then
    ComposeDecimal(xml, 'valueDecimal', TFhirDecimal(value.value));
end;

function TFHIRXmlParser.ParseValueSet(element : TMXmlElement; path : string) : TFhirValueSet;
var
  child : TMXmlElement;
begin
  result := TFhirValueSet.create;
  try
    parseCanonicalResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseValueSetChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseValueSetChild(value : TFhirValueSet; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'url') then
        value.urlElement := ParseUri(child, path+'/url') {L737}
      else if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'version') then
        value.versionElement := ParseString(child, path+'/version') {L737}
      else if (child.localName = 'name') then
        value.nameElement := ParseString(child, path+'/name') {L737}
      else if (child.localName = 'title') then
        value.titleElement := ParseString(child, path+'/title') {L737}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirPublicationStatusEnum, SYSTEMS_TFhirPublicationStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'experimental') then
        value.experimentalElement := ParseBoolean(child, path+'/experimental') {L737}
      else if (child.localName = 'date') then
        value.dateElement := ParseDateTime(child, path+'/date') {L737}
      else if (child.localName = 'publisher') then
        value.publisherElement := ParseString(child, path+'/publisher') {L737}
      else if (child.localName = 'contact') then
        value.contactList.Add(ParseContactDetail(child, path+'/contact')) {L631}
      else if (child.localName = 'description') then
        value.descriptionElement := ParseMarkdown(child, path+'/description') {L737}
      else if (child.localName = 'useContext') then
        value.useContextList.Add(ParseUsageContext(child, path+'/useContext')) {L631}
      else if (child.localName = 'jurisdiction') then
        value.jurisdictionList.Add(ParseCodeableConcept(child, path+'/jurisdiction')) {L631}
      else if (child.localName = 'immutable') then
        value.immutableElement := ParseBoolean(child, path+'/immutable') {L737}
      else if (child.localName = 'purpose') then
        value.purposeElement := ParseMarkdown(child, path+'/purpose') {L737}
      else if (child.localName = 'copyright') then
        value.copyrightElement := ParseMarkdown(child, path+'/copyright') {L737}
      else if (child.localName = 'compose') then
        value.compose := ParseValueSetCompose(child, path+'/compose') {L740}
      else if (child.localName = 'expansion') then
        value.expansion := ParseValueSetExpansion(child, path+'/expansion') {L740}
      else if Not ParseCanonicalResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeValueSet(xml : TXmlBuilder; name : String; value : TFhirValueSet);
begin
  if (value = nil) then
    exit;
  composeCanonicalResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeValueSetChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeValueSetChildren(xml : TXmlBuilder; value : TFhirValueSet);
var
  i : integer;
begin
  composeCanonicalResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeUri(xml, 'url', value.urlElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'version', value.versionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'name', value.nameElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'title', value.titleElement); {L738}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirPublicationStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'experimental', value.experimentalElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeString(xml, 'publisher', value.publisherElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.contactList.Count - 1 do
      ComposeContactDetail(xml, 'contact', value.contactList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'description', value.descriptionElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.useContextList.Count - 1 do
      ComposeUsageContext(xml, 'useContext', value.useContextList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.jurisdictionList.Count - 1 do
      ComposeCodeableConcept(xml, 'jurisdiction', value.jurisdictionList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeBoolean(xml, 'immutable', value.immutableElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'purpose', value.purposeElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeMarkdown(xml, 'copyright', value.copyrightElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeValueSetCompose(xml, 'compose', value.compose); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeValueSetExpansion(xml, 'expansion', value.expansion); {L741}
end;

{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
function TFHIRXmlParser.ParseVerificationResultPrimarySource(element : TMXmlElement; path : string) : TFhirVerificationResultPrimarySource;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResultPrimarySource.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultPrimarySourceChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultPrimarySourceChild(value : TFhirVerificationResultPrimarySource; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'who') then
        value.who := ParseReference(child, path+'/who') {L740}
      else if (child.localName = 'type') then
        value.type_List.Add(ParseCodeableConcept(child, path+'/type')) {L631}
      else if (child.localName = 'communicationMethod') then
        value.communicationMethodList.Add(ParseCodeableConcept(child, path+'/communicationMethod')) {L631}
      else if (child.localName = 'validationStatus') then
        value.validationStatus := ParseCodeableConcept(child, path+'/validationStatus') {L740}
      else if (child.localName = 'validationDate') then
        value.validationDateElement := ParseDateTime(child, path+'/validationDate') {L737}
      else if (child.localName = 'canPushUpdates') then
        value.canPushUpdates := ParseCodeableConcept(child, path+'/canPushUpdates') {L740}
      else if (child.localName = 'pushTypeAvailable') then
        value.pushTypeAvailableList.Add(ParseCodeableConcept(child, path+'/pushTypeAvailable')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultPrimarySource(xml : TXmlBuilder; name : String; value : TFhirVerificationResultPrimarySource);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVerificationResultPrimarySourceChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultPrimarySourceChildren(xml : TXmlBuilder; value : TFhirVerificationResultPrimarySource);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'who', value.who); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.type_List.Count - 1 do
      ComposeCodeableConcept(xml, 'type', value.type_List[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.communicationMethodList.Count - 1 do
      ComposeCodeableConcept(xml, 'communicationMethod', value.communicationMethodList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeCodeableConcept(xml, 'validationStatus', value.validationStatus); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'validationDate', value.validationDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'canPushUpdates', value.canPushUpdates); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.pushTypeAvailableList.Count - 1 do
      ComposeCodeableConcept(xml, 'pushTypeAvailable', value.pushTypeAvailableList[i]);
end;

function TFHIRXmlParser.ParseVerificationResultAttestation(element : TMXmlElement; path : string) : TFhirVerificationResultAttestation;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResultAttestation.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultAttestationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultAttestationChild(value : TFhirVerificationResultAttestation; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'who') then
        value.who := ParseReference(child, path+'/who') {L740}
      else if (child.localName = 'onBehalfOf') then
        value.onBehalfOf := ParseReference(child, path+'/onBehalfOf') {L740}
      else if (child.localName = 'communicationMethod') then
        value.communicationMethod := ParseCodeableConcept(child, path+'/communicationMethod') {L740}
      else if (child.localName = 'date') then
        value.dateElement := ParseDate(child, path+'/date') {L737}
      else if (child.localName = 'sourceIdentityCertificate') then
        value.sourceIdentityCertificateElement := ParseString(child, path+'/sourceIdentityCertificate') {L737}
      else if (child.localName = 'proxyIdentityCertificate') then
        value.proxyIdentityCertificateElement := ParseString(child, path+'/proxyIdentityCertificate') {L737}
      else if (child.localName = 'proxySignature') then
        value.proxySignature := ParseSignature(child, path+'/proxySignature') {L740}
      else if (child.localName = 'sourceSignature') then
        value.sourceSignature := ParseSignature(child, path+'/sourceSignature') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultAttestation(xml : TXmlBuilder; name : String; value : TFhirVerificationResultAttestation);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVerificationResultAttestationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultAttestationChildren(xml : TXmlBuilder; value : TFhirVerificationResultAttestation);
begin
  composeBackboneElementChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'who', value.who); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeReference(xml, 'onBehalfOf', value.onBehalfOf); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'communicationMethod', value.communicationMethod); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDate(xml, 'date', value.dateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'sourceIdentityCertificate', value.sourceIdentityCertificateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'proxyIdentityCertificate', value.proxyIdentityCertificateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(xml, 'proxySignature', value.proxySignature); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(xml, 'sourceSignature', value.sourceSignature); {L741}
end;

function TFHIRXmlParser.ParseVerificationResultValidator(element : TMXmlElement; path : string) : TFhirVerificationResultValidator;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResultValidator.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultValidatorChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultValidatorChild(value : TFhirVerificationResultValidator; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'organization') then
        value.organization := ParseReference(child, path+'/organization') {L740}
      else if (child.localName = 'identityCertificate') then
        value.identityCertificateElement := ParseString(child, path+'/identityCertificate') {L737}
      else if (child.localName = 'attestationSignature') then
        value.attestationSignature := ParseSignature(child, path+'/attestationSignature') {L740}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultValidator(xml : TXmlBuilder; name : String; value : TFhirVerificationResultValidator);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVerificationResultValidatorChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultValidatorChildren(xml : TXmlBuilder; value : TFhirVerificationResultValidator);
begin
  composeBackboneElementChildren(xml, value);
  ComposeReference(xml, 'organization', value.organization); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'identityCertificate', value.identityCertificateElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeSignature(xml, 'attestationSignature', value.attestationSignature); {L741}
end;

function TFHIRXmlParser.ParseVerificationResult(element : TMXmlElement; path : string) : TFhirVerificationResult;
var
  child : TMXmlElement;
begin
  result := TFhirVerificationResult.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVerificationResultChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVerificationResultChild(value : TFhirVerificationResult; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'target') then
        value.targetList.Add(ParseReference(child, path+'/target')) {L631}
      else if (child.localName = 'targetLocation') then
        value.targetLocationList.Add(ParseString(child, path+'/targetLocation')) {L631}
      else if (child.localName = 'need') then
        value.need := ParseCodeableConcept(child, path+'/need') {L740}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirStatusEnum, SYSTEMS_TFhirStatusEnum, child, path+'/status') {L734}
      else if (child.localName = 'statusDate') then
        value.statusDateElement := ParseDateTime(child, path+'/statusDate') {L737}
      else if (child.localName = 'validationType') then
        value.validationType := ParseCodeableConcept(child, path+'/validationType') {L740}
      else if (child.localName = 'validationProcess') then
        value.validationProcessList.Add(ParseCodeableConcept(child, path+'/validationProcess')) {L631}
      else if (child.localName = 'frequency') then
        value.frequency := ParseTiming(child, path+'/frequency') {L740}
      else if (child.localName = 'lastPerformed') then
        value.lastPerformedElement := ParseDateTime(child, path+'/lastPerformed') {L737}
      else if (child.localName = 'nextScheduled') then
        value.nextScheduledElement := ParseDate(child, path+'/nextScheduled') {L737}
      else if (child.localName = 'failureAction') then
        value.failureAction := ParseCodeableConcept(child, path+'/failureAction') {L740}
      else if (child.localName = 'primarySource') then
        value.primarySourceList.Add(ParseVerificationResultPrimarySource(child, path+'/primarySource')) {L631}
      else if (child.localName = 'attestation') then
        value.attestation := ParseVerificationResultAttestation(child, path+'/attestation') {L740}
      else if (child.localName = 'validator') then
        value.validatorList.Add(ParseVerificationResultValidator(child, path+'/validator')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVerificationResult(xml : TXmlBuilder; name : String; value : TFhirVerificationResult);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVerificationResultChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVerificationResultChildren(xml : TXmlBuilder; value : TFhirVerificationResult);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetList.Count - 1 do
      ComposeReference(xml, 'target', value.targetList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.targetLocationList.Count - 1 do
      ComposeString(xml, 'targetLocation', value.targetLocationList[i]);
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'need', value.need); {L741}
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirStatusEnum); {L735}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeDateTime(xml, 'statusDate', value.statusDateElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'validationType', value.validationType); {L741}
  if (SummaryOption in [soFull, soSummary, soData]) then
    for i := 0 to value.validationProcessList.Count - 1 do
      ComposeCodeableConcept(xml, 'validationProcess', value.validationProcessList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeTiming(xml, 'frequency', value.frequency); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeDateTime(xml, 'lastPerformed', value.lastPerformedElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDate(xml, 'nextScheduled', value.nextScheduledElement); {L738}
  if (SummaryOption in [soFull, soSummary, soData]) then
    ComposeCodeableConcept(xml, 'failureAction', value.failureAction); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.primarySourceList.Count - 1 do
      ComposeVerificationResultPrimarySource(xml, 'primarySource', value.primarySourceList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeVerificationResultAttestation(xml, 'attestation', value.attestation); {L741}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.validatorList.Count - 1 do
      ComposeVerificationResultValidator(xml, 'validator', value.validatorList[i]);
end;

{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
function TFHIRXmlParser.ParseVisionPrescriptionLensSpecification(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecification;
var
  child : TMXmlElement;
begin
  result := TFhirVisionPrescriptionLensSpecification.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVisionPrescriptionLensSpecificationChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVisionPrescriptionLensSpecificationChild(value : TFhirVisionPrescriptionLensSpecification; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'product') then
        value.product := ParseCodeableConcept(child, path+'/product') {L740}
      else if (child.localName = 'eye') then
        value.eyeElement := ParseEnum(CODES_TFhirVisionEyesEnum, SYSTEMS_TFhirVisionEyesEnum, child, path+'/eye') {L734}
      else if (child.localName = 'sphere') then
        value.sphereElement := ParseDecimal(child, path+'/sphere') {L737}
      else if (child.localName = 'cylinder') then
        value.cylinderElement := ParseDecimal(child, path+'/cylinder') {L737}
      else if (child.localName = 'axis') then
        value.axisElement := ParseInteger(child, path+'/axis') {L737}
      else if (child.localName = 'prism') then
        value.prismList.Add(ParseVisionPrescriptionLensSpecificationPrism(child, path+'/prism')) {L631}
      else if (child.localName = 'add') then
        value.addElement := ParseDecimal(child, path+'/add') {L737}
      else if (child.localName = 'power') then
        value.powerElement := ParseDecimal(child, path+'/power') {L737}
      else if (child.localName = 'backCurve') then
        value.backCurveElement := ParseDecimal(child, path+'/backCurve') {L737}
      else if (child.localName = 'diameter') then
        value.diameterElement := ParseDecimal(child, path+'/diameter') {L737}
      else if (child.localName = 'duration') then
        value.duration := ParseQuantity(child, path+'/duration') {L740}
      else if (child.localName = 'color') then
        value.colorElement := ParseString(child, path+'/color') {L737}
      else if (child.localName = 'brand') then
        value.brandElement := ParseString(child, path+'/brand') {L737}
      else if (child.localName = 'note') then
        value.noteList.Add(ParseAnnotation(child, path+'/note')) {L631}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecification(xml : TXmlBuilder; name : String; value : TFhirVisionPrescriptionLensSpecification);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVisionPrescriptionLensSpecificationChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecificationChildren(xml : TXmlBuilder; value : TFhirVisionPrescriptionLensSpecification);
var
  i : integer;
begin
  composeBackboneElementChildren(xml, value);
  ComposeCodeableConcept(xml, 'product', value.product); {L741}
  ComposeEnum(xml, 'eye', value.eyeElement, CODES_TFhirVisionEyesEnum); {L735}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'sphere', value.sphereElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'cylinder', value.cylinderElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeInteger(xml, 'axis', value.axisElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.prismList.Count - 1 do
      ComposeVisionPrescriptionLensSpecificationPrism(xml, 'prism', value.prismList[i]);
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'add', value.addElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'power', value.powerElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'backCurve', value.backCurveElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeDecimal(xml, 'diameter', value.diameterElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeQuantity(xml, 'duration', value.duration); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'color', value.colorElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    ComposeString(xml, 'brand', value.brandElement); {L738}
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.noteList.Count - 1 do
      ComposeAnnotation(xml, 'note', value.noteList[i]);
end;

function TFHIRXmlParser.ParseVisionPrescriptionLensSpecificationPrism(element : TMXmlElement; path : string) : TFhirVisionPrescriptionLensSpecificationPrism;
var
  child : TMXmlElement;
begin
  result := TFhirVisionPrescriptionLensSpecificationPrism.create;
  try
    parseElementAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVisionPrescriptionLensSpecificationPrismChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVisionPrescriptionLensSpecificationPrismChild(value : TFhirVisionPrescriptionLensSpecificationPrism; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'amount') then
        value.amountElement := ParseDecimal(child, path+'/amount') {L737}
      else if (child.localName = 'base') then
        value.baseElement := ParseEnum(CODES_TFhirVisionBaseEnum, SYSTEMS_TFhirVisionBaseEnum, child, path+'/base') {L734}
      else if Not ParseBackboneElementChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecificationPrism(xml : TXmlBuilder; name : String; value : TFhirVisionPrescriptionLensSpecificationPrism);
begin
  if (value = nil) then
    exit;
  composeElementAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVisionPrescriptionLensSpecificationPrismChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionLensSpecificationPrismChildren(xml : TXmlBuilder; value : TFhirVisionPrescriptionLensSpecificationPrism);
begin
  composeBackboneElementChildren(xml, value);
  ComposeDecimal(xml, 'amount', value.amountElement); {L738}
  ComposeEnum(xml, 'base', value.baseElement, CODES_TFhirVisionBaseEnum); {L735}
end;

function TFHIRXmlParser.ParseVisionPrescription(element : TMXmlElement; path : string) : TFhirVisionPrescription;
var
  child : TMXmlElement;
begin
  result := TFhirVisionPrescription.create;
  try
    parseDomainResourceAttributes(result, path, element);
    child := FirstChild(element);
    while (child <> nil) do
    begin
      if not ParseVisionPrescriptionChild(result, path, child) then
        UnknownContent(child, path);
      child := NextSibling(child);
    end;
    closeOutElement(result, element);

    result.link;
  finally
    result.free;
  end;
end;

function TFHIRXmlParser.ParseVisionPrescriptionChild(value : TFhirVisionPrescription; path : string; child : TMXmlElement) : boolean;
begin
  result := true;
      if (child.localName = 'identifier') then
        value.identifierList.Add(ParseIdentifier(child, path+'/identifier')) {L631}
      else if (child.localName = 'status') then
        value.statusElement := ParseEnum(CODES_TFhirFinancialResourceStatusCodesEnum, SYSTEMS_TFhirFinancialResourceStatusCodesEnum, child, path+'/status') {L734}
      else if (child.localName = 'created') then
        value.createdElement := ParseDateTime(child, path+'/created') {L737}
      else if (child.localName = 'patient') then
        value.patient := ParseReference(child, path+'/patient') {L740}
      else if (child.localName = 'encounter') then
        value.encounter := ParseReference(child, path+'/encounter') {L740}
      else if (child.localName = 'dateWritten') then
        value.dateWrittenElement := ParseDateTime(child, path+'/dateWritten') {L737}
      else if (child.localName = 'prescriber') then
        value.prescriber := ParseReference(child, path+'/prescriber') {L740}
      else if (child.localName = 'lensSpecification') then
        value.lensSpecificationList.Add(ParseVisionPrescriptionLensSpecification(child, path+'/lensSpecification')) {L631}
      else if Not ParseDomainResourceChild(value, path, child) then
    result := false;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescription(xml : TXmlBuilder; name : String; value : TFhirVisionPrescription);
begin
  if (value = nil) then
    exit;
  composeDomainResourceAttributes(xml, value);
  if KeepLocationData then value.LocationData.ComposeStart := xml.SourceLocation;
  xml.open(name);
  composeVisionPrescriptionChildren(xml, value);
  closeOutElement(xml, value);
  xml.close(name);
  if KeepLocationData then value.LocationData.ComposeFinish := xml.SourceLocation;
end;

procedure TFHIRXmlComposer.ComposeVisionPrescriptionChildren(xml : TXmlBuilder; value : TFhirVisionPrescription);
var
  i : integer;
begin
  composeDomainResourceChildren(xml, value);
  if (SummaryOption in [soFull, soData]) then
    for i := 0 to value.identifierList.Count - 1 do
      ComposeIdentifier(xml, 'identifier', value.identifierList[i]);
  ComposeEnum(xml, 'status', value.statusElement, CODES_TFhirFinancialResourceStatusCodesEnum); {L735}
  ComposeDateTime(xml, 'created', value.createdElement); {L738}
  ComposeReference(xml, 'patient', value.patient); {L741}
  if (SummaryOption in [soFull, soData]) then
    ComposeReference(xml, 'encounter', value.encounter); {L741}
  ComposeDateTime(xml, 'dateWritten', value.dateWrittenElement); {L738}
  ComposeReference(xml, 'prescriber', value.prescriber); {L741}
  for i := 0 to value.lensSpecificationList.Count - 1 do
      ComposeVisionPrescriptionLensSpecification(xml, 'lensSpecification', value.lensSpecificationList[i]);
end;

{$ENDIF FHIR_VISIONPRESCRIPTION}

function TFHIRXmlParser.ParseResource(element : TMXmlElement; path : String) : TFhirResource;
begin
  if (element = nil) Then
    Raise EXmlException.Create('error - element is nil')
{$IFDEF FHIR_ACCOUNT}
  else if element.localName = 'Account' Then
    result := ParseAccount(element, path+'/Account')
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if element.localName = 'ActivityDefinition' Then
    result := ParseActivityDefinition(element, path+'/ActivityDefinition')
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
  else if element.localName = 'AdministrableProductDefinition' Then
    result := ParseAdministrableProductDefinition(element, path+'/AdministrableProductDefinition')
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if element.localName = 'AdverseEvent' Then
    result := ParseAdverseEvent(element, path+'/AdverseEvent')
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if element.localName = 'AllergyIntolerance' Then
    result := ParseAllergyIntolerance(element, path+'/AllergyIntolerance')
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if element.localName = 'Appointment' Then
    result := ParseAppointment(element, path+'/Appointment')
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if element.localName = 'AppointmentResponse' Then
    result := ParseAppointmentResponse(element, path+'/AppointmentResponse')
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if element.localName = 'AuditEvent' Then
    result := ParseAuditEvent(element, path+'/AuditEvent')
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if element.localName = 'Basic' Then
    result := ParseBasic(element, path+'/Basic')
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if element.localName = 'Binary' Then
    result := ParseBinary(element, path+'/Binary')
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if element.localName = 'BiologicallyDerivedProduct' Then
    result := ParseBiologicallyDerivedProduct(element, path+'/BiologicallyDerivedProduct')
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if element.localName = 'BodyStructure' Then
    result := ParseBodyStructure(element, path+'/BodyStructure')
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if element.localName = 'Bundle' Then
    result := ParseBundle(element, path+'/Bundle')
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if element.localName = 'CapabilityStatement' Then
    result := ParseCapabilityStatement(element, path+'/CapabilityStatement')
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAPABILITYSTATEMENT2}
  else if element.localName = 'CapabilityStatement2' Then
    result := ParseCapabilityStatement2(element, path+'/CapabilityStatement2')
{$ENDIF FHIR_CAPABILITYSTATEMENT2}
{$IFDEF FHIR_CAREPLAN}
  else if element.localName = 'CarePlan' Then
    result := ParseCarePlan(element, path+'/CarePlan')
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if element.localName = 'CareTeam' Then
    result := ParseCareTeam(element, path+'/CareTeam')
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if element.localName = 'CatalogEntry' Then
    result := ParseCatalogEntry(element, path+'/CatalogEntry')
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if element.localName = 'ChargeItem' Then
    result := ParseChargeItem(element, path+'/ChargeItem')
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if element.localName = 'ChargeItemDefinition' Then
    result := ParseChargeItemDefinition(element, path+'/ChargeItemDefinition')
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
  else if element.localName = 'Citation' Then
    result := ParseCitation(element, path+'/Citation')
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
  else if element.localName = 'Claim' Then
    result := ParseClaim(element, path+'/Claim')
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if element.localName = 'ClaimResponse' Then
    result := ParseClaimResponse(element, path+'/ClaimResponse')
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if element.localName = 'ClinicalImpression' Then
    result := ParseClinicalImpression(element, path+'/ClinicalImpression')
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEISSUE}
  else if element.localName = 'ClinicalUseIssue' Then
    result := ParseClinicalUseIssue(element, path+'/ClinicalUseIssue')
{$ENDIF FHIR_CLINICALUSEISSUE}
{$IFDEF FHIR_CODESYSTEM}
  else if element.localName = 'CodeSystem' Then
    result := ParseCodeSystem(element, path+'/CodeSystem')
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if element.localName = 'Communication' Then
    result := ParseCommunication(element, path+'/Communication')
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if element.localName = 'CommunicationRequest' Then
    result := ParseCommunicationRequest(element, path+'/CommunicationRequest')
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if element.localName = 'CompartmentDefinition' Then
    result := ParseCompartmentDefinition(element, path+'/CompartmentDefinition')
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if element.localName = 'Composition' Then
    result := ParseComposition(element, path+'/Composition')
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if element.localName = 'ConceptMap' Then
    result := ParseConceptMap(element, path+'/ConceptMap')
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if element.localName = 'Condition' Then
    result := ParseCondition(element, path+'/Condition')
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONDITIONDEFINITION}
  else if element.localName = 'ConditionDefinition' Then
    result := ParseConditionDefinition(element, path+'/ConditionDefinition')
{$ENDIF FHIR_CONDITIONDEFINITION}
{$IFDEF FHIR_CONSENT}
  else if element.localName = 'Consent' Then
    result := ParseConsent(element, path+'/Consent')
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if element.localName = 'Contract' Then
    result := ParseContract(element, path+'/Contract')
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if element.localName = 'Coverage' Then
    result := ParseCoverage(element, path+'/Coverage')
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if element.localName = 'CoverageEligibilityRequest' Then
    result := ParseCoverageEligibilityRequest(element, path+'/CoverageEligibilityRequest')
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if element.localName = 'CoverageEligibilityResponse' Then
    result := ParseCoverageEligibilityResponse(element, path+'/CoverageEligibilityResponse')
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if element.localName = 'DetectedIssue' Then
    result := ParseDetectedIssue(element, path+'/DetectedIssue')
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if element.localName = 'Device' Then
    result := ParseDevice(element, path+'/Device')
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if element.localName = 'DeviceDefinition' Then
    result := ParseDeviceDefinition(element, path+'/DeviceDefinition')
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if element.localName = 'DeviceMetric' Then
    result := ParseDeviceMetric(element, path+'/DeviceMetric')
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if element.localName = 'DeviceRequest' Then
    result := ParseDeviceRequest(element, path+'/DeviceRequest')
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if element.localName = 'DeviceUseStatement' Then
    result := ParseDeviceUseStatement(element, path+'/DeviceUseStatement')
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if element.localName = 'DiagnosticReport' Then
    result := ParseDiagnosticReport(element, path+'/DiagnosticReport')
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if element.localName = 'DocumentManifest' Then
    result := ParseDocumentManifest(element, path+'/DocumentManifest')
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if element.localName = 'DocumentReference' Then
    result := ParseDocumentReference(element, path+'/DocumentReference')
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
  else if element.localName = 'Encounter' Then
    result := ParseEncounter(element, path+'/Encounter')
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if element.localName = 'Endpoint' Then
    result := ParseEndpoint(element, path+'/Endpoint')
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if element.localName = 'EnrollmentRequest' Then
    result := ParseEnrollmentRequest(element, path+'/EnrollmentRequest')
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if element.localName = 'EnrollmentResponse' Then
    result := ParseEnrollmentResponse(element, path+'/EnrollmentResponse')
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if element.localName = 'EpisodeOfCare' Then
    result := ParseEpisodeOfCare(element, path+'/EpisodeOfCare')
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if element.localName = 'EventDefinition' Then
    result := ParseEventDefinition(element, path+'/EventDefinition')
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if element.localName = 'Evidence' Then
    result := ParseEvidence(element, path+'/Evidence')
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
  else if element.localName = 'EvidenceReport' Then
    result := ParseEvidenceReport(element, path+'/EvidenceReport')
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if element.localName = 'EvidenceVariable' Then
    result := ParseEvidenceVariable(element, path+'/EvidenceVariable')
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if element.localName = 'ExampleScenario' Then
    result := ParseExampleScenario(element, path+'/ExampleScenario')
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if element.localName = 'ExplanationOfBenefit' Then
    result := ParseExplanationOfBenefit(element, path+'/ExplanationOfBenefit')
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if element.localName = 'FamilyMemberHistory' Then
    result := ParseFamilyMemberHistory(element, path+'/FamilyMemberHistory')
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if element.localName = 'Flag' Then
    result := ParseFlag(element, path+'/Flag')
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if element.localName = 'Goal' Then
    result := ParseGoal(element, path+'/Goal')
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if element.localName = 'GraphDefinition' Then
    result := ParseGraphDefinition(element, path+'/GraphDefinition')
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if element.localName = 'Group' Then
    result := ParseGroup(element, path+'/Group')
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if element.localName = 'GuidanceResponse' Then
    result := ParseGuidanceResponse(element, path+'/GuidanceResponse')
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if element.localName = 'HealthcareService' Then
    result := ParseHealthcareService(element, path+'/HealthcareService')
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if element.localName = 'ImagingStudy' Then
    result := ParseImagingStudy(element, path+'/ImagingStudy')
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if element.localName = 'Immunization' Then
    result := ParseImmunization(element, path+'/Immunization')
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if element.localName = 'ImmunizationEvaluation' Then
    result := ParseImmunizationEvaluation(element, path+'/ImmunizationEvaluation')
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if element.localName = 'ImmunizationRecommendation' Then
    result := ParseImmunizationRecommendation(element, path+'/ImmunizationRecommendation')
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if element.localName = 'ImplementationGuide' Then
    result := ParseImplementationGuide(element, path+'/ImplementationGuide')
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
  else if element.localName = 'Ingredient' Then
    result := ParseIngredient(element, path+'/Ingredient')
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
  else if element.localName = 'InsurancePlan' Then
    result := ParseInsurancePlan(element, path+'/InsurancePlan')
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if element.localName = 'Invoice' Then
    result := ParseInvoice(element, path+'/Invoice')
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if element.localName = 'Library' Then
    result := ParseLibrary(element, path+'/Library')
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if element.localName = 'Linkage' Then
    result := ParseLinkage(element, path+'/Linkage')
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if element.localName = 'List' Then
    result := ParseList(element, path+'/List')
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if element.localName = 'Location' Then
    result := ParseLocation(element, path+'/Location')
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
  else if element.localName = 'ManufacturedItemDefinition' Then
    result := ParseManufacturedItemDefinition(element, path+'/ManufacturedItemDefinition')
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
  else if element.localName = 'Measure' Then
    result := ParseMeasure(element, path+'/Measure')
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if element.localName = 'MeasureReport' Then
    result := ParseMeasureReport(element, path+'/MeasureReport')
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDICATION}
  else if element.localName = 'Medication' Then
    result := ParseMedication(element, path+'/Medication')
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if element.localName = 'MedicationAdministration' Then
    result := ParseMedicationAdministration(element, path+'/MedicationAdministration')
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if element.localName = 'MedicationDispense' Then
    result := ParseMedicationDispense(element, path+'/MedicationDispense')
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if element.localName = 'MedicationKnowledge' Then
    result := ParseMedicationKnowledge(element, path+'/MedicationKnowledge')
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if element.localName = 'MedicationRequest' Then
    result := ParseMedicationRequest(element, path+'/MedicationRequest')
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONUSAGE}
  else if element.localName = 'MedicationUsage' Then
    result := ParseMedicationUsage(element, path+'/MedicationUsage')
{$ENDIF FHIR_MEDICATIONUSAGE}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
  else if element.localName = 'MedicinalProductDefinition' Then
    result := ParseMedicinalProductDefinition(element, path+'/MedicinalProductDefinition')
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if element.localName = 'MessageDefinition' Then
    result := ParseMessageDefinition(element, path+'/MessageDefinition')
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if element.localName = 'MessageHeader' Then
    result := ParseMessageHeader(element, path+'/MessageHeader')
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if element.localName = 'MolecularSequence' Then
    result := ParseMolecularSequence(element, path+'/MolecularSequence')
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if element.localName = 'NamingSystem' Then
    result := ParseNamingSystem(element, path+'/NamingSystem')
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONINTAKE}
  else if element.localName = 'NutritionIntake' Then
    result := ParseNutritionIntake(element, path+'/NutritionIntake')
{$ENDIF FHIR_NUTRITIONINTAKE}
{$IFDEF FHIR_NUTRITIONORDER}
  else if element.localName = 'NutritionOrder' Then
    result := ParseNutritionOrder(element, path+'/NutritionOrder')
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
  else if element.localName = 'NutritionProduct' Then
    result := ParseNutritionProduct(element, path+'/NutritionProduct')
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
  else if element.localName = 'Observation' Then
    result := ParseObservation(element, path+'/Observation')
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if element.localName = 'ObservationDefinition' Then
    result := ParseObservationDefinition(element, path+'/ObservationDefinition')
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if element.localName = 'OperationDefinition' Then
    result := ParseOperationDefinition(element, path+'/OperationDefinition')
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if element.localName = 'OperationOutcome' Then
    result := ParseOperationOutcome(element, path+'/OperationOutcome')
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if element.localName = 'Organization' Then
    result := ParseOrganization(element, path+'/Organization')
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if element.localName = 'OrganizationAffiliation' Then
    result := ParseOrganizationAffiliation(element, path+'/OrganizationAffiliation')
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
  else if element.localName = 'PackagedProductDefinition' Then
    result := ParsePackagedProductDefinition(element, path+'/PackagedProductDefinition')
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
  else if element.localName = 'Parameters' Then
    result := ParseParameters(element, path+'/Parameters')
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
  else if element.localName = 'Patient' Then
    result := ParsePatient(element, path+'/Patient')
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if element.localName = 'PaymentNotice' Then
    result := ParsePaymentNotice(element, path+'/PaymentNotice')
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if element.localName = 'PaymentReconciliation' Then
    result := ParsePaymentReconciliation(element, path+'/PaymentReconciliation')
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERMISSION}
  else if element.localName = 'Permission' Then
    result := ParsePermission(element, path+'/Permission')
{$ENDIF FHIR_PERMISSION}
{$IFDEF FHIR_PERSON}
  else if element.localName = 'Person' Then
    result := ParsePerson(element, path+'/Person')
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if element.localName = 'PlanDefinition' Then
    result := ParsePlanDefinition(element, path+'/PlanDefinition')
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if element.localName = 'Practitioner' Then
    result := ParsePractitioner(element, path+'/Practitioner')
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if element.localName = 'PractitionerRole' Then
    result := ParsePractitionerRole(element, path+'/PractitionerRole')
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if element.localName = 'Procedure' Then
    result := ParseProcedure(element, path+'/Procedure')
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if element.localName = 'Provenance' Then
    result := ParseProvenance(element, path+'/Provenance')
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if element.localName = 'Questionnaire' Then
    result := ParseQuestionnaire(element, path+'/Questionnaire')
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if element.localName = 'QuestionnaireResponse' Then
    result := ParseQuestionnaireResponse(element, path+'/QuestionnaireResponse')
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
  else if element.localName = 'RegulatedAuthorization' Then
    result := ParseRegulatedAuthorization(element, path+'/RegulatedAuthorization')
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
  else if element.localName = 'RelatedPerson' Then
    result := ParseRelatedPerson(element, path+'/RelatedPerson')
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if element.localName = 'RequestGroup' Then
    result := ParseRequestGroup(element, path+'/RequestGroup')
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if element.localName = 'ResearchStudy' Then
    result := ParseResearchStudy(element, path+'/ResearchStudy')
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if element.localName = 'ResearchSubject' Then
    result := ParseResearchSubject(element, path+'/ResearchSubject')
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if element.localName = 'RiskAssessment' Then
    result := ParseRiskAssessment(element, path+'/RiskAssessment')
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if element.localName = 'Schedule' Then
    result := ParseSchedule(element, path+'/Schedule')
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if element.localName = 'SearchParameter' Then
    result := ParseSearchParameter(element, path+'/SearchParameter')
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if element.localName = 'ServiceRequest' Then
    result := ParseServiceRequest(element, path+'/ServiceRequest')
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if element.localName = 'Slot' Then
    result := ParseSlot(element, path+'/Slot')
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if element.localName = 'Specimen' Then
    result := ParseSpecimen(element, path+'/Specimen')
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if element.localName = 'SpecimenDefinition' Then
    result := ParseSpecimenDefinition(element, path+'/SpecimenDefinition')
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if element.localName = 'StructureDefinition' Then
    result := ParseStructureDefinition(element, path+'/StructureDefinition')
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if element.localName = 'StructureMap' Then
    result := ParseStructureMap(element, path+'/StructureMap')
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if element.localName = 'Subscription' Then
    result := ParseSubscription(element, path+'/Subscription')
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
  else if element.localName = 'SubscriptionStatus' Then
    result := ParseSubscriptionStatus(element, path+'/SubscriptionStatus')
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
  else if element.localName = 'SubscriptionTopic' Then
    result := ParseSubscriptionTopic(element, path+'/SubscriptionTopic')
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
  else if element.localName = 'Substance' Then
    result := ParseSubstance(element, path+'/Substance')
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
  else if element.localName = 'SubstanceDefinition' Then
    result := ParseSubstanceDefinition(element, path+'/SubstanceDefinition')
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
  else if element.localName = 'SubstanceNucleicAcid' Then
    result := ParseSubstanceNucleicAcid(element, path+'/SubstanceNucleicAcid')
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  else if element.localName = 'SubstancePolymer' Then
    result := ParseSubstancePolymer(element, path+'/SubstancePolymer')
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
  else if element.localName = 'SubstanceProtein' Then
    result := ParseSubstanceProtein(element, path+'/SubstanceProtein')
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  else if element.localName = 'SubstanceReferenceInformation' Then
    result := ParseSubstanceReferenceInformation(element, path+'/SubstanceReferenceInformation')
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
  else if element.localName = 'SubstanceSourceMaterial' Then
    result := ParseSubstanceSourceMaterial(element, path+'/SubstanceSourceMaterial')
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if element.localName = 'SupplyDelivery' Then
    result := ParseSupplyDelivery(element, path+'/SupplyDelivery')
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if element.localName = 'SupplyRequest' Then
    result := ParseSupplyRequest(element, path+'/SupplyRequest')
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if element.localName = 'Task' Then
    result := ParseTask(element, path+'/Task')
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if element.localName = 'TerminologyCapabilities' Then
    result := ParseTerminologyCapabilities(element, path+'/TerminologyCapabilities')
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if element.localName = 'TestReport' Then
    result := ParseTestReport(element, path+'/TestReport')
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if element.localName = 'TestScript' Then
    result := ParseTestScript(element, path+'/TestScript')
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if element.localName = 'ValueSet' Then
    result := ParseValueSet(element, path+'/ValueSet')
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if element.localName = 'VerificationResult' Then
    result := ParseVerificationResult(element, path+'/VerificationResult')
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if element.localName = 'VisionPrescription' Then
    result := ParseVisionPrescription(element, path+'/VisionPrescription')
{$ENDIF FHIR_VISIONPRESCRIPTION}

  else
    raise EXmlException.create('Error: the element '+element.localName+' is not recognised as a valid resource name');
end;

procedure TFHIRXmlComposer.ComposeResource(xml : TXmlBuilder; resource: TFhirResource);
begin
  if (resource = nil) Then
    Raise EXmlException.Create('error - resource is nil');
  Case resource.ResourceType of
{$IFDEF FHIR_ACCOUNT}
    frtAccount: ComposeAccount(xml, 'Account', TFhirAccount(resource));
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
    frtActivityDefinition: ComposeActivityDefinition(xml, 'ActivityDefinition', TFhirActivityDefinition(resource));
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
    frtAdministrableProductDefinition: ComposeAdministrableProductDefinition(xml, 'AdministrableProductDefinition', TFhirAdministrableProductDefinition(resource));
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
    frtAdverseEvent: ComposeAdverseEvent(xml, 'AdverseEvent', TFhirAdverseEvent(resource));
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
    frtAllergyIntolerance: ComposeAllergyIntolerance(xml, 'AllergyIntolerance', TFhirAllergyIntolerance(resource));
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
    frtAppointment: ComposeAppointment(xml, 'Appointment', TFhirAppointment(resource));
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
    frtAppointmentResponse: ComposeAppointmentResponse(xml, 'AppointmentResponse', TFhirAppointmentResponse(resource));
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
    frtAuditEvent: ComposeAuditEvent(xml, 'AuditEvent', TFhirAuditEvent(resource));
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
    frtBasic: ComposeBasic(xml, 'Basic', TFhirBasic(resource));
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
    frtBinary: ComposeBinary(xml, 'Binary', TFhirBinary(resource));
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
    frtBiologicallyDerivedProduct: ComposeBiologicallyDerivedProduct(xml, 'BiologicallyDerivedProduct', TFhirBiologicallyDerivedProduct(resource));
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
    frtBodyStructure: ComposeBodyStructure(xml, 'BodyStructure', TFhirBodyStructure(resource));
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
    frtBundle: ComposeBundle(xml, 'Bundle', TFhirBundle(resource));
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
    frtCapabilityStatement: ComposeCapabilityStatement(xml, 'CapabilityStatement', TFhirCapabilityStatement(resource));
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAPABILITYSTATEMENT2}
    frtCapabilityStatement2: ComposeCapabilityStatement2(xml, 'CapabilityStatement2', TFhirCapabilityStatement2(resource));
{$ENDIF FHIR_CAPABILITYSTATEMENT2}
{$IFDEF FHIR_CAREPLAN}
    frtCarePlan: ComposeCarePlan(xml, 'CarePlan', TFhirCarePlan(resource));
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
    frtCareTeam: ComposeCareTeam(xml, 'CareTeam', TFhirCareTeam(resource));
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
    frtCatalogEntry: ComposeCatalogEntry(xml, 'CatalogEntry', TFhirCatalogEntry(resource));
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
    frtChargeItem: ComposeChargeItem(xml, 'ChargeItem', TFhirChargeItem(resource));
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
    frtChargeItemDefinition: ComposeChargeItemDefinition(xml, 'ChargeItemDefinition', TFhirChargeItemDefinition(resource));
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
    frtCitation: ComposeCitation(xml, 'Citation', TFhirCitation(resource));
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
    frtClaim: ComposeClaim(xml, 'Claim', TFhirClaim(resource));
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
    frtClaimResponse: ComposeClaimResponse(xml, 'ClaimResponse', TFhirClaimResponse(resource));
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
    frtClinicalImpression: ComposeClinicalImpression(xml, 'ClinicalImpression', TFhirClinicalImpression(resource));
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEISSUE}
    frtClinicalUseIssue: ComposeClinicalUseIssue(xml, 'ClinicalUseIssue', TFhirClinicalUseIssue(resource));
{$ENDIF FHIR_CLINICALUSEISSUE}
{$IFDEF FHIR_CODESYSTEM}
    frtCodeSystem: ComposeCodeSystem(xml, 'CodeSystem', TFhirCodeSystem(resource));
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
    frtCommunication: ComposeCommunication(xml, 'Communication', TFhirCommunication(resource));
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
    frtCommunicationRequest: ComposeCommunicationRequest(xml, 'CommunicationRequest', TFhirCommunicationRequest(resource));
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
    frtCompartmentDefinition: ComposeCompartmentDefinition(xml, 'CompartmentDefinition', TFhirCompartmentDefinition(resource));
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
    frtComposition: ComposeComposition(xml, 'Composition', TFhirComposition(resource));
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
    frtConceptMap: ComposeConceptMap(xml, 'ConceptMap', TFhirConceptMap(resource));
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
    frtCondition: ComposeCondition(xml, 'Condition', TFhirCondition(resource));
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONDITIONDEFINITION}
    frtConditionDefinition: ComposeConditionDefinition(xml, 'ConditionDefinition', TFhirConditionDefinition(resource));
{$ENDIF FHIR_CONDITIONDEFINITION}
{$IFDEF FHIR_CONSENT}
    frtConsent: ComposeConsent(xml, 'Consent', TFhirConsent(resource));
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
    frtContract: ComposeContract(xml, 'Contract', TFhirContract(resource));
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
    frtCoverage: ComposeCoverage(xml, 'Coverage', TFhirCoverage(resource));
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
    frtCoverageEligibilityRequest: ComposeCoverageEligibilityRequest(xml, 'CoverageEligibilityRequest', TFhirCoverageEligibilityRequest(resource));
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
    frtCoverageEligibilityResponse: ComposeCoverageEligibilityResponse(xml, 'CoverageEligibilityResponse', TFhirCoverageEligibilityResponse(resource));
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
    frtDetectedIssue: ComposeDetectedIssue(xml, 'DetectedIssue', TFhirDetectedIssue(resource));
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
    frtDevice: ComposeDevice(xml, 'Device', TFhirDevice(resource));
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
    frtDeviceDefinition: ComposeDeviceDefinition(xml, 'DeviceDefinition', TFhirDeviceDefinition(resource));
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
    frtDeviceMetric: ComposeDeviceMetric(xml, 'DeviceMetric', TFhirDeviceMetric(resource));
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
    frtDeviceRequest: ComposeDeviceRequest(xml, 'DeviceRequest', TFhirDeviceRequest(resource));
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
    frtDeviceUseStatement: ComposeDeviceUseStatement(xml, 'DeviceUseStatement', TFhirDeviceUseStatement(resource));
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
    frtDiagnosticReport: ComposeDiagnosticReport(xml, 'DiagnosticReport', TFhirDiagnosticReport(resource));
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
    frtDocumentManifest: ComposeDocumentManifest(xml, 'DocumentManifest', TFhirDocumentManifest(resource));
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
    frtDocumentReference: ComposeDocumentReference(xml, 'DocumentReference', TFhirDocumentReference(resource));
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
    frtEncounter: ComposeEncounter(xml, 'Encounter', TFhirEncounter(resource));
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
    frtEndpoint: ComposeEndpoint(xml, 'Endpoint', TFhirEndpoint(resource));
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
    frtEnrollmentRequest: ComposeEnrollmentRequest(xml, 'EnrollmentRequest', TFhirEnrollmentRequest(resource));
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
    frtEnrollmentResponse: ComposeEnrollmentResponse(xml, 'EnrollmentResponse', TFhirEnrollmentResponse(resource));
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
    frtEpisodeOfCare: ComposeEpisodeOfCare(xml, 'EpisodeOfCare', TFhirEpisodeOfCare(resource));
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
    frtEventDefinition: ComposeEventDefinition(xml, 'EventDefinition', TFhirEventDefinition(resource));
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
    frtEvidence: ComposeEvidence(xml, 'Evidence', TFhirEvidence(resource));
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
    frtEvidenceReport: ComposeEvidenceReport(xml, 'EvidenceReport', TFhirEvidenceReport(resource));
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
    frtEvidenceVariable: ComposeEvidenceVariable(xml, 'EvidenceVariable', TFhirEvidenceVariable(resource));
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
    frtExampleScenario: ComposeExampleScenario(xml, 'ExampleScenario', TFhirExampleScenario(resource));
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
    frtExplanationOfBenefit: ComposeExplanationOfBenefit(xml, 'ExplanationOfBenefit', TFhirExplanationOfBenefit(resource));
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
    frtFamilyMemberHistory: ComposeFamilyMemberHistory(xml, 'FamilyMemberHistory', TFhirFamilyMemberHistory(resource));
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
    frtFlag: ComposeFlag(xml, 'Flag', TFhirFlag(resource));
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
    frtGoal: ComposeGoal(xml, 'Goal', TFhirGoal(resource));
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
    frtGraphDefinition: ComposeGraphDefinition(xml, 'GraphDefinition', TFhirGraphDefinition(resource));
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
    frtGroup: ComposeGroup(xml, 'Group', TFhirGroup(resource));
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
    frtGuidanceResponse: ComposeGuidanceResponse(xml, 'GuidanceResponse', TFhirGuidanceResponse(resource));
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
    frtHealthcareService: ComposeHealthcareService(xml, 'HealthcareService', TFhirHealthcareService(resource));
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
    frtImagingStudy: ComposeImagingStudy(xml, 'ImagingStudy', TFhirImagingStudy(resource));
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
    frtImmunization: ComposeImmunization(xml, 'Immunization', TFhirImmunization(resource));
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
    frtImmunizationEvaluation: ComposeImmunizationEvaluation(xml, 'ImmunizationEvaluation', TFhirImmunizationEvaluation(resource));
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
    frtImmunizationRecommendation: ComposeImmunizationRecommendation(xml, 'ImmunizationRecommendation', TFhirImmunizationRecommendation(resource));
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
    frtImplementationGuide: ComposeImplementationGuide(xml, 'ImplementationGuide', TFhirImplementationGuide(resource));
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
    frtIngredient: ComposeIngredient(xml, 'Ingredient', TFhirIngredient(resource));
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
    frtInsurancePlan: ComposeInsurancePlan(xml, 'InsurancePlan', TFhirInsurancePlan(resource));
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
    frtInvoice: ComposeInvoice(xml, 'Invoice', TFhirInvoice(resource));
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
    frtLibrary: ComposeLibrary(xml, 'Library', TFhirLibrary(resource));
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
    frtLinkage: ComposeLinkage(xml, 'Linkage', TFhirLinkage(resource));
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
    frtList: ComposeList(xml, 'List', TFhirList(resource));
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
    frtLocation: ComposeLocation(xml, 'Location', TFhirLocation(resource));
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
    frtManufacturedItemDefinition: ComposeManufacturedItemDefinition(xml, 'ManufacturedItemDefinition', TFhirManufacturedItemDefinition(resource));
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
    frtMeasure: ComposeMeasure(xml, 'Measure', TFhirMeasure(resource));
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
    frtMeasureReport: ComposeMeasureReport(xml, 'MeasureReport', TFhirMeasureReport(resource));
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDICATION}
    frtMedication: ComposeMedication(xml, 'Medication', TFhirMedication(resource));
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
    frtMedicationAdministration: ComposeMedicationAdministration(xml, 'MedicationAdministration', TFhirMedicationAdministration(resource));
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
    frtMedicationDispense: ComposeMedicationDispense(xml, 'MedicationDispense', TFhirMedicationDispense(resource));
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
    frtMedicationKnowledge: ComposeMedicationKnowledge(xml, 'MedicationKnowledge', TFhirMedicationKnowledge(resource));
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
    frtMedicationRequest: ComposeMedicationRequest(xml, 'MedicationRequest', TFhirMedicationRequest(resource));
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONUSAGE}
    frtMedicationUsage: ComposeMedicationUsage(xml, 'MedicationUsage', TFhirMedicationUsage(resource));
{$ENDIF FHIR_MEDICATIONUSAGE}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
    frtMedicinalProductDefinition: ComposeMedicinalProductDefinition(xml, 'MedicinalProductDefinition', TFhirMedicinalProductDefinition(resource));
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
    frtMessageDefinition: ComposeMessageDefinition(xml, 'MessageDefinition', TFhirMessageDefinition(resource));
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
    frtMessageHeader: ComposeMessageHeader(xml, 'MessageHeader', TFhirMessageHeader(resource));
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
    frtMolecularSequence: ComposeMolecularSequence(xml, 'MolecularSequence', TFhirMolecularSequence(resource));
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
    frtNamingSystem: ComposeNamingSystem(xml, 'NamingSystem', TFhirNamingSystem(resource));
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONINTAKE}
    frtNutritionIntake: ComposeNutritionIntake(xml, 'NutritionIntake', TFhirNutritionIntake(resource));
{$ENDIF FHIR_NUTRITIONINTAKE}
{$IFDEF FHIR_NUTRITIONORDER}
    frtNutritionOrder: ComposeNutritionOrder(xml, 'NutritionOrder', TFhirNutritionOrder(resource));
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
    frtNutritionProduct: ComposeNutritionProduct(xml, 'NutritionProduct', TFhirNutritionProduct(resource));
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
    frtObservation: ComposeObservation(xml, 'Observation', TFhirObservation(resource));
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
    frtObservationDefinition: ComposeObservationDefinition(xml, 'ObservationDefinition', TFhirObservationDefinition(resource));
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
    frtOperationDefinition: ComposeOperationDefinition(xml, 'OperationDefinition', TFhirOperationDefinition(resource));
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
    frtOperationOutcome: ComposeOperationOutcome(xml, 'OperationOutcome', TFhirOperationOutcome(resource));
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
    frtOrganization: ComposeOrganization(xml, 'Organization', TFhirOrganization(resource));
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
    frtOrganizationAffiliation: ComposeOrganizationAffiliation(xml, 'OrganizationAffiliation', TFhirOrganizationAffiliation(resource));
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
    frtPackagedProductDefinition: ComposePackagedProductDefinition(xml, 'PackagedProductDefinition', TFhirPackagedProductDefinition(resource));
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
    frtParameters: ComposeParameters(xml, 'Parameters', TFhirParameters(resource));
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
    frtPatient: ComposePatient(xml, 'Patient', TFhirPatient(resource));
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
    frtPaymentNotice: ComposePaymentNotice(xml, 'PaymentNotice', TFhirPaymentNotice(resource));
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
    frtPaymentReconciliation: ComposePaymentReconciliation(xml, 'PaymentReconciliation', TFhirPaymentReconciliation(resource));
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERMISSION}
    frtPermission: ComposePermission(xml, 'Permission', TFhirPermission(resource));
{$ENDIF FHIR_PERMISSION}
{$IFDEF FHIR_PERSON}
    frtPerson: ComposePerson(xml, 'Person', TFhirPerson(resource));
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
    frtPlanDefinition: ComposePlanDefinition(xml, 'PlanDefinition', TFhirPlanDefinition(resource));
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
    frtPractitioner: ComposePractitioner(xml, 'Practitioner', TFhirPractitioner(resource));
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
    frtPractitionerRole: ComposePractitionerRole(xml, 'PractitionerRole', TFhirPractitionerRole(resource));
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
    frtProcedure: ComposeProcedure(xml, 'Procedure', TFhirProcedure(resource));
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
    frtProvenance: ComposeProvenance(xml, 'Provenance', TFhirProvenance(resource));
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
    frtQuestionnaire: ComposeQuestionnaire(xml, 'Questionnaire', TFhirQuestionnaire(resource));
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
    frtQuestionnaireResponse: ComposeQuestionnaireResponse(xml, 'QuestionnaireResponse', TFhirQuestionnaireResponse(resource));
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
    frtRegulatedAuthorization: ComposeRegulatedAuthorization(xml, 'RegulatedAuthorization', TFhirRegulatedAuthorization(resource));
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
    frtRelatedPerson: ComposeRelatedPerson(xml, 'RelatedPerson', TFhirRelatedPerson(resource));
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
    frtRequestGroup: ComposeRequestGroup(xml, 'RequestGroup', TFhirRequestGroup(resource));
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
    frtResearchStudy: ComposeResearchStudy(xml, 'ResearchStudy', TFhirResearchStudy(resource));
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
    frtResearchSubject: ComposeResearchSubject(xml, 'ResearchSubject', TFhirResearchSubject(resource));
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
    frtRiskAssessment: ComposeRiskAssessment(xml, 'RiskAssessment', TFhirRiskAssessment(resource));
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
    frtSchedule: ComposeSchedule(xml, 'Schedule', TFhirSchedule(resource));
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
    frtSearchParameter: ComposeSearchParameter(xml, 'SearchParameter', TFhirSearchParameter(resource));
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
    frtServiceRequest: ComposeServiceRequest(xml, 'ServiceRequest', TFhirServiceRequest(resource));
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
    frtSlot: ComposeSlot(xml, 'Slot', TFhirSlot(resource));
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
    frtSpecimen: ComposeSpecimen(xml, 'Specimen', TFhirSpecimen(resource));
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
    frtSpecimenDefinition: ComposeSpecimenDefinition(xml, 'SpecimenDefinition', TFhirSpecimenDefinition(resource));
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
    frtStructureDefinition: ComposeStructureDefinition(xml, 'StructureDefinition', TFhirStructureDefinition(resource));
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
    frtStructureMap: ComposeStructureMap(xml, 'StructureMap', TFhirStructureMap(resource));
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
    frtSubscription: ComposeSubscription(xml, 'Subscription', TFhirSubscription(resource));
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
    frtSubscriptionStatus: ComposeSubscriptionStatus(xml, 'SubscriptionStatus', TFhirSubscriptionStatus(resource));
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
    frtSubscriptionTopic: ComposeSubscriptionTopic(xml, 'SubscriptionTopic', TFhirSubscriptionTopic(resource));
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
    frtSubstance: ComposeSubstance(xml, 'Substance', TFhirSubstance(resource));
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
    frtSubstanceDefinition: ComposeSubstanceDefinition(xml, 'SubstanceDefinition', TFhirSubstanceDefinition(resource));
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
    frtSubstanceNucleicAcid: ComposeSubstanceNucleicAcid(xml, 'SubstanceNucleicAcid', TFhirSubstanceNucleicAcid(resource));
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
    frtSubstancePolymer: ComposeSubstancePolymer(xml, 'SubstancePolymer', TFhirSubstancePolymer(resource));
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
    frtSubstanceProtein: ComposeSubstanceProtein(xml, 'SubstanceProtein', TFhirSubstanceProtein(resource));
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
    frtSubstanceReferenceInformation: ComposeSubstanceReferenceInformation(xml, 'SubstanceReferenceInformation', TFhirSubstanceReferenceInformation(resource));
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
    frtSubstanceSourceMaterial: ComposeSubstanceSourceMaterial(xml, 'SubstanceSourceMaterial', TFhirSubstanceSourceMaterial(resource));
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUPPLYDELIVERY}
    frtSupplyDelivery: ComposeSupplyDelivery(xml, 'SupplyDelivery', TFhirSupplyDelivery(resource));
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
    frtSupplyRequest: ComposeSupplyRequest(xml, 'SupplyRequest', TFhirSupplyRequest(resource));
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
    frtTask: ComposeTask(xml, 'Task', TFhirTask(resource));
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
    frtTerminologyCapabilities: ComposeTerminologyCapabilities(xml, 'TerminologyCapabilities', TFhirTerminologyCapabilities(resource));
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
    frtTestReport: ComposeTestReport(xml, 'TestReport', TFhirTestReport(resource));
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
    frtTestScript: ComposeTestScript(xml, 'TestScript', TFhirTestScript(resource));
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
    frtValueSet: ComposeValueSet(xml, 'ValueSet', TFhirValueSet(resource));
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
    frtVerificationResult: ComposeVerificationResult(xml, 'VerificationResult', TFhirVerificationResult(resource));
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
    frtVisionPrescription: ComposeVisionPrescription(xml, 'VisionPrescription', TFhirVisionPrescription(resource));
{$ENDIF FHIR_VISIONPRESCRIPTION}

  else
    raise EXmlException.create('Internal error: the resource type '+CODES_TFhirResourceType[resource.ResourceType]+' is not a valid resource type');
  end;
end;

function TFHIRXmlParser.ParseFragment(element : TMXmlElement) : TFHIRObject;
begin
  if (element = nil) Then
    Raise EXmlException.Create('error - element is nil')
  else if SameText(element.Name, 'Address') then
    result := parseAddress(element, element.Name)
  else if SameText(element.Name, 'Annotation') then
    result := parseAnnotation(element, element.Name)
  else if SameText(element.Name, 'Attachment') then
    result := parseAttachment(element, element.Name)
  else if SameText(element.Name, 'CodeableConcept') then
    result := parseCodeableConcept(element, element.Name)
  else if SameText(element.Name, 'CodeableReference') then
    result := parseCodeableReference(element, element.Name)
  else if SameText(element.Name, 'Coding') then
    result := parseCoding(element, element.Name)
  else if SameText(element.Name, 'ContactDetail') then
    result := parseContactDetail(element, element.Name)
  else if SameText(element.Name, 'ContactPoint') then
    result := parseContactPoint(element, element.Name)
  else if SameText(element.Name, 'Contributor') then
    result := parseContributor(element, element.Name)
  else if SameText(element.Name, 'DataRequirement') then
    result := parseDataRequirement(element, element.Name)
  else if SameText(element.Name, 'Expression') then
    result := parseExpression(element, element.Name)
  else if SameText(element.Name, 'Extension') then
    result := parseExtension(element, element.Name)
  else if SameText(element.Name, 'HumanName') then
    result := parseHumanName(element, element.Name)
  else if SameText(element.Name, 'Identifier') then
    result := parseIdentifier(element, element.Name)
  else if SameText(element.Name, 'Meta') then
    result := parseMeta(element, element.Name)
  else if SameText(element.Name, 'Money') then
    result := parseMoney(element, element.Name)
  else if SameText(element.Name, 'Narrative') then
    result := parseNarrative(element, element.Name)
  else if SameText(element.Name, 'ParameterDefinition') then
    result := parseParameterDefinition(element, element.Name)
  else if SameText(element.Name, 'Period') then
    result := parsePeriod(element, element.Name)
  else if SameText(element.Name, 'Quantity') then
    result := parseQuantity(element, element.Name)
  else if SameText(element.Name, 'Range') then
    result := parseRange(element, element.Name)
  else if SameText(element.Name, 'Ratio') then
    result := parseRatio(element, element.Name)
  else if SameText(element.Name, 'Reference') then
    result := parseReference(element, element.Name)
  else if SameText(element.Name, 'RelatedArtifact') then
    result := parseRelatedArtifact(element, element.Name)
  else if SameText(element.Name, 'SampledData') then
    result := parseSampledData(element, element.Name)
  else if SameText(element.Name, 'Signature') then
    result := parseSignature(element, element.Name)
  else if SameText(element.Name, 'TriggerDefinition') then
    result := parseTriggerDefinition(element, element.Name)
  else if SameText(element.Name, 'UsageContext') then
    result := parseUsageContext(element, element.Name)
  else if SameText(element.Name, 'Age') then
    result := parseAge(element, element.Name)
  else if SameText(element.Name, 'Count') then
    result := parseCount(element, element.Name)
  else if SameText(element.Name, 'Distance') then
    result := parseDistance(element, element.Name)
  else if SameText(element.Name, 'Dosage') then
    result := parseDosage(element, element.Name)
  else if SameText(element.Name, 'Duration') then
    result := parseDuration(element, element.Name)
  else if SameText(element.Name, 'ElementDefinition') then
    result := parseElementDefinition(element, element.Name)
  else if SameText(element.Name, 'MarketingStatus') then
    result := parseMarketingStatus(element, element.Name)
  else if SameText(element.Name, 'OrderedDistribution') then
    result := parseOrderedDistribution(element, element.Name)
  else if SameText(element.Name, 'Population') then
    result := parsePopulation(element, element.Name)
  else if SameText(element.Name, 'ProdCharacteristic') then
    result := parseProdCharacteristic(element, element.Name)
  else if SameText(element.Name, 'ProductShelfLife') then
    result := parseProductShelfLife(element, element.Name)
  else if SameText(element.Name, 'Statistic') then
    result := parseStatistic(element, element.Name)
  else if SameText(element.Name, 'Timing') then
    result := parseTiming(element, element.Name)
{$IFDEF FHIR_ACCOUNT}
  else if SameText(element.Name, 'Account') then
    result := parseAccount(element, element.Name)
{$ENDIF FHIR_ACCOUNT}
{$IFDEF FHIR_ACTIVITYDEFINITION}
  else if SameText(element.Name, 'ActivityDefinition') then
    result := parseActivityDefinition(element, element.Name)
{$ENDIF FHIR_ACTIVITYDEFINITION}
{$IFDEF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
  else if SameText(element.Name, 'AdministrableProductDefinition') then
    result := parseAdministrableProductDefinition(element, element.Name)
{$ENDIF FHIR_ADMINISTRABLEPRODUCTDEFINITION}
{$IFDEF FHIR_ADVERSEEVENT}
  else if SameText(element.Name, 'AdverseEvent') then
    result := parseAdverseEvent(element, element.Name)
{$ENDIF FHIR_ADVERSEEVENT}
{$IFDEF FHIR_ALLERGYINTOLERANCE}
  else if SameText(element.Name, 'AllergyIntolerance') then
    result := parseAllergyIntolerance(element, element.Name)
{$ENDIF FHIR_ALLERGYINTOLERANCE}
{$IFDEF FHIR_APPOINTMENT}
  else if SameText(element.Name, 'Appointment') then
    result := parseAppointment(element, element.Name)
{$ENDIF FHIR_APPOINTMENT}
{$IFDEF FHIR_APPOINTMENTRESPONSE}
  else if SameText(element.Name, 'AppointmentResponse') then
    result := parseAppointmentResponse(element, element.Name)
{$ENDIF FHIR_APPOINTMENTRESPONSE}
{$IFDEF FHIR_AUDITEVENT}
  else if SameText(element.Name, 'AuditEvent') then
    result := parseAuditEvent(element, element.Name)
{$ENDIF FHIR_AUDITEVENT}
{$IFDEF FHIR_BASIC}
  else if SameText(element.Name, 'Basic') then
    result := parseBasic(element, element.Name)
{$ENDIF FHIR_BASIC}
{$IFDEF FHIR_BINARY}
  else if SameText(element.Name, 'Binary') then
    result := parseBinary(element, element.Name)
{$ENDIF FHIR_BINARY}
{$IFDEF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
  else if SameText(element.Name, 'BiologicallyDerivedProduct') then
    result := parseBiologicallyDerivedProduct(element, element.Name)
{$ENDIF FHIR_BIOLOGICALLYDERIVEDPRODUCT}
{$IFDEF FHIR_BODYSTRUCTURE}
  else if SameText(element.Name, 'BodyStructure') then
    result := parseBodyStructure(element, element.Name)
{$ENDIF FHIR_BODYSTRUCTURE}
{$IFDEF FHIR_BUNDLE}
  else if SameText(element.Name, 'Bundle') then
    result := parseBundle(element, element.Name)
{$ENDIF FHIR_BUNDLE}
{$IFDEF FHIR_CAPABILITYSTATEMENT}
  else if SameText(element.Name, 'CapabilityStatement') then
    result := parseCapabilityStatement(element, element.Name)
{$ENDIF FHIR_CAPABILITYSTATEMENT}
{$IFDEF FHIR_CAPABILITYSTATEMENT2}
  else if SameText(element.Name, 'CapabilityStatement2') then
    result := parseCapabilityStatement2(element, element.Name)
{$ENDIF FHIR_CAPABILITYSTATEMENT2}
{$IFDEF FHIR_CAREPLAN}
  else if SameText(element.Name, 'CarePlan') then
    result := parseCarePlan(element, element.Name)
{$ENDIF FHIR_CAREPLAN}
{$IFDEF FHIR_CARETEAM}
  else if SameText(element.Name, 'CareTeam') then
    result := parseCareTeam(element, element.Name)
{$ENDIF FHIR_CARETEAM}
{$IFDEF FHIR_CATALOGENTRY}
  else if SameText(element.Name, 'CatalogEntry') then
    result := parseCatalogEntry(element, element.Name)
{$ENDIF FHIR_CATALOGENTRY}
{$IFDEF FHIR_CHARGEITEM}
  else if SameText(element.Name, 'ChargeItem') then
    result := parseChargeItem(element, element.Name)
{$ENDIF FHIR_CHARGEITEM}
{$IFDEF FHIR_CHARGEITEMDEFINITION}
  else if SameText(element.Name, 'ChargeItemDefinition') then
    result := parseChargeItemDefinition(element, element.Name)
{$ENDIF FHIR_CHARGEITEMDEFINITION}
{$IFDEF FHIR_CITATION}
  else if SameText(element.Name, 'Citation') then
    result := parseCitation(element, element.Name)
{$ENDIF FHIR_CITATION}
{$IFDEF FHIR_CLAIM}
  else if SameText(element.Name, 'Claim') then
    result := parseClaim(element, element.Name)
{$ENDIF FHIR_CLAIM}
{$IFDEF FHIR_CLAIMRESPONSE}
  else if SameText(element.Name, 'ClaimResponse') then
    result := parseClaimResponse(element, element.Name)
{$ENDIF FHIR_CLAIMRESPONSE}
{$IFDEF FHIR_CLINICALIMPRESSION}
  else if SameText(element.Name, 'ClinicalImpression') then
    result := parseClinicalImpression(element, element.Name)
{$ENDIF FHIR_CLINICALIMPRESSION}
{$IFDEF FHIR_CLINICALUSEISSUE}
  else if SameText(element.Name, 'ClinicalUseIssue') then
    result := parseClinicalUseIssue(element, element.Name)
{$ENDIF FHIR_CLINICALUSEISSUE}
{$IFDEF FHIR_CODESYSTEM}
  else if SameText(element.Name, 'CodeSystem') then
    result := parseCodeSystem(element, element.Name)
{$ENDIF FHIR_CODESYSTEM}
{$IFDEF FHIR_COMMUNICATION}
  else if SameText(element.Name, 'Communication') then
    result := parseCommunication(element, element.Name)
{$ENDIF FHIR_COMMUNICATION}
{$IFDEF FHIR_COMMUNICATIONREQUEST}
  else if SameText(element.Name, 'CommunicationRequest') then
    result := parseCommunicationRequest(element, element.Name)
{$ENDIF FHIR_COMMUNICATIONREQUEST}
{$IFDEF FHIR_COMPARTMENTDEFINITION}
  else if SameText(element.Name, 'CompartmentDefinition') then
    result := parseCompartmentDefinition(element, element.Name)
{$ENDIF FHIR_COMPARTMENTDEFINITION}
{$IFDEF FHIR_COMPOSITION}
  else if SameText(element.Name, 'Composition') then
    result := parseComposition(element, element.Name)
{$ENDIF FHIR_COMPOSITION}
{$IFDEF FHIR_CONCEPTMAP}
  else if SameText(element.Name, 'ConceptMap') then
    result := parseConceptMap(element, element.Name)
{$ENDIF FHIR_CONCEPTMAP}
{$IFDEF FHIR_CONDITION}
  else if SameText(element.Name, 'Condition') then
    result := parseCondition(element, element.Name)
{$ENDIF FHIR_CONDITION}
{$IFDEF FHIR_CONDITIONDEFINITION}
  else if SameText(element.Name, 'ConditionDefinition') then
    result := parseConditionDefinition(element, element.Name)
{$ENDIF FHIR_CONDITIONDEFINITION}
{$IFDEF FHIR_CONSENT}
  else if SameText(element.Name, 'Consent') then
    result := parseConsent(element, element.Name)
{$ENDIF FHIR_CONSENT}
{$IFDEF FHIR_CONTRACT}
  else if SameText(element.Name, 'Contract') then
    result := parseContract(element, element.Name)
{$ENDIF FHIR_CONTRACT}
{$IFDEF FHIR_COVERAGE}
  else if SameText(element.Name, 'Coverage') then
    result := parseCoverage(element, element.Name)
{$ENDIF FHIR_COVERAGE}
{$IFDEF FHIR_COVERAGEELIGIBILITYREQUEST}
  else if SameText(element.Name, 'CoverageEligibilityRequest') then
    result := parseCoverageEligibilityRequest(element, element.Name)
{$ENDIF FHIR_COVERAGEELIGIBILITYREQUEST}
{$IFDEF FHIR_COVERAGEELIGIBILITYRESPONSE}
  else if SameText(element.Name, 'CoverageEligibilityResponse') then
    result := parseCoverageEligibilityResponse(element, element.Name)
{$ENDIF FHIR_COVERAGEELIGIBILITYRESPONSE}
{$IFDEF FHIR_DETECTEDISSUE}
  else if SameText(element.Name, 'DetectedIssue') then
    result := parseDetectedIssue(element, element.Name)
{$ENDIF FHIR_DETECTEDISSUE}
{$IFDEF FHIR_DEVICE}
  else if SameText(element.Name, 'Device') then
    result := parseDevice(element, element.Name)
{$ENDIF FHIR_DEVICE}
{$IFDEF FHIR_DEVICEDEFINITION}
  else if SameText(element.Name, 'DeviceDefinition') then
    result := parseDeviceDefinition(element, element.Name)
{$ENDIF FHIR_DEVICEDEFINITION}
{$IFDEF FHIR_DEVICEMETRIC}
  else if SameText(element.Name, 'DeviceMetric') then
    result := parseDeviceMetric(element, element.Name)
{$ENDIF FHIR_DEVICEMETRIC}
{$IFDEF FHIR_DEVICEREQUEST}
  else if SameText(element.Name, 'DeviceRequest') then
    result := parseDeviceRequest(element, element.Name)
{$ENDIF FHIR_DEVICEREQUEST}
{$IFDEF FHIR_DEVICEUSESTATEMENT}
  else if SameText(element.Name, 'DeviceUseStatement') then
    result := parseDeviceUseStatement(element, element.Name)
{$ENDIF FHIR_DEVICEUSESTATEMENT}
{$IFDEF FHIR_DIAGNOSTICREPORT}
  else if SameText(element.Name, 'DiagnosticReport') then
    result := parseDiagnosticReport(element, element.Name)
{$ENDIF FHIR_DIAGNOSTICREPORT}
{$IFDEF FHIR_DOCUMENTMANIFEST}
  else if SameText(element.Name, 'DocumentManifest') then
    result := parseDocumentManifest(element, element.Name)
{$ENDIF FHIR_DOCUMENTMANIFEST}
{$IFDEF FHIR_DOCUMENTREFERENCE}
  else if SameText(element.Name, 'DocumentReference') then
    result := parseDocumentReference(element, element.Name)
{$ENDIF FHIR_DOCUMENTREFERENCE}
{$IFDEF FHIR_ENCOUNTER}
  else if SameText(element.Name, 'Encounter') then
    result := parseEncounter(element, element.Name)
{$ENDIF FHIR_ENCOUNTER}
{$IFDEF FHIR_ENDPOINT}
  else if SameText(element.Name, 'Endpoint') then
    result := parseEndpoint(element, element.Name)
{$ENDIF FHIR_ENDPOINT}
{$IFDEF FHIR_ENROLLMENTREQUEST}
  else if SameText(element.Name, 'EnrollmentRequest') then
    result := parseEnrollmentRequest(element, element.Name)
{$ENDIF FHIR_ENROLLMENTREQUEST}
{$IFDEF FHIR_ENROLLMENTRESPONSE}
  else if SameText(element.Name, 'EnrollmentResponse') then
    result := parseEnrollmentResponse(element, element.Name)
{$ENDIF FHIR_ENROLLMENTRESPONSE}
{$IFDEF FHIR_EPISODEOFCARE}
  else if SameText(element.Name, 'EpisodeOfCare') then
    result := parseEpisodeOfCare(element, element.Name)
{$ENDIF FHIR_EPISODEOFCARE}
{$IFDEF FHIR_EVENTDEFINITION}
  else if SameText(element.Name, 'EventDefinition') then
    result := parseEventDefinition(element, element.Name)
{$ENDIF FHIR_EVENTDEFINITION}
{$IFDEF FHIR_EVIDENCE}
  else if SameText(element.Name, 'Evidence') then
    result := parseEvidence(element, element.Name)
{$ENDIF FHIR_EVIDENCE}
{$IFDEF FHIR_EVIDENCEREPORT}
  else if SameText(element.Name, 'EvidenceReport') then
    result := parseEvidenceReport(element, element.Name)
{$ENDIF FHIR_EVIDENCEREPORT}
{$IFDEF FHIR_EVIDENCEVARIABLE}
  else if SameText(element.Name, 'EvidenceVariable') then
    result := parseEvidenceVariable(element, element.Name)
{$ENDIF FHIR_EVIDENCEVARIABLE}
{$IFDEF FHIR_EXAMPLESCENARIO}
  else if SameText(element.Name, 'ExampleScenario') then
    result := parseExampleScenario(element, element.Name)
{$ENDIF FHIR_EXAMPLESCENARIO}
{$IFDEF FHIR_EXPLANATIONOFBENEFIT}
  else if SameText(element.Name, 'ExplanationOfBenefit') then
    result := parseExplanationOfBenefit(element, element.Name)
{$ENDIF FHIR_EXPLANATIONOFBENEFIT}
{$IFDEF FHIR_FAMILYMEMBERHISTORY}
  else if SameText(element.Name, 'FamilyMemberHistory') then
    result := parseFamilyMemberHistory(element, element.Name)
{$ENDIF FHIR_FAMILYMEMBERHISTORY}
{$IFDEF FHIR_FLAG}
  else if SameText(element.Name, 'Flag') then
    result := parseFlag(element, element.Name)
{$ENDIF FHIR_FLAG}
{$IFDEF FHIR_GOAL}
  else if SameText(element.Name, 'Goal') then
    result := parseGoal(element, element.Name)
{$ENDIF FHIR_GOAL}
{$IFDEF FHIR_GRAPHDEFINITION}
  else if SameText(element.Name, 'GraphDefinition') then
    result := parseGraphDefinition(element, element.Name)
{$ENDIF FHIR_GRAPHDEFINITION}
{$IFDEF FHIR_GROUP}
  else if SameText(element.Name, 'Group') then
    result := parseGroup(element, element.Name)
{$ENDIF FHIR_GROUP}
{$IFDEF FHIR_GUIDANCERESPONSE}
  else if SameText(element.Name, 'GuidanceResponse') then
    result := parseGuidanceResponse(element, element.Name)
{$ENDIF FHIR_GUIDANCERESPONSE}
{$IFDEF FHIR_HEALTHCARESERVICE}
  else if SameText(element.Name, 'HealthcareService') then
    result := parseHealthcareService(element, element.Name)
{$ENDIF FHIR_HEALTHCARESERVICE}
{$IFDEF FHIR_IMAGINGSTUDY}
  else if SameText(element.Name, 'ImagingStudy') then
    result := parseImagingStudy(element, element.Name)
{$ENDIF FHIR_IMAGINGSTUDY}
{$IFDEF FHIR_IMMUNIZATION}
  else if SameText(element.Name, 'Immunization') then
    result := parseImmunization(element, element.Name)
{$ENDIF FHIR_IMMUNIZATION}
{$IFDEF FHIR_IMMUNIZATIONEVALUATION}
  else if SameText(element.Name, 'ImmunizationEvaluation') then
    result := parseImmunizationEvaluation(element, element.Name)
{$ENDIF FHIR_IMMUNIZATIONEVALUATION}
{$IFDEF FHIR_IMMUNIZATIONRECOMMENDATION}
  else if SameText(element.Name, 'ImmunizationRecommendation') then
    result := parseImmunizationRecommendation(element, element.Name)
{$ENDIF FHIR_IMMUNIZATIONRECOMMENDATION}
{$IFDEF FHIR_IMPLEMENTATIONGUIDE}
  else if SameText(element.Name, 'ImplementationGuide') then
    result := parseImplementationGuide(element, element.Name)
{$ENDIF FHIR_IMPLEMENTATIONGUIDE}
{$IFDEF FHIR_INGREDIENT}
  else if SameText(element.Name, 'Ingredient') then
    result := parseIngredient(element, element.Name)
{$ENDIF FHIR_INGREDIENT}
{$IFDEF FHIR_INSURANCEPLAN}
  else if SameText(element.Name, 'InsurancePlan') then
    result := parseInsurancePlan(element, element.Name)
{$ENDIF FHIR_INSURANCEPLAN}
{$IFDEF FHIR_INVOICE}
  else if SameText(element.Name, 'Invoice') then
    result := parseInvoice(element, element.Name)
{$ENDIF FHIR_INVOICE}
{$IFDEF FHIR_LIBRARY}
  else if SameText(element.Name, 'Library') then
    result := parseLibrary(element, element.Name)
{$ENDIF FHIR_LIBRARY}
{$IFDEF FHIR_LINKAGE}
  else if SameText(element.Name, 'Linkage') then
    result := parseLinkage(element, element.Name)
{$ENDIF FHIR_LINKAGE}
{$IFDEF FHIR_LIST}
  else if SameText(element.Name, 'List') then
    result := parseList(element, element.Name)
{$ENDIF FHIR_LIST}
{$IFDEF FHIR_LOCATION}
  else if SameText(element.Name, 'Location') then
    result := parseLocation(element, element.Name)
{$ENDIF FHIR_LOCATION}
{$IFDEF FHIR_MANUFACTUREDITEMDEFINITION}
  else if SameText(element.Name, 'ManufacturedItemDefinition') then
    result := parseManufacturedItemDefinition(element, element.Name)
{$ENDIF FHIR_MANUFACTUREDITEMDEFINITION}
{$IFDEF FHIR_MEASURE}
  else if SameText(element.Name, 'Measure') then
    result := parseMeasure(element, element.Name)
{$ENDIF FHIR_MEASURE}
{$IFDEF FHIR_MEASUREREPORT}
  else if SameText(element.Name, 'MeasureReport') then
    result := parseMeasureReport(element, element.Name)
{$ENDIF FHIR_MEASUREREPORT}
{$IFDEF FHIR_MEDICATION}
  else if SameText(element.Name, 'Medication') then
    result := parseMedication(element, element.Name)
{$ENDIF FHIR_MEDICATION}
{$IFDEF FHIR_MEDICATIONADMINISTRATION}
  else if SameText(element.Name, 'MedicationAdministration') then
    result := parseMedicationAdministration(element, element.Name)
{$ENDIF FHIR_MEDICATIONADMINISTRATION}
{$IFDEF FHIR_MEDICATIONDISPENSE}
  else if SameText(element.Name, 'MedicationDispense') then
    result := parseMedicationDispense(element, element.Name)
{$ENDIF FHIR_MEDICATIONDISPENSE}
{$IFDEF FHIR_MEDICATIONKNOWLEDGE}
  else if SameText(element.Name, 'MedicationKnowledge') then
    result := parseMedicationKnowledge(element, element.Name)
{$ENDIF FHIR_MEDICATIONKNOWLEDGE}
{$IFDEF FHIR_MEDICATIONREQUEST}
  else if SameText(element.Name, 'MedicationRequest') then
    result := parseMedicationRequest(element, element.Name)
{$ENDIF FHIR_MEDICATIONREQUEST}
{$IFDEF FHIR_MEDICATIONUSAGE}
  else if SameText(element.Name, 'MedicationUsage') then
    result := parseMedicationUsage(element, element.Name)
{$ENDIF FHIR_MEDICATIONUSAGE}
{$IFDEF FHIR_MEDICINALPRODUCTDEFINITION}
  else if SameText(element.Name, 'MedicinalProductDefinition') then
    result := parseMedicinalProductDefinition(element, element.Name)
{$ENDIF FHIR_MEDICINALPRODUCTDEFINITION}
{$IFDEF FHIR_MESSAGEDEFINITION}
  else if SameText(element.Name, 'MessageDefinition') then
    result := parseMessageDefinition(element, element.Name)
{$ENDIF FHIR_MESSAGEDEFINITION}
{$IFDEF FHIR_MESSAGEHEADER}
  else if SameText(element.Name, 'MessageHeader') then
    result := parseMessageHeader(element, element.Name)
{$ENDIF FHIR_MESSAGEHEADER}
{$IFDEF FHIR_MOLECULARSEQUENCE}
  else if SameText(element.Name, 'MolecularSequence') then
    result := parseMolecularSequence(element, element.Name)
{$ENDIF FHIR_MOLECULARSEQUENCE}
{$IFDEF FHIR_NAMINGSYSTEM}
  else if SameText(element.Name, 'NamingSystem') then
    result := parseNamingSystem(element, element.Name)
{$ENDIF FHIR_NAMINGSYSTEM}
{$IFDEF FHIR_NUTRITIONINTAKE}
  else if SameText(element.Name, 'NutritionIntake') then
    result := parseNutritionIntake(element, element.Name)
{$ENDIF FHIR_NUTRITIONINTAKE}
{$IFDEF FHIR_NUTRITIONORDER}
  else if SameText(element.Name, 'NutritionOrder') then
    result := parseNutritionOrder(element, element.Name)
{$ENDIF FHIR_NUTRITIONORDER}
{$IFDEF FHIR_NUTRITIONPRODUCT}
  else if SameText(element.Name, 'NutritionProduct') then
    result := parseNutritionProduct(element, element.Name)
{$ENDIF FHIR_NUTRITIONPRODUCT}
{$IFDEF FHIR_OBSERVATION}
  else if SameText(element.Name, 'Observation') then
    result := parseObservation(element, element.Name)
{$ENDIF FHIR_OBSERVATION}
{$IFDEF FHIR_OBSERVATIONDEFINITION}
  else if SameText(element.Name, 'ObservationDefinition') then
    result := parseObservationDefinition(element, element.Name)
{$ENDIF FHIR_OBSERVATIONDEFINITION}
{$IFDEF FHIR_OPERATIONDEFINITION}
  else if SameText(element.Name, 'OperationDefinition') then
    result := parseOperationDefinition(element, element.Name)
{$ENDIF FHIR_OPERATIONDEFINITION}
{$IFDEF FHIR_OPERATIONOUTCOME}
  else if SameText(element.Name, 'OperationOutcome') then
    result := parseOperationOutcome(element, element.Name)
{$ENDIF FHIR_OPERATIONOUTCOME}
{$IFDEF FHIR_ORGANIZATION}
  else if SameText(element.Name, 'Organization') then
    result := parseOrganization(element, element.Name)
{$ENDIF FHIR_ORGANIZATION}
{$IFDEF FHIR_ORGANIZATIONAFFILIATION}
  else if SameText(element.Name, 'OrganizationAffiliation') then
    result := parseOrganizationAffiliation(element, element.Name)
{$ENDIF FHIR_ORGANIZATIONAFFILIATION}
{$IFDEF FHIR_PACKAGEDPRODUCTDEFINITION}
  else if SameText(element.Name, 'PackagedProductDefinition') then
    result := parsePackagedProductDefinition(element, element.Name)
{$ENDIF FHIR_PACKAGEDPRODUCTDEFINITION}
{$IFDEF FHIR_PARAMETERS}
  else if SameText(element.Name, 'Parameters') then
    result := parseParameters(element, element.Name)
{$ENDIF FHIR_PARAMETERS}
{$IFDEF FHIR_PATIENT}
  else if SameText(element.Name, 'Patient') then
    result := parsePatient(element, element.Name)
{$ENDIF FHIR_PATIENT}
{$IFDEF FHIR_PAYMENTNOTICE}
  else if SameText(element.Name, 'PaymentNotice') then
    result := parsePaymentNotice(element, element.Name)
{$ENDIF FHIR_PAYMENTNOTICE}
{$IFDEF FHIR_PAYMENTRECONCILIATION}
  else if SameText(element.Name, 'PaymentReconciliation') then
    result := parsePaymentReconciliation(element, element.Name)
{$ENDIF FHIR_PAYMENTRECONCILIATION}
{$IFDEF FHIR_PERMISSION}
  else if SameText(element.Name, 'Permission') then
    result := parsePermission(element, element.Name)
{$ENDIF FHIR_PERMISSION}
{$IFDEF FHIR_PERSON}
  else if SameText(element.Name, 'Person') then
    result := parsePerson(element, element.Name)
{$ENDIF FHIR_PERSON}
{$IFDEF FHIR_PLANDEFINITION}
  else if SameText(element.Name, 'PlanDefinition') then
    result := parsePlanDefinition(element, element.Name)
{$ENDIF FHIR_PLANDEFINITION}
{$IFDEF FHIR_PRACTITIONER}
  else if SameText(element.Name, 'Practitioner') then
    result := parsePractitioner(element, element.Name)
{$ENDIF FHIR_PRACTITIONER}
{$IFDEF FHIR_PRACTITIONERROLE}
  else if SameText(element.Name, 'PractitionerRole') then
    result := parsePractitionerRole(element, element.Name)
{$ENDIF FHIR_PRACTITIONERROLE}
{$IFDEF FHIR_PROCEDURE}
  else if SameText(element.Name, 'Procedure') then
    result := parseProcedure(element, element.Name)
{$ENDIF FHIR_PROCEDURE}
{$IFDEF FHIR_PROVENANCE}
  else if SameText(element.Name, 'Provenance') then
    result := parseProvenance(element, element.Name)
{$ENDIF FHIR_PROVENANCE}
{$IFDEF FHIR_QUESTIONNAIRE}
  else if SameText(element.Name, 'Questionnaire') then
    result := parseQuestionnaire(element, element.Name)
{$ENDIF FHIR_QUESTIONNAIRE}
{$IFDEF FHIR_QUESTIONNAIRERESPONSE}
  else if SameText(element.Name, 'QuestionnaireResponse') then
    result := parseQuestionnaireResponse(element, element.Name)
{$ENDIF FHIR_QUESTIONNAIRERESPONSE}
{$IFDEF FHIR_REGULATEDAUTHORIZATION}
  else if SameText(element.Name, 'RegulatedAuthorization') then
    result := parseRegulatedAuthorization(element, element.Name)
{$ENDIF FHIR_REGULATEDAUTHORIZATION}
{$IFDEF FHIR_RELATEDPERSON}
  else if SameText(element.Name, 'RelatedPerson') then
    result := parseRelatedPerson(element, element.Name)
{$ENDIF FHIR_RELATEDPERSON}
{$IFDEF FHIR_REQUESTGROUP}
  else if SameText(element.Name, 'RequestGroup') then
    result := parseRequestGroup(element, element.Name)
{$ENDIF FHIR_REQUESTGROUP}
{$IFDEF FHIR_RESEARCHSTUDY}
  else if SameText(element.Name, 'ResearchStudy') then
    result := parseResearchStudy(element, element.Name)
{$ENDIF FHIR_RESEARCHSTUDY}
{$IFDEF FHIR_RESEARCHSUBJECT}
  else if SameText(element.Name, 'ResearchSubject') then
    result := parseResearchSubject(element, element.Name)
{$ENDIF FHIR_RESEARCHSUBJECT}
{$IFDEF FHIR_RISKASSESSMENT}
  else if SameText(element.Name, 'RiskAssessment') then
    result := parseRiskAssessment(element, element.Name)
{$ENDIF FHIR_RISKASSESSMENT}
{$IFDEF FHIR_SCHEDULE}
  else if SameText(element.Name, 'Schedule') then
    result := parseSchedule(element, element.Name)
{$ENDIF FHIR_SCHEDULE}
{$IFDEF FHIR_SEARCHPARAMETER}
  else if SameText(element.Name, 'SearchParameter') then
    result := parseSearchParameter(element, element.Name)
{$ENDIF FHIR_SEARCHPARAMETER}
{$IFDEF FHIR_SERVICEREQUEST}
  else if SameText(element.Name, 'ServiceRequest') then
    result := parseServiceRequest(element, element.Name)
{$ENDIF FHIR_SERVICEREQUEST}
{$IFDEF FHIR_SLOT}
  else if SameText(element.Name, 'Slot') then
    result := parseSlot(element, element.Name)
{$ENDIF FHIR_SLOT}
{$IFDEF FHIR_SPECIMEN}
  else if SameText(element.Name, 'Specimen') then
    result := parseSpecimen(element, element.Name)
{$ENDIF FHIR_SPECIMEN}
{$IFDEF FHIR_SPECIMENDEFINITION}
  else if SameText(element.Name, 'SpecimenDefinition') then
    result := parseSpecimenDefinition(element, element.Name)
{$ENDIF FHIR_SPECIMENDEFINITION}
{$IFDEF FHIR_STRUCTUREDEFINITION}
  else if SameText(element.Name, 'StructureDefinition') then
    result := parseStructureDefinition(element, element.Name)
{$ENDIF FHIR_STRUCTUREDEFINITION}
{$IFDEF FHIR_STRUCTUREMAP}
  else if SameText(element.Name, 'StructureMap') then
    result := parseStructureMap(element, element.Name)
{$ENDIF FHIR_STRUCTUREMAP}
{$IFDEF FHIR_SUBSCRIPTION}
  else if SameText(element.Name, 'Subscription') then
    result := parseSubscription(element, element.Name)
{$ENDIF FHIR_SUBSCRIPTION}
{$IFDEF FHIR_SUBSCRIPTIONSTATUS}
  else if SameText(element.Name, 'SubscriptionStatus') then
    result := parseSubscriptionStatus(element, element.Name)
{$ENDIF FHIR_SUBSCRIPTIONSTATUS}
{$IFDEF FHIR_SUBSCRIPTIONTOPIC}
  else if SameText(element.Name, 'SubscriptionTopic') then
    result := parseSubscriptionTopic(element, element.Name)
{$ENDIF FHIR_SUBSCRIPTIONTOPIC}
{$IFDEF FHIR_SUBSTANCE}
  else if SameText(element.Name, 'Substance') then
    result := parseSubstance(element, element.Name)
{$ENDIF FHIR_SUBSTANCE}
{$IFDEF FHIR_SUBSTANCEDEFINITION}
  else if SameText(element.Name, 'SubstanceDefinition') then
    result := parseSubstanceDefinition(element, element.Name)
{$ENDIF FHIR_SUBSTANCEDEFINITION}
{$IFDEF FHIR_SUBSTANCENUCLEICACID}
  else if SameText(element.Name, 'SubstanceNucleicAcid') then
    result := parseSubstanceNucleicAcid(element, element.Name)
{$ENDIF FHIR_SUBSTANCENUCLEICACID}
{$IFDEF FHIR_SUBSTANCEPOLYMER}
  else if SameText(element.Name, 'SubstancePolymer') then
    result := parseSubstancePolymer(element, element.Name)
{$ENDIF FHIR_SUBSTANCEPOLYMER}
{$IFDEF FHIR_SUBSTANCEPROTEIN}
  else if SameText(element.Name, 'SubstanceProtein') then
    result := parseSubstanceProtein(element, element.Name)
{$ENDIF FHIR_SUBSTANCEPROTEIN}
{$IFDEF FHIR_SUBSTANCEREFERENCEINFORMATION}
  else if SameText(element.Name, 'SubstanceReferenceInformation') then
    result := parseSubstanceReferenceInformation(element, element.Name)
{$ENDIF FHIR_SUBSTANCEREFERENCEINFORMATION}
{$IFDEF FHIR_SUBSTANCESOURCEMATERIAL}
  else if SameText(element.Name, 'SubstanceSourceMaterial') then
    result := parseSubstanceSourceMaterial(element, element.Name)
{$ENDIF FHIR_SUBSTANCESOURCEMATERIAL}
{$IFDEF FHIR_SUPPLYDELIVERY}
  else if SameText(element.Name, 'SupplyDelivery') then
    result := parseSupplyDelivery(element, element.Name)
{$ENDIF FHIR_SUPPLYDELIVERY}
{$IFDEF FHIR_SUPPLYREQUEST}
  else if SameText(element.Name, 'SupplyRequest') then
    result := parseSupplyRequest(element, element.Name)
{$ENDIF FHIR_SUPPLYREQUEST}
{$IFDEF FHIR_TASK}
  else if SameText(element.Name, 'Task') then
    result := parseTask(element, element.Name)
{$ENDIF FHIR_TASK}
{$IFDEF FHIR_TERMINOLOGYCAPABILITIES}
  else if SameText(element.Name, 'TerminologyCapabilities') then
    result := parseTerminologyCapabilities(element, element.Name)
{$ENDIF FHIR_TERMINOLOGYCAPABILITIES}
{$IFDEF FHIR_TESTREPORT}
  else if SameText(element.Name, 'TestReport') then
    result := parseTestReport(element, element.Name)
{$ENDIF FHIR_TESTREPORT}
{$IFDEF FHIR_TESTSCRIPT}
  else if SameText(element.Name, 'TestScript') then
    result := parseTestScript(element, element.Name)
{$ENDIF FHIR_TESTSCRIPT}
{$IFDEF FHIR_VALUESET}
  else if SameText(element.Name, 'ValueSet') then
    result := parseValueSet(element, element.Name)
{$ENDIF FHIR_VALUESET}
{$IFDEF FHIR_VERIFICATIONRESULT}
  else if SameText(element.Name, 'VerificationResult') then
    result := parseVerificationResult(element, element.Name)
{$ENDIF FHIR_VERIFICATIONRESULT}
{$IFDEF FHIR_VISIONPRESCRIPTION}
  else if SameText(element.Name, 'VisionPrescription') then
    result := parseVisionPrescription(element, element.Name)
{$ENDIF FHIR_VISIONPRESCRIPTION}

  else
    raise EXmlException.create('error: the element '+element.Name+' is not a valid fragment name');
end;

function TFHIRXmlParser.ParseDataType(element : TMXmlElement; name : String; type_ : TFHIRDataTypeClass) : TFhirDataType;
begin
  if (name <> '') and (name <> element.localName) then
    raise EXmlException.Create('Expected Name mismatch : expected "'+name+'"+, but found "'+element.localName+'"')
  else if (type_ = TFhirAddress) then
    result := parseAddress(element, name)
  else if (type_ = TFhirAnnotation) then
    result := parseAnnotation(element, name)
  else if (type_ = TFhirAttachment) then
    result := parseAttachment(element, name)
  else if (type_ = TFhirCodeableConcept) then
    result := parseCodeableConcept(element, name)
  else if (type_ = TFhirCodeableReference) then
    result := parseCodeableReference(element, name)
  else if (type_ = TFhirCoding) then
    result := parseCoding(element, name)
  else if (type_ = TFhirContactDetail) then
    result := parseContactDetail(element, name)
  else if (type_ = TFhirContactPoint) then
    result := parseContactPoint(element, name)
  else if (type_ = TFhirContributor) then
    result := parseContributor(element, name)
  else if (type_ = TFhirDataRequirement) then
    result := parseDataRequirement(element, name)
  else if (type_ = TFhirExpression) then
    result := parseExpression(element, name)
  else if (type_ = TFhirExtension) then
    result := parseExtension(element, name)
  else if (type_ = TFhirHumanName) then
    result := parseHumanName(element, name)
  else if (type_ = TFhirIdentifier) then
    result := parseIdentifier(element, name)
  else if (type_ = TFhirMeta) then
    result := parseMeta(element, name)
  else if (type_ = TFhirMoney) then
    result := parseMoney(element, name)
  else if (type_ = TFhirNarrative) then
    result := parseNarrative(element, name)
  else if (type_ = TFhirParameterDefinition) then
    result := parseParameterDefinition(element, name)
  else if (type_ = TFhirPeriod) then
    result := parsePeriod(element, name)
  else if (type_ = TFhirQuantity) then
    result := parseQuantity(element, name)
  else if (type_ = TFhirRange) then
    result := parseRange(element, name)
  else if (type_ = TFhirRatio) then
    result := parseRatio(element, name)
  else if (type_ = TFhirReference) then
    result := parseReference(element, name)
  else if (type_ = TFhirRelatedArtifact) then
    result := parseRelatedArtifact(element, name)
  else if (type_ = TFhirSampledData) then
    result := parseSampledData(element, name)
  else if (type_ = TFhirSignature) then
    result := parseSignature(element, name)
  else if (type_ = TFhirTriggerDefinition) then
    result := parseTriggerDefinition(element, name)
  else if (type_ = TFhirUsageContext) then
    result := parseUsageContext(element, name)
  else if (type_ = TFhirAge) then
    result := parseAge(element, name)
  else if (type_ = TFhirCount) then
    result := parseCount(element, name)
  else if (type_ = TFhirDistance) then
    result := parseDistance(element, name)
  else if (type_ = TFhirDosage) then
    result := parseDosage(element, name)
  else if (type_ = TFhirDuration) then
    result := parseDuration(element, name)
  else if (type_ = TFhirElementDefinition) then
    result := parseElementDefinition(element, name)
  else if (type_ = TFhirMarketingStatus) then
    result := parseMarketingStatus(element, name)
  else if (type_ = TFhirOrderedDistribution) then
    result := parseOrderedDistribution(element, name)
  else if (type_ = TFhirPopulation) then
    result := parsePopulation(element, name)
  else if (type_ = TFhirProdCharacteristic) then
    result := parseProdCharacteristic(element, name)
  else if (type_ = TFhirProductShelfLife) then
    result := parseProductShelfLife(element, name)
  else if (type_ = TFhirStatistic) then
    result := parseStatistic(element, name)
  else if (type_ = TFhirTiming) then
    result := parseTiming(element, name)

  else
    raise EXmlException.create('Unknown Type');
end;

procedure TFHIRXmlComposer.ComposeBase(xml : TXmlBuilder; name : String; base : TFHIRObject);
begin
  if (base = nil) Then
    Raise EXmlException.Create('error - base is nil')
  else if (base is TFhirAddress) then
    composeAddress(xml, name,  TFhirAddress(base))
  else if (base is TFhirAnnotation) then
    composeAnnotation(xml, name,  TFhirAnnotation(base))
  else if (base is TFhirAttachment) then
    composeAttachment(xml, name,  TFhirAttachment(base))
  else if (base is TFhirCodeableConcept) then
    composeCodeableConcept(xml, name,  TFhirCodeableConcept(base))
  else if (base is TFhirCodeableReference) then
    composeCodeableReference(xml, name,  TFhirCodeableReference(base))
  else if (base is TFhirCoding) then
    composeCoding(xml, name,  TFhirCoding(base))
  else if (base is TFhirContactDetail) then
    composeContactDetail(xml, name,  TFhirContactDetail(base))
  else if (base is TFhirContactPoint) then
    composeContactPoint(xml, name,  TFhirContactPoint(base))
  else if (base is TFhirContributor) then
    composeContributor(xml, name,  TFhirContributor(base))
  else if (base is TFhirDataRequirement) then
    composeDataRequirement(xml, name,  TFhirDataRequirement(base))
  else if (base is TFhirExpression) then
    composeExpression(xml, name,  TFhirExpression(base))
  else if (base is TFhirExtension) then
    composeExtension(xml, name,  TFhirExtension(base))
  else if (base is TFhirHumanName) then
    composeHumanName(xml, name,  TFhirHumanName(base))
  else if (base is TFhirIdentifier) then
    composeIdentifier(xml, name,  TFhirIdentifier(base))
  else if (base is TFhirMeta) then
    composeMeta(xml, name,  TFhirMeta(base))
  else if (base is TFhirMoney) then
    composeMoney(xml, name,  TFhirMoney(base))
  else if (base is TFhirNarrative) then
    composeNarrative(xml, name,  TFhirNarrative(base))
  else if (base is TFhirParameterDefinition) then
    composeParameterDefinition(xml, name,  TFhirParameterDefinition(base))
  else if (base is TFhirPeriod) then
    composePeriod(xml, name,  TFhirPeriod(base))
  else if (base is TFhirQuantity) then
    composeQuantity(xml, name,  TFhirQuantity(base))
  else if (base is TFhirRange) then
    composeRange(xml, name,  TFhirRange(base))
  else if (base is TFhirRatio) then
    composeRatio(xml, name,  TFhirRatio(base))
  else if (base is TFhirReference) then
    composeReference(xml, name,  TFhirReference(base))
  else if (base is TFhirRelatedArtifact) then
    composeRelatedArtifact(xml, name,  TFhirRelatedArtifact(base))
  else if (base is TFhirSampledData) then
    composeSampledData(xml, name,  TFhirSampledData(base))
  else if (base is TFhirSignature) then
    composeSignature(xml, name,  TFhirSignature(base))
  else if (base is TFhirTriggerDefinition) then
    composeTriggerDefinition(xml, name,  TFhirTriggerDefinition(base))
  else if (base is TFhirUsageContext) then
    composeUsageContext(xml, name,  TFhirUsageContext(base))
  else if (base is TFhirAge) then
    composeAge(xml, name,  TFhirAge(base))
  else if (base is TFhirCount) then
    composeCount(xml, name,  TFhirCount(base))
  else if (base is TFhirDistance) then
    composeDistance(xml, name,  TFhirDistance(base))
  else if (base is TFhirDosage) then
    composeDosage(xml, name,  TFhirDosage(base))
  else if (base is TFhirDuration) then
    composeDuration(xml, name,  TFhirDuration(base))
  else if (base is TFhirElementDefinition) then
    composeElementDefinition(xml, name,  TFhirElementDefinition(base))
  else if (base is TFhirMarketingStatus) then
    composeMarketingStatus(xml, name,  TFhirMarketingStatus(base))
  else if (base is TFhirOrderedDistribution) then
    composeOrderedDistribution(xml, name,  TFhirOrderedDistribution(base))
  else if (base is TFhirPopulation) then
    composePopulation(xml, name,  TFhirPopulation(base))
  else if (base is TFhirProdCharacteristic) then
    composeProdCharacteristic(xml, name,  TFhirProdCharacteristic(base))
  else if (base is TFhirProductShelfLife) then
    composeProductShelfLife(xml, name,  TFhirProductShelfLife(base))
  else if (base is TFhirStatistic) then
    composeStatistic(xml, name,  TFhirStatistic(base))
  else if (base is TFhirTiming) then
    composeTiming(xml, name,  TFhirTiming(base))
  else if (base is TFhirAccount) then
    composeAccount(xml, name,  TFhirAccount(base))
  else if (base is TFhirActivityDefinition) then
    composeActivityDefinition(xml, name,  TFhirActivityDefinition(base))
  else if (base is TFhirAdministrableProductDefinition) then
    composeAdministrableProductDefinition(xml, name,  TFhirAdministrableProductDefinition(base))
  else if (base is TFhirAdverseEvent) then
    composeAdverseEvent(xml, name,  TFhirAdverseEvent(base))
  else if (base is TFhirAllergyIntolerance) then
    composeAllergyIntolerance(xml, name,  TFhirAllergyIntolerance(base))
  else if (base is TFhirAppointment) then
    composeAppointment(xml, name,  TFhirAppointment(base))
  else if (base is TFhirAppointmentResponse) then
    composeAppointmentResponse(xml, name,  TFhirAppointmentResponse(base))
  else if (base is TFhirAuditEvent) then
    composeAuditEvent(xml, name,  TFhirAuditEvent(base))
  else if (base is TFhirBasic) then
    composeBasic(xml, name,  TFhirBasic(base))
  else if (base is TFhirBinary) then
    composeBinary(xml, name,  TFhirBinary(base))
  else if (base is TFhirBiologicallyDerivedProduct) then
    composeBiologicallyDerivedProduct(xml, name,  TFhirBiologicallyDerivedProduct(base))
  else if (base is TFhirBodyStructure) then
    composeBodyStructure(xml, name,  TFhirBodyStructure(base))
  else if (base is TFhirBundle) then
    composeBundle(xml, name,  TFhirBundle(base))
  else if (base is TFhirCapabilityStatement) then
    composeCapabilityStatement(xml, name,  TFhirCapabilityStatement(base))
  else if (base is TFhirCapabilityStatement2) then
    composeCapabilityStatement2(xml, name,  TFhirCapabilityStatement2(base))
  else if (base is TFhirCarePlan) then
    composeCarePlan(xml, name,  TFhirCarePlan(base))
  else if (base is TFhirCareTeam) then
    composeCareTeam(xml, name,  TFhirCareTeam(base))
  else if (base is TFhirCatalogEntry) then
    composeCatalogEntry(xml, name,  TFhirCatalogEntry(base))
  else if (base is TFhirChargeItem) then
    composeChargeItem(xml, name,  TFhirChargeItem(base))
  else if (base is TFhirChargeItemDefinition) then
    composeChargeItemDefinition(xml, name,  TFhirChargeItemDefinition(base))
  else if (base is TFhirCitation) then
    composeCitation(xml, name,  TFhirCitation(base))
  else if (base is TFhirClaim) then
    composeClaim(xml, name,  TFhirClaim(base))
  else if (base is TFhirClaimResponse) then
    composeClaimResponse(xml, name,  TFhirClaimResponse(base))
  else if (base is TFhirClinicalImpression) then
    composeClinicalImpression(xml, name,  TFhirClinicalImpression(base))
  else if (base is TFhirClinicalUseIssue) then
    composeClinicalUseIssue(xml, name,  TFhirClinicalUseIssue(base))
  else if (base is TFhirCodeSystem) then
    composeCodeSystem(xml, name,  TFhirCodeSystem(base))
  else if (base is TFhirCommunication) then
    composeCommunication(xml, name,  TFhirCommunication(base))
  else if (base is TFhirCommunicationRequest) then
    composeCommunicationRequest(xml, name,  TFhirCommunicationRequest(base))
  else if (base is TFhirCompartmentDefinition) then
    composeCompartmentDefinition(xml, name,  TFhirCompartmentDefinition(base))
  else if (base is TFhirComposition) then
    composeComposition(xml, name,  TFhirComposition(base))
  else if (base is TFhirConceptMap) then
    composeConceptMap(xml, name,  TFhirConceptMap(base))
  else if (base is TFhirCondition) then
    composeCondition(xml, name,  TFhirCondition(base))
  else if (base is TFhirConditionDefinition) then
    composeConditionDefinition(xml, name,  TFhirConditionDefinition(base))
  else if (base is TFhirConsent) then
    composeConsent(xml, name,  TFhirConsent(base))
  else if (base is TFhirContract) then
    composeContract(xml, name,  TFhirContract(base))
  else if (base is TFhirCoverage) then
    composeCoverage(xml, name,  TFhirCoverage(base))
  else if (base is TFhirCoverageEligibilityRequest) then
    composeCoverageEligibilityRequest(xml, name,  TFhirCoverageEligibilityRequest(base))
  else if (base is TFhirCoverageEligibilityResponse) then
    composeCoverageEligibilityResponse(xml, name,  TFhirCoverageEligibilityResponse(base))
  else if (base is TFhirDetectedIssue) then
    composeDetectedIssue(xml, name,  TFhirDetectedIssue(base))
  else if (base is TFhirDevice) then
    composeDevice(xml, name,  TFhirDevice(base))
  else if (base is TFhirDeviceDefinition) then
    composeDeviceDefinition(xml, name,  TFhirDeviceDefinition(base))
  else if (base is TFhirDeviceMetric) then
    composeDeviceMetric(xml, name,  TFhirDeviceMetric(base))
  else if (base is TFhirDeviceRequest) then
    composeDeviceRequest(xml, name,  TFhirDeviceRequest(base))
  else if (base is TFhirDeviceUseStatement) then
    composeDeviceUseStatement(xml, name,  TFhirDeviceUseStatement(base))
  else if (base is TFhirDiagnosticReport) then
    composeDiagnosticReport(xml, name,  TFhirDiagnosticReport(base))
  else if (base is TFhirDocumentManifest) then
    composeDocumentManifest(xml, name,  TFhirDocumentManifest(base))
  else if (base is TFhirDocumentReference) then
    composeDocumentReference(xml, name,  TFhirDocumentReference(base))
  else if (base is TFhirEncounter) then
    composeEncounter(xml, name,  TFhirEncounter(base))
  else if (base is TFhirEndpoint) then
    composeEndpoint(xml, name,  TFhirEndpoint(base))
  else if (base is TFhirEnrollmentRequest) then
    composeEnrollmentRequest(xml, name,  TFhirEnrollmentRequest(base))
  else if (base is TFhirEnrollmentResponse) then
    composeEnrollmentResponse(xml, name,  TFhirEnrollmentResponse(base))
  else if (base is TFhirEpisodeOfCare) then
    composeEpisodeOfCare(xml, name,  TFhirEpisodeOfCare(base))
  else if (base is TFhirEventDefinition) then
    composeEventDefinition(xml, name,  TFhirEventDefinition(base))
  else if (base is TFhirEvidence) then
    composeEvidence(xml, name,  TFhirEvidence(base))
  else if (base is TFhirEvidenceReport) then
    composeEvidenceReport(xml, name,  TFhirEvidenceReport(base))
  else if (base is TFhirEvidenceVariable) then
    composeEvidenceVariable(xml, name,  TFhirEvidenceVariable(base))
  else if (base is TFhirExampleScenario) then
    composeExampleScenario(xml, name,  TFhirExampleScenario(base))
  else if (base is TFhirExplanationOfBenefit) then
    composeExplanationOfBenefit(xml, name,  TFhirExplanationOfBenefit(base))
  else if (base is TFhirFamilyMemberHistory) then
    composeFamilyMemberHistory(xml, name,  TFhirFamilyMemberHistory(base))
  else if (base is TFhirFlag) then
    composeFlag(xml, name,  TFhirFlag(base))
  else if (base is TFhirGoal) then
    composeGoal(xml, name,  TFhirGoal(base))
  else if (base is TFhirGraphDefinition) then
    composeGraphDefinition(xml, name,  TFhirGraphDefinition(base))
  else if (base is TFhirGroup) then
    composeGroup(xml, name,  TFhirGroup(base))
  else if (base is TFhirGuidanceResponse) then
    composeGuidanceResponse(xml, name,  TFhirGuidanceResponse(base))
  else if (base is TFhirHealthcareService) then
    composeHealthcareService(xml, name,  TFhirHealthcareService(base))
  else if (base is TFhirImagingStudy) then
    composeImagingStudy(xml, name,  TFhirImagingStudy(base))
  else if (base is TFhirImmunization) then
    composeImmunization(xml, name,  TFhirImmunization(base))
  else if (base is TFhirImmunizationEvaluation) then
    composeImmunizationEvaluation(xml, name,  TFhirImmunizationEvaluation(base))
  else if (base is TFhirImmunizationRecommendation) then
    composeImmunizationRecommendation(xml, name,  TFhirImmunizationRecommendation(base))
  else if (base is TFhirImplementationGuide) then
    composeImplementationGuide(xml, name,  TFhirImplementationGuide(base))
  else if (base is TFhirIngredient) then
    composeIngredient(xml, name,  TFhirIngredient(base))
  else if (base is TFhirInsurancePlan) then
    composeInsurancePlan(xml, name,  TFhirInsurancePlan(base))
  else if (base is TFhirInvoice) then
    composeInvoice(xml, name,  TFhirInvoice(base))
  else if (base is TFhirLibrary) then
    composeLibrary(xml, name,  TFhirLibrary(base))
  else if (base is TFhirLinkage) then
    composeLinkage(xml, name,  TFhirLinkage(base))
  else if (base is TFhirList) then
    composeList(xml, name,  TFhirList(base))
  else if (base is TFhirLocation) then
    composeLocation(xml, name,  TFhirLocation(base))
  else if (base is TFhirManufacturedItemDefinition) then
    composeManufacturedItemDefinition(xml, name,  TFhirManufacturedItemDefinition(base))
  else if (base is TFhirMeasure) then
    composeMeasure(xml, name,  TFhirMeasure(base))
  else if (base is TFhirMeasureReport) then
    composeMeasureReport(xml, name,  TFhirMeasureReport(base))
  else if (base is TFhirMedication) then
    composeMedication(xml, name,  TFhirMedication(base))
  else if (base is TFhirMedicationAdministration) then
    composeMedicationAdministration(xml, name,  TFhirMedicationAdministration(base))
  else if (base is TFhirMedicationDispense) then
    composeMedicationDispense(xml, name,  TFhirMedicationDispense(base))
  else if (base is TFhirMedicationKnowledge) then
    composeMedicationKnowledge(xml, name,  TFhirMedicationKnowledge(base))
  else if (base is TFhirMedicationRequest) then
    composeMedicationRequest(xml, name,  TFhirMedicationRequest(base))
  else if (base is TFhirMedicationUsage) then
    composeMedicationUsage(xml, name,  TFhirMedicationUsage(base))
  else if (base is TFhirMedicinalProductDefinition) then
    composeMedicinalProductDefinition(xml, name,  TFhirMedicinalProductDefinition(base))
  else if (base is TFhirMessageDefinition) then
    composeMessageDefinition(xml, name,  TFhirMessageDefinition(base))
  else if (base is TFhirMessageHeader) then
    composeMessageHeader(xml, name,  TFhirMessageHeader(base))
  else if (base is TFhirMolecularSequence) then
    composeMolecularSequence(xml, name,  TFhirMolecularSequence(base))
  else if (base is TFhirNamingSystem) then
    composeNamingSystem(xml, name,  TFhirNamingSystem(base))
  else if (base is TFhirNutritionIntake) then
    composeNutritionIntake(xml, name,  TFhirNutritionIntake(base))
  else if (base is TFhirNutritionOrder) then
    composeNutritionOrder(xml, name,  TFhirNutritionOrder(base))
  else if (base is TFhirNutritionProduct) then
    composeNutritionProduct(xml, name,  TFhirNutritionProduct(base))
  else if (base is TFhirObservation) then
    composeObservation(xml, name,  TFhirObservation(base))
  else if (base is TFhirObservationDefinition) then
    composeObservationDefinition(xml, name,  TFhirObservationDefinition(base))
  else if (base is TFhirOperationDefinition) then
    composeOperationDefinition(xml, name,  TFhirOperationDefinition(base))
  else if (base is TFhirOperationOutcome) then
    composeOperationOutcome(xml, name,  TFhirOperationOutcome(base))
  else if (base is TFhirOrganization) then
    composeOrganization(xml, name,  TFhirOrganization(base))
  else if (base is TFhirOrganizationAffiliation) then
    composeOrganizationAffiliation(xml, name,  TFhirOrganizationAffiliation(base))
  else if (base is TFhirPackagedProductDefinition) then
    composePackagedProductDefinition(xml, name,  TFhirPackagedProductDefinition(base))
  else if (base is TFhirParameters) then
    composeParameters(xml, name,  TFhirParameters(base))
  else if (base is TFhirPatient) then
    composePatient(xml, name,  TFhirPatient(base))
  else if (base is TFhirPaymentNotice) then
    composePaymentNotice(xml, name,  TFhirPaymentNotice(base))
  else if (base is TFhirPaymentReconciliation) then
    composePaymentReconciliation(xml, name,  TFhirPaymentReconciliation(base))
  else if (base is TFhirPermission) then
    composePermission(xml, name,  TFhirPermission(base))
  else if (base is TFhirPerson) then
    composePerson(xml, name,  TFhirPerson(base))
  else if (base is TFhirPlanDefinition) then
    composePlanDefinition(xml, name,  TFhirPlanDefinition(base))
  else if (base is TFhirPractitioner) then
    composePractitioner(xml, name,  TFhirPractitioner(base))
  else if (base is TFhirPractitionerRole) then
    composePractitionerRole(xml, name,  TFhirPractitionerRole(base))
  else if (base is TFhirProcedure) then
    composeProcedure(xml, name,  TFhirProcedure(base))
  else if (base is TFhirProvenance) then
    composeProvenance(xml, name,  TFhirProvenance(base))
  else if (base is TFhirQuestionnaire) then
    composeQuestionnaire(xml, name,  TFhirQuestionnaire(base))
  else if (base is TFhirQuestionnaireResponse) then
    composeQuestionnaireResponse(xml, name,  TFhirQuestionnaireResponse(base))
  else if (base is TFhirRegulatedAuthorization) then
    composeRegulatedAuthorization(xml, name,  TFhirRegulatedAuthorization(base))
  else if (base is TFhirRelatedPerson) then
    composeRelatedPerson(xml, name,  TFhirRelatedPerson(base))
  else if (base is TFhirRequestGroup) then
    composeRequestGroup(xml, name,  TFhirRequestGroup(base))
  else if (base is TFhirResearchStudy) then
    composeResearchStudy(xml, name,  TFhirResearchStudy(base))
  else if (base is TFhirResearchSubject) then
    composeResearchSubject(xml, name,  TFhirResearchSubject(base))
  else if (base is TFhirRiskAssessment) then
    composeRiskAssessment(xml, name,  TFhirRiskAssessment(base))
  else if (base is TFhirSchedule) then
    composeSchedule(xml, name,  TFhirSchedule(base))
  else if (base is TFhirSearchParameter) then
    composeSearchParameter(xml, name,  TFhirSearchParameter(base))
  else if (base is TFhirServiceRequest) then
    composeServiceRequest(xml, name,  TFhirServiceRequest(base))
  else if (base is TFhirSlot) then
    composeSlot(xml, name,  TFhirSlot(base))
  else if (base is TFhirSpecimen) then
    composeSpecimen(xml, name,  TFhirSpecimen(base))
  else if (base is TFhirSpecimenDefinition) then
    composeSpecimenDefinition(xml, name,  TFhirSpecimenDefinition(base))
  else if (base is TFhirStructureDefinition) then
    composeStructureDefinition(xml, name,  TFhirStructureDefinition(base))
  else if (base is TFhirStructureMap) then
    composeStructureMap(xml, name,  TFhirStructureMap(base))
  else if (base is TFhirSubscription) then
    composeSubscription(xml, name,  TFhirSubscription(base))
  else if (base is TFhirSubscriptionStatus) then
    composeSubscriptionStatus(xml, name,  TFhirSubscriptionStatus(base))
  else if (base is TFhirSubscriptionTopic) then
    composeSubscriptionTopic(xml, name,  TFhirSubscriptionTopic(base))
  else if (base is TFhirSubstance) then
    composeSubstance(xml, name,  TFhirSubstance(base))
  else if (base is TFhirSubstanceDefinition) then
    composeSubstanceDefinition(xml, name,  TFhirSubstanceDefinition(base))
  else if (base is TFhirSubstanceNucleicAcid) then
    composeSubstanceNucleicAcid(xml, name,  TFhirSubstanceNucleicAcid(base))
  else if (base is TFhirSubstancePolymer) then
    composeSubstancePolymer(xml, name,  TFhirSubstancePolymer(base))
  else if (base is TFhirSubstanceProtein) then
    composeSubstanceProtein(xml, name,  TFhirSubstanceProtein(base))
  else if (base is TFhirSubstanceReferenceInformation) then
    composeSubstanceReferenceInformation(xml, name,  TFhirSubstanceReferenceInformation(base))
  else if (base is TFhirSubstanceSourceMaterial) then
    composeSubstanceSourceMaterial(xml, name,  TFhirSubstanceSourceMaterial(base))
  else if (base is TFhirSupplyDelivery) then
    composeSupplyDelivery(xml, name,  TFhirSupplyDelivery(base))
  else if (base is TFhirSupplyRequest) then
    composeSupplyRequest(xml, name,  TFhirSupplyRequest(base))
  else if (base is TFhirTask) then
    composeTask(xml, name,  TFhirTask(base))
  else if (base is TFhirTerminologyCapabilities) then
    composeTerminologyCapabilities(xml, name,  TFhirTerminologyCapabilities(base))
  else if (base is TFhirTestReport) then
    composeTestReport(xml, name,  TFhirTestReport(base))
  else if (base is TFhirTestScript) then
    composeTestScript(xml, name,  TFhirTestScript(base))
  else if (base is TFhirValueSet) then
    composeValueSet(xml, name,  TFhirValueSet(base))
  else if (base is TFhirVerificationResult) then
    composeVerificationResult(xml, name,  TFhirVerificationResult(base))
  else if (base is TFhirVisionPrescription) then
    composeVisionPrescription(xml, name,  TFhirVisionPrescription(base))

  else
    inherited ComposeBase(xml, name, base);
end;

end.

